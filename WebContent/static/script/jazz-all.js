(function($){
window.undefined = window.undefined;
var jazz = {
    /**
     * The version of the framework
     * @type String
     */
    version : '1.0',
    
    /**
     * namespace
     * @param {ns} 命名空间
     */    
	namespace: function(ns) {
	     if (!ns || !ns.length) {
	        return null;
	     }
	     var levels = ns.split(".");
	     var nsobj = jazz;
	     for (var i=(levels[0] == "jazz") ? 1 : 0; i<levels.length; ++i) {
	           nsobj[levels[i]] = nsobj[levels[i]] || {};
	           nsobj = nsobj[levels[i]];
	     }
	     return nsobj;
	},

    /**
     * 日志
     * @param {info} 打印的日志内容
     */   	
	log: function(info){
		if(this.config.logger){
			return console.log('***JAZZ-UI LOG.INFO***', info);
		}else{
			return false;
		}
	}	
};

jazz.namespace("layout");

jazz.namespace("config");

jazz.namespace("util");

jazz.namespace("window");

window.jazz = jazz;

})();

(function($){

    /**
     * 内部方法，建立当前组件与上级组件的关系
     */
	$.extend(jazz, {
		/**
	     * 组件结构树
	     * @param {element} 创建组件的对象
	     */
		clearvtypetreedata: function(element){
			var vtypedata = element.data("vtypetree");
			if(vtypedata){
				for(var i in vtypedata.child){
					jazz.clearvtypetreedata(vtypedata.child[i]);
				}
				element.removeData("vtypetree");
			}
		},

		/**
	     * 组件结构树
	     * @param {element} 创建组件的对象
	     * @param {createtype} 创建组件的类型  '0' vtype形式创建, '1' 原生$方式创建
	     */
		vtypetree: function(element, createtype){
	        // 如果当前元素已经存在vtypetree数据，现在需要重新构建vtype树，因此需要先删除之前构建的数据
			jazz.clearvtypetreedata(element);
			
			//if(!element.data("vtypetree")){
	        	// 查找元素的parent节点
	        	var parent = element.parents("div[vtype]:first");
	        	// 如果没找到，设置为BODY
	        	if( parent.size() == 0 ){
	        		parent = $("BODY");
	        	}
	        	
	        	// 设置当前节点的父节点的child
	        	var parentData = parent.data("vtypetree") || {parent: "", child: {}, createtype: createtype};
	        	var childName = element.attr("name") || element.attr("id") || jazz.getId();
				
	        	parentData.child[childName] = element;
				parent.data("vtypetree", parentData);
	        	
	        	// 设置当前节点中的parent的值和vtype的值
	        	var nodeData = {parent: "" , child: {}, createtype: createtype};
	        	nodeData["parent"] = parent;
				
				// 设置当前节点
	        	nodeData["vtype"] = element.attr("vtype");
				nodeData["name"] = element.attr("name") || element.attr("id") || "";
				nodeData["obj"] = element;
	        	element.data("vtypetree", nodeData);
	            _vtype.push(nodeData['vtype']);

	        	//jazz.log("*** 树形结构如下： ***");
	        	//console.log(element.data("vtypetree"));
	        //}
		}, 
		
	    /**
	     * 判断组件树中是否存在组件
	     * @param {element} 创建组件的对象
	     */
		_isComponentInited: function(element){
	        var nodeData = element.data("vtypetree") || {};
	        if(!!nodeData.vtype){
	            return !!element.data(nodeData.vtype);
	        }
	        nodeData = null;
	        return false;
	    },
	    
	    _parse: function( element ){
			
			jazz.vtypetree(element, "0");
		
	        /**
	         * 检查元素的代码集
	         */
	        var dataurl = element.attr("dataurl");
	        if(dataurl && !/^\s*[\[|{](.*)/.test(dataurl)){
	            return [dataurl];
	        }

	        /**
	         * 处理gridcolumn中的代码集
	         */
	        var valueSet = [];
	        if('gridcolumn' === element.attr("vtype")){
	            element.children().children().each(function(){
	            	var dataurl = $(this).attr("dataurl");
	            	if(dataurl && !/^\s*[\[|{](.*)/.test(dataurl)){
	                	valueSet.push(dataurl); 	
	                }
	            });
	            return valueSet;
	        }
	    },
	    
	    /**
	     * 初始化vtyle节点
	     * （一次只初始化一个，先把之间初始化完成后，再初始化子节点）
	     */
	    _initComponent: function( element, options ){
			var el = $(element);
	        var nodeData = el.data("vtypetree");
			if(!!nodeData){
				// 如果当前元素有vtype属性，
				if(!!nodeData.vtype){
					// 判断UI组件是否已经初始化，如果未初始化，才执行初始化。
					// 通过vtype方式创建的组件只能是createtype==0
					if( !jazz._isComponentInited(el) && nodeData["createtype"]=="0"){	                
						var attrtooptions = jazz.attributeToOptions( el );
						if(!!options){
							attrtooptions = $.extend(attrtooptions, options);
						}
						attrtooptions["createtype"] = nodeData["createtype"];
						(el[nodeData.vtype])(attrtooptions);
					}
				};			
			}else{
	        	// 查找元素的parent节点
	        	var parent = element.parents("div[vtype]:first");
	        	// 如果没找到，设置为BODY
	        	if( parent.size() == 0 ){
	        		parent = $("BODY");
	        	}
				nodeData = parent.data("vtypetree");	
				//处理body没有任何vtype组件的情况，不做处理
				if(!nodeData){
					return;
				}
			}

	        var childNodes = nodeData["child"];
	        // 如果存在childNodes，初始化子元素
	        if(!!childNodes){
	            for(var c in childNodes){
	               jazz._initComponent(childNodes[c]);
	            }
	        }
	        //调用组件创建完成时的方法
	        if(!!nodeData["vtype"] && jazz._isComponentInited(el) && nodeData["createtype"]=="0"){
	        	(el[nodeData.vtype])("finish");
	        }
	        
	    },
	    
	    /**
	     * 从body开始刷新组件
		 * {refreshObj} 刷新该对象下的vtype组件
	     */
	    _bodyReflashChild: function(refreshObj){
			var obj = refreshObj;
			if(!obj){
				obj = $("body");
			}
	        var nodeData = obj.data("vtypetree") || {};
	        var childNodes = nodeData.child;
	        // 如果存在childNodes，初始化子元素
	        if(!!childNodes){
	            for(var c in childNodes){
	                var childNode = childNodes[c];
	                var vtype = childNode.attr("vtype");
					if(vtype){
						var el = $(childNode).data(vtype);
						if(el){
							el._resizeWidth();
							el._resizeHeight();
						}
					}
	            }
	        }
	    },

	    /**
	     * 开始刷新组件
	     */		
		refreshComponentSize: function (refreshObj){
			var startTime = new Date();
			//console.log("***刷新开始***********************************");
			var num = jazz.config.refreshTimes || 5;
			for(var i=0; i<num; i++){
				//console.log("**while="+i);
				jazz["_isRefresh"] = false;
				this._bodyReflashChild(refreshObj);
				if(!jazz["_isRefresh"]){
					break;
				}
				if(i==num-1){
					jazz.error("组件自动计算次数太多，请检查代码逻辑！");
				}
			}

			var stopTime = new Date();
			//console.log("***刷新结束***********************************"+(stopTime - startTime)+"ms");
		}
	});
	
    /**
     数据存储在节点中的格式
     var data = {
		    vType: "form",
		    elementType: "复合组件",
		    layout: "fit",
		    parent: obj,
		    child: {"childName1":xxx, "childName2":xxx}
		 };
     */
    var _vtype = [];

    /**
     * 通过分析vtype树,动态加载组件所需要的文件
     * 相同文件 require 只会加载一次
     * @param vtype 当前页面的vtypetree
     * @param fn 加载完文件的回调函数,通常为组件初始化
     * @private
     */
    var _getRequireFile = function (vtype, fn) {
      var vtypetree = [],
        files = [],
        filePath = jazz.config.jsFilePath || {};
      //1. vtype去重复
      $.each(vtype, function (i, el) {
        if ($.inArray(el, vtypetree) === -1) {
          vtypetree.push(el);
        }
      });
      //2. 查找对应文件
      $.each(vtypetree, function (i, v) {
        if ($.inArray(filePath[v], files) === -1) {
          files.push(filePath[v]);
        }
      });

      //3. 加载文件
      //加载成功后初始化组件
      require(files, function () {
        fn();
      });

    };
	
    /**
     * vtype树操作：解析当前元素及子元素的vtype，形成vtype树，并初始化相关组件
     */
    $.fn.parseComponent = function(options){
        //var startTime = new Date();

        var $this = $(this);
        var links = [], ret;
        
        //加if过滤的目的是避免vtype调用与$调用时，出现重复执行
        //if(!$this.data("vtypetree")){
		// 1.解析生成vtype树
		// 如果当前元素具有vtype属性，先解析当前的元素
		if($this.attr("vtype")){
			ret = jazz._parse($this);
			if(ret && ret.length){
				links = links.concat(ret);
			}
		}

		// 解析元素的子元素
		$this.find("div[vtype]").each(function(i, obj){
			ret = jazz._parse($(this));
			if(ret && ret.length){
				links = links.concat(ret);
			}
		});
	
        //}
        if(jazz.config.isUseRequireJS === true){
        	//动态加载js文件
	        _getRequireFile(_vtype, function () {
	          // 2.根据vType树初始化相关组件（从vType树的根节点（BODY）开始，深度优先算法）
	          jazz._initComponent($this, options);
	
	          // 3. 发送请求代码集
	          if (window.G) {
	            G.processData(links, true);
	          } else {
	            //jazz.log("这是代码集组件还未初始化完成");
	          }
	        });
        }else{
        	if (window.G) {
	            G.processData(links, true);
	        } else {
	           //jazz.log("这是代码集组件还未初始化完成");
	        }
        	jazz._initComponent( $this, options );
        }
        
        //var endTime1 = new Date();
        //jazz.log( "获取vtype树耗时：" + (endTime1-startTime)+"ms" );

        // 根据vtype树初始化相关组件（从vtype树的根节点（BODY）开始，深度优先算法）
        //var endTime2 = new Date();
        //jazz.log( "初始化组件耗时：" + (endTime2-endTime1)+"ms" );

		jazz.refreshComponentSize();
		
    };
    
    /**
     * vtype树操作：获取当前节点的子节点
     */
    $.fn.getChildrenComponent = function(){
        var nodeData = $(this).data("vtypetree") || {};
        return nodeData.child || {};
    };
    
    /**
     * 通知当前对象下边的组建改变大小
     */
    $.fn.notifyResize = function(){
    	var parent = $(this).parents("div[vtype]:first");
    	var name = parent.attr("name") || "";
    	if(name){
    		$.each(parent.getChildrenComponent(), function(){
    			var element = $(this);
				var vtype = element.attr("vtype");
				//修改子组件的宽度
				element.data(vtype)._resizeWidth();
				element.data(vtype)._resizeHeight();
    		});
    	}
    };
    
    /**
     * 页面初始化完成后执行
     */
    $(function(){
    	$("BODY").parseComponent();
    });
    
    /**
     * @desc 封装给开发者,工厂总代理
     */

    /**
       * 插件列表
       */
      var plugins = (function () {
        var ary = [], p;
        for (p in jazz.config.jsFilePath) {
          if (jazz.config.jsFilePath.hasOwnProperty(p)) {
            ary.push(p);
          }
        }
        return ary;
      })();

      /**
       * 为插件注册一个代理方法
       * 作为jquery的插件,为了保证 $('div').xxx(); 这种调用方式
       * 在插件内部, 加载真正的jazz文件,覆盖当前的同名插件
       * 这个函数理论上每个插件只执行一次, 就是为了加载对应的js文件
       */
      $.each(plugins, function (i, pluginName) {
        $.fn[pluginName] = function (options, nodes) {
          this.initflag = false;
          var that = this;
          if (!this.initflag) {
            require([jazz.config.jsFilePath[pluginName]], function () {
              this.initflag = true;
              if(pluginName === 'tree'){
                $.fn.zTree.init(that, options['setting'], options['znodes']);
              }else{
                that[pluginName](options);
              }
            });
          } else {
        	   jazz.log(' something unreachable unless error');
          }
        };
      });
    
})(jQuery);
(function($){
	
	jazz.config = {
			/**上下文路径 **/ 
			contextpath: '',
			
			/**生成组件元素动态生成ID时，所需要的计数 **/
			compNumber: 1000,
			
			/**提示框error warn提示的数量,默认0只能提示一次**/
			errorMessageNumber: 0,

			/**附件上传需要设置的上传路径 **/
			default_upload_url: '',
			
			/**附件下载需要设置的路径 **/
			default_download_url: '',
			
			/**附件预览需要设置的路径 **/
			default_preview_url: '',			
			
			/**附件加载的swfupload.swf文件 **/
			default_flash_url: '',
			
			/**附件加载的swfupload_fp9.swf文件 **/
			default_flash9_url: '',
			
			/**控制点击按钮点击时，是否置灰 **/
			delayButtonDisabled: false,
			 
			/**表单组件中下拉图标的所占宽度 **/
			fieldIconWidth: 20,
			
			/**表单字段中空白文本  **/
			fieldBlankText: "",

			/**表单字段中的默认宽度  **/
			fieldDefaultWidth: 150,
			
			/**表单字段中的默认高度, 包含margin border padding  **/
			fieldDefaultHeight: 28,
			
			/**表单字段中的label字段宽度  **/
			fieldLabelWidth: 80,
			
			/**请求代码集时,是否合并相同请求**/
			isGroupRequest: false,
			
			/**是否使用requireJS动态加载文件**/
			isUseRequireJS: false,
			
			jazzRoot: '/JAZZ/jazz/',
			
			/**vtype对应的组件所在的js文件路径(相对于当前目录) **/
			jsFilePath : {
			  /*'querypanel'         : '../lib/jazz.Adapter',
			  'accordion_qh'       : '../lib/jazz.Adapter',*/
			  'accordionpanel'     : 'jazz.AccordionPanel',		
			  'attachment'         : 'jazz.Attachment',
			  'button'             : 'jazz.Button',
			  'date'               : 'jazz.Date',
			  'DataAdapter'        : 'DataAdapter',
			  /*'form'               : 'jazz.Form',*/
			  'formpanel'          : 'jazz.FormPanel',
			  'gridtable'          : 'jazz.GridPanel',
			  'gridcolumn'         : 'jazz.GridPanel',
			  'gridpanel'          : 'jazz.GridPanel',
			  'icon'               : 'jazz.Icon',
			  'imageviewer'        : 'jazz.ImageView',
			  'layout'             : 'jazz.Layout',
			  'loading'            : 'jazz.Loading',
			  'menu'               : 'jazz.Menu',
			  'contextmenu'        : 'jazz.Menu',
			  'message'            : 'jazz.Message',
			  'paginator'          : 'jazz.Paginator',
			  'panel'              : 'jazz.Panel',
			  'tabpanel'           : 'jazz.TabPanel',
			  'toolbar'            : 'jazz.Toolbar',
			  'tooltip'            : 'jazz.Tooltip',
			  'tree'               : 'jazz.Tree',
			  'zTree'              : 'jazz.Tree',
			  'paginator'          : 'jazz.Paginator',
			  'window'             : 'jazz.Window',
			  /** 表单元素 **/
			  'autocompletecombox' : 'form/jazz.form.AutocompleteComboxField',
			  'checkboxfield'      : 'form/jazz.form.CheckboxField',
			  'colorfield'         : 'form/jazz.form.ColorField',
			  'comboxfield'        : 'form/jazz.form.ComboxField',
			  'comboxtreefield'    : 'form/jazz.form.ComboxTree',
			  'datefield'          : 'form/jazz.form.DateField',
			  'dropdownfield'      : 'form/jazz.form.DropdownField',
			  'hiddenfield'        : 'form/jazz.form.HiddenField',
			  'numberfield'        : 'form/jazz.form.NumberField',
			  'passwordfield'      : 'form/jazz.form.PasswordField',
			  'radiofield'         : 'form/jazz.form.RadioField',
			  'textareafield'      : 'form/jazz.form.TextareaField',
			  'textfield'          : 'form/jazz.form.TextField'
			},
			
			/**输出日志开关 **/
			logger: false,
			
			/**(sword 平台)  other(其他) **/
			platForm: 'other',
			
		    /**控制textareafield组件的前缀和后缀显示的位置  0 左右显示 1 上下显示**/
		    prefixPosition: 0,
		    
		    paginatorStyle: "text", //"icon"
			
			/**表单验证时，提示错误的图片在表单中所在用的宽度 **/
			ruleImgWidth: 20,
			
			/**组件计算大小时，刷新次数 **/
			refreshTimes: 5,
			
			/**grid定义滚动条所占用的宽度 **/
			scrollWidth: 17,
			
			/**点击提交按钮时，是否加载loading遮罩层 true 加载  false 不加载 **/
			submitShowLoading: false,
			
			/**表单组件的提示值 **/
			valuetip: "",
			
			/**遮罩层默认z-index值 **/
			zindex: 10000,
			
			/**
			 * @version 0.5
			 * @name i18n
			 * @description 参数类。
			 */	
		   i18n: {
		   	    chooseFile:"请选择文件"
		   	    ,password:"请输入密码"
		   	    ,wait:"请稍后..."
		   	    ,fileName:"文件名"
		   	    ,fileSize:"文件大小"
		   	    ,fileDelete:"删除"
		   	    ,fileDownload:"下载"
		   	    ,fileEdit:"编辑"
		   	    ,fileAffix:"附件"
		   	    ,fileAdd:"增加"
		   	    ,fileCancel:"取消"
		        ,number: '数字'
		        ,numberInt: '整数'
		        ,numberFloat: '浮点数'
		        ,numberPlusInt: '大于等于0的整数'		   	    	
		   	    ,months: ['一月','二月','三月','四月','五月','六月','七月','八月','九月','十月','十一','十二']
		   	    ,days: ['日','一', '二', '三', '四', '五', '六']
		   	    ,dateOrder:['年','月','日','时','分','秒']
		   	    ,bizSucMsg:"校验成功!"
		   	    ,bizFaiMsg:"校验失败!"
		   	    ,sysMsg:"系统错误!"
		   	    ,saveSuc:"保存成功!"
		   	    ,saveFai:"保存失败!"
		   	    ,save:"提交"
		   	    ,cancel:"取消"
		   	    ,button:"按钮"
		   	    ,firstPage:"首页"
		   	    ,endPage:"末页"
		   	    ,nextPage:"下一页"
		   	    ,previousPage:"上一页"
		   	    
		   	    ,titleName:"提示框"
		   	    ,okBtnName:"确定"
		   	    ,cancelBtnName:"取消"
		   	    ,defineBtnName:"自定义"
		   	    ,boxMin:"最小化"
		   	    ,boxMax:"最大化"
		   	    ,boxNatural:"正常化"
		   	    ,boxClose:"关闭"
	
		   	    ,selectLoading:"正在加载数据请稍后..."
	
		   	    ,toolEdit:"编辑"
		   	    ,toolNew:"新建"
		   	    ,toolDel:"删除"
		   	    ,toolFresh:"刷新"
		   	    ,toolOpen:"打开"
		   	    ,toolFind:"查找"
		   	    ,toolSave:"保存"
		   	    ,toolBack:"返回"
		   	    ,toolExport:"导出"
		   	    ,toolAddtime:"增加时间"
		   	    ,toolReducetime:"减少时间"
		   	    ,toolAddright:"授权"
		   	    ,toolReduceright:"撤权"
		   	    ,num:"数字"
		   	    ,numInt:"整数"
		   	    ,numFloat:"浮点数"
		   	    ,numScience:"科学计数法"
		   	    ,character:"字符"
		   	    ,chinese:"汉字"
		   	    ,twoBytes:"双字节"
		   	    ,english:"英文"
		   	    ,date:"日期格式不正确"
		   	    ,numChar:"数字或字符"
		   	    ,numEnglish:"数字英文字符"
		   	    ,qq:"QQ号码"
		   	    ,'telephone':'座机号码',
		   	    'cellphone':'手机号码',
		   	    'idcard':'请输入正确的身份证号码',
		   	    'postal':'邮政编码',
		   	    'currency':'美元',
		   	    'email':'邮箱地址',
		   	    'url':'URL地址',
		   	    'and1':',且',
		   	    'or':',或者',
		   	    'must':'不能为空',
		   	    'contrast':'数值',
		   	    'range':'数值范围为',
		   	    'customCheckStyle':'不允许输入以下字符',
		   	    'length1':'字符串长度为',
		   	    'customFunction':'自定义校验'
		   	    ,area:['','','','','','','','','','','','北京','天津','河北','山西','内蒙古','','','','','','辽宁','吉林','黑龙江','','','','','','','','上海','江苏','浙江','安微','福建','江西','山东','','','','河南','湖北','湖南','广东','广西','海南','','','','重庆','四川','贵州','云南','西藏','','','','','','','陕西','甘肃','青海','宁夏','新疆','','','','','','台湾','','','','','','','','','','香港','澳门','','','','','','','','','国外'],
		   	    'tabMenuFresh':'刷新',
		   	    'tabMenuClose':'关闭当前项',
		   	    'tabMenuCloseAll':'关闭所有项',
		   	    'tabMenuCloseOthers':'关闭其他项'
		   	}
	};
	
	var _config = window.JAZZUICONFIG || {};
	$.extend(jazz.config, _config);		

})(jQuery);

(function($){	

	/**
	 * @version 1.0
	 * @name jazz.util
	 * @description 工具类。
	 * @constructor
	 * @example jazz.util.xxx();
	 */
   jazz.util = {
		
		/** @lends jazz.util */
		   
		/**
		 * @desc 将div属性转换成options属性
		 * @param {obj} div对应的jquery对象
		 * @return Object
		 * @public
		 */
		attributeToOptions: function(obj){
	    	var att = null;
	    	if(obj instanceof jQuery){
	    		if(obj.size() < 1){
	    			jazz.log("未找到满足条件的对象，无法获取全部属性，直接返回空json");
	    			return {};
	    		}
	    		att = obj.get(0).attributes;
	    	}else{
	    		att = obj.attributes;
	    	}
	    	var j = 0;
	    	var attObj = '{';
	    	for(var i=0, len = att.length; i< len; i++){
	    		var o = att[i];
	    		if(o.specified){
	    			var _v = jQuery.trim(o.value+''), f = 0; 
	    			if(_v.length>0){
	    				_v = _v.replace(/[\r\n|\t]/g, " ");
	    				//if(/^\s*[\[|{](.*)[\]|}]\s*$/.test(_v)){ 
	    				if((_v+"").charAt(0) == "[" || (_v+"").charAt(0) == "{"){
	    					f = 1;
	    				}
	    			}else{
	    				_v = "";
	    			}
	    			if(j===0){
	    				attObj = attObj +'"'+ o.name +'": ';
	    			}else{
	    				attObj = attObj + ', "'+ o.name +'": ';
	    			}
	    			if(f==0){
	    				attObj = attObj + '"'+_v+'"';
	    			}else{
	    				attObj = attObj + _v;
	    			}
	    			j++;
	    		}
	    	}
	    	    attObj = attObj + '}';
	    		return jazz.stringToJson(attObj);
		},   

		/**
		 * @desc 将汉字转成首字母
		 * @param {string} 需要转换的汉字
		 * @example jazz.util.chineseToPy();
		 * @return 返回汉字的首字母大写
		 */
		chineseToPy: function(str){
			if(typeof(str) != "string") return;
			var _result = new Array(); //保存中间结果的数组
			
			function checkCh(ch){
				var uni = ch.charCodeAt(0);
				//如果不在汉字处理范围之内,返回原字符,也可以调用自己的处理函数
				if(uni > 40869 || uni < 19968) return ch;
				//检查是否是多音字,是按多音字处理,不是就直接在strChineseFirstPY字符串中找对应的首字母
				return (jazz.hzToZf.dyz[uni] ? jazz.hzToZf.dyz[uni] : (jazz.hzToZf.chineseFirstPY.charAt(uni-19968)));
			}
			
			for(var j=0, len=str.length; j<len; j++){
				//获得unicode码
				var ch = str.charAt(j);
				//检查该unicode码是否在处理范围之内,在则返回该码对映汉字的拼音首字母,不在则调用其它函数处理
				_result.push(checkCh(ch));
			}
			//处理arrResult,返回所有可能的拼音首字母串数组
			var arrRslt = [""];
			for(var i=0, len=_result.length; i<len; i++){
				var str = _result[i];
				var strlen = str.length;
				if(strlen == 1){
					for(var k=0; k<arrRslt.length; k++){
						arrRslt[k] += str;
					}
				}else{
					var tmpArr = arrRslt.slice(0);
					arrRslt = [];
					for(k=0; k<strlen; k++){
						//复制一个相同的arrRslt
						var tmp = tmpArr.slice(0);
						//把当前字符str[k]添加到每个元素末尾
						for(var j=0; j<tmp.length; j++){
							tmp[j] += str.charAt(k);
						}
						//把复制并修改后的数组连接到arrRslt上
						arrRslt = arrRslt.concat(tmp);
					}
				}
			}
			return arrRslt;					
		},
		
	   /**
		 * @desc 调用确认提示框
		 * @param {message} 提示的信息内容
		 * @param {sure} function 点击确定按钮的回调函数
		 * @param {cancel} function 点击取消按钮的回调函数
		 * @example jazz.util.confirm("提示信息内容！", function(){  });
		 */		
		confirm: function(message, sure, cancel){
			var that = this, f;
			if(window.top.jazz){
				f = true;
			}else{
				f = false;
			}
			if(jazz.config.isUseRequireJS === true){
				require(['jazz.Message'], function(){				
					if(jazz.config.errorMessageNumber == 0){
						if(f){
							window.top.jazz.widget({vtype: 'message', title: '确认信息', showtype: 3, detail: message, sure: sure, cancel: cancel});
						}else{
							$('<div>').appendTo(that.getBodyObject()).message({title: '确认信息', showtype: 3, detail: message, sure: sure, cancel: cancel});
						}
					 }
				});
			}else{
				if(jazz.config.errorMessageNumber == 0){
					if(f){
						window.top.jazz.widget({vtype: 'message', title: '确认信息', showtype: 3, detail: message, sure: sure, cancel: cancel});	
					}else{
						$('<div>').appendTo(this.getBodyObject()).message({title: '确认信息', showtype: 3, detail: message, sure: sure, cancel: cancel});
					}
				}
			}
		},
		   
	    /**
         * @desc 表单验证出错时调用的提示信息
         * @param {$this} 组件类对象
         * @param {val} 输入框输入值
         * @param {rule} 验证规则
         * @param {regMsg} 自定义函数显示消息
         * @return Boolean
         */		
		doTooltip: function($this, val, rule, regMsg){
			var ruleImg = $this.ruleImg, ruleType = $this.options.ruletype;
			obj = jazz_validator.doValidator(val, rule, regMsg, $this);
			if($this.options.msg){
				obj['msg'] = $this.options.msg;
			}
			if(ruleType == 2){
				$this.parent.tooltip({
					isbindevent: false,
			    	content: obj.msg,
			    	iconclass: 'jazz-tooltip-default-icon',
			    	position: {
			    		at: 'left bottom',
                        my: 'left top',
                        collision: 'flipfit flipfit',
                        of: $this.parent			    		
			    	}
				});
			}
			if(!obj.state){
				$this.parent.addClass('jazz-validator-border'); 
				if(ruleType == 2){
					$this.parent.tooltip("show");
					$this.parent.off(".tooltip")
					  .on("mouseover.tooltip", function(){ $this.parent.tooltip("show"); })
					  .on("mouseout.tooltip",  function(){ $this.parent.tooltip("hide"); })
					  .on("blur.tooltip",  function(){ $this.parent.tooltip("hide"); });
				}else if(ruleType == 3){
					var val = $("#val_"+$this.options.name);
					if(val.length == 1){
						val.empty();
						val.append('<div class="jazz-validator-t3-img"></div><div class="jazz-validator-t3">'+$this.options.msg+'</div>');
						val.show();
					}
				}else{
					ruleImg.removeClass('jazz-helper-hidden');
					ruleImg.attr("title", obj.msg);		
				}
			}else{
				$this.parent.removeClass('jazz-validator-border');
				if(ruleType == 2) {
					$this.parent.off(".tooltip");
					$this.parent.tooltip("hide");
				}else if(ruleType == 3){
					var val = $("#val_"+$this.options.name);
					if(val.length == 1){
						val.hide();
					}
				}else if(ruleType != 2){
					ruleImg.addClass('jazz-helper-hidden');
				}
			}
			
			return obj.state;
		},		
		
//	    escapeHTML: function(value) {
//	        return value.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
//	    },
		
	    /**
         * @desc 转义字符串
         * @param {string} 要转义的字符串
         * @example 'animals.sheep[1]'.escapeRegExp();  //returns 'animals\.sheep\[1\]'
         * @return String
         * @public
         */				
	    escapeRegExp: function(string) {
	        return string.replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");
	    },		
		
	   /**
		 * @desc 调用错误提示框
		 * @param {message} 提示的信息内容
		 * @param {sure} function 点击确定按钮的回调函数
		 * @example jazz.util.error("提示信息内容！", function(){  });
		 */   
		error: function(message, sure){
			var that = this, f;
			if(window.top.jazz){
				f = true;
			}else{
				f = false;
			}
			var that = this;
			if(jazz.config.isUseRequireJS === true){				
				if(jazz.config.errorMessageNumber == 0){
					if(f){
						window.top.jazz.widget({vtype: 'message', title: '错误信息', showtype: 1, detail: message, sure: sure});				 
					}else{
						$('<div>').appendTo(that.getBodyObject()).message({title: '错误信息', showtype: 1, detail: message, sure: sure});				 
					}
				}
			}else{
				if(jazz.config.errorMessageNumber == 0){
					if(f){
						window.top.jazz.widget({vtype: 'message', title: '错误信息', showtype: 1, detail: message, sure: sure});				 
					}else{
						$('<div>').appendTo(this.getBodyObject()).message({title: '错误信息', showtype: 1, detail: message, sure: sure});				 
					}
				}
			}
		},			   
		
    	/**
         * @desc 返回当前窗体的body象
		 * @return Object
         */		
		getBodyObject: function(){
			if(!this.$bodyobject){
				this.$bodyobject = $('body');
			}
			return this.$bodyobject;			
			
//			var top = this.getTop();
//			if(!top.jazz.$bodyobject){
//				top.jazz.$bodyobject = top.document.body;
//			}
//			return top.jazz.$bodyobject;
		},
		
    	/**
         * @desc 获取随机生成的ID值 comp: componnet简写 j: jazz
		 * @example jazz.util.getId();
		 * @return String
		 * @public
         */		
		getId: function(){
			return "comp_j_" + jazz.getRandom() + "_" + (++jazz.config.compNumber);			
		},		
		
    	/**
         * @desc 获取字符串的长度
		 * @example jazz.util.getStringLength();
		 * @return String
		 * @public
         */			
		getStringLength: function(str){
		    if (str == null) return 0;  
		    if (typeof str != "string"){  
		        str += "";  
		    }  
		    return str.replace(/[^\x00-\xff]/g, "01").length;
		},
		
    	/**
         * @desc 获取通过http://localhost:8080/JAZZ?params=123传入当前页面的参数
         * @param {name} 参数名
		 * @example var paramsValue = jazz.util.getParameter("params");
		 * @return String
		 * @public
         */ 		   
		getParameter: function(name){
			var reg = new RegExp("(^|&)"+ name +"=([^&]*)(&|$)"); 
			var r = window.location.search.substr(1).match(reg); 
			if (r!=null) { 
			   return unescape(r[2]); 
			} 
			return null; 
		},
		
    	/**
         * @desc 获取通过http://localhost:8080/JAZZ?params=123&params2=987"传入当前页面的参数
		 * @example var paramsValue = jazz.util.getParameters();
		 * @return Object {params: 123, params2: 987, ……}
		 * @public
         */ 		
		getParameters: function(){
			var url = window.location.search;
			var params = {};
			if(url.indexOf("?")!=-1){
				var str = url.substr(1);
				var strs = str.split("&");
				for(var i = 0, len=strs.length; i<len; i++){
					params[strs[i].split("=")[0]] = unescape(strs[i].split("=")[1]);
				}
			}
			return params;
		},
		
    	/**
         * @desc 获取八位随机数字
		 * @example jazz.util.getRandom();
		 * @return String
		 * @public
         */ 		
		getRandom: function() {
			return Math.random().toString().substr(2, 8);
		},	
		
		/**
		 * @desc 获得祖先级窗体对象
		 * @example jazz.util.getTop(); 
		 * @return Object
		 * @public
		 */
		getTop: function(){
		    var dom = window;
		    if(dom.top.jazz) {
		        dom = dom.top.window;
		    } else {
		        while(dom.parent) {
		            if(dom.parent == dom) {
		                break;
		            }
		            dom = dom.parent;
		        }
		    }
		    if(dom.jazz) {
		        return dom;
		    }
		    return dom;				
		},
		
		/**
		 * @desc 每次调用自加1
		 * @return Number
		 * @example jazz.util.getIndex();
		 */			
		getIndex: function(){
			return jazz.config.zindex++;
		},

		/**
		 * @desc 获取原始样式值
		 * @return Number
		 * @example jazz.util.getDefinedStyleProperty();
		 */

		//Returns specified style property information that is defined on specified
		//node (including inline style) by name.
		//@param {object} node node to get prototypes for.
		//@param {boolean} authorOnly Determines whether only author styles need to be added.
		//@param {string} propertyName CSS property name.
		//@return {object} value of specified style property information. Return null 
		//if the specified property is not defined on the node.
		// CSSStyleDeclaration.getPropertyValue returns null instead of
		// empty string if the property has not been set in Webkit. So we
		// initialize the return value as null here.

		getDefinedStyleProperty: function(node, authorOnly, propertyName) {
		    var value = null;
		    if (!node || node.nodeType != Node.ELEMENT_NODE)
			    return value;

		    if (node.style) {
			    value = node.style.getPropertyValue(propertyName);
			// The !important style takes precedence.
			if (node.style.getPropertyPriority(propertyName))
			    return value;
		    }
		    var styleRules = node.ownerDocument.defaultView.getMatchedCSSRules(node, '', authorOnly); 
		    if (!styleRules)
			    return value;

		    for (var i = styleRules.length - 1; i >= 0; --i) {
			    var style = styleRules[i].style;
			    // The !important style may override inline style.
			    if (style.getPropertyPriority(propertyName))
			       return style.getPropertyValue(propertyName);
			    if (!value)
			       value = style.getPropertyValue(propertyName);
		    }
		    return value;
		},
		
		/**
		 * @desc 查找数组中是否有匹配的值
		 * @param{array} 要查找的数组
		 * @param{value} 要查询的值
		 * @return Number
		 * @example jazz.util.indexOf(array, value);
		 */
		indexOf: function(array, value){
			for(var i=0, len=array.length; i<len; i++){
				if(array[i] == value){ return i; }
			}
			return -1;
		},
		
		/**
		 * @desc 在指定的数组中，是否存在要查找的记录
		 * @param {arr} 指定查找的数组
		 * @param {item} 要查找的记录
		 * @return Boolean
		 * @example jazz.util.inArray([1,2,4,5,9,6], 5);
		 */	
	    inArray: function(arr, item) {
	        for(var i = 0, len = arr.length; i < len; i++) {
	            if(arr[i] === item) {
	                return true;
	            }
	        }
	        return false;
	    },        
        
		/**
		 * @desc 调用提示信息框
		 * @param {message} 提示的信息内容
		 * @param {sure} function 点击确定按钮的回调函数
		 * @example jazz.util.info("提示信息内容！", function(){  });
		 */
		info: function(message, sure){
			var that = this, f;
			if(window.top.jazz){
				f = true;
			}else{
				f = false;
			}
			if(jazz.config.isUseRequireJS === true){
				require(['jazz.Message'], function(){
					if(f){
						window.top.jazz.widget({vtype: 'message', title: '提示信息', showtype: 0, detail: message, sure: sure});					
					}else{
						$('<div>').appendTo(that.getBodyObject()).message({title: '提示信息', showtype: 0, detail: message, sure: sure});					
					}
				});
			}else{
				if(f){
					window.top.jazz.widget({vtype: 'message', title: '提示信息', showtype: 0, detail: message, sure: sure});
				}else{
					$('<div>').appendTo(this.getBodyObject()).message({title: '提示信息', showtype: 0, detail: message, sure: sure});					
				}
			}
		},		
		
    	/**
         * @desc 判断是否为数组
		 * @param {v} 参数
		 * @return Boolean
		 * @example jazz.util.isArray([1,2,3,4,5,6]);
		 * @public
         */ 
		isArray: function(v) {
			return Object.prototype.toString.apply(v) === '[object Array]';
		},		
		
    	/**
         * @desc 判断是否为日期类型
		 * @param {v} 参数
		 * @return Boolean
		 * @example jazz.util.isDate("2010-11-10");
		 * @public
         */ 
        isDate: function(v){
            return Object.prototype.toString.apply(v) === '[object Date]';
        },			
		
    	/**
         * @desc 判断{}对象是否为空
		 * @param {obj} 参数 obj = {}对象
		 * @return Boolean
		 * @example jazz.util.isEmptyObject(obj);
		 * @public
         */        
        isEmptyObject: function(obj) { 
        	for (var i in obj) { 
        		return false; 
        	}
        	return true; 
        },
        
		/**
		 * @desc 判断是ie浏览器的哪个版本
		 * @param {version} 数字
		 * @return Boolean
		 * @example jazz.util.isIE(7);
		 */		
	    isIE: function(version) {
	        return ($.browser.msie && parseInt($.browser.version, 10) === version) ? true : false;
	    },		
		
		/**
		 * @desc 判断是否为数字类型 数字返回true 否则返回false
		 * @param {n} 参数
		 * @return Boolean
		 * @example jazz.util.isNumber(2314);
		 */		
		isNumber: function(n){
			return $.isNumeric(n);
		},
		
		/**
		 * @desc 是否为标准值，用于判断设置的组件值是否符合规范  “20” “40%” 
		 * @param {n} 参数
		 * @return Boolean
		 * @example jazz.util.isNormalSize("23%");
		 */		
		isNormalSize: function(n){
			if(/^(\d+(\.\d+)?|\d+(\.\d+)?%)$/.test(n)){
				return true;
			}else{
				return false;
			}
		},
		
		/**
         * @desc 判断是否有横向滚动条
         * @param {obj} 对象
		 * @private
         */		
		isScrollX: function (obj) {
			var scrollX = false;
			if(obj[0]){
				 if(obj[0].tagName == "BODY"){
					   var elems = [document.documentElement, document.body];
					   for (var i = 0; i < elems.length; i++) {
					     var o = elems[i];
					     var sl = o.scrollLeft;
					     o.scrollLeft += (sl > 0) ? -1 : 1;
					     o.scrollLeft !== sl && (scrollX = scrollX || true);
					     o.scrollLeft = sl;
					   }
				 }else{
					 if(obj.width() > obj[0].clientWidth){
						 scrollX = true;
					 }
				 }
			 }
			 return scrollX;
		},
		
		/**
         * @desc 判断是否有纵向滚动条
         * @param {obj} 对象
		 * @private
         */			
		isScrollY: function (obj) {
			var scrollY = false;
			if(obj[0]){
				 if(obj[0].tagName == "BODY"){
					   var elems = [document.documentElement, document.body];
					   for (var i = 0; i < elems.length; i++) {
						 var o = elems[i];
					     var st = o.scrollTop;
					     o.scrollTop += (st > 0) ? -1 : 1;
					     o.scrollTop !== st && (scrollY = scrollY || true);
					     o.scrollTop = st;
					   }

//					 if(document.body.scrollHeight > jazz.util.windowHeight()){
//						 scrollY = true;
//					 }else{
//						 scrollY = false;
//					 }
				 }else{
					 if(obj.height() > obj[0].clientHeight){
						 scrollY = true;
					 }
					 //alert("obj.scrollHeight="+obj.scrollHeight  +" obj.clientHeight="+obj.clientHeight +" obj.offsetHeight="+obj.offsetHeight);
				 }
			 }
			 return scrollY;				 
		},		
		
		/**
		 * @desc 把json对象转换成字符串
		 * @param {o} 参数
		 * @return String
		 * @example jazz.util.jsonToString(JSON);
		 */	
		jsonToString: function(o){
			if(typeof o == "undefined" || o === null){
				return "null";
			}else if(jazz.isArray(o)){//数组
	            var a = ["["], b, i, l = o.length, v;
				for (i = 0; i < l; i++) {
					v = o[i];
					switch (typeof v) {
						case "undefined":
						case "function":
						case "unknown":
							break;
						default:
							if (b) {
								a.push(',');
							}
							a.push(v === null ? "null" : jazz.jsonToString(v));
							b = true;
					}
				}
				a.push("]");
				return a.join("");
			}else if(jazz.isDate(o)){//日期对象
				return '"' + o.getFullYear() + "-" +
					jazz.pad(o.getMonth() + 1) + "-" +
					jazz.pad(o.getDate()) + " " +
					jazz.pad(o.getHours()) + ":" +
					jazz.pad(o.getMinutes()) + ":" +
					jazz.pad(o.getSeconds()) + '"';
			}else if(typeof o == "string"){//字符串,转义回车换行,双引号,反斜杠...等
				var m = {
						"\b": '\\b',
						"\t": '\\t',
						"\n": '\\n',
						"\f": '\\f',
						"\r": '\\r',
						'"' : '\\"',
						"\\": '\\\\'
				};
	            if (/["\\\x00-\x1f]/.test(o)) {
	                return '"' + o.replace(/([\x00-\x1f\\"])/g, function(a, b) {
	                    var c = m[b];
	                    if(c){
	                        return c;
	                    }
	                    c = b.charCodeAt();
	                    return "\\u00" +  Math.floor(c / 16).toString(16) + (c % 16).toString(16);
	                }) + '"';
	            }
	            return '"' + o + '"';
			}else if(typeof o == "number"){
				return isFinite(o) ? String(o) : "null";
			}else if(typeof o == "boolean"){
				return String(o);
			}else  {//json格式的对象
				var a = ["{"], b, i, v;
				for (i in o) {
					v = o[i];
					switch (typeof v) {
					case "undefined":
					case "function":
					case "unknown":
						break;
					default:
						if(b){
							a.push(',');
						}
						a.push(jazz.jsonToString(i), ":", v === null ? "null" : jazz.jsonToString(v));
						b = true;
					}
				}
				a.push("}");
				
				//a.join("").replace(/\s+/g," ");  /&nbsp;/ig
				
				return a.join("").replace(/&nbsp;/ig," ");
			}    
		},	
		
		/**
		 * @desc 根据传入的数字判断，如果字段为小于10的数字，则前补0  例如： 传入 5  得到  05
		 * @param {n} 判断的数字
	     * @return String
	     * @public
	     * @example jazz.util.pad(5);
	     */		
		pad : function(n) {
			return n < 10 ? "0" + n : n;
		},		
		
		/**
		 * @desc 根据datatype和dataformat转换数据格式，并返回转换后数据
		 * @param {formatParams} 
	     * {'cellvalue':'2014-09-12 00:00:00','datatype':'date','dataformat':'yyyy-MM-dd'}
	     * @return String
	     * @public
	     * @example jazz.util.parseDataByDataFormat(formatParams);
	     */
		parseDataByDataFormat: function(formatParams){
			
			if(!formatParams){
				return "";
			}
			var cellvalue = formatParams["cellvalue"];
			var datatype = formatParams["datatype"];
			var dataformat = formatParams["dataformat"];
			if(cellvalue=="" || cellvalue==undefined || cellvalue==null){
				return "";
			}
			if(!datatype){
				return cellvalue;
			}
			//分别不同datatype，解析cellvalue
			var showvalue="";
			if(datatype=="date" || datatype=="datefield"){
				cellvalue = cellvalue.replace(/\.0*$/i, '');
				dataformat = dataformat || "YYYY-MM-DD HH:mm:ss";
				showvalue = jazz.dataFormater(cellvalue,dataformat);
			}else if(datatype=="number" || datatype=="numberfield"){
				dataformat = dataformat || "";
				showvalue = jazz.dataFormater(cellvalue,dataformat);
			}else {
				showvalue = cellvalue;
			}
			return showvalue;
		},

		/**
		 * @desc 刷新全部组件大小
	     * @public
	     * @example jazz.util.refreshSize();
	     */		
		refreshSize: function(){
		    jazz.refreshComponentSize();					
		},
		
		/**
		 * @desc 把字符串转换成json对象
		 * @param {string} 
	     * @return Object
	     * @public
	     * @example jazz.util.stringToJson("{a: 1, b: 2}");
	     */		
		stringToJson: function(string){
			if(string){
			    if(string instanceof Object){
			    	return {};
			    }else{
			    	return eval("(" + string + ')');
			    }
			}else{
				return {};
			}
		},
		
		/**
		 * @desc 将传入的值“true”或true转换成true， 否则返回false
		 * @param {b} 判断指定值是否为boolean类型
		 */		
		transformBoolean: function(b){
		   return (b == "true" || b == true) ? true : false;
		},
		
		/**
		 * @desc 调用警告信息框
		 * @param {message} 提示的信息内容
		 * @param {sure} function 点击确定按钮的回调函数
		 * @example jazz.util.warn("提示信息内容！", function(){  });
		 */
		warn:function(message, sure){
			var that = this, f;
			if(window.top.jazz){
				f = true;
			}else{
				f = false;
			}
			if(jazz.config.isUseRequireJS === true){
				require(['jazz.Message'], function(){					
					if(jazz.config.errorMessageNumber == 0){
						if(f){
							window.top.jazz.widget({vtype: 'message', title: '警告信息', showtype: 2, detail: message, sure: sure});										
						}else{
							$('<div>').appendTo(that.getBodyObject()).message({title: '警告信息', showtype: 2, detail: message, sure: sure});	
						}
					 }
				});
			}else{				
				if(jazz.config.errorMessageNumber == 0){
					if(f){
						window.top.jazz.widget({vtype: 'message', title: '警告信息', showtype: 2, detail: message, sure: sure});										
					}else{
						$('<div>').appendTo(this.getBodyObject()).message({title: '警告信息', showtype: 2, detail: message, sure: sure});					
					}
				}
			}
		},		
		
		/**
         * @desc 获取当前窗口的高度		 
         * @return Number
		 * @example jazz.util.windowHeight();
         */	
        windowHeight: function(){
			if($.browser.msie){
				return document.compatMode == "CSS1Compat"? document.documentElement["clientHeight"] : (document.body && document.body.clientHeight); 
			}else{ 
				return self.innerHeight;
			}			
		},

		/**
         * @desc 获取当前窗口的宽度		 
         * @return Number
		 * @example jazz.util.windowWidth();
         */		
        windowWidth: function(){ 
			if($.browser.msie){ 
				return document.compatMode == "CSS1Compat"? document.documentElement.clientWidth : (document.body && document.body.clientWidth); 
			}else{ 
				return self.innerWidth; 
			} 
		}
   };

   jazz.hzToZf = {
		 chineseFirstPY: "",
		 //此处收录了375个多音字,数据来自于http://www.51window.net/page/pinyin
		 dyz: {"19969":"DZ","19975":"WM","19988":"QJ","20048":"YL","20056":"SC","20060":"NM","20094":"QG","20127":"QJ","20167":"QC","20193":"YG","20250":"KH","20256":"ZC","20282":"SC","20285":"QJG","20291":"TD","20314":"YD","20340":"NE","20375":"TD","20389":"YJ","20391":"CZ","20415":"PB","20446":"YS","20447":"SQ","20504":"TC","20608":"KG","20854":"QJ","20857":"ZC","20911":"PF","20504":"TC","20608":"KG","20854":"QJ","20857":"ZC","20911":"PF","20985":"AW","21032":"PB","21048":"XQ","21049":"SC","21089":"YS","21119":"JC","21242":"SB","21273":"SC","21305":"YP","21306":"QO","21330":"ZC","21333":"SDC","21345":"QK","21378":"CA","21397":"SC","21414":"XS","21442":"SC","21477":"JG","21480":"TD","21484":"ZS","21494":"YX","21505":"YX","21512":"HG","21523":"XH","21537":"PB","21542":"PF","21549":"KH","21571":"E","21574":"DA","21588":"TD","21589":"O","21618":"ZC","21621":"KHA","21632":"ZJ","21654":"KG","21679":"LKG","21683":"KH","21710":"A","21719":"YH","21734":"WOE","21769":"A","21780":"WN","21804":"XH","21834":"A","21899":"ZD","21903":"RN","21908":"WO","21939":"ZC","21956":"SA","21964":"YA","21970":"TD","22003":"A","22031":"JG","22040":"XS","22060":"ZC","22066":"ZC","22079":"MH","22129":"XJ","22179":"XA","22237":"NJ","22244":"TD","22280":"JQ","22300":"YH","22313":"XW","22331":"YQ","22343":"YJ","22351":"PH","22395":"DC","22412":"TD","22484":"PB","22500":"PB","22534":"ZD","22549":"DH","22561":"PB","22612":"TD","22771":"KQ","22831":"HB","22841":"JG","22855":"QJ","22865":"XQ","23013":"ML","23081":"WM","23487":"SX","23558":"QJ","23561":"YW","23586":"YW","23614":"YW","23615":"SN","23631":"PB","23646":"ZS","23663":"ZT","23673":"YG","23762":"TD","23769":"ZS","23780":"QJ","23884":"QK","24055":"XH","24113":"DC","24162":"ZC","24191":"GA","24273":"QJ","24324":"NL","24377":"TD","24378":"QJ","24439":"PF","24554":"ZS","24683":"TD","24694":"WE","24733":"LK","24925":"TN","25094":"ZG","25100":"XQ","25103":"XH","25153":"PB","25170":"PB","25179":"KG","25203":"PB","25240":"ZS","25282":"FB","25303":"NA","25324":"KG","25341":"ZY","25373":"WZ","25375":"XJ","25384":"A","25457":"A","25528":"SD","25530":"SC","25552":"TD","25774":"ZC","25874":"ZC","26044":"YW","26080":"WM","26292":"PB","26333":"PB","26355":"ZY","26366":"CZ","26397":"ZC","26399":"QJ","26415":"ZS","26451":"SB","26526":"ZC","26552":"JG","26561":"TD","26588":"JG","26597":"CZ","26629":"ZS","26638":"YL","26646":"XQ","26653":"KG","26657":"XJ","26727":"HG","26894":"ZC","26937":"ZS","26946":"ZC","26999":"KJ","27099":"KJ","27449":"YQ","27481":"XS","27542":"ZS","27663":"ZS","27748":"TS","27784":"SC","27788":"ZD","27795":"TD","27812":"O","27850":"PB","27852":"MB","27895":"SL","27898":"PL","27973":"QJ","27981":"KH","27986":"HX","27994":"XJ","28044":"YC","28065":"WG","28177":"SM","28267":"QJ","28291":"KH","28337":"ZQ","28463":"TL","28548":"DC","28601":"TD","28689":"PB","28805":"JG","28820":"QG","28846":"PB","28952":"TD","28975":"ZC","29100":"A","29325":"QJ","29575":"SL","29602":"FB","30010":"TD","30044":"CX","30058":"PF","30091":"YSP","30111":"YN","30229":"XJ","30427":"SC","30465":"SX","30631":"YQ","30655":"QJ","30684":"QJG","30707":"SD","30729":"XH","30796":"LG","30917":"PB","31074":"NM","31085":"JZ","31109":"SC","31181":"ZC","31192":"MLB","31293":"JQ","31400":"YX","31584":"YJ","31896":"ZN","31909":"ZY","31995":"XJ","32321":"PF","32327":"ZY","32418":"HG","32420":"XQ","32421":"HG","32438":"LG","32473":"GJ","32488":"TD","32521":"QJ","32527":"PB","32562":"ZSQ","32564":"JZ","32735":"ZD","32793":"PB","33071":"PF","33098":"XL","33100":"YA","33152":"PB","33261":"CX","33324":"BP","33333":"TD","33406":"YA","33426":"WM","33432":"PB","33445":"JG","33486":"ZN","33493":"TS","33507":"QJ","33540":"QJ","33544":"ZC","33564":"XQ","33617":"YT","33632":"QJ","33636":"XH","33637":"YX","33694":"WG","33705":"PF","33728":"YW","33882":"SR","34067":"WM","34074":"YW","34121":"QJ","34255":"ZC","34259":"XL","34425":"JH","34430":"XH","34485":"KH","34503":"YS","34532":"HG","34552":"XS","34558":"YE","34593":"ZL","34660":"YQ","34892":"XH","34928":"SC","34999":"QJ","35048":"PB","35059":"SC","35098":"ZC","35203":"TQ","35265":"JX","35299":"JX","35782":"SZ","35828":"YS","35830":"E","35843":"TD","35895":"YG","35977":"MH","36158":"JG","36228":"QJ","36426":"XQ","36466":"DC","36710":"JC","36711":"ZYG","36767":"PB","36866":"SK","36951":"YW","37034":"YX","37063":"XH","37218":"ZC","37325":"ZC","38063":"PB","38079":"TD","38085":"QY","38107":"DC","38116":"TD","38123":"YD","38224":"HG","38241":"XTC","38271":"ZC","38415":"YE","38426":"KH","38461":"YD","38463":"AE","38466":"PB","38477":"XJ","38518":"YT","38551":"WK","38585":"ZC","38704":"XS","38739":"LJ","38761":"GJ","38808":"SQ","39048":"JG","39049":"XJ","39052":"HG","39076":"CZ","39271":"XT","39534":"TD","39552":"TD","39584":"PB","39647":"SB","39730":"LG","39748":"TPB","40109":"ZQ","40479":"ND","40516":"HG","40536":"HG","40583":"QJ","40765":"YQ","40784":"QJ","40840":"YK","40863":"QJG"}
   };

	/**
	 * @version 1.0
	 * @name jazz.window
	 * @description 工具类。
	 * @constructor
	 * @example jazz.window.xxx();
	 */	
   jazz.window = {
		/** @lends jazz.window */  
		/**
	     * @desc 关闭jazz组件的的弹出窗口
		 * @example jazz.window.closeWindow();
	     */
		close: function(e){
			var iframeNumber = 0;
			var target = e.target, $target = $(target);
			var tParent = $target.parent();
			
			function _findWindow(tParent) {
				var t = tParent;
				if(t.is("body")){ //如果为真，说明需要到父页面查找
				   var frameElement	= window.frameElement; //获取iframe对象
				   if(frameElement){
					   var _divObj = $(frameElement).parent();
					   var $div = $(_divObj);
					   iframeNumber++;
					   _findWindow($div);
				   }else{
					   jazz.log("jazz.window.close frame error.");
					   return;
				   }
				}else{
					if(t.hasClass("jazz-window")){
						var dom = window;
						try{
							if(dom.top.$(t[0]).data("window")){  //顶层页面是否存在
								dom.top.$(t[0]).data("window").close();
								return;
							}else{  //顶层页面不存在，使用向上递归的方法，逐级向上判断
								while(dom){
									if(dom.$(t[0]).data("window")){
										 dom.$(t[0]).data("window").close();
										 return;
									}else{
										dom = dom.parent;
									}
								}
							}
						}catch(ex){
							jazz.log("jazz.window.close top error.");
							return;
						}
					}else{
						if(t.parent()){
							_findWindow(t.parent());
						}
					}
				}
			}
			
			_findWindow(tParent);
		}
   };
   

   $.extend(jazz, jazz.util);
	    
   
})(jQuery);


(function($){

	// Private array of chars to use
  	var CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');

  	Math.uuid = function (len, radix) {
	    var chars = CHARS, uuid = [], i;
	    radix = radix || chars.length;
	
	    if (len) {
	      // Compact form
	      for (i = 0; i < len; i++) uuid[i] = chars[0 | Math.random()*radix];
	    } else {
	      // rfc4122, version 4 form
	      var r;
	
	      // rfc4122 requires these characters
	      uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';
	      uuid[14] = '4';
	
	      // Fill in random data.  At i==19 set the high bits of clock sequence as
	      // per rfc4122, sec. 4.1.5
	      for (i = 0; i < 36; i++) {
	        if (!uuid[i]) {
	          r = 0 | Math.random()*16;
	          uuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r];
	        }
	      }
	    }
	
	    return uuid.join('');
	};

  // A more performant, but slightly bulkier, RFC4122v4 solution.  We boost performance
  // by minimizing calls to random()
  Math.uuidFast = function() {
    var chars = CHARS, uuid = new Array(36), rnd=0, r;
    for (var i = 0; i < 36; i++) {
      if (i==8 || i==13 ||  i==18 || i==23) {
        uuid[i] = '-';
      } else if (i==14) {
        uuid[i] = '4';
      } else {
        if (rnd <= 0x02) rnd = 0x2000000 + (Math.random()*0x1000000)|0;
        r = rnd & 0xf;
        rnd = rnd >> 4;
        uuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r];
      }
    }
    return uuid.join('');
  };

  // A more compact, but less performant, RFC4122v4 solution:
  Math.uuidCompact = function() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
      return v.toString(16);
    });
  };
})(jQuery);
/**
 * @desc 监听容器变化
 */
jazz.namespace("listener");

(function($, window, undefined){
	jazz.listener = {
	    //fit布局监听
		fitlistener: {
			pood: [],//缓存页面中fitlayout布局元素
			config: [],//缓存对应pood中fit布局元素的配置属性
			add: function(obj, config){
				this.pood.push(obj);
				this.config.push(config);
			},
			start: function(){
				var $this = this;
				var fitobject = null, parentobject = null, bodyobject = null, 
				    cacheFitHeight = [], parentHeight=0, siblingheight = 0, overflow_x = null, overflow_y = null;			
				if(this.cleartimeout){
					this.stop();
				}
				this.cleartimeout = setInterval(function(){
					for(var i=0, len=$this.pood.length; i<len; i++){
						fitobject = $this.pood[i];
						parentobject = fitobject.parent();
						if(parentobject[0]){
							if(parentobject[0].nodeName == "BODY"){
								bodyobject = $(document.body);
								//body通过outerHeight(winHeight)设置高度值，不会去除掉margin等高度，所以只能通过下边形式去除
								parentHeight = jazz.util.windowHeight() - (bodyobject.outerHeight(true) - bodyobject.height());
							}else{
								parentHeight = parentobject.height();
							}
							
							$.each(fitobject.siblings(), function(){
								//排除兄弟元素中display==none/attr("islayout") == "no"/
								//position == "fixed"/position == "absolute"这四种情况的，然后合计剩余兄弟元素总高度
								if($(this).css("display") !="none" && $(this).attr("islayout") != "no" && 
								   $(this).css("position") != "fixed" && $(this).css("position") != "absolute"){
			        				
			        				siblingheight += $(this).outerHeight(true);
			        			}
							});
							//计算fit布局元素高度，比较是否发生变化进行逻辑处理
							fitHeight = parentHeight - siblingheight;
/*
							console.log();
							console.log("fitHeight="+fitHeight);
							console.log("cacheFitHeight[i]="+cacheFitHeight[i]);
							console.log();
*/
							if(cacheFitHeight[i] != fitHeight){
/*
								overflow_x = parentobject.css("overflow-x");  
								overflow_y = parentobject.css("overflow-y");
								
								parentobject.css("overflow-x", "hidden"); 
					            parentobject.css("overflow-y", "hidden");							
*/	
								fitobject.outerHeight(fitHeight, true);					
								cacheFitHeight[i] = fitHeight;
								//判断是否存在回调函数
								if($this.config[i] && $this.config[i].callback && ($.isFunction($this.config[i].callback))){
									$this.config[i].callback.call($this);
								}

/*								
								parentobject.css("overflow-x", overflow_x);
								parentobject.css("overflow-y", overflow_y);
*/

							}
							
							siblingheight = 0;
						}
					}	
				}, 300);
			},
			stop: function(){
				if(this.cleartimeout){
					clearInterval(this.cleartimeout);
				}
			}
		}	
	};

	var elems = $([]),
	    jq_resize = $.resize = $.extend($.resize, {}),
	    timeout_id,
	    str_setTimeout = 'setTimeout',
	    str_resize = 'resize',
	    str_data = str_resize + '-special-event',
	    str_delay = 'delay',
	    str_throttle = 'throttleWindow';
	  jq_resize[str_delay] = 250;
	  jq_resize[str_throttle] = true;
	  $.event.special[str_resize] = {
	    setup: function() {
	      if (!jq_resize[str_throttle] && this[str_setTimeout]) {
	        return false;
	      }
	      var elem = $(this);
	      elems = elems.add(elem);
	      $.data(this, str_data, {
	        w: elem.width(),
	        h: elem.height()
	      });
	      if (elems.length === 1) { 
	        loopy();
	      }
	    },
	    teardown: function() {
	      if (!jq_resize[str_throttle] && this[str_setTimeout]) {
	        return false;
	      }
	      var elem = $(this);
	      elems = elems.not(elem);
	      elem.removeData(str_data);
	      if (!elems.length) {
	        clearTimeout(timeout_id);
	      }
	    },
	    add: function(handleObj) {
	      if (!jq_resize[str_throttle] && this[str_setTimeout]) {
	        return false;
	      }
	      var old_handler;
	      function new_handler(e, w, h) {
	    	  try{
	    		  var elem = $(this),
	    		  data = $.data(this, str_data);
	    		  data.w = w !== undefined ? w : elem.width();
	    		  data.h = h !== undefined ? h : elem.height();
	    		  old_handler.apply(this, arguments);
	    	  }catch(e){}
	      }
	      if ($.isFunction(handleObj)) {
	          old_handler = handleObj;
	          return new_handler;
	      } else {
	        old_handler = handleObj.handler;
	        handleObj.handler = new_handler;
	      }
	    }
	  };
	  function loopy() {
	    timeout_id = window[str_setTimeout](function() {
	      elems.each(function() {
	        var elem = $(this),
	          width = elem.width(),
	          height = elem.height(),
	          data = $.data(this, str_data);
	        /*if (width !== data.w || height !== data.h) {
	          elem.trigger(str_resize, [data.w = width, data.h = height]);
	        }*/
	        if(data){//&& data.w && data.h
		       if (width !== data.w || height !== data.h) {
		         elem.trigger(str_resize, [data.w = width, data.h = height]);
		       }
	        }
	      });
	      loopy();
	    }, jq_resize[str_delay]);
	  }	

})(jQuery, this);

(function($){
	var _winWidth = jazz.windowWidth(), _winHeight = jazz.windowHeight();
	
	var timerID = "timerLayout_" + jazz.getRandom();
	$(window).off("resize.jazzwindow").on("resize.jazzwindow", function(){
		if (window[timerID]){
			clearTimeout(window[timerID]); window[timerID] = null;
		}
		window[timerID] = setTimeout(function(){ resizeAll();}, 100);
	});

	function resizeAll(){
		jazz.refreshComponentSize();
	}	
})(jQuery);

(function($){
	  $(document).off('mousedown.jazz').on('mousedown.jazz', function (e) {
		    var target = e.target, $target = $(target);
	  		var droppanels = $("div.jazz-dropdown-panel.jazz-widget-content.jazz-helper-hidden");
	  		$.each(droppanels,function(){
	  			  if($(this).is(":hidden")) {
	                  return;
	              }
	  			  var dropvtype = $(this).attr("type");
	  			  
	  			  if(dropvtype == 'datefield' || dropvtype == 'colorfield' || dropvtype == 'autocompletecomboxfield' || dropvtype == 'comboxfield' || dropvtype == 'comboxtreefield'){
	  				  var dropname = $(this).attr("name").substring(14);
		  			  var dropinput = $("div[name="+dropname+"]").data(dropvtype).inputtext;
		  			  var droptrigger = $("div[name="+dropname+"]").data(dropvtype).trigger;
		  			  if(target==dropinput.get(0) || target==droptrigger.get(0)){
		  				  return;
		  			  }
		  			  var dropprefix = $("div[name="+dropname+"]").data(dropvtype).prefix;
		  			  if(dropprefix){
		  				  if(target==dropprefix.get(0)){
			  				  return;
			  			  }
		  			  }
		  			  var dropsuffix = $("div[name="+dropname+"]").data(dropvtype).suffix;
		  			  if(dropsuffix){
		  				  if(target==dropsuffix.get(0)){
			  				  return;
			  			  }
		  			  }
	  			  }
	  			  
	              var offset = $(this).offset();
	              if (e.pageX < offset.left ||
	                  e.pageX > offset.left + $(this).width() ||
	                  e.pageY < offset.top ||
	                  e.pageY > offset.top + $(this).height()) {
	              	  $(this).hide();
		  			  if(dropvtype == 'datefield' || dropvtype == 'colorfield' || dropvtype == 'autocompletecomboxfield' || dropvtype == 'comboxfield' || dropvtype == 'comboxtreefield'){
		  				  var data = $("div[name="+dropname+"]").data(dropvtype)._changeData();  
		              	  $("div[name="+dropname+"]").data(dropvtype)._event("change", e, data);
//		              	  var oldvalue = $("div[name="+dropname+"]").data(dropvtype).getValue();
//		              	  $("div[name="+dropname+"]").data(dropvtype).oldchoices = oldvalue + "";
//		              	  if(dropvtype == 'colorfield'){
//		              		$("div[name="+dropname+"]").data(dropvtype).setValue(oldvalue);
//		              	  }
		  			  }
	              }
	           //针对日历插件,如果开启显示年份\月份下拉框,则隐藏输入框和下拉框
	           if($('.jazz-date-list-year').children().length > 0){
	        	   $('.jazz-date-list-year').hide();
	           }
	           if($('.jazz-date-list-month').children().length > 0){
	        	   $('.jazz-date-list-month').hide();
	           }
	  		});
    });	
})(jQuery);var G = window.G || {};
/**
 * { "cacheName":url, "cacheParam":"", "status":"success" "data":[ {"key":key,"value":value} ] }
 *
 *
 * status ---- 发送中ready  成功success  错误error
 *
 */
G.pageCache = [];

/**
 * @desc 是否将代码集请求合并
 * 一次性请求所有代码集
 * true 合并组件的代码集请求，统一发送请求
 * false 组件自己发送代码集数据请求
 * @type {boolean}
 */
G.isGetAll = jazz.config.isGroupRequest || false;

/**
 * @desc 统一请求代码集地址
 * 系统现在是做url前匹配
 * @type {string}
 */
G.groupUrl = {};

/**
 * @desc 处理代码集请求合并
 */
G.processData = function(links, type){
	
	if(G.isGetAll == false){
		return;
	}
	
    var $this = this,
        use = G.groupUrl;   //可以被合并的请求地址
    /**
     * 1. 分离请求地址前缀，去掉参数部分，保留等号
     * 	比如 http://localhsot/getData.do?id=
     * 2. 根据 1 中得到的前缀，匹配所有地址，找到具体的请求参数
     * 3. 根据 1 中得到的前缀，合并请求参数
     *  比如 {'http://localhost/getData.do?id=': '001,002,004'}
     */
    var counter = 0, tmpUse = [];
    for(var i= 0, len=links.length; i<len; i++){
    	var key = links[i].replace(/([\s|\S]+=)((\w+,)*\w+)$/g, "$1"),
    	    param = links[i].replace(/([\s|\S]+=)((\w+,)*\w+)$/g, "$2");
//    	if(/([\s|\S]+=)+((\w+,)*\w+)$/.test(links[i])){    		
   		if(/(\/JAZZ\/dictionary\/queryData\.do\?dicId=)((\w+,)*\w+)$/.test(links[i])){    		
    		if(use.hasOwnProperty(key)){
    			if(use[key].indexOf("@@") == -1){
    				tmpUse.push(links[i]);
    			}else{
    				tmpUse.push(key + param);
    			}
    			use[key] += ("@@" + param);
    		}else{
    			use[key] = param;
				tmpUse.push(key + param);
    		}
			counter++;
    	}/*else{
    		//发送无法合并的请求
    	}*/
    }

    if(counter > 1){
    	for(var i=0, len=tmpUse.length; i<len; i++){    		
    		$this._beforeRequestByGroup(tmpUse[i]);
    	}
    }
    
    //开始遍历刚才的对象，找到需要处理的请求
    for(var key in use){
    	use[key] = use[key].replace(/@@/g, ",");
    	$this.getPageDataSetCache(key + use[key]);
    }
};

/**
 * @desc  用于记录页面所有url数据
 * @param url
 * @param option
 */
G._setPageCacheByURL = function(cacheName, cacheParam){
    cacheParam = cacheParam || "";
    var i = 0, $this =  this;
    while(i < G.pageCache.length){
        if(cacheName == G.pageCache[i].cacheName
            && cacheParam == G.pageCache[i].cacheParam){
            return;
        }//if
        i++;
    }//while

    G.pageCache.push({
        "cacheName":cacheName,
        "cacheParam":cacheParam,
        "data":[],
        "status":"ready"
    });
    
    $.ajax({
        type: "POST",
        url:cacheName,
        dataType:"text",
        success:function(data){
            var i = 0, tmpdata;
            while(i < G.pageCache.length){
                if(cacheName == G.pageCache[i].cacheName){
                    tmpdata = eval("(" + data + ")");
                    if(jazz.config.platForm == 'sword' && !!tmpdata.data[0]){
                        tmpdata["data"] = tmpdata.data[0].data;
                    }
                    G.pageCache[i].data = tmpdata;
                    G.pageCache[i].status = "success";
                    break;
                }//if
                i++;
            }//while
        },
        error:function(data){
            var i = 0;
            while(i < G.pageCache.length){
                if(cacheName == G.pageCache[i].cacheName){
                    G.pageCache[i].status = "error";
                    break;
                }//if
                i++;
            }//while
        },
        complete:function(data){
        }
    });
};

/**
 * @desc 在发送分组全部请求数据之前
 *  <br>将各项的请求状态置为ready
 *  <br>避免重复请求
 * @private
 */
G._beforeRequestByGroup = function(cacheName, cacheParam){
	if(!G.isGetAll){
		return;
	}
    var i = 0, $this =  this;
    cacheParam = cacheParam || '';
    while(i < G.pageDataSetCache.length){
        if(cacheName == G.pageDataSetCache[i].cacheName
            && cacheParam == G.pageDataSetCache[i].cacheParam){
            return;
        }//if
        i++;
    }//while

    G.pageDataSetCache.push({
        "cacheName":cacheName,
        "cacheParam":cacheParam,
        "data":[],
        "status":"ready"
    });
};

/**
 * @desc  通过指定代码集的索引
 * @param cacheParam
 * @returns {Number}
 */
G._getCacheNameIndex = function(cacheParam){
    var $this = this;
    for(var i=0, len=$this.pageDataSetCache.length; i<len; i++){
        if($this.pageDataSetCache[i]['cacheName'].indexOf(cacheParam) > -1){
            return i;
        }
    }
};

/**
 * @desc  根据code获取代码集
 * @param cacheName
 * @param code
 * @param cacheParam
 * @returns
 */
G.getPageCacheByCode = function(cacheName, code, cacheParam){
    cacheParam = cacheParam || "";
    var i = 0;
    while(i < G.pageCache.length){
        if(cacheName == G.pageCache[i].cacheName
            && cacheParam == G.pageCache[i].cacheParam
            && G.pageCache[i].data.data != undefined){
            var j = 0;
            while(j < G.pageCache[i].data.data.length){
                // tree
                if(G.pageCache[i].data.data[j].id){
                    if(code == G.pageCache[i].data.data[j].id){

                        var d = {
                            "status": G.pageCache[i].status,
                            "data":  G.pageCache[i].data.data[j].name
                        };

                        return d;
                    }//if
                }//if
                // jazz-combox
                if(G.pageCache[i].data.data[j].value){
                    if(code == G.pageCache[i].data.data[j].value){

                        var d = {
                            "status": G.pageCache[i].status,
                            "data":  G.pageCache[i].data.data[j].label
                        };

                        return d;
                    }//if
                }//if
                j++;
            }//while
        }//if
        i++;
    }//while

    G._setPageCacheByURL(cacheName, cacheParam);

    var d = {
        "status": "ready",
        "data": undefined
    };
    return d;
},

/**
 * @desc  
 * @param cacheName
 * @param cacheParam
 * @returns
 */
G.getPageCache = function(cacheName, cacheParam){
    cacheParam = cacheParam || "";
    var i = 0;
    while(i < G.pageCache.length){
        if(cacheName == G.pageCache[i].cacheName
            && cacheParam == G.pageCache[i].cacheParam){
            var d = {
                "status": G.pageCache[i].status,
                "data": G.pageCache[i].data
            };
            return d;
        }//if
        i++;
    }//while

    //没有所需要的数据就在此发送请求

    G._setPageCacheByURL(cacheName, cacheParam);

    var d = {
        "status": "ready",
        "data": []
    };
    return d;

};

/**
 * @desc  通过父id获取代码集，针对树操作
 * @param cacheName
 * @param key
 * @returns
 */
G.getPageCacheByParentId = function(cacheName, key){
    var dataArray = [];
    var i = 0;
    while(i < G.pageCache.length){
        if(cacheName == G.pageCache[i].cacheName){
            if(key != undefined){
                var j = 0;
                while(j < G.pageCache[i].data.data.length){
                    if(key == G.pageCache[i].data.data[j].parentFloatId){
                        dataArray.push(G.pageCache[i].data.data[j]);
                    }
                    j++;
                }
                return dataArray;
            }else{
                return G.pageCache[i].data.data;
            }
            break;
        }
        i++;
    }
    return null;
};

/**
 * @description 页面代码集缓存
 * @type json
 * 格式：
 * {"sex":[{"text":"男","value":"1"}],"org":[{"text":"集成事业部","value":"3"}]}
 */
G.pageDataSetCache = [];
/**
 * @private
 * @description ajax请求获取并设置页面代码集
 * @param cacheName 代码集url或者代码集名称
 */
G._setPageDataSetCacheByURL = function(cacheName,cacheParams, flag){
    var i = 0, $this = this;
    while(i < G.pageDataSetCache.length){
        if(cacheName == G.pageDataSetCache[i].cacheName){
            if(!flag){
                return;
            }
        }
        i++;
    }

    G.pageDataSetCache.push({
        "cacheName":cacheName,
        "cacheParams":cacheParams,
        "data":{},
        "status":"ready"
    });
    
    this.r_jazzData = new Object();
    this.r_dataArray = new Array();
    this.r_jazzData["data"] = this.r_dataArray;
    
    var postData = null;
    
    if(jazz.config.platForm=='sword'){
        this.r_jazzData = new Object();
	    this.r_dataArray = new Array();
	    this.r_jazzData["data"] = this.r_dataArray;
	    
	    if(jazz.isIE(7) || jazz.isIE(6)){
	    	if(typeof(cacheParams) != 'object'){
	    		cacheParams = jazz.stringToJson(cacheParams);
	    	}
	    }
	    
	    if(!!cacheParams){
	        $.each(cacheParams,function(param,i){
	            var _newDataObj = {};
	            _newDataObj["sword"] = "attr";
	            _newDataObj["name"] = param;
	            _newDataObj["value"] = cacheParams[param]+"";
	            $this.r_dataArray.push(_newDataObj);
	        });
	    }else{
            var index = decodeURI(cacheName).indexOf("?");
	    	var params = decodeURI(cacheName).substring(index+1).split("&");
	    	$.each(params,function(i,param){
	    		var data = param.split("=");
	            var _newDataObj = {};
	            _newDataObj["sword"] = "attr";
	            _newDataObj["name"] = data[0];
	            _newDataObj["value"] = data[1]+"";
	            $this.r_dataArray.push(_newDataObj);
	        });
	    }
	    
	    this.r_jazzData["tid"] = decodeURI(cacheName);
    }else{
    	if(!!cacheParams){
	        $.each(cacheParams,function(param,i){
	            var _newDataObj = {};
	            _newDataObj["vtype"] = "attr";
	            _newDataObj["name"] = param;
	            _newDataObj["data"] = cacheParams[param];
	            $this.r_dataArray.push(_newDataObj);
	        });
	    }else{
	    	var index = decodeURI(cacheName).indexOf("?");
	    	var params = decodeURI(cacheName).substring(index+1).split("&");
	    	$.each(params,function(i,param){
	    		var data = param.split("=");
	            var _newDataObj = {};
	            _newDataObj["vtype"] = "attr";
	            _newDataObj["name"] = data[0];
	            _newDataObj["data"] = data[1];
	            if(!!data[1]){
	            	$this.r_dataArray.push(_newDataObj);
	            }
	        });
	    }
    }
    
    postData = {};
    postData["postData"] = jazz.jsonToString(this.r_jazzData);

    /**
     * 开启全部一次请求
     * 则当遇到单独请求的时候则返回
     */
    if($this.isGetAll){
    	var params = cacheName.split('=');
    	if(params.length == 2){
    		for(var key in G.groupUrl){
    			if(G.groupUrl[key] != params[1] 
    				&& G.groupUrl[key].indexOf(params[1]) > -1){
    				var index = $this._getCacheNameIndex(cacheName);
    	    		if($this.pageDataSetCache[index]['status'] != 'success'){
    	    			return;
    	    		}
    			}
    		}    		
    	}
    }
   
    $.ajax({
        type: "POST",
        url:cacheName,
        dataType:"text",
        data:postData,
        success:function(data){
            var datajson = null;
            if(jazz.config.platForm=='sword'){
                var newdata = data.replace(/label/g, "text");
                
                var newdatajson = jazz.stringToJson(newdata);
                datajson = {"data":{}};
                if(!!newdatajson.data[0]){
                    datajson["data"] = newdatajson.data[0].data;
                }
                /*if(!!newdatajson.data){
                    datajson["data"] = newdatajson.data;
                }*/
                datajson = jazz.jsonToString(datajson);
            }else{
                datajson = data;
            }
            var i = 0;
            while(i < G.pageDataSetCache.length){
            	//先找到当前返回的是哪一个请求的数据
            	if(cacheName == G.pageDataSetCache[i].cacheName){
            		//如果是合并请求的结果
            		//则分别分发返回结果到原始的数据请求
            		var requestParams = G._isInGroupUrl(cacheName);
            		if(requestParams){
                        //说明有分组请求，
                        //需要分发到具体的项目
                        var group = requestParams['params'].split(','),
                            groupData = jazz.stringToJson(datajson);
                        for(var j=0; j<group.length; j++){
                            var pi = $this._getCacheNameIndex(requestParams['url']+group[j]);
                            G.pageDataSetCache[pi].data = groupData['data'][j];
                            G.pageDataSetCache[pi].status = "success";
                        }
                    }
            		//设置当前请求的结果状态
            		datajson = jazz.stringToJson(datajson);
            		G.pageDataSetCache[i].data = datajson["data"];
                	G.pageDataSetCache[i].status = "success";    
                    break;
                }
                i++;
            }
        },
        error:function(data){
            var i = 0;
            while(i < G.pageDataSetCache.length){
                if(cacheName == G.pageDataSetCache[i].cacheName){
                    G.pageDataSetCache[i].status = "error";
                    break;
                }
                i++;
            }
        },
        complete:function(data){
        }
    });

};

/**
 * @desc  判断当前请求是否是合并请求中的一个
 *  ture  则返回对应的请求地址和解析后的参数
 *  false 返回
 * @param cacheName
 * @returns
 */
G._isInGroupUrl = function(cacheName){
	if(!G.isGetAll){
		return false;
	}
	for(var key in G.groupUrl){
		if(cacheName.indexOf(key + G.groupUrl[key]) > -1){
			return {
				url: key,
				params: G.groupUrl[key]
			};
		}
	}
	return false;
};

/**
 * @description 获取页面代码集缓存
 * @param {} cacheName
 * @param {} cacheParams
 * @param boolean flag 是否发起请求数据
 * @return {}
 */
G.getPageDataSetCache = function(cacheName,cacheParams, flag){
    var i = 0;
    while(i < G.pageDataSetCache.length){
        if(cacheName == G.pageDataSetCache[i].cacheName){
            if((flag == true && (G.pageDataSetCache[i]['status'] != 'ready'
                && G.pageDataSetCache[i]['status'] == 'success'))
                || (flag == true && G.pageDataSetCache[i]['status'] == 'success')
                || (G._isInGroupUrl(cacheName)) ){
                if(!!cacheName){
                    G._setPageDataSetCacheByURL(cacheName,cacheParams, flag);
                }
            }
            var d = {
                "cacheName":cacheName,
                "cacheParams":cacheParams,
                "status": G.pageDataSetCache[i].status,
                "data": G.pageDataSetCache[i].data
            };
            return d;
        }
        i++;
    }

    //没有所需要的数据就在此发送请求
    if(!!cacheName){
        G._setPageDataSetCacheByURL(cacheName,cacheParams);
    }

    var d = {
        "cacheName":cacheName,
        "cacheParams":cacheParams,
        "status": "ready",
        "data": {}
    };
    return d;

};(function($, factory) {

    if (jazz.config.isUseRequireJS === true) {
        define(['jquery'], factory);
    } else {
        factory($);
    }
})(jQuery, function($) {
    /**
     * @version 1.0
     * @name jazz.component
     * @description 组件的基类，component下所有子类均按照统一组件生命周期执行动作，既创建、渲染和销毁，并具有隐藏./显示、启用/禁用的基本行为特性。
     * @constructor
     */
    $.widget('jazz.component', {

        options: /** @lends jazz.component# */ {

            /**
             * @type String
             * @desc 组件名称
             * @default ""
             */
            name: "",

            /**
             * @type String
             * @desc 内容区域的html内容
             * @default null
             */
            content: null,

            /**
             * @type Object
             * @desc 子组件
             * @default null
             */
            items: null
        },

        /** @lends jazz.component */
        /**
         * @desc 创建组件
         * @private
         */
        _create: function() {
            this._attrToOptions();

            this.element.attr('vtype', this.options.vtype);
            var name = this.options.name;
            if (!name) {
                this.options.name = name = this.options.id || this.getCompId();
            }
            this.element.attr('name', name);
			/*
            var $this = this;
            this.options.create = function() {
                //控制content、items的执行次数
                $this.content_number = 1;
                $this.items_number = 1;

                // 创建vtype树结构
                $this._vtypetree();
            };
			*/
        },

        /**
         * @desc 初始化
         * @private
         */
        _init: function() {},

        /**
         * @desc 将attr属性转换成options
         * @private
         */
        _attrToOptions: function() {
            var c_a = jazz.attributeToOptions(this.element.get(0));
            for (var p in c_a) {
                if (c_a[p] === "true") {
                    c_a[p] = true;
                } else if (c_a[p] === "false") {
                    c_a[p] = false;
                }
            }
            $.extend(this.options, c_a);
        },

        /**
         * @desc 创建内容区中包含的组件 
         * @param {obj} 所要存放对象的容器对象
         * @private
         */
        _createContent: function(obj) {
			obj.parseComponent();
        },

        /**
         * @desc 创建包含子项的组件
         * @param {obj} 所要存放items的容器对象
         * @private
         */
        _createItems: function(obj) {
            var items = this.options.items;
            if ($.isArray(items)) {
                if (obj instanceof $ && this.items_number === 1) {
                    $.each(items, function(i, item) {
                        var vtype = item["vtype"];
                        if (vtype) {
                            var v = $("<div>").appendTo(obj);
                            v[vtype](item);
                        }
                    });
                    this.items_number++;
                }
            }
        },

        /**
         * @desc 合并vtype和$()/$.widget()方式在div中定义接收方法的处理，如：<div dataloadcomplete="loaddata()">形式。
         * @param 接收任意可变参数，注意第一个参数必须为“在div中定义接收方法”的的引用
         * @return 定义回调函数返回值
         * @private
         */
        _customopration: function() {
            if (arguments.length == 0) {
                return false;
            }
            var cb = arguments[0];
            var params = [];
            if (cb) {
                for (var i = 1; i < arguments.length; i++) {
                    params.push(arguments[i]);
                }
                if ($.isFunction(cb)) {
                    return cb.apply(this, params);
                } else {
                    if (cb.indexOf("(") != -1) {
                        cb = cb.substr(0, cb.indexOf("("));
                    }
                    return eval(cb).apply(this, params);
                }
            }
        },

        /**
         * @desc 合并事件的处理this._trigger()、<div click="_click">、<div click="_click()">形式。
         * @param {eventName} 所要触发的事件名称
         * @param {event} 原事件中的event
         * @param {data} 抛出的对象
         * @private
         */
        _event: function(eventName, event, data) {
            var _ename = eventName;
            var callback = this.options[_ename];
            if (!$.isFunction(callback)) {
                var reg = /\(/;
                if (reg.test(callback)) {
                    callback = callback.split("(")[0] || null;
                    if (callback == null) {
                        return false;
                    }
                }
                callback = eval(callback + "");
            }

            data = data || {};
            event = $.Event(event);
            event.type = (eventName === this.options.vtype ? eventName : this.options.vtype + eventName).toLowerCase();
            event.currentClass = this;
            event.target = this.element[0];

            orig = event.originalEvent;
            if (orig) {
                for (prop in orig) {
                    if (!(prop in event)) {
                        event[prop] = orig[prop];
                    }
                }
            }
            this.element.trigger(event, data);
            return !($.isFunction(callback) && callback.apply(this.element[0], [event].concat(data)) === false || event.isDefaultPrevented());
        },

        /**
         * @desc 创建vtypetree树形结构
         * @private
         */
        _vtypetree: function() {
            // 调用全局函数，实现树形结构的创建
            if (this.options.createtype != "0") {
                //"1" $ 方式调用   "0" vtype方式调用
                jazz.vtypetree(this.element, "1");
            }
        },

        finish: function() {},

        /**
         * @desc 组件ID 由组件内部调用
         * @return ID编号
         * @private
         */
        getCompId: function() {
            var id = jazz.getId();
            return id;
        },

        /**
         * @desc vtype树操作：获取当前节点的父节点
         * @returns
         */
        getParentComponent: function() {
            var nodeData = this.element.data("vtypetree") || {};
            return nodeData.parent || {};
        },

        /**
         * @desc vtype树操作：获取当前节点的指定vtype类型子节点
         * @returns
         */
        getChildrenComponent: function() {
            var nodeData = this.element.data("vtypetree") || {};
            return nodeData.child || {};
        },

        /**
         * @desc vtype树操作：获取当前节点的指定vtype类型子节点
         * @param vtype
         * @returns
         */
        getChildrenComponentByVtype: function(vtype) {
            var element = null;
            var nodeData = this.element.data("vtypetree") || {};
            for (var childname in nodeData.child) {
                var data = nodeData.child[childname].data("vtypetree");
                if (data.vtype == vtype) {
                    element = nodeData.child[childname];
                    break;
                }
            }
            return element;
        }

    });

});
(function( $, factory ){

	if ( jazz.config.isUseRequireJS === true ) {
		define( ['jquery'], factory );
	} else {
		factory($);
	}	 
})(jQuery, function($){
	/**
	 * @version 1.0
	 * @name jazz.layout
	 * @description 布局参数定义。
	 * @constructor
	 * @example jazz.layout.auto;
	 */             	
	jazz.layout = {
		auto: 'autolayout',
		border: 'borderlayout',
		column: 'columnlayout',
		fit: 'fitlayout',
		row: 'rowlayout',
		vbox: 'vboxlayout',
		hbox: 'hboxlayout',
		table: 'tablelayout',
		query: 'querylayout',
		card: 'cardlayout',
		anchor: 'anchorlayout'
	};

	/**
	 * @version 1.0
	 * @name jazz.containerlayout
	 * @description 每个Container都委托布局管理器来渲染其子组件Component,通常不应该直接使用。
	 * @constructor
	 * @extends jazz.container
	 */	
    $.widget("jazz.containerlayout", {

        options: /** @lends jazz.containerlayout# */ {
        	
    		/**
			 *@type Object
			 *@desc 存储用来调用布局的容器对象 
			 *@default null
			 */        		
        	container: null,
        	
			/**
			 *@type Object
			 *@desc 布局的配置参数
			 *@default {}
			 */
			layoutconfig: {}

        },

        /** @lends jazz.containerlayout */
		/**
         * @desc 刷新布局
         * @param {componentObject} 当前组件的this对象
         * @param {layoutcontainer} 需要渲染的容器对象
         * @param {layoutconfig} 布局需要的配置参数
         */        
        refreshLayout: function(componentObject, layoutcontainer, layoutconfig){
        	this.layout(componentObject, layoutcontainer, layoutconfig);
        },
        
        /**
         * @desc 刷新布局前要做的操作
         */        
        refreshLayoutBefore: function(){},
        
        /**
         * @desc 刷新布局后要做的操作
         */           
        refreshLayoutAfter: function(){}
    });    
});

(function($) {

	/**
	 * @version 0.5
	 * @name jazz.anchorlayout
	 * @description 锚布局。
	 * @constructor
	 * @extends jazz.containerlayout
	 * @requires
	 * @example $('#panel_id').anchorlayout();
	 */
    $.widget("jazz.anchorlayout", $.jazz.containerlayout, {

    	/** @lends jazz.anchorlayout */        
        
		/**
         * @desc 设置布局
         * @param {cthis} 当前组件对象
         * @param {container} 当前组件对象
		 * @throws
		 * @example
         */
        layout: function(cthis, container, config) {
        	var anchor = config.anchor;
        	var points = config.point;
        	container.addClass("jazz-layout");
        	
        	container.css({border: '5px solid red'});
        	//config.type='0';
        	
        	if(anchor==null){
        		if(config.type=='1'){
	        		var page = this._getPageSize();
	        		var x  = page.windowWidth/2, y = page.windowHeight/2;
	        		anchor = config.anchor = {x: x, y: y};
	                //jazz.log('page.windowWidth='+page.windowWidth+'***page.windowHeight='+page.windowHeight+'x='+x+'***'+'y='+y);
        		}else{
        			container.css({width:1200, height: 400 });
        			var top = container.offset().top;
        			var left = container.offset().left;
        			var cw = container.width()/2;
        			var ch = container.height()/2;
        			
        			top = parseInt(top + ch);
        			left = parseInt(left + cw);
        			
        			anchor = config.anchor = {x: left, y: top};
        			//jazz.log('top='+top+'***left='+left+'***cw='+cw+'***ch='+ch);
        		}
        	}
        	
        	var cheight = 0;
        	$.each(points, function(i, p){
        		if(!!p.id){
        			var x  = parseInt(anchor.x) + parseInt(p.offset.x);
        			var y = parseInt(anchor.y) + parseInt(p.offset.y);
        			var n = $('#'+p.id).outerHeight(true) + y;   //计算DIV高度
        			if(n > cheight){
        				cheight = n;
        			}
        			$('#'+p.id).appendTo(container);
        			$('#'+p.id).css({
        				position: 'absolute',
        				top: y,
        				left: x
        			});
        		}
        	});
        	
        	container.height(cheight + 20);
        	
        },

		/**
         * @desc 计算页面大小
		 * @private
		 * @example  this._getPageSize();
         */
		_getPageSize: function () {
		    var xScroll, yScroll;
		    if (window.innerHeight && window.scrollMaxY) {
		        xScroll = window.innerWidth + window.scrollMaxX;
		        yScroll = window.innerHeight + window.scrollMaxY;
		    } else {
		        if (document.body.scrollHeight > document.body.offsetHeight) { // all but Explorer Mac    
		            xScroll = document.body.scrollWidth;
		            yScroll = document.body.scrollHeight;
		        } else { // Explorer Mac...would also work in Explorer 6 Strict, Mozilla and Safari    
		            xScroll = document.body.offsetWidth;
		            yScroll = document.body.offsetHeight;
		        }
		    }
		    var windowWidth, windowHeight;
		    if (self.innerHeight) { // all except Explorer    
		        if (document.documentElement.clientWidth) {
		            windowWidth = document.documentElement.clientWidth;
		        } else {
		            windowWidth = self.innerWidth;
		        }
		        windowHeight = self.innerHeight;
		    } else {
		        if (document.documentElement && document.documentElement.clientHeight) { // Explorer 6 Strict Mode    
		            windowWidth = document.documentElement.clientWidth;
		            windowHeight = document.documentElement.clientHeight;
		        } else {
		            if (document.body) { // other Explorers    
		                windowWidth = document.body.clientWidth;
		                windowHeight = document.body.clientHeight;
		            }
		        }
		    }       
		    // for small pages with total height less then height of the viewport    
		    if (yScroll < windowHeight) {
		        pageHeight = windowHeight;
		    } else {
		        pageHeight = yScroll;
		    }   
		    // for small pages with total width less then width of the viewport    
		    if (xScroll < windowWidth) {
		        pageWidth = xScroll;
		    } else {
		        pageWidth = windowWidth;
		    }
		    
		    return {
		    	'pageWidth': pageWidth, 
		    	'pageHeight': pageHeight, 
		    	'windowWidth': windowWidth, 
		    	'windowHeight': windowHeight 
		    };
		}
        
    });
    
})(jQuery);(function( $, factory ){

	if ( jazz.config.isUseRequireJS === true ) {
		define( ['jquery', 'layout/jazz.ContainerLayout'], factory );
	} else {
		factory($);
	}	 
})(jQuery, function($){
	/**
	 * @version 1.0
	 * @name jazz.autolayout
	 * @description 自动布局。
	 * @constructor
	 * @extends jazz.containerlayout
	 */
    $.widget("jazz.autolayout", $.jazz.containerlayout, {

    	/** @lends jazz.autolayout */        
        
		/**
         * @desc 设置布局
         * @desc 设置布局
         * @param {cthis} 当前组件对象
         * @param {container} 需要渲染的容器对象
         * @param {layoutconfig} 布局需要的配置参数
         */
        layout: function(cthis, container, layoutconfig) {
        	
        }

    });
    
});

(function($) {

	/**
	 * @version 0.5
	 * @name jazz.boxlayout
	 * @description boxlayout是布局hboxLayout和vboxLayout基础类。通常不应该直接使用。
	 * @constructor
	 * @extends jazz.containerlayout
	 * @requires
	 * @example $('#panel_id').boxlayout();
	 */
    $.widget("jazz.boxlayout", $.jazz.containerlayout, {

        options: /** @lends jazz.boxlayout# */ {
			/**
			 *@type boolean
			 *@desc 组件间的间隔数值
			 *@default false
			 */
        	interval: 10,
        	
			/**
			 *@type number
			 *@desc 距离顶部边框的值
			 *@default 10
			 */        	
        	top: 20,
        	
			/**
			 *@type number
			 *@desc 距离边框的值
			 *@default false
			 */        	  	
        	left: 10
        },
        
        /** @lends jazz.boxlayout */        
        
		/**
         * @desc 创建组件
		 * @throws
		 * @example
         */        
        _create: function() {
        	
        }
        
        
        
        

    });
    
    
})(jQuery);
(function($) {
	
	/**
	 * @version 0.5
	 * @name jazz.hboxlayout
	 * @description 水平布局。
	 * @constructor
	 * @extends jazz.boxlayout
	 * @requires
	 * @example $('#panel_id').hboxlayout();
	 */	
    $.widget("jazz.hboxlayout", $.jazz.boxlayout, {

    	
        /** @lends jazz.hboxlayout */       

		/**
         * @desc 设置布局
         * @param {cthis} 当前组件对象
         * @param {container} 当前组件对象
         */
        layout: function(cthis, container, config) {
        	cthis.content.addClass("jazz-layout");
        	//container.css({border: '1px solid red'});
        	var items = container.children();   //获取全部的子对象
        	var bc = {   //记录前一组件的值
    			top: 0,
    			left: 0,
    			width: 0
        	};
        	//对齐位置
        	this._align(cthis, items, container, config, bc);       	
        },

		/**
         * @desc 设置布局
         * @param {cthis} 当前对象
         * @param {items} 需要布局的组件集合
         * @param {container} 当前布局容器对象
         * @param {config} 组件布局配置对象
         * @param {bc} 布局时记录上一个组件的对象
		 * @private
         */
        _align: function(cthis, items, container, config, bc){

        	for(var i = 0, len = items.length; i<len; i++){
        		
            		var left = 0;
            		if(i==0){
            			left = bc.left = 0;   //0;
            		}else{
            			left = bc.left =  bc.width + bc.left;
            		}
            		bc.width = items.eq(i).outerWidth(true);

            		items.eq(i).css({position: 'absolute', top:0, left: left });
            	
        		
        	}
        	
        	//重新计算容器高度
        	if(cthis.options.height === -1){ //外部未指定容器高度，自适应
        		container.height(allheight + parseInt(config.margin.top) + parseInt(config.margin.bottom));
        	}
        	
        }    
  
    });
    
})(jQuery);
(function($) {
	/**
	 * @version 0.5
	 * @name jazz.vboxlayout
	 * @description 垂直排列的布局。
	 * @constructor
	 * @extends jazz.boxlayout
	 * @requires
	 * @example $('#panel_id').vboxlayout();
	 */	
    $.widget("jazz.vboxlayout", $.jazz.boxlayout, {

    	/** @lends jazz.vboxlayout */        
        
		/**
         * @desc 设置布局
         * @param {cthis} 当前组件对象
         * @param {container} 当前组件对象
		 * @throws
		 * @example
         */
        layout: function(cthis, container, config) {
        	container.addClass("jazz-layout");
        	//container.css({border: '1px solid red'});
        	var items = container.children();   //获取全部的子对象
        	var bc = {   //记录前一组件的值
    			top: 0,
    			left: 0,
    			height: 0
            };
        	
        	//对齐位置
        	this._align(cthis, items, container, config, bc);
        	
        },

		/**
         * @desc 设置布局
         * @param {cthis} 当前对象
         * @param {items} 需要布局的组件集合
         * @param {container} 当前布局容器对象
         * @param {config} 组件布局配置对象
         * @param {bc} 布局时记录上一个组件的对象
		 * @private
		 * @example  this._align(cthis, items, container, config, bc);
         */        
        _align: function(cthis, items, container, config, bc){

    		//计算左右偏移量
        	for(var i = 0, len = items.length; i<len; i++){
        		var top = 0;
        		if(i==0){
        			top = bc.top = 0;
        		}else{
        			top = bc.top =  bc.height + bc.top;
        		}
        		bc.height = items.eq(i).outerHeight(true);

        		items.eq(i).css({position: 'absolute', top: top, left: 0 });
        	}
        	//重新计算容器高度
        	if(cthis.options.height === -1){
        		container.height(bc.height + bc.top );
        	}
        	
        }
        
    });
    
})(jQuery);(function( $, factory ){

	if ( jazz.config.isUseRequireJS === true ) {
		define( ['jquery',  'layout/jazz.ContainerLayout'], factory );
	} else {
		factory($);
	}	 
})(jQuery, function($){
	/**
	 * @version 1.0
	 * @name jazz.rowlayout
	 * @description 行布局。
	 * @constructor
	 * @extends jazz.containerlayout
	 */
    $.widget("jazz.rowlayout", $.jazz.containerlayout, {
		
    	/** @lends jazz.rowlayout */
		/**
         * @desc 设置布局
         * @param {cthis} 当前组件对象
         * @param {container} 需要渲染的容器对象
         * @param {layoutconfig} 布局需要的配置参数
         */
        layout: function(cthis, container, layoutconfig) {
        	//列布局时，禁止容器出现滚动条
        	container.css('overflow', 'hidden');
        	var containerHeight = container.height();
        	var $this = this;
        	this.layoutconfig = layoutconfig; this.cthis = cthis;
        	this.border = (layoutconfig.border == true || layoutconfig.border == "true") || this.border || false;
        	//是否可以拖动, row布局中使用
        	this.draggable = (layoutconfig.draggable == true || layoutconfig.draggable == "true") || this.draggable || false;        	

        	this.rowheights = layoutconfig.rowheight || layoutconfig.height || this.rowheights;
        	//用于判断是否为 border布局调用isborderlayout=true
        	var isborderlayout = layoutconfig.isborderlayout || false;
        	
        	//设置border布局参数的默认值， 当不是border布局时，这些参数就取默认值，确保row布局正常使用
    		var north_show_border = (layoutconfig.north_show_border == false || layoutconfig.north_show_border == "false") ? false : true;
    		var south_show_border = (layoutconfig.south_show_border == false || layoutconfig.south_show_border == "false") ? false : true;
    		
    		var north_show_switch = (layoutconfig.north_show_switch == false || layoutconfig.north_show_switch == "false") ? false : true;
    		var south_show_switch = (layoutconfig.south_show_switch == false || layoutconfig.south_show_switch == "false") ? false : true;
    		
    		var north_drag = (layoutconfig.north_drag == false || layoutconfig.north_drag == "false") ? false : true;
    		var south_drag = (layoutconfig.south_drag == false || layoutconfig.south_drag == "false") ? false : true;  
    		
 			var north_drag_min = layoutconfig.north_drag_min ? parseInt(layoutconfig.north_drag_min) : 0;
 			var north_drag_max = layoutconfig.north_drag_max ? parseInt(layoutconfig.north_drag_max) : 0;
			var south_drag_min = layoutconfig.south_drag_min ? parseInt(layoutconfig.south_drag_min) : 0;
			var south_drag_max = layoutconfig.south_drag_max ? parseInt(layoutconfig.south_drag_max) : 0;      		

			this.north_open = (layoutconfig.north_open == false || layoutconfig.north_open == "false") ? false : true;
			this.south_open = (layoutconfig.south_open == false || layoutconfig.south_open == "false") ? false : true;
			
        	//isborderlayout == true 为border布局调用
        	//broder布局内置了column布局, 所以要通过下边设置border布局所要的参数。
        	if(isborderlayout == true){
        		this.isrowlayout = false; this.border = true;
        		//在border布局中定义的，存储各区域的对象
        		this.bobject = layoutconfig.bobject;
        		this.isnorth = layoutconfig.regionnumber.north == 1 ? true : false;
        		this.issouth = layoutconfig.regionnumber.south == 1 ? true : false;
        	}else{
        		//用于判断是否为行布局使用，而不是border布局
        		this.isrowlayout = true;
        	}    		
    		
        	var rows = this.rowheights.length || 0;
        	if(rows == 0){
        		jazz.error("行布局的rowheight设置错误, 例： ['200', '30%', '*']");
        	}
        	
        	//计算全部固行的高度 (固定行 px 非固定行 % *)
        	this.fixRowHeight = 0; 
        	
        	//存储非固定行的对象
        	this.noFixRow = [];  
        	
        	//当有收缩按钮时，通过点击收缩按钮后， 记录原始值， 保证能通过这些值还原上一次操作的状态
        	this.topval = 0;  this.bottomval = 0;
        	
        	var _cc = container.children(".jazz-row-element");
        	if(_cc.length == 0){
        		this.layoutdiv = container.children();
        		this.borderHeight = 0;
        		this.bordernumber = 0;
        		this.countTimes = 0;
        	}else{
        		this.layoutdiv = _cc;
        		this.countTimes++;
        	}
//        	this.layoutdiv = container.children().filter(":visible");        	//行布局的行元素对象
        	
        	for(var i=0; i<rows; i++){
    			var tempObject = $(this.layoutdiv[i]);

    			//tempObject.removeAttr("style");  //去除原有样式
        		tempObject.addClass("jazz-row-element");
        		if(this.countTimes===0 && this.border == true && rows > 1 && (i+1) != rows) {
	        		//border布局时判断是否存在边框
	        		if( (isborderlayout == true && ((north_show_border && this.isnorth && i==0) || (south_show_border && this.issouth && (i+2)==rows) ) )
	        				|| this.isrowlayout ){
	        			var $b = $('<div index="'+i+'" class="jazz-row-border"></div>');
	        			if(isborderlayout == true &&  (north_show_switch && this.isnorth && i==0) ){
	        				this.switchTop = $('<div class="jazz-row-btn jazz-row-btn-t"></div>').appendTo($b);
	        			}else if(isborderlayout == true && (south_show_switch && this.issouth && (i+2)==rows) ){
	        				this.switchBottom = $('<div class="jazz-row-btn jazz-row-btn-b"></div>').appendTo($b);
	        			}	        			
	        			tempObject.after($b);
	        			//this.borderObj.push($b);
	        			this.bordernumber += 1;
	        			
	        			if( (isborderlayout == true && ((north_drag == true && this.isnorth && i==0) || (south_drag == true && this.issouth && (i+2)==rows)) )
	        					|| (this.isrowlayout & this.draggable)){
	        				$b.addClass("jazz-row-border-cursor");
	        			}	        			
	        			
	        			//获取边框的高度
	        			this.borderHeight = $b.outerHeight() || 0;      			
	        			
	        			if(isborderlayout == true && ( (north_show_switch && this.isnorth && i==0) || (south_show_switch && this.issouth && (i+2)==rows) ) ){
		        			//只允许第一列与最后一列，通过点击按钮进行收缩
		        			$b.children(".jazz-row-btn").off("click.rt").on("click.rt", function(){
		        				var p = $(this).parent();
		        				var $pre = p.prev(), $next = p.next();
		        				var index = p.attr("index");
		        				
		        				$this._switch(cthis, $pre, $next, index, rows, true);
	        					//刷新组件
								cthis.refreshChildComponent();
		        			}); 
	        			}
	        		}
        		}
        		
        		var _rh = this.rowheights[i]+"";
        		if(_rh != "*" && _rh.indexOf('%') == -1){  //固定宽度的行
        			tempObject.outerHeight(_rh);
        			var a = tempObject.outerHeight();
        			if(a < 0){ a = 0; }
        			this.fixRowHeight = this.fixRowHeight + a;     			
        		}else{
        			//非固定列
        			this.noFixRow.push(tempObject);
        		} 
        	}
        	
			var $this = this;
			
			container.off('mousedown.row').on('mousedown.row', function(event){
				var target = event.target, $target = $(target);
				
				//用于存放位置坐标移动范围, topborder存放拖动时，上边界值  
			    //areaheight存放各区域的宽度，通过topborder和areaheight的相加，确定能拖动的底边界值
			    //areaobject不同区域的对象
				$this.topborder = [], $this.areaheight = [], $this.areaobject = [];
				
				if($target.is('.jazz-row-border')){
					//获取被点击边框的索引值
				    var index = parseInt($target.attr("index"));

					//if判断是否允许在border布局和row布局中，是否允许拖动分割线
				    if( ( isborderlayout==true && ((north_drag && index == 0 && $this.isnorth) || (south_drag && (index+2)==rows && $this.issouth) ) )
				    		|| ($this.draggable && $this.isrowlayout)){
					
					    //点击border边框时的坐标点
					    $this.row_y = $target.offset().top;
					    
					    //点击到拖动区域时，出现拖动线
					    $this.dragrow = $('<div class="jazz-row-drag" style="display:none" islayout="no"></div>').appendTo(document.body);
	    				$this.dragrow.css({display: 'block', top: $this.row_y, left: $target.offset().left, width: $target.width() - 2});
	    				
	    				//去除在拖动过程中的选中状态
					    if (!$.browser.mozilla) {
		                    $(document).on("selectstart", function(){return false; });
		                }else {
		                    $("body").css("-moz-user-select", "none");
		                }
	
				    	$.each(container.children(".jazz-row-element"), function(i, obj){
				    		//确定每一列移动的范围
				    		$this.topborder.push($(obj).offset().top);
				    		$this.areaheight.push($(obj).height());
				    		$this.areaobject.push($(obj));
				    	});
	
				    	//获取拖动的原始距离值
				    	var tdragwidth = $this.areaheight[index];
				        var bdragwidth = $this.areaheight[index + 1];
				    	
					    //抛出border布局时，开始拖动的事件
					    if(isborderlayout == true){
					    	if(index==0 && $this.isnorth){
					    		if(!$this.north_open){ tdragwidth = 0; }
					    		cthis._event("northdragstart", null, {"north": {"height": tdragwidth}, "center": {"height": bdragwidth}});	
					    	}else{
					    		if(!$this.south_open){ bdragwidth = 0; }
					    		cthis._event("southdragstart", null, {"center": {"height": tdragwidth}, "south": {"height": bdragwidth}});
					    	}
					    }else{
					    	//抛出开始拖动时的事件
						    cthis._event("rowdragstart", null, {index: index, top: tdragwidth, bottom: bdragwidth});					    	
					    }
				    	
				    	$(document).off('mousemove.row mouseup.row').on('mousemove.row', function(e){
				    		if($this.dragrow){
				    			//上侧边界值
				    			var topborder = $this.topborder[index];
				    			//下侧边界值
				    			var bottomborder = $this.topborder[index+1] + $this.areaheight[index+1] - $this.dragrow.outerHeight();
				    			
				    			if($this.issouth && !$this.south_open && (index+2)==rows){
				    				bottomborder = $target.offset().top;
				    			}
				    			
				    			var eY = e.pageY;
				    			//确定拖动的范围
				    			if(isborderlayout == true && (topborder < eY && eY < bottomborder)){
				    				if(index==0 && $this.isnorth){
				    					if((north_drag_min < eY && eY < north_drag_max) || (north_drag_min===0 && north_drag_max===0)){
						    				$this.moving = eY;
						    				$this.dragrow.css({top: $this.moving});				    						
				    					}
				    				}else{
				    					if(((containerHeight - south_drag_max) < eY && eY < (containerHeight - south_drag_min))
				    							|| (south_drag_max===0 && south_drag_min===0)){
						    				$this.moving = eY;
						    				$this.dragrow.css({top: $this.moving});    						
				    					}
				    				}
				    			}else{
				    				if(topborder < eY && eY < bottomborder){ //确定移动的范围
				    					$this.moving = eY;
				    					$this.dragrow.css({top: $this.moving});
				    				}
				    			}				    			
				    		}
				    	}).on('mouseup.row', function(e){
				    		var _bh = $this.areaheight[index + 1];
				    		var _th = $this.areaheight[index];
	        				//通过this.moving移动的距离判断是否移动
	        				if($this.moving){
	        					var _y = $this.dragrow.offset().top - $this.row_y;	  //移动的距离
	        					var b = $this.areaobject[index + 1];
	        					var t = $this.areaobject[index];
	        					
	        					//border布局
	        					if(isborderlayout == true){
	        						//拖动north
	        						if(index==0 && $this.isnorth){
	        							if(!$this.north_open){
	        								_th = 0;
	        								if(_y > 0){
	        									$this.north_open = true;
	        								}
	        							}
		        						_bh = _bh - _y;  _th = _th + _y;
		        						b.outerHeight(_bh);
		        						t.show().outerHeight(_th); 	
	        						
	        						//拖动south
	        						}else if($this.issouth){
	        							if(!$this.south_open){
	        								_bh = 0;
	        								if(_y < 0){
	        									$this.south_open = true;
	        								}
	        							}
	        							_bh = _bh - _y;  _th = _th + _y;
		        						t.outerHeight(_th); 
		        						b.show().outerHeight(_bh);
	        						}
	        					}else{
	        						//行布局
	        						_bh = _bh - _y;  _th = _th + _y;
	        						b.outerHeight(_bh);
	        						t.outerHeight(_th); 	        						
	        					}
	        					
	    					    //抛出border布局时，结束拖动的事件
	    					    if(isborderlayout == true){
	    					    	if(index==0 && $this.isnorth){
	    					    		//通过拖动改变原宽度需要记录拖动后的宽度
	    					    		layoutconfig["height"][0] = _th;
	    					    		cthis._event("northdragstop", null, {"north": {"height": _th}, "center": {"height": _bh}});	
	    					    	}else{
	    					    		var a = layoutconfig["height"]["length"] || 2;
	    					    		layoutconfig["height"][a-1] = _bh;
	    					    		cthis._event("southdragstop", null, {"center": {"height": _th}, "south": {"height": _bh}});
	    					    	}
	    					    }else{
	    					    	cthis._event("rowdragstop", null, {index: index, top: _th, bottom: _bh});
	    					    }
    					    	//刷新组件
								cthis.refreshChildComponent();
	        				}else{
	        					if(tdragwidth != _th && bdragwidth != _bh){
		    					    if(isborderlayout == true){
		    					    	if(index==0 && $this.isnorth){
		    					    		//通过拖动改变原宽度需要记录拖动后的宽度
		    					    		layoutconfig["height"][0] = _th;
		    					    		cthis._event("northdragstop", null, {"north": {"height": _th}, "center": {"height": _bh}});	
		    					    	}else{
		    					    		var a = layoutconfig["height"]["length"] || 2;
		    					    		layoutconfig["height"][a-1] = _bh;
		    					    		cthis._event("southdragstop", null, {"center": {"height": _th}, "south": {"height": _bh}});
		    					    	}
		    					    }else{
		    					    	cthis._event("rowdragstop", null, {index: index, top: _th, bottom: _bh});
		    					    }	
	        					}
	        				}
	
	        				$this.dragrow.remove();
	        				//将移动的距离清空
	        				$this.moving = "";
	        				
	        				//拖动结束后，还原状态
	        				if (!$.browser.mozilla) {
	        					$(document).off("selectstart");
	        				}else{
	        					$("body").css("-moz-user-select", "auto");
	        				}
	        				
	        				$(document).off('mousemove.row mouseup.row');
	        			});
					}
				}
			});               	
        	
           	//容器的总高度
			//var containerHeight = Math.min(container.height(), container.get(0).clientHeight);
        	
        	this._calculateHeight(containerHeight, this.layoutdiv, rows);
        	
			if(isborderlayout == true){
				if(this.north_open == false && this.isnorth){
					this.north_open = true;
					this._switch(cthis, this.bobject.north.object, layoutconfig["centerobject"], 0, rows);
				}
				if(this.south_open == false && this.issouth){
					this.south_open = true;
					this._switch(cthis, layoutconfig["centerobject"], this.bobject.south.object, 1, rows);						
				}
			}
        },
		
		/**
         * @desc 布局区域发生改变时触发
         * @param {cthis} 组件的this对象
         * @param {$pre} 分割条上一个容器对象
         * @param {$next} 分割条下一个容器对象
		 * @param {index} 分割条的所引值
		 * @param {rows} 布局分割容器个数
		 * @param {e} true 触发事件  false 不触发事件
		 * @param {num} 
         */		
        _switch: function(cthis, $pre, $next, index, rows, e, num){
			if((index == 0 && this.isnorth) || (this.isrowlayout && index == 0)){
				var pre = $pre, center = $next, theight = 0, cheight = 0;
				var topheight = pre.height(), centerheight = center.height();
				var state = false;
				if(!num){num = 0;}
				if(this.north_open){
					cheight = topheight + centerheight -  num; 
					theight = num;
					if(num==0){
						pre.hide();
						state = true;
					}else{
						pre.height(num);
						state = false;						
					}
					center.height(cheight);        						
					this.topval = topheight;
					if(state){
						this.north_open = false;
						//布局刷新时，保留原状态
						this.layoutconfig.north_open = false;
						this.switchTop.removeClass("jazz-row-btn-t").addClass("jazz-row-btn-t2");
					}
				}else{
  					var tval = centerheight - (this.topval - num);
					if(tval < 0){
						theight = centerheight;
						center.height(cheight);
						pre.height(theight);
						if(num==0){
							pre.show();
							state = true;							
						}else{
							pre.height(theight);
							state = false;							
						}
					}else{
						theight = this.topval; cheight = centerheight - (this.topval - num);
						center.height(cheight);
						if(num==0){
							pre.show();
							state = true;							
						}else{
							pre.height(theight);
							state = false;							
						}
					}
					if(state){
						this.north_open = true;
						//布局刷新时，保留原状态
						this.layoutconfig.north_open = true;
						this.switchTop.removeClass("jazz-row-btn-t2").addClass("jazz-row-btn-t");
					}
				}
				if(e){
					cthis._event("northswitch", null, {"north": {"height": theight}, "center": {"height": cheight}});					
				}
			}else if(((parseInt(index)+2) == rows && this.issouth) || (this.isrowlayout && (parseInt(index)+2) == rows)){
				var center = $pre, next = $next, bheight = 0, cheight = 0;
				var centerheight = center.height(), bottomheight = next.height();
				var state = false;
				if(!num){num = 0;}
				if(this.south_open){
					cheight = centerheight + bottomheight - num;
					bheight = num;
					if(num==0){
						next.hide();
						state = true;						
					}else{
						next.height(num);
						state = false;						
					}
					center.height(cheight);
					this.bottomval = bottomheight;
					if(state){
						this.south_open = false;
						//布局刷新时，保留原状态
						this.layoutconfig.south_open = false;
						this.switchBottom.removeClass("jazz-row-btn-b").addClass("jazz-row-btn-b2");
					}
				}else{
					var tval = centerheight - (this.bottomval - num);
					if(tval < 0){
						bheight = centerheight;
						center.height(cheight);
						next.height(bheight);
						if(num==0){
							next.show();
							state = true;							
						}else{
							next.height(bheight);
							state = false;							
						}
					}else{
						bheight = this.bottomval; cheight = centerheight - (this.bottomval - num);
    					center.height(cheight);
						if(num==0){
							next.show();
							state = true;							
						}else{
							next.height(bheight);
							state = false;						
						}
					}
					if(state){
						this.south_open = true;
						//布局刷新时，保留原状态
						this.layoutconfig.south_open = true;
						this.switchBottom.removeClass("jazz-row-btn-b2").addClass("jazz-row-btn-b");
					}
				}
				if(e){
					cthis._event("southswitch", null, {"south": {"height": bheight}, "center": {"height": cheight}});					
				}
			}        	
        },
        
		/**
         * @desc 计算宽度
         * @param {containerWidth} 容器的宽度
         * @param {element} 列布局的元素对象
         * @param {rows} 行数
         * @private
         */  
        _calculateHeight: function(containerHeight, element, rows){
        	//其他部分的高度
        	var otherHeight = 0; 
        	if(this.border == true && rows > 1){
        		containerHeight = containerHeight - this.borderHeight * this.bordernumber;
        		otherHeight = containerHeight - this.fixRowHeight;
        	}        	
        	
        	otherHeight = containerHeight - this.fixRowHeight;
        		
        	//百分比总宽度
        	this.percentHeight = 0;
        	for(var i=0; i<rows; i++){
        		var rowheight = this.rowheights[i];
        		var tempObject = $(element[i]);
        		//判断是否为百分比列宽
        		if(!!rowheight && (rowheight+"").indexOf('%')!= -1){
        			var n = parseInt(rowheight.substring(0, rowheight.indexOf('%')));
        			rowheight = (n/100)*otherHeight;
        			//向下取整
        			rowheight = Math.floor(rowheight);
        			tempObject.outerHeight(rowheight);
        			
        			this.percentHeight += tempObject.outerHeight();
        		}
        		//自适应高度行
        		if($.trim(rowheight) == '*'){
        			this.emptyRow = tempObject;
        		}
        	}
        	
        	//去除固定列、百分比列高度后，剩余高度
        	this.autoHeight = containerHeight - this.fixRowHeight - this.percentHeight;
        	
        	//判断未指定宽度的列的数量，仅有1列时，计算这列的宽度
        	if(this.emptyRow){
	    		this.emptyRow.outerHeight(this.autoHeight);
        	}
        	
    		//缓存容器高度,用于监听时进行比较窗体高度是否发生改变
        	this.cacheHeight = containerHeight;
        },
        
        /**
         * @desc 布局中区域的打开关闭的控制,只控制border布局
         * @param region 区域 border布局 
         *        region为east west north south
         * @param regionNumber 区域的数量
         * @param showHeight 显示高度
         */
        region: function(region, regionNumber, showHeight){
        	//用于判断是否为 border布局调用isborderlayout=true
        	var isborderlayout = this.layoutconfig.isborderlayout || false;
			if(isborderlayout == true){
				if(region=="north"){
					this._switch(this.cthis, this.bobject.north.object, this.layoutconfig["centerobject"], 0, regionNumber, true, showHeight);
					//刷新组件
					this.cthis.refreshChildComponent();
				}
				if(region=="south"){
					this._switch(this.cthis, this.layoutconfig["centerobject"], this.bobject.south.object, 1, regionNumber, true, showHeight);
					//刷新组件
					this.cthis.refreshChildComponent();
				}
			}
        }
    });

});(function( $, factory ){

	if ( jazz.config.isUseRequireJS === true ) {
		define( ['jquery', 'layout/jazz.ContainerLayout'], factory );
	} else {
		factory($);
	}	 
})(jQuery, function($){
	/**
	 * @version 1.0
	 * @name jazz.columnlayout
	 * @description 列布局。
	 * @constructor
	 * @extends jazz.containerlayout
	 */
    $.widget("jazz.columnlayout", $.jazz.containerlayout, {

    	/** @lends jazz.columnlayout */
		/**
         * @desc 设置布局
         * @param {cthis} 当前组件对象
         * @param {container} 需要渲染的容器对象
         * @param {layoutconfig} 布局需要的配置参数
         */
        layout: function(cthis, container, layoutconfig) {

        	//列布局时，禁止容器出现滚动条
        	container.css('overflow', 'hidden');
			var containerWidth = container.width();
        	var $this = this;
        	this.layoutconfig = layoutconfig; this.cthis = cthis;
			//是否允许有边框
        	this.border = (layoutconfig.border == true || layoutconfig.border == "true") || this.border || false;
        	//是否可以拖动, coloumn布局中使用
        	this.draggable = (layoutconfig.draggable == true || layoutconfig.draggable == "true") || this.draggable || false;
        	//layoutconfig.columnwidth 0.5版本属性 || layoutconfig.width 1.0版本属性， 同事支持两种写法
        	this.colwidths = layoutconfig.columnwidth || layoutconfig.width || this.colwidths;

        	//用于判断是否为 border布局调用isborderlayout=true
        	var isborderlayout = layoutconfig.isborderlayout || false;
       	
        	//设置border布局参数的默认值, 当不是border布局时，这些参数就取默认值，确保column布局正常使用
    		var west_show_border = (layoutconfig.west_show_border == false || layoutconfig.west_show_border == "false") ? false : true;
    		var east_show_border = (layoutconfig.east_show_border == false || layoutconfig.east_show_border == "false") ? false : true;
    		
    		var west_show_switch = (layoutconfig.west_show_switch == false || layoutconfig.west_show_switch == "false") ? false : true;
    		var east_show_switch = (layoutconfig.east_show_switch == false || layoutconfig.east_show_switch == "false") ? false : true;
    		
    		var west_drag = (layoutconfig.west_drag == false || layoutconfig.west_drag == "false") ? false : true;
    		var east_drag = (layoutconfig.east_drag == false || layoutconfig.east_drag == "false") ? false : true;
    		
 			var west_drag_min = layoutconfig.west_drag_min ? parseInt(layoutconfig.west_drag_min) : 0;
			var west_drag_max = layoutconfig.west_drag_max ? parseInt(layoutconfig.west_drag_max) : 0;
			var east_drag_min = layoutconfig.east_drag_min ? parseInt(layoutconfig.east_drag_min) : 0;
			var east_drag_max = layoutconfig.east_drag_max ? parseInt(layoutconfig.east_drag_max) : 0;    		

    		this.west_open = (layoutconfig.west_open == false || layoutconfig.west_open == "false") ? false : true;
    		this.east_open = (layoutconfig.east_open == false || layoutconfig.east_open == "false") ? false : true;			
    		
        	//isborderlayout == true 为border布局调用
        	//broder布局内置了column布局, 所以要通过下边设置border布局所要的参数。
        	if(isborderlayout == true){
        		this.iscolumnlayout = false; this.border = true;
        		//在border布局中定义的，存储各区域的对象
        		this.bobject = layoutconfig.bobject;
        		this.iswest = layoutconfig.regionnumber.west == 1 ? true : false;        		
        		this.iseast = layoutconfig.regionnumber.east == 1 ? true : false;
        	}else{
        		//用于判断是否为列布局使用，而不是border布局
        		this.iscolumnlayout = true;
        	}
			 
        	var cols = this.colwidths.length || 0;   //定义的列数
        	if(cols == 0){
        		jazz.error("行布局的rowheight设置错误, 例： ['200', '30%', '*']");
        	}
        	
        	//计算全部固定列的宽(固定列 px 非固定列 % *)
        	this.fixColumnWidth = 0; 
        	
        	//存储非固定列的对象
        	this.noFixColumn = [];   
        	
        	//当有收缩按钮时，通过点击收缩按钮后，记录上一次的值, 保证能通过这些值还原上一次操作的状态
        	this.leftval = 0;  this.rightval = 0;      		
        	
        	var _cc = container.children(".jazz-column-element");
        	if(_cc.length == 0){ //_cc.length==0时，首次渲染布局
        		this.layoutdiv = container.children();
        		this.borderWidth = 0;
        		this.bordernumber = 0;
        		this.countTimes = 0;
        	}else{
        		this.layoutdiv = _cc;
        		this.countTimes++;
				//当列布局时，组件height="auto"时，为分割条赋高度
				var _maxH = 0;
				if(this.iscolumnlayout && cthis.options.height=="auto"){
					$.each(container.find(".jazz-column-element"), function(){
						if(_maxH < $(this).outerHeight()){
							_maxH = $(this).outerHeight();
						}
					});
					container.find(".jazz-column-border").outerHeight(_maxH);
				}
        	}
        	
        	//this.layoutdiv = container.children().filter(":visible");	//列布局的列元素对象
        	
        	for(var i=0; i<cols; i++){
    			var tempObject = $(this.layoutdiv[i]);

    			//tempObject.removeAttr("style");  //去除原有样式
        		tempObject.addClass('jazz-column-element');
        		if(this.countTimes===0 && this.border == true && cols > 1 && (i+1) != cols) {
        			//border布局时判断是否存在边框
        			if( (isborderlayout==true && ( (west_show_border && this.iswest && i==0) || (east_show_border == true && this.iseast && (i+2)==cols) ) )
        					|| this.iscolumnlayout){
        				
	        			var $b = $('<div index="'+i+'" class="jazz-column-border"></div>');
	        			if( isborderlayout==true && (west_show_switch && this.iswest && i==0) ){
	        				this.switchLeft = $('<div class="jazz-column-btn jazz-column-btn-l"></div>').appendTo($b);
	        			}else if(isborderlayout==true && (east_show_switch && this.iseast && (i+2)==cols)){
	        				this.switchRight = $('<div class="jazz-column-btn jazz-column-btn-r"></div>').appendTo($b);
	        			}
	        			tempObject.after($b);
	        			//this.borderObj.push($b);
	        			this.bordernumber += 1;
	        			
	        			if( (isborderlayout==true && ((west_drag && this.iswest && i==0) || (east_drag && this.iseast && (i+2)==cols))) 
	        					|| (this.iscolumnlayout && this.draggable)){
	        				$b.addClass("jazz-column-border-cursor");
	        			}
						
	        			//获取边框的宽度
	        			this.borderWidth = $b.outerWidth() || 0;
	        			
	        			if(isborderlayout==true && ((west_show_switch && this.iswest && i==0) || (east_show_switch && this.iseast && (i+2)==cols)) ){
		        			//只允许第一列与最后一列，通过点击按钮进行收缩
		        			$b.children(".jazz-column-btn").off("click.ct").on("click.ct", function(){
		        				var p = $(this).parent();
		        				var $pre = p.prev(), $next = p.next();
		        				var index = p.attr("index");

		        				$this._switch(cthis, $pre, $next, index, cols, true);
	        					//刷新组件
								if(isborderlayout==true || cthis.options.height!="auto"){console.log("border1");
									cthis.refreshChildComponent();
								}else{console.log("column1");
									jazz.refreshComponentSize();
								}
		        			});
	        			}
	        		}
        		}
		
        		var _cw = this.colwidths[i]+"";
        		if(_cw != "*" && _cw.indexOf('%') == -1){  //固定宽度的列
        			tempObject.outerWidth(_cw);
//        			this.calculatewidth[i] = _cw;
        			var a = tempObject.outerWidth();
        			if(a < 0){ a = 0; }
        			this.fixColumnWidth = this.fixColumnWidth + a;  			
        		}else{  //非固定列
        			this.noFixColumn.push(tempObject);
        		}
        	}
        	
        	if(cols > 0){
        		if(container.children(".jazz-clear-both").length==0){
        			container.append('<div class="jazz-clear-both"></div>');
        		}
        	}
        	
			container.off('mousedown.column').on('mousedown.column', function(event){
				var target = event.target, $target = $(target);
				
				//用于存放位置坐标移动范围, leftborder存放拖动时，左侧边界值  
			    //areawidth存放各区域的宽度，通过leftborder和areawidth的相加，确定能拖动的右侧边界值
			    //areaobject不同区域的对象
				$this.leftborder = [], $this.areawidth = [], $this.areaobject = [];
				
				if($target.is('.jazz-column-border')){
					//获取被点击边框的索引值
				    var index = parseInt($target.attr("index"));
				    				    
				    //if判断是否允许在border布局和column布局中，是否允许拖动分割线
				            //border布局时
				    if( ( isborderlayout==true && ( (west_drag && index == 0 && $this.iswest) || (east_drag && (index+2)==cols && $this.iseast) ) )
				    	       //可拖拽的列布局
				    		|| ($this.draggable == true && $this.iscolumnlayout) ){
						//点击border边框时的坐标点
					    $this.clo_x = $target.offset().left;
					    
					    //点击到拖动区域时，出现拖动线
					    $this.dragcol = $('<div class="jazz-column-drag" style="display:none" islayout="no"></div>').appendTo(document.body);
					    
	    				$this.dragcol.css({display: 'block', top: $target.offset().top, left: $this.clo_x, height: $target.height() - 2});
	    				
	    				//去除在拖动过程中的选中状态
					    if (!$.browser.mozilla) {
		                    $(document).on("selectstart", function(){return false; });
		                }else {
		                    $("body").css("-moz-user-select", "none");
		                }
					    
				    	$.each(container.children(".jazz-column-element"), function(i, obj){
				    		//确定每一列移动的范围
				    		$this.leftborder.push($(obj).offset().left);
				    		$this.areawidth.push($(obj).width());
				    		$this.areaobject.push($(obj));
				    	});
				    	
				    	//获取拖动的原始距离值
				    	var ldragwidth = $this.areawidth[index];
				        var rdragwidth = $this.areawidth[index + 1];

					    //抛出border布局时，开始拖动的事件
					    if(isborderlayout == true){
					    	if(index==0 && $this.iswest){
					    		if(!$this.west_open){ ldragwidth = 0; }
					    		cthis._event("westdragstart", null, {"west": {"width": ldragwidth}, "center": {"width": rdragwidth}});	
					    	}else{
					    		if(!$this.east_open){ rdragwidth = 0; }
					    		cthis._event("eastdragstart", null, {"center": {"width": ldragwidth}, "east": {"width": rdragwidth}});
					    	}
					    }else{
						    //抛出column布局时，开始拖动时的事件
						    cthis._event("columndragstart", null, {index: index, left: ldragwidth, right: rdragwidth});					    	
					    }
					    
				    	$(document).off('mousemove.column mouseup.column').on('mousemove.column', function(e){
				    		if($this.dragcol){
				    			//左侧边界值
				    			var leftborder = $this.leftborder[index];
				    			//右侧边界值
				    			var rightborder = $this.leftborder[index+1] + $this.areawidth[index+1] - $this.dragcol.outerWidth();
				    			
				    			if($this.iseast && !$this.east_open && (index+2)==cols){
				    				rightborder = $target.offset().left;
				    			}
				    			var eX = e.pageX;
				    			
				    			//确定拖动的范围
				    			if(isborderlayout == true && (leftborder < eX && eX < rightborder)){
				    				if(index==0 && $this.iswest){
				    					if((west_drag_min < eX && eX < west_drag_max) || (west_drag_min===0 && west_drag_max===0)){
						    				$this.moving = eX;
						    				$this.dragcol.css({left: $this.moving});			    						
				    					}
				    				}else{
				    					if(((containerWidth - east_drag_max) < eX && eX < (containerWidth - east_drag_min)) 
				    							|| (east_drag_max===0 && east_drag_min===0)){
						    				$this.moving = eX;
						    				$this.dragcol.css({left: $this.moving});				    						
				    					}
				    				}
				    			}else if(leftborder < eX && eX < rightborder){
				    				$this.moving = eX;
				    				$this.dragcol.css({left: $this.moving});
				    			}
				    		} 
				    	}).on('mouseup.column', function(e){
        					var _rw = $this.areawidth[index + 1];
        					var _lw = $this.areawidth[index];
				    		
	        				//通过this.moving移动的距离判断是否移动
	        				if($this.moving){
	        					var _x = $this.dragcol.offset().left - $this.clo_x;	  //移动的距离
	        					var r = $this.areaobject[index + 1];
	        					var l = $this.areaobject[index];
	        					
	        					//border布局
	        					if(isborderlayout == true){
	        						//拖动west
	        						if(index==0 && $this.iswest){
	        							if(!$this.west_open){
	        								_lw = 0;
	        								if(_x > 0){
	        									$this.west_open = true;
	        								}
	        							}
	        							_rw = _rw - _x;  _lw = _lw + _x;	
	        							r.outerWidth(_rw);
	        							l.show().outerWidth(_lw);
	        						//拖动east	
	        						}else if($this.iseast){
	        							if(!$this.east_open){
	        								_rw = 0;
	        								if(_x < 0){
	        									$this.east_open = true;
	        								}
	        							}
	        							_rw = _rw - _x;  _lw = _lw + _x;	
	        							l.outerWidth(_lw);
	        							r.show().outerWidth(_rw);
	        						}
	        					}else{
	        						//列布局
		        					_rw = _rw - _x;  _lw = _lw + _x;	
		        					r.outerWidth(_rw);
		        					l.outerWidth(_lw);	        						
	        					}
	        					
	    					    //抛出border布局时，结束拖动的事件
	    					    if(isborderlayout == true){
	    					    	if(index==0 && $this.iswest){
	    					    		//通过拖动改变原宽度需要记录拖动后的宽度
	    					    		layoutconfig["width"][0] = _lw;					    		
	    					    		cthis._event("westdragstop", null, {"west": {"width": _lw}, "center": {"width": _rw}});	
	    					    	}else{
	    					    		var a = layoutconfig["width"]["length"] || 2;
	    					    		layoutconfig["width"][a-1] = _rw;
	    					    		cthis._event("eastdragstop", null, {"center": {"width": _lw}, "east": {"width": _rw}});
	    					    	}
	    					    }else{
	    					    	cthis._event("columndragstop", null, {index: index, left: _lw, right: _rw});
	    					    }
    					    	//刷新组件
								if(isborderlayout==true || cthis.options.height!="auto"){
									cthis.refreshChildComponent(); console.log("border2");
								}else{console.log("column2");
									jazz.refreshComponentSize();
								}
	        				}else{
	        					if(ldragwidth != _lw && rdragwidth != _rw){  
		    					    //抛出border布局时，结束拖动的事件
		    					    if(isborderlayout == true){
		    					    	if(index==0 && $this.iswest){
		    					    		//通过拖动改变原宽度需要记录拖动后的宽度
		    					    		layoutconfig["width"][0] = _lw;
		    					    		cthis._event("westdragstop", null, {"west": {"width": _lw}, "center": {"width": _rw}});	
		    					    	}else{
		    					    		var a = layoutconfig["width"]["length"] || 2;
		    					    		layoutconfig["width"][a-1] = _rw;
		    					    		cthis._event("eastdragstop", null, {"center": {"width": _lw}, "east": {"width": _rw}});
		    					    	}
		    					    }else{
		    					    	cthis._event("columndragstop", null, {index: index, left: _lw, right: _rw });
		    					    }	        						
	        					}
	        				}
	
	        				$this.dragcol.remove();
	        				//将移动的距离清空
	        				$this.moving = "";
	        				
	        				//拖动结束后，还原状态
	        				if (!$.browser.mozilla) {
	        					$(document).off("selectstart");
	        				}else{
	        					$("body").css("-moz-user-select", "auto");
	        				}
	        				
	        				$(document).off('mousemove.column mouseup.column');
	        			});
					}
				
				}
				
			});        	

           	//容器的总宽度
        	//var containerWidth = Math.min(container.width(), container.get(0).clientWidth);
        	
			this._calculateWidth(containerWidth, this.layoutdiv, cols);

			if(isborderlayout == true){
				if(this.west_open == false && this.iswest){
					this.west_open = true;
					this._switch(cthis, this.bobject.west.object, this.bobject.center.object, 0, cols, false);
				}
				if(this.east_open == false && this.iseast){
					this.east_open = true;
					this._switch(cthis, this.bobject.center.object, this.bobject.east.object, 1, cols, false);
				}
			}
        },
        
        _switch: function(cthis, $pre, $next, index, cols, e, num){
			if((index == 0 && this.iswest) || (this.iscolumnlayout && index == 0)){
				var pre = $pre, center = $next, lwidth = 0, cwidth = 0;
				var leftwidth = pre.width(), centerwidth = center.width();
				var state = false;
				if(!num){num = 0;}
				if(this.west_open){
					cwidth = leftwidth + centerwidth -  num;
					lwidth = num;
					if(num == 0){
						pre.hide();
						state = true;
					}else{
						pre.width(num);
						state = false;
					}
					center.width(cwidth);					
					this.leftval = leftwidth;
					if(state){
						this.west_open = false;
						//布局刷新时，保留原状态
						this.layoutconfig.west_open = false;
						this.switchLeft.removeClass("jazz-column-btn-l").addClass("jazz-column-btn-l2");
					}
				}else{
					var tval = centerwidth - (this.leftval - num);
					if(tval < 0){
						lwidth = centerwidth;
						center.width(cwidth);
						pre.width(lwidth);
						if(num==0){
							pre.show();
							state = true;							
						}else{
							pre.width(lwidth);
							state = false;							
						}
					}else{
						lwidth = this.leftval; cwidth = centerwidth - (this.leftval - num);
						center.width(cwidth);
						if(num==0){
							pre.show();
							state = true;
						}else{
							pre.width(lwidth);
							state = false;						
						}
					}
					if(state){
						this.west_open = true;
						//布局刷新时，保留原状态
						this.layoutconfig.west_open = true;					
						this.switchLeft.removeClass("jazz-column-btn-l2").addClass("jazz-column-btn-l");
					}
				}
				if(e){
					cthis._event("westswitch", null, {"west": {"width": lwidth}, "center": {"width": cwidth}});
				}
			}else if(((parseInt(index)+2) == cols && this.iseast) || (this.iscolumnlayout && index == (parseInt(index)+2) == cols)){
				var center = $pre, next = $next, rwidth = 0, cwidth = 0;
				var centerwidth = center.width(), rightwidth = next.width();
				var state = false;
				if(!num){num = 0;}
				if(this.east_open){
					cwidth = centerwidth + rightwidth - num;
					rwidth = num;
					if(num==0){
						next.hide();
						state = true;						
					}else{
						next.width(num);
						state = false;					
					}
					center.width(cwidth);
					this.rightval = rightwidth;
					if(state){
						this.east_open = false;
						//布局刷新时，保留原状态
						this.layoutconfig.east_open = false;						
						this.switchRight.removeClass("jazz-column-btn-r").addClass("jazz-column-btn-r2");
					}
				}else{
					var tval = centerwidth - (this.rightval - num);
					if(tval < 0){
						rwidth = centerwidth;
						center.width(cwidth);
						next.width(rwidth);
						if(num==0){
							next.show();
							state = true;							
						}else{
							next.width(rwidth);
							state = false;							
						}
					}else{
						rwidth = this.rightval; cwidth = centerwidth - (this.rightval - num);
						center.width(cwidth);
						if(num==0){
							next.show();
							state = true;							
						}else{
							next.width(rwidth);
							state = false;							
						}
					}
					if(state){
						this.east_open = true;
						//布局刷新时，保留原状态
						this.layoutconfig.east_open = true;					
						this.switchRight.removeClass("jazz-column-btn-r2").addClass("jazz-column-btn-r");
					}
				}
				if(e){
					cthis._event("eastswitch", null, {"east": {"width": rwidth}, "center": {"width": cwidth}});					
				}
			}
        },
        
		/**
         * @desc 计算宽度
         * @param {containerWidth} 容器的宽度
         * @param {element} 列布局的元素对象
         * @param {cols} 列数
         * @private
         */
        _calculateWidth: function(containerWidth, element, cols){
        	 //其他部分的宽度
        	var otherWidth = 0;
        	if(this.border == true && cols > 1){
        		containerWidth = containerWidth - this.borderWidth * this.bordernumber;
        		otherWidth = containerWidth - this.fixColumnWidth;
        	}
        	
        	otherWidth = containerWidth - this.fixColumnWidth;
        	
        	//百分比总宽度
        	this.percentWidth = 0;
        	for(var i=0; i<cols; i++){
        		var colwidth = this.colwidths[i];
        		var tempObject = $(element[i]);
        		//判断是否为百分比列宽
        		if(!!colwidth && (colwidth+"").indexOf('%') != -1){
        			var n = parseInt(colwidth.substring(0, colwidth.indexOf('%')));
        			colwidth = (n/100) * otherWidth;
        			//向下取整数
        			colwidth = Math.floor(colwidth);
//        			this.calculatewidth[i] = colwidth;
        			tempObject.outerWidth(colwidth);
        			
        			this.percentWidth += tempObject.outerWidth();
        		}
        		//自适应宽度列
        		if($.trim(colwidth) == '*'){
        			this.emptyColumn = tempObject;
        		}
        	}
        	
        	//去除固定列、百分比列宽度后，剩余宽度
        	this.autoWidth = containerWidth - this.fixColumnWidth - this.percentWidth;
        	
        	//判断未指定宽度的列的数量，仅有1列时，计算这列的宽度
        	if(this.emptyColumn){
	    		this.emptyColumn.outerWidth(this.autoWidth);
        	}
    		
    		//缓存容器宽度,用于监听时进行比较窗体宽度是否发生改变
        	this.cacheWidth = containerWidth;
        },
        
        /**
         * @desc 布局中区域的打开关闭的控制,只控制border布局
         * @param region 区域 border布局 
         *        region为east west north south
         * @param regionNumber 区域的数量
         * @param showWidth 显示宽度
         */
        region: function(region, regionNumber, showWidth){
        	//用于判断是否为 border布局调用isborderlayout=true
        	var isborderlayout = this.layoutconfig.isborderlayout || false;
			if(isborderlayout == true){
				if(region=="west"){
					this._switch(this.cthis, this.bobject.west.object, this.bobject.center.object, 0, regionNumber, true, showWidth);
					//刷新组件
					this.cthis.refreshChildComponent();
				}
				if(region=="east"){
					this._switch(this.cthis, this.bobject.center.object, this.bobject.east.object, 1, regionNumber, true, showWidth);
					//刷新组件
					this.cthis.refreshChildComponent();
				}
			}
        }
    });

});
(function($, factory) {

    if (jazz.config.isUseRequireJS === true) {
        define(['jquery', 'layout/jazz.ContainerLayout'], factory);
    } else {
        factory($);
    }
})(jQuery, function($) {
    /**
     * @version 0.5
     * @name jazz.tablelayout
     * @description 表格布局。
     * @constructor
     * @extends jazz.containerlayout
     * @requires
     * @example $('#panel_id').tablelayout();
     */
    $.widget("jazz.tablelayout", $.jazz.containerlayout, {

        /** @lends jazz.tablelayout */
        /**
         * @desc 设置布局
         * @param {cthis} 当前组件对象
         * @param {container} 当前组件对象
         * @param {config} 布局需要的配置参数
         * @example
         */
        layout: function(cthis, container, config) {
            //1.磊哥讲解 没看懂！！！
            container.addClass("jazz-layout");
            var flag = false;
            var columnwidth = config.columnwidth || config.width;
            /*
             * oldcols标示原来的table的列数
             * 第一次加载的时候肯定是undefined，所以可以借此获得子对象
             */
            if (!this.oldcols) {
                //初始化时候执行一次
                this.oldcols = columnwidth.length;
                this.newcols = 1;
                this.olditems = container.children(); //获取全部的子对象;
            } else {
                //新列数的默认值根据第一次时候的初始化值，应该是1
                this.newcols = columnwidth.length || 1;
                flag = true;
            }
            this._align(this.olditems, container, config);
            //最小阀值超过总宽度时候必须出滚动条
//            $(container).css("overflow", "hidden");
            this.oldcols = this.newcols;
            if (flag) {
                cthis._refreshChildWidth();
            }

        },

        /**
         * @desc 设置布局
         * @param {items} 需要布局的组件集合
         * @param {container} 当前布局容器对象
         * @param {config} 组件布局配置对象
         * @private
         */
        _align: function(items, container, config) {
            /**
             * container 就是 this.element
             * container 就是 this.element
             * container 就是 this.element
             * 重要的话说三遍
             * items就是container里面的children对象集合
             * */
            //1.tablelayout中有子元素才进行布局。
            if (items && items.length > 0) {
                var columnwidth = config.columnwidth || config.width;
                var cols = columnwidth.length; //table行数不设定，列数设定
                // 一切改变之前先验证是否可以改
                /*
                 * 如果设置的width为2列[100px,*]则意味着当前的panel的宽度不能小于table所需要的最小阀值100px
                 * 但是如果巧了，确实小于100px，则会出现以下三种情况
                 * 1.第一次初始化这个组件；结果：连table都没有生成直接就是一个空白的界面（时候要提示错误？？）
                 * 2.初始化了这个组件，由于父级panel改变大小，小于最小阀值；结果：table中的宽度并没有变化依旧是原来的样子；出现滚动条
                 * 3.初始化了组件重新设置columnwidth属性导致新的最小阀值大于当前panel宽度，结果：强制变化，但是出现滚动条
                 * */
                if (columnwidth.length == 0) {
                    jazz.info("【table 布局】width未设置布局列宽，请确定重设。");
                    return false;
                }
                if (!this.validateColumnWidthFormat(columnwidth, tableWidth)) {
                    jazz.info("【table 布局】width设置数值格式不正确。");
                    return false;
                }
                
                //2 为重新计算布局做准备
                //2.1. 计算this.element布局元素的宽度
                var tableWidth = $(container).outerWidth(true) - $(container).scrollLeft();
                //2.2. 将全部items从table中转移到缓存池中
                var item;
                this.tempCachePool = $("<div style=\"display:none\"></div>");
                this.tempCachePool.appendTo(this.element);
                for(var i = 0, i_len = items.length; i < i_len; i++){
                    item = $(items[i]);
//                    if(item.attr("vtype") == "hiddenfield" || item.attr("vtype") == "toolbar") continue;
                	this.tempCachePool.append(item);
                }
                //3.生成布局的table表格
                if (!!this.table) {
                    //如果不是第一次生成则清空table
                    this.table.children().remove();
                }else{
                    //第一次的话默认生成一个table加载进去
                    this.table = $("<table cellspacing='0' cellpadding='0' style='border-collapse: collapse; table-layout: fixed; width: 100%;'></table>");
                    this.table.appendTo(container);
                }
//                this.table = null;
//                this.table = $("<table cellspacing='0' cellpadding='0' style='border-collapse: collapse; table-layout: fixed; width: " + tableWidth + "px;" + "'></table>");

                //4.tablelayout布局中若是存在toolbar组件进行位置预处理（赵永生改）
                //toolbar/hidefield不属于table内部的元素 所以单独处理
                if($(items[0]).attr("vtype") == "toolbar"){
                    //如果在前面则放在table前面
                    this.table.before($(items[0]));
                }else if($(items[i_len-1]).attr("vtype") == "toolbar"){
                    //i_len可用 局部变量问题
                    //如果是后面则放在table后面
                    this.table.after($(items[i_len-1]));
                }
//                var t = container.children("div:last-child");
//                if (t.attr("vtype") == "toolbar") {
//                    this.table.prependTo(container);
//                } else {
//                    this.table.appendTo(container);
//                }
                //5.根据layoutconfig的参数生成this.table dom结构

                var colgroup = "<colgroup>";
                for (var i = 0; i < cols; i++) {
                    colgroup += "<col />";
                }

                colgroup += "</colgroup>";
                colgroup = $(colgroup).appendTo(this.table);
                this._calculateTableWidth($(this.table), columnwidth);

                //6.缓存tablelayout布局容器宽度
                var $this = this;
                $this.options.cacheContainerWidth = tableWidth;
                //	        	$(container).on('resize.tableLayout', function(){
                //	        		var tableCurrentWidth = $(this).width();
                //	        		if($this.options.cacheContainerWidth != tableCurrentWidth){
                //	        			$this.options.cacheContainerWidth = tableCurrentWidth;
                //	        			$($this.table).width(tableCurrentWidth+"px");
                //	        			$this._calculateTableWidth(this,columnwidth);
                //	        		}
                //	        	});

                this.tbody = $("<tbody></tbody>").appendTo(this.table);

                var tr = null;
                if (!!config.rowheight) {
                    tr = $("<tr style='height:" + config.rowheight + "'></tr>");
                } else {
                    tr = $("<tr></tr>");
                }
                var td = $("<td style='vertical-align: top;'></td>");
                if (config.border) {
                    td.addClass("jazz-table-innerborder");
                }
                for (var i = 0; i < cols; i++) {
                    var newtd = td.clone();
                    newtd.appendTo(tr);
                }
                tr.clone().appendTo(this.tbody);

                //7.将待放入布局中的元素逐个放入tablelayout布局中
                var rowIndex = 0,
                    colIndex = 0;
                for (var i = 0; i < items.length; i++) {
                    var item = items[i];

                    //8.特殊处理元素中hiddenfield 和 toolbar组件
                    var vtype = $(item).attr('vtype'); //, style = $(item).css('display');
                    if (vtype == "hiddenfield" || vtype == "toolbar") {
                        this.table.after($(items[i]));
                        /*$(container).after($(item));
                        if($(item).attr('location')=="top"){
                        	$(item).insertBefore($(container).parent());
                        }*/
                        continue;
                    }

                    var rowspanNum = parseInt($(item).attr("rowspan")) || 1;
                    var colspanNum = parseInt($(item).attr("colspan")) || 1;
                    //9.校验该元素colspan是否超过了预设总列数
                    if (colspanNum > cols) {
                        jazz.info("【跨列布局错误】当前容器中第" + (i + 1) + "个元素colspan='" + colspanNum + "' 大于布局列数 cols='" + cols + "'。 ");
                        break;
                    } else {
                        //10.计算获取下个元素放入到tbody中的行列坐标
                        var nextIndex = this._combinedTdCell(item, tr, cols, rowIndex, colIndex, rowspanNum, colspanNum);
                        rowIndex = nextIndex.rowIndex;
                        colIndex = nextIndex.colIndex;
                    }
                }
                
                
                //12.所有过程完毕删除临时变量
                this.tempCachePool.remove();
                this.tempCachePool = null;
                
            }
        },
        /**
         * @desc 根据定义的columnWidth计算每一列的宽度
         * @param {table} this.element的表格，放置表格布局元素的table
         * @param {columnWidth} 列宽定义值 如['25%','20%','30%','25%']
         * @private
         */
        _calculateTableWidth: function(table, columnWidth) {
            var width_table = $(table).width();
            var re = /^[0-9]+.?[0-9]*$/;
            var fixedColumnWidth = 0;
            var exceptFixedColumnWidth = 0;
            var percentColumnWidth = 0;
            var hasPercentWidth = false;
            var autoWidthNums = 0;
            var tempColumnWidth = [];
            /*
             * 计算逻辑如下：
             * 1.首先计算固定值（纯数字或含px的字符值），据此合计fixedColumnWidth；
             * 2.其次除去固定值的剩余宽度，exceptFixedColumnWidth = width_table - fixedColumnWidth;
             * 3.再次合计百分比的总宽度percentColumnWidth
             * 5.最后计算除去固定值和百分比总宽度  leftColumnWidth = exceptFixedColumnWidth - percentColumnWidth;
             * 6.计算剩下的列数宽度，为等分剩余宽度。
             */

            for (var i = 0, m = columnWidth.length; i < m; i++) {
                var temp = columnWidth[i];
                if (temp.indexOf('px') != -1 || re.test(temp)) {
                    fixedColumnWidth += parseFloat(columnWidth[i]);
                }
                if (!hasPercentWidth && temp.indexOf('%') != -1) {
                    hasPercentWidth = true;
                }
                if ($.trim(temp) == '*') {
                    autoWidthNums++;
                }
                tempColumnWidth[i] = temp;
            }
            exceptFixedColumnWidth = width_table - fixedColumnWidth;
            if (hasPercentWidth) {
                //exceptFixedColumnWidth = width_table-fixedColumnWidth;
                for (var i = 0, m = tempColumnWidth.length; i < m; i++) {
                    var temp = tempColumnWidth[i];
                    if (temp.indexOf('%') != -1) {
                        var a = temp.substring(0, temp.indexOf('%'));
                        var b = Math.round((a / 100) * exceptFixedColumnWidth);
                        tempColumnWidth[i] = b + "px"; //将原%数值改为px数值
                        percentColumnWidth += b;
                    }
                }
            }

            if (autoWidthNums > 0) {
                var leftColumnWidth = exceptFixedColumnWidth - percentColumnWidth;
                for (var i = 0, m = tempColumnWidth.length; i < m; i++) {
                    if ($.trim(tempColumnWidth[i]) == '*') {
                        tempColumnWidth[i] = Math.round(leftColumnWidth / autoWidthNums) + "px"; ////将原*星号自适应标志改为px数值
                    }
                }
            }

            //只设置columnWidth中定义的值，对于没有设置列宽的列，不予赋值
            for (var i = 0; i < tempColumnWidth.length; i++) {
                $(table).find("colgroup").children().eq(i).attr("width", tempColumnWidth[i]);
            }
        },
        validateColumnWidthFormat: function(colsWidth, tableWidth) {
            //先验证是不是*或者px/%百分比结尾的
            var re = /^[0-9]+.?[0-9]*[(px)%]?$/;
            var totalWidth = 0;
            var flag = true;
            for (var i = 0; i < colsWidth.length; i++) {
                var temp = colsWidth[i];
                if (re.test(temp) || $.trim(temp) == '*') {
                    /* 取消宽度效验
                     * 原因：tablewidth本来就小，改变columnwidth时候最小阀值大于tablewidth时候
                     * frompanel那级已经变了，如果这层没有变化就会出问题,数据前后不一致
                    //符合列宽定义标准
                    if (temp.indexOf("px") != -1) {
                        totalWidth += parseInt(temp.replace("px", ""));
                    } else if (temp.indexOf("%") != -1) {
                        totalWidth += tableWidth * parseInt(temp.replace("%", "") / 100);
                    }
                    */
                } else {
                    flag = false;
                    break;
                }
            }
            /* 取消宽度效验
            //在验证所有px的加起来是不是超过了table的宽度
            if (totalWidth > tableWidth) {
                flag = false;
            }
            */
            return flag;
        },

        _combinedTdCell: function(item, tr, cols, rowIndex, colIndex, rowspanNum, colspanNum) {
            //1.根据当前的colIndex校验该rowIndex行能否放得下colspanNum的元素
            var flag = true;
            while (flag) {
                //该行放不下的时候，另起一行
                if (colIndex + colspanNum > cols) {
                    colIndex = 0;
                    rowIndex++;
                }

                var trs = this.tbody.children("tr").length;
                if (rowIndex + 1 > trs) {
                    $(tr).clone().appendTo(this.tbody);
                    colIndex = 0;
                    flag = false;
                } else {
                    this.tbody.children("tr:eq(" + rowIndex + ")").children("td").each(function(i) {
                        if (i >= colIndex && i < cols) {
                            if ($(this).css("display") != "none") {
                                colIndex = i;
                                return false;
                            }
                        }
                    });
                    if (colIndex + colspanNum > cols) {
                        //colIndex=i,折行，继续下一行校验
                    } else {
                        //校验是否有colspanNum个display的单元格
                        var isContinus = true;
                        this.tbody.children("tr:eq(" + rowIndex + ")").children("td").each(function(i) {
                            if (i >= colIndex && i < colIndex + colspanNum) {
                                if ($(this).css("display") == "none") {
                                    isContinus = false;
                                }
                            }
                        });
                        if (isContinus) {
                            flag = false;
                        } else {
                            colIndex++; //下一个单元格继续校验
                        }
                    }
                }
            }

            //2.放置数据，合并隐藏单元格
            var targetTD = this.tbody.children("tr:eq(" + rowIndex + ")").children("td:eq(" + colIndex + ")");
            $(item).appendTo(targetTD);

            if (rowspanNum > 1 || colspanNum > 1) {
                //根据rowspan和rowIndex确认是否添加tr
                var trCounts = this.tbody.children("tr").length;
                if (rowspanNum + rowIndex > trCounts) {
                    for (var r = 1; r <= rowspanNum + rowIndex - trCounts; r++) {
                        var newtr = tr.clone();
                        newtr.appendTo(this.tbody);
                    }
                }
                //根据rowIndex确认跨行范围，然后逐个td单元格进行跨列或者隐藏处理
                this.tbody.children("tr").each(function(n) {
                    if (n >= rowIndex && n < rowIndex + rowspanNum) {
                        $(this).children("td").each(function(m) {
                            if (m >= colIndex && m < colIndex + colspanNum) {
                                if (n == rowIndex && m == colIndex) {
                                    $(this).attr({
                                        "rowspan": rowspanNum,
                                        "colspan": colspanNum
                                    });
                                } else {
                                    //$(this).hide();
                                    $(this).remove();
                                }
                            }
                        });
                    }
                });
            }
            //3.最后得到放置下一个item元素的预定位置
            //当前位置（rowIndex，colIndex，rowspanNum，colspanNum）
            if (colIndex + colspanNum < cols) {
                colIndex += colspanNum;
                //此时，colIndex有可能是在display==none的td位置上，就需要下面程序的判断处理
            } else {
                colIndex = 0;
                rowIndex++;
                //a.此时rowIndex有可能会大于tbody中已有的总tr行数，因为是新的一行那么colIndex=0这
                //个新行首个单元格display!=none，所以colIndex可以确定为colIndex=0;
                //b.此时也不必再进行新增行的$(tr).clone().appendTo(this.tbody);，这个操作由combinedTdCell方法
                //开头while()循环中处理

            }

            var next = true;
            var nextTdIndex = null;
            while (next) {

                var trsum = this.tbody.children("tr").length;
                if (rowIndex + 1 > trsum) {
                    //$(tr).clone().appendTo(this.tbody);
                    colIndex = 0;
                    next = false;
                } else {
                    this.tbody.children("tr:eq(" + rowIndex + ")").children("td").each(function(i) {
                        if (i >= colIndex && i < cols) {
                            if ($(this).css("display") != "none") {
                                colIndex = i;
                                next = false;
                                return false;
                            }
                        }
                    });
                }
                if (next) {
                    colIndex = 0;
                    rowIndex++;
                } else {
                    nextTdIndex = {
                        "rowIndex": rowIndex,
                        "colIndex": colIndex
                    };
                }
            }

            return nextTdIndex;
        },
        hiddenRowByRowIndex: function(rowIndex) {
            var that = this;

            //$(that.element[0]).find("table tr").slice():eq("+(rowIndex-1)+")").css("display","none");
        },
        showRowByRowIndex: function(rowIndex) {
            var that = this;
            $(that.element[0]).find("table tr:eq(" + (rowIndex - 1) + ")").css("display", "");
        }
    });

});

(function($) {

	/**
	 * @version 0.5
	 * @name jazz.cardlayout
	 * @description 卡片布局。
	 * @constructor
	 * @extends jazz.containerlayout
	 * @requires
	 * @example $('#panel_id').cardlayout();
	 */
    $.widget("jazz.cardlayout", $.jazz.containerlayout, {

        /** @lends jazz.cardlayout */

		/**
         * @desc 设置布局
         * @param {cthis} 当前组件对象
         * @param {container} 需要渲染的容器对象
         * @param {config} 需要渲染的容器对象
		 * @throws
		 * @example
         */
        layout: function(cthis, container, config) {
        	var buttondisplay = this.options.cardlayoutObject.buttondisplay = config.buttondisplay;
        	var cardlayoutObject = this.options.cardlayoutObject;
        	cardlayoutObject.container = container;
        	cardlayoutObject.$this = this;
        	
        	var obj = container.children();
        	if(!obj[0]){
        		jazz.error('card layout is error!'); return false;
        	}
        	
        	var w = obj[0].width || $(obj[0]).outerWidth(true);
        	
        	var num = obj.size();
        	var ulWidth = num * w;
        	cardlayoutObject.width = w;
        	
        	cthis.element.addClass('jazz-cardpanel');  
        	
        	
        	var box = $('<div class="jazz-cardpanel-box"></div>').appendTo(container);
        	var content = $('<div class="jazz-cardpanel-content"></div>').appendTo(box);
        	var ul = $('<div class="jazz-cardpanel-ul" style="width:'+ulWidth+'px"></div>').appendTo(content);
			$.each(obj, function(i, el){
        		var li = $('<div class="jazz-cardpanel-li" style="width:'+cardlayoutObject.width+'px" >').appendTo(ul);
        		li.append(el);
        	});
			
			var h = ul.height();
        	
			if(buttondisplay===true){
			    this.paginator = $('<div></div>').appendTo(box);
				this.paginator.paginator({
					template: '{PageLinks}',
					rows: 1,
					totalRecords: obj.size(),
					click: function(e, ui){
						cardlayoutObject.point(ui.page, num);
					}
				});
				this.paginator.removeClass('jazz-widget-header');
				cardlayoutObject.paginator = this.paginator;
			}
			
			
			//重新计算高度
			$.each(obj, function(i, el){
				$(el).height(h - cardlayoutObject.height);
			});

			if(buttondisplay===true){
				this._buildButton(box, num);
			}

        	box.css({height: h});
        	content.css({width: cardlayoutObject.width, height: h - cardlayoutObject.height});
       	
        },
        
		/**
         * @desc 设置布局
         * @param {box} box容器
         * @param {num} 滚动页数
		 * @example
         */        
		_buildButton: function(box, num){
			var $this = this;
			var cardlayoutObject = this.options.cardlayoutObject;
        	this.leftButton = $('<a href="javascript:void(0);" target="_self"></a>').appendTo(box);
        	this.rightButton = $('<a href="javascript:void(0);" target="_self"></a>').appendTo(box);
        	this.leftButton.on('click', function(){
        		if(cardlayoutObject.activeIndex > 0){
        			cardlayoutObject.slide('l', num);
        		}
        	});
        	this.rightButton.on('click', function(){
        		if(cardlayoutObject.activeIndex < num-1){
        			cardlayoutObject.slide('r', num);
        		}
        	});
	        box.hover(function(){
	         	 if(cardlayoutObject.activeIndex > 0){
		        	 $this.leftButton.addClass('jazz-cardpanel-leftbtn');
	        	 }
	         	 if(cardlayoutObject.activeIndex < num-1){
	         		$this.rightButton.addClass('jazz-cardpanel-rightbtn');	         		 
	         	 }	        	 
            },function(){
          	     $this.leftButton.removeClass('jazz-cardpanel-leftbtn');
	        	 $this.rightButton.removeClass('jazz-cardpanel-rightbtn');
            });         	
		},
		
		/**
         * @desc 设置布局
         * @param {n} 页数
		 * @example
         */  		
		previousPage: function(n){
			return this.options.cardlayoutObject.slide('l', n);
		},
		
		/**
         * @desc 设置布局
         * @param {n} 页数
		 * @example
         */  		
		nextPage: function(n){
			return this.options.cardlayoutObject.slide('r', n);
		},
    
        options : {
    		/**
             * @desc 存储处理逻辑
             */        	
	        cardlayoutObject: {
	        	    height: 25,
		    		width: 400,
		    		activeIndex: 0,
		    		paginator: null,
		    		container: null,
		    		$this: null,
		    		buttondisplay: true,
		    	    point: function(index, num) {
		    	    	this.activeIndex = index;   
		    	    	this.switching(index, num);
		    	    },
		    	    slide: function(lr, num) {
		    	        var idx = this.index(lr, num);
		    	        if(idx<0) idx = 0;
		    	        else if(idx>=num) idx = 4;
		    	        this.switching(idx, num);
                        return idx;
		    	    },
		    	    index: function(lr, num) {
		    	        if (lr == "l") {
		    	        	this.activeIndex = this.activeIndex - 1;
		    	        	if(this.activeIndex < 0) this.activeIndex = 0; 
		    	        }
		    	        else {
		    	        	this.activeIndex = this.activeIndex + 1;
		    	        	if(this.activeIndex >= num) this.activeIndex = num - 1;
		    	        }
		    	        if(this.buttondisplay === true){
		    	        	this.paginator.paginator('option', 'page', this.activeIndex);
		    	        }
		    	        return this.activeIndex;
		    	    },
		    	    switching: function(index, num) {
		    	    	this.container.find(".jazz-cardpanel-ul").animate({marginLeft: (0 - this.width * index)}, 500);
		    	    	
		    	    	if(this.buttondisplay === true){
				         	if(this.activeIndex > 0){
					        	this.$this.leftButton.addClass('jazz-cardpanel-leftbtn');
				        	}else{
				        		this.$this.leftButton.removeClass('jazz-cardpanel-leftbtn');
				        	}
				        	if(this.activeIndex < num-1){
				        		this.$this.rightButton.addClass('jazz-cardpanel-rightbtn');
				        	}else{
				        		this.$this.rightButton.removeClass('jazz-cardpanel-rightbtn');
				        	}	
		    	    	}
		    	    }
	        }
        }
    
    });
    
})(jQuery);

(function( $, factory ){

	if ( jazz.config.isUseRequireJS === true ) {
		define( ['jquery', 'layout/jazz.ContainerLayout'], factory );
	} else {
		factory($);
	}	 
})(jQuery, function($){
	/**
	 * @version 1.0
	 * @name jazz.fitlayout
	 * @description 自适应高度布局。
	 * @constructor
	 * @extends jazz.containerlayout
	 */	
    $.widget("jazz.fitlayout", $.jazz.containerlayout, {

    	/** @lends jazz.fitlayout */  
		/**
         * @desc 设置布局
         * @param {cthis} 当前组件对象
         * @param {container} 需要渲染的容器对象
         * @param {layoutconfig} layoutconfig配置信息
         */
        layout: function(cthis, container, layoutconfig) {
        	jazz.listener.fitlistener.add(cthis.element, layoutconfig);
        	jazz.listener.fitlistener.start();
        },
        
		/**
         * @desc 刷新布局
         * @param {componentObject} 当前组件的this对象
         * @param {layoutcontainer} 需要渲染的容器对象
         * @param {layoutconfig} 布局需要的配置参数
         */        
        refreshLayout: function(componentObject, layoutcontainer, layoutconfig){}      
        
    });
});(function( $, factory ){
	if ( jazz.config.isUseRequireJS === true ) {
		define( ['jquery',  'layout/jazz.RowLayout', 'layout/jazz.ColumnLayout'], factory );
	} else {
		factory($);
	}	 
})(jQuery, function($){
	/**
	 * @version 1.0
	 * @name jazz.borderlayout
	 * @description border布局。
	 * @constructor
	 * @extends jazz.containerlayout
	 */	
    $.widget("jazz.borderlayout", $.jazz.containerlayout, {
		
    	/** @lends jazz.borderlayout */
		/**
         * @desc 设置布局
         * @param {cthis} 当前组件对象
         * @param {container} 需要渲染的容器对象
         * @param {layoutconfig} 布局需要的配置参数
         */
        layout: function(cthis, container, layoutconfig) {
			//判断容器是否设置高度
			if(cthis.options.height == "auto"){
				jazz.error("border布局的height属性不能设置为auto, 只能设置为百分比或固定值.");
				return false;
			}
			
        	//列布局时，禁止容器出现滚动条
        	container.css('overflow', 'hidden');

        	//获取容器的宽度和高度
        	this.cwidth = container.width(); this.cheight = container.height();
        	
        	//获取border布局下的全部子元素
        	var childs = container.children("div[region]");
        	
        	if(childs.length > 5){
        		jazz.error("border布局定义错误, 只能定义 east south west north center 五个部分，且只能定义一次！"); return false;
        	}
        	
        	//布局刷新时，重新初始化对象
        	//存储布局对象
        	this.bobject = {north: "", west: "", center: "", east: "", south: ""};
        	//布局中的region设置, 只能为north west center east south中的一个, 且不能重复出现
        	//this.regionnumber用于记录数量，避免重复出现
        	this.regionnumber = {north: 0, west: 0, center: 0, east: 0, south: 0};

        	//纵向  north center south, 对应行布局
        	//this.by 存放行布局用的高度，例：  ["20%", "*", "300"], yn 记录纵向元素的数量
        	this.by = []; var yn = 0;   
        	//横向  west center east, 对应列布局
        	//this.bx 存放列布局用的宽度，例： ["200", "*", "200"], xn 记录横向元素的数量
        	this.bx = []; var xn = 0;        	
        	
        	var $this = this, f = false;
        	
        	$.each(childs, function(i, obj){
        		var $obj = $(obj);
        		var region = $obj.attr("region");
        		
        		if(region == "center"){ f = true; }
        		
        		if(region){
        			region = $.trim(region);
        			$this.regionnumber[region] += 1;
        			if($this.regionnumber[region] > 1){
        				jazz.error("border布局的region属性设置错误, region=\""+region+"\", 重复设置！"); return false;
        			}
        			
        			if(" east west ".indexOf(region) >= 0){
        				$this.bobject[region] = {index: i, object: $obj, width: $obj.attr("width")};
        				xn += 1;
        			}else if(" north south ".indexOf(region) >= 0){
        				$this.bobject[region] = {index: i, object: $obj, height: $obj.attr("height")};
        				yn += 1;
        			}else if(" center ".indexOf(region) >= 0){
        				//自适应宽度和高度，不需要设置width和height
        				$this.bobject[region] = {index: i, object: $obj};
        				yn += 1; xn += 1;
        			}
        		}else{
        			jazz.error("border布局的region属性设置错误, region=\"east\" region=\"south\" region=\"west\" region=\"north\" region=\"center\""); return false;
        		}
        	});
        	
        	if(!f){
        		jazz.error("border布局的regsion属性设置错误, 必须要有region=\"center\""); return false;
        	}
        	
        	//将各部分region数量放入layoutconfig中，在调用列、行布局时，可用于判断各部分是否被定义
        	layoutconfig["regionnumber"] = this.regionnumber;
        	//将region对象放入layoutconfig中，在调用列、行布局时使用
        	layoutconfig["bobject"] = this.bobject;
        	
        	//在border布局中，north和south只需要设置高度即可，宽度会自适应容器大小
        	//west和east只需要设置宽度即可，高度会自适应
        	//如果不设置north south高度   west east宽度，取默认的宽度和高度
        	var defaultheight = "150", defaultwidth = "200";

        	var centerObj = this.bobject.center["object"];
        	//只存在center时
        	if(yn==1 && xn==1){
        		centerObj.css({border: 0, margin: 0, padding: 0, width: "100%", height: "100%"});
        	}
        	//如果大于1，说明存在列布局, 列布局控制 west center east
        	if(xn > 1){
        		//在center区域上部追加一个div， 用于存放 west center east，并按这个顺序存放。
				this.colcontainerObj = $('<div style="overflow: hidden; height: auto;">');
		
        		centerObj.before(this.colcontainerObj);
        		var westObj = this.bobject.west["object"], eastObj = this.bobject.east["object"];
        		if(westObj){
        			this.colcontainerObj.append(westObj);
        			var _width = this.bobject.west["width"];
        			if(!_width){ _width = defaultwidth; }
        			$this.bx.push(_width);
        		}
        		
        		this.colcontainerObj.append(centerObj);
        		//center区域的宽度
        		this.bx.push("*");
        		
        		if(eastObj){
        			this.colcontainerObj.append(eastObj);
        			var _width = this.bobject.east["width"];
        			if(!_width){ _width = defaultwidth; }
        			$this.bx.push(_width);        			
        		}
        	}
        	if(yn > 1){
        		var northObj = this.bobject.north["object"], southObj = this.bobject.south["object"];
        		if(northObj){
        			//通过索引值判断north是否为0，也就是是否在最上边，如果不在最上边则需要移动north区域的位置
        			if(this.bobject.north["index"] != 0){
        				container.prepend(northObj);
        			}
    				var _height = this.bobject.north["height"];
    				if(!_height){ _height = defaultheight; }
    				$this.by.push(_height);
        		}
        		
        		//center区域的高度
        		$this.by.push("*");
        		
        		if(southObj){
        			//判断当前south是否为最后一个元素，如果不是则将其移动到最后位置
        			var t = container.children("div:last-child");
        			if(" south ".indexOf(t.attr("region")) < 0){
        				container.append(southObj);
        			}
    				var _height = this.bobject.south["height"];
    				if(!_height){ _height = defaultheight; }
    				$this.by.push(_height);        			
        		}

        		//调用行布局
        		this._rowLayout(cthis, container, layoutconfig);
        	}
        	if(xn > 1){
        		//调用列布局
        		this._columnLayout(cthis, container, layoutconfig);
        	}

        	//监听父容器大小改变
        	this.$cthis = cthis; this.$container = container; this.$layoutconfig = layoutconfig; this.$xn = xn; this.$yn = yn;
        },
        
        /**
         * @desc 调用列布局
         */
        _columnLayout: function(cthis, container, layoutconfig){
    		var _col = jazz.layout.column;
    		container[_col]();
    		layoutconfig["width"] = this.bx;
    		layoutconfig["isborderlayout"] = true;
    		this.obj_c = container.data(_col);
    		this.obj_c.layout(cthis, this.colcontainerObj, layoutconfig);
        },
        
        /**
         * @desc 调用行布局
         */
        _rowLayout: function(cthis, container, layoutconfig){
    		var _row = jazz.layout.row;
    		container[_row]();
    		layoutconfig["height"] = this.by;
    		layoutconfig["isborderlayout"] = true;
    		//中间区域包裹，列布局的对象
    		if(!this.colcontainerObj){
    			layoutconfig["centerobject"] = this.bobject.center.object;
    		}else{
    			layoutconfig["centerobject"] = this.colcontainerObj;
    		}
    		this.obj_r = container.data(_row);
    		this.obj_r.layout(cthis, container, layoutconfig);	
        },
        
        /**
         * @desc 改变border布局的大小
         */
        resizeBorder: function(){
        	if(this.$yn > 1){ 
        		this._rowLayout(this.$cthis, this.$container, this.$layoutconfig);
        	}
    		if(this.$xn > 1){
    			this._columnLayout(this.$cthis, this.$container, this.$layoutconfig);
    		}
        	var ui = {};
        	if(this.regionnumber["north"] == 1){
        		ui["north"] = {"height": this.bobject.north.object.height(), "width": this.bobject.north.object.width()};
        	}
        	if(this.regionnumber["south"] == 1){
        		ui["south"] = {"height": this.bobject.south.object.height(), "width": this.bobject.south.object.width()};
        	}
        	if(this.regionnumber["center"] == 1){
        		ui["center"] = {"height": this.bobject.center.object.height(), "width": this.bobject.center.object.width()};
        	}
        	if(this.regionnumber["west"] == 1){
        		ui["west"] = {"height": this.bobject.west.object.height(), "width": this.bobject.west.object.width()};
        	}
        	if(this.regionnumber["east"] == 1){
        		ui["east"] = {"height": this.bobject.east.object.height(), "width": this.bobject.east.object.width()};
        	}
        	this.$cthis._event("borderresize", null, ui);      	
        },
        
		/**
         * @desc 刷新布局
         * @param {componentObject} 当前组件的this对象
         * @param {layoutcontainer} 需要渲染的容器对象
         * @param {layoutconfig} 布局需要的配置参数
         */        
        refreshLayout: function(componentObject, layoutcontainer, layoutconfig){
        	this.resizeBorder();
        },
        
        /**
         * @desc 布局中区域的打开关闭的控制,只控制border布局 column布局 row布局
         * @param region 区域 border布局 
         *        region为east west north south
         * @param showSize 显示大小
         */
        region: function(region, showSize){
        	if("east"==region || "west"==region){
				if("west"==region){
					this.$layoutconfig["width"][0] = showSize;
				}else if("east"==region){
					this.$layoutconfig["width"][this.$xn-1] = showSize;
				}
        		this.$container.data(jazz.layout.column).region(region, this.$xn, showSize);
        	}else if("north"==region || "south"==region){
				if("north"==region){
					this.$layoutconfig["height"][0] = showSize;
				}else if("south"==region){
					this.$layoutconfig["height"][this.$yn-1] = showSize;
				}
        		this.$container.data(jazz.layout.row).region(region, this.$yn, showSize);
        	}
        }
    });
});
(function( $, factory ){

	if ( jazz.config.isUseRequireJS === true ) {
		define( ['jquery', 'jazz.Component'], factory );
	} else {
		factory($);
	}	 
})(jQuery, function($){
/**
 * @version 0.5
 * @name jazz.boxComponent
 * @description 使用矩形容器组件的基类，提供自适应高度、宽度调节的功能，具备大小调节和定位的能力。
 * @constructor
 * @extends jazz.component
 * @requires
 */
	$.widget('jazz.boxComponent', $.jazz.component, {
	    options: /** @lends jazz.boxComponent# */ {
//			/**
//			 *@type number
//			 *@desc 组件相对页面left坐标
//			 *@default ''
//			 */
//			left: '',
//			
//			/**
//			 *@type number
//			 *@desc 组件相对页面top坐标
//			 *@default ''
//			 */
//			top: '',			
//			
//			/**
//			 *@type number
//			 *@desc 鼠标相对于当前组件左边位置距离
//			 *@default ''
//			 */
//			x: '',
//			
//			/**
//			 *@type number
//			 *@desc 鼠标相对于当前组件上边位置距离
//			 *@default ''
//			 */
//			y: '',		
//
//			/**
//			 *@type number
//			 *@desc 鼠标相对于页面左边位置距离
//			 *@default ''
//			 */
//			pagex: '',
//			
//			/**
//			 *@type number
//			 *@desc 鼠标相对于页面上边位置距离
//			 *@default ''
//			 */
//			pagey: '',

			/**
			 *@type number
			 *@desc 组件计算后的高度   
			 *@default -1
			 *@example
			 *组件的高度为： height: 400 或 40%  calculateheight高度就为400 或 560（40/100）*1200（父容器内高度）
			 */
			calculateheight: -1,
			
			/**
			 *@type number
			 *@desc 组件计算后的宽度
			 *@default -1
			 *@example
			 *组件的计算宽度为： height: 600 或 60% calculatewidth宽度就为600 或 720  （60/100）*1200（父容器内宽度）
			 */			
			calculatewidth: -1,			
			
			/**
			 *@type number
			 *@desc 组件计算后内部的高度  
			 *@default -1
			 *@example
			 *组件的高度为： height: 400 或 40%  边框总高度为：4  calculateinnerheight高度就为396 或 556 （40/100）*1200（父容器内高度）
			 */
			calculateinnerheight: -1,
			
			/**
			 *@type number
			 *@desc 组件计算后内部的宽度
			 *@default -1
			 *@example
			 *组件的计算宽度为： height: 600 或 60% 边框总高度为：4  calculatewidth宽度就为596 或 716 （60/100）*1200（父容器内宽度）
			 */			
			calculateinnerwidth: -1,			
			
			/**
			 *@type number
			 *@desc 组件的高度
			 *@default "auto"
			 *@example
			 *组件设置的高度为： height: 400 或 40%,  height高度就为400 或 40%
			 *<br> 注意：父容器高度如果为auto，并且当前组件高度为百分比，则对当前组件高度按auto处理
			 */
			height: "auto",	

			/**
			 *@type number
			 *@desc 组件的宽度
			 *@default "auto"
			 *@example
			 *组件设置的宽度为： width: 600 或 60%,  width宽度就为600 或 60%
			 */
			width: "auto",


			//callbacks
			
			/**
			 *@desc 当组件调整大小时触发
			 *@param {event} 事件
			 *@param {ui} 
			 *@event
			 *@example
			 */
			resize: null
//			
//			/**
//			 *@desc 当前组件被移动后触发
//			 *@param {event} 事件
//			 *@param {ui} 
//			 *@event
//			 *@example
//			 */
//			move: null			
		},
		
		/** @lends jazz.boxComponent */
		/**
		 * @desc 创建组件
		 * @private
		 */
		_create: function(){
			this._super();
		},
		
		/**
		 * @desc 初始化
		 * @private
		 */
		_init: function(){
			this._super();
		},
		
		/**
         * @desc 获取计算后的组件高度
         * @return Number
		 * @private
         */
		_getCalculatePercentHeight: function(height, parent){
			var parentinnerheight;
			if(parent[0].nodeName == "BODY"){
				var sw = 0;
				if(this.isScrollX(parent) && parent.css("overflow-x")!="hidden"){ sw = jazz.config.scrollWidth; }
				parentinnerheight = jazz.util.windowHeight() - (parent.outerHeight(true) - parent.height()) - sw;
			}else{
				parentinnerheight = parent.height();
			    var h2 = parent[0].clientHeight || parentinnerheight;
			    if(h2 < parentinnerheight){
			    	parentinnerheight = h2;
			    }
			}
			var n = parseFloat(height.substring(0, (height+"").length - 1));
			n = (n/100) * parentinnerheight;
			//向下取整数
			return Math.floor(n);
		},
		
		/**
         * @desc 获取计算后的组件宽度	 
         * @return Number
		 * @private
         */		
		_getCalculatePercentWidth: function(width, parent){
			var parentinnerwidth;
			if(parent[0].nodeName == "BODY"){
				var sw = 0;
				if(this.isScrollY(parent) && parent.css("overflow-y")!="hidden"){ sw = jazz.config.scrollWidth; }
				parentinnerwidth = jazz.util.windowWidth() - (parent.outerWidth(true) - parent.width()) - sw;
			}else{
			    parentinnerwidth = parent.width();
			    var w2 = parent[0].clientWidth || parentinnerwidth;
			    if(w2 < parentinnerwidth){
			    	parentinnerwidth = w2;
			    }
			}
			var n = parseFloat(width.substring(0, (width+"").length - 1));
			n = (n/100) * parentinnerwidth;
			//向下取整数
			return Math.floor(n);
		},

		/**
         * @desc 获取当前组件的高度
         * @return Number
		 * @private
         */
		_height: function(){
			var height = this.options.height;
			/*
			if(parent[0].nodeName != "BODY"){
                //父容器高度如果为auto，并且当前组件高度为百分比，则对当前组件高度按auto处理
				var _h = jazz.getDefinedStyleProperty(parent[0], true, "height");
				console.log("=====_h====="+_h);
				if((_h=="" || _h=="auto") && (/^\d+(\.\d+)?%$/.test(height))){
					height = "auto";
				}
			}
			*/
			if(height == "auto"){
				if(this.options.calculateheight != this.element.outerHeight()){
					this.options.calculateheight = this.element.outerHeight();
					this.iscalculateheight = true;
					jazz["_isRefresh"] = true;
				}else{
					this.iscalculateheight = false;
				}
			}else if(jazz.isNormalSize(height) && this.options.calculateheight != height){
				if(jazz.isNumber(height)){
					this.element.outerHeight(height);
					//计算后组件的高度
					this.options.calculateheight = height;
					this.options.calculateinnerheight = this.element.height();
					this.iscalculateheight = true;
				}else{
					if(/^\d+(\.\d+)?%$/.test(height)){
						var parent = this.element.parent();
						var n = this._getCalculatePercentHeight(height, parent);
						if(this.options.calculateheight === n){
							this.iscalculateheight = false;
						}else{
							this.element.outerHeight(n);
							//计算后组件的高度
							this.options.calculateheight = n;
							this.options.calculateinnerheight = this.element.height();
							this.iscalculateheight = true;
						}
					}
				}
			}else {
				this.iscalculateheight = false;
			}
		},
		
		/**
         * @desc 获取当前组件的宽度	 
         * @return Number
		 * @private
         */
		_width: function(){
			var width = this.options.width;
			if(width == "auto"){
				if(this.options.calculatewidth != this.element.outerWidth()){
					this.options.calculatewidth = this.element.outerWidth();
					this.iscalculatewidth = true;
					jazz["_isRefresh"] = true;
				}else{
					this.iscalculatewidth = false;
				}
			}else if((jazz.isNormalSize(width) && this.options.calculatewidth != width)){
				if(jazz.isNumber(width)){
					this.element.outerWidth(width); //outerWidth(width, true) 在margin:0 auto时，第二次修改宽度值时，会出错
					//计算后组件的宽度
					this.options.calculatewidth = width;
					this.options.calculateinnerwidth = this.element.width();
					this.iscalculatewidth = true;
					jazz["_isRefresh"] = true;
				}else if(/^\d+(\.\d+)?%$/.test(width)){
					var parent = this.element.parent();
					var n = this._getCalculatePercentWidth(width, parent);
					if(this.options.calculatewidth === n){
						this.iscalculatewidth = false;
					}else{
						this.element.outerWidth(n);
						//计算后组件的宽度
						this.options.calculatewidth = n;
						this.options.calculateinnerwidth = this.element.width();
						this.iscalculatewidth = true;
						jazz["_isRefresh"] = true;
					}
				}
			}else{
				this.iscalculatewidth = false;
			}
		},

		/**
         * @desc 刷新布局
		 * @private
         */
		_refreshLayout: function(){
			//更新布局
			if(this.layoutobject){
				this.layoutobject.refreshLayout(this, this.layoutcontainer, this.options.layoutconfig);				
			}
		},
		
		/**
         * @desc 刷新子组件的高度
		 * @private
         */
		_refreshChildHeight: function(){
			$.each(this.getChildrenComponent(), function(i, obj){
				var element = $(this);
				var vtype = element.attr("vtype");
				//修改子组件的高度
				var el = element.data(vtype);
				if(el){
					el._resizeHeight();				
				}
			});
		},
		
		/**
         * @desc 刷新子组件的宽度
		 * @private
         */
		_refreshChildWidth: function(){
			$.each(this.getChildrenComponent(), function(i, obj){
				var element = $(this);
				var vtype = element.attr("vtype");
				//修改子组件的宽度
				var el = element.data(vtype);
				if(el){
					el._resizeWidth();			
				}
			});
		},
		
		/**
         * @desc 高度	 
		 * @private
         */		
		_resizeHeight: function(){	
			this._height();
			if(this.iscalculateheight){
				if(this.layoutobject){
					this.layoutobject.refreshLayoutBefore();			
				}	
				this._refreshLayout();
				this._refreshChildHeight();				
				if(this.layoutobject){
					this.layoutobject.refreshLayoutAfter();	
				}
			}else{
				this._refreshChildHeight();				
			}		
		},		
		
		/**
         * @desc 宽度	 
		 * @private
         */
		_resizeWidth: function(){			
			this._width();
			if(this.iscalculatewidth){
				//组件大小改变时，如果有布局则刷新布局
				if(this.layoutobject){
					this.layoutobject.refreshLayoutBefore();			
				}	
				this._refreshLayout();
				this._refreshChildWidth();
				if(this.layoutobject){
					this.layoutobject.refreshLayoutAfter();	
				}
			}else{
				this._refreshChildWidth();
			}
		},
		
		/**
         * @desc 动态改变属性
         * @param {key} 对象的属性名称
         * @param {value} 对象的属性值
		 * @private
         */
        _setOption: function(key, value){
        	switch(key){
	    		case 'width':
	    			//判断是否为 “12” “23.5” “40%” “40.5%”
	    			if(jazz.isNormalSize(value)){
    					this.options.width = value;
    					/*
						this._width();
    					if(this.iscalculatewidth){
							this._refreshLayout(); 
    						this._refreshChildWidth();
    					}
						*/
						jazz.refreshComponentSize();
	    			}
	    		break;
	    		case 'height':
	    			if(jazz.isNormalSize(value)){
	    				this.options.height = value;
						/*
	    				this._height();
	    				if(this.iscalculateheight){
    						this._refreshLayout();
    						this._refreshChildHeight();    					
	    				}
						*/
						jazz.refreshComponentSize();
	    			}
	        	break;
				/*case 'overflow':
					this.options.overflow = value;
					this._overflow(true);
				break;*/
        	}
        	this._super(key, value);
        },
		 
        /**
         * @desc 布局中区域的打开关闭的控制,只控制border布局 column布局 row布局
         * @param region 区域 border布局
         *        region为east west north south
         */
        region: function(region, showSize){
        	if(this.layoutobject){
        		this.layoutobject.region(region, showSize);
        	}
        },
		
		/**        
         * @desc 计算页面大小
         */
		getPageSize: function () {
		    var xScroll, yScroll;
		    if (window.innerHeight && window.scrollMaxY) {
		        xScroll = window.innerWidth + window.scrollMaxX;
		        yScroll = window.innerHeight + window.scrollMaxY;
		    } else {
		        if (document.body.scrollHeight > document.body.offsetHeight) { // all but Explorer Mac    
		            xScroll = document.body.scrollWidth;
		            yScroll = document.body.scrollHeight;
		        } else { // Explorer Mac...would also work in Explorer 6 Strict, Mozilla and Safari    
		            xScroll = document.body.offsetWidth;
		            yScroll = document.body.offsetHeight;
		        }
		    }
		    var windowWidth, windowHeight;
		    if (self.innerHeight) { // all except Explorer    
		        if (document.documentElement.clientWidth) {
		            windowWidth = document.documentElement.clientWidth;
		        } else {
		            windowWidth = self.innerWidth;
		        }
		        windowHeight = self.innerHeight;
		    } else {
		        if (document.documentElement && document.documentElement.clientHeight) { // Explorer 6 Strict Mode    
		            windowWidth = document.documentElement.clientWidth;
		            windowHeight = document.documentElement.clientHeight;
		        } else {
		            if (document.body) { // other Explorers    
		                windowWidth = document.body.clientWidth;
		                windowHeight = document.body.clientHeight;
		            }
		        }
		    }       
		    // for small pages with total height less then height of the viewport    
		    if (yScroll < windowHeight) {
		        pageHeight = windowHeight;
		    } else {
		        pageHeight = yScroll;
		    }
		    // for small pages with total width less then width of the viewport    
		    if (xScroll < windowWidth) {
		        pageWidth = xScroll;
		    } else {
		        pageWidth = windowWidth;
		    }
		    
		    return {
		    	'pageWidth': pageWidth, 
		    	'pageHeight': pageHeight, 
		    	'windowWidth': windowWidth, 
		    	'windowHeight': windowHeight 
		    };
		},
		
		/**
         * @desc 判断是否有横向滚动条
         * @param {obj} 对象
		 * @private
         */
		isScrollX: function (obj) {
			return jazz.util.isScrollX(obj);
		},
		
		/**
         * @desc 判断是否有纵向滚动条
         * @param {obj} 对象
		 * @private
         */
		isScrollY: function (obj) {
			return jazz.util.isScrollY(obj);				 
		},
		
		/**
         * @desc 重新当前组件的子组件大小
		 * @private
         */
		refreshChildComponent: function(){
			jazz.refreshComponentSize(this.element);
		}
		
	});	
});
(function( $, factory ){

	if ( jazz.config.isUseRequireJS === true ) {
		define( ['jquery', 
		         'layout/jazz.AutoLayout',
		         'layout/jazz.ColumnLayout',
		         'layout/jazz.FitLayout',
		         'layout/jazz.RowLayout',
		         'layout/jazz.TableLayout',
		         'layout/jazz.BorderLayout',
		         "jazz.BoxComponent"], factory );
	} else {
		factory($);
	}	 
})(jQuery, function($){
	/**
	 * @version 1.0
	 * @name jazz.layout
	 * @description 调用布局的工具类, 可以脱离容器直接调用布局。
	 * @constructor
	 * @extends jazz.boxComponent
	 */
    $.widget("jazz.layout", $.jazz.boxComponent, {

    	/** @lends jazz.layout */
    	options: /** @lends jazz.layout# */ {
    		
        	/**
    		 *@type String
    		 *@desc 组件类型
    		 *@default layout
    		 */
    		vtype: "layout",

			/**
			 *@type String
			 *@desc 容器指定的布局类型
			 *@default 'auto'
			 */    		
    		layout: "auto",
    		
			/**
			 *@type String
			 *@desc 布局的配置参数
			 *@default {}
			 */
    		layoutconfig: {}
    	},
    	
		/** @lends jazz.layout */
		/**
		 * @desc 创建组件
		 * @private
		 */    	
    	_create: function(){
    		this._super();
    		//this.layoutcontainer在boxComponent中调用，动态刷新布局
    		this.layoutcontainer = this.element;
    	},
    	
		/**
		 * @desc 初始化
		 * @private
		 */       	
    	_init: function(){
    		this._super();
			this._width();
			this._height();
        	var layoutvtype = jazz.layout[this.options.layout];
        	//如此获取obj是为了this.element转化为相应的layouttype的jquery布局对象
        	var obj = this.layoutcontainer[layoutvtype]();
        	//利用jquery的data方式取出缓存jquery对象，为了调用该对象的方法而使用。
        	this.layoutobject = obj.data(layoutvtype);
        	this.layoutobject.layout(this, this.layoutcontainer, this.options.layoutconfig);
    	},
    	
    	/**
         * @desc 动态改变属性
         * @param {key} 对象的属性名称
         * @param {value} 对象的属性值
		 * @private
         */
        _setOption: function(key, value){
			if(key == "layoutconfig" && typeof value == "object"){
    			this.options.layoutconfig = value;
            	try{
            		this.layoutobject.data(jazz.layout[this.options.layout]).layout(this.cthis, this.layoutcontainer, this.options.layoutconfig);
            	}catch(e){
            		jazz.error('错误的修改布局！！！');
            	}	
			}
			this._super(key, value);
        },
        
        /**
         * @desc获得布局的容器对象
         */
        getLayoutobject: function(){
        	return this.layoutobject;
        },

		/**
         * @desc 刷新布局
         * @param {componentObject} 当前组件的this对象
         * @param {layoutcontainer} 需要渲染的容器对象
         * @param {layoutconfig} 布局需要的配置参数
         */        
        refreshLayout: function(componentObject, layoutcontainer, layoutconfig){
			if(this.layoutobject){
				this.layoutobject.refreshLayout(this, this.layoutcontainer, this.options.layoutconfig);				
			}
        },
        
        /**
         * @desc 设置布局自身容器的overflow样式
         */        
        refreshLayoutBefore: function(){
        	this.layoutobject.refreshLayoutBefore();
        },
        
        /**
         * @desc 恢复布局自身容器的overflow样式
         */        
        refreshLayoutAfter: function(){
        	this.layoutobject.refreshLayoutAfter(); 
        }          
    });
});(function( $, factory ){

	if ( jazz.config.isUseRequireJS === true ) {
		define( ['jquery',
		         'layout/jazz.Layout'], factory );
	} else {
		factory($);
	}	 
})(jQuery, function($){
/**
 * @version 0.5
 * @name jazz.container
 * @description 使用矩形容器组件的基类，为子组件的提供布局服务。
 * @constructor
 * @extends jazz.boxComponent
 * @requires
 */
	$.widget('jazz.container', $.jazz.boxComponent, {
	    
		options: /** @lends jazz.container# */ {
	    	
			/**
			 *@type String
			 *@desc 容器指定的布局类型
			 *@default 'auto'
			 */
			layout: 'auto',
			
			/**
			 *@type Object
			 *@desc 容器布局的配置参数
			 *@default {}
			 */			
			layoutconfig: {}
		},
		
		/** @lends jazz.container */
		/**
		 * @desc 创建组件
		 * @private
		 */
		_create: function(){
			this._super();
		},
		
		/**
		 * @desc 初始化
		 * @private
		 */
		_init: function(){
			this._super();
		},	
		
		/**
         * @desc 动态改变属性
         * @param {key} 对象的属性名称 
         * @param {value} 对象的属性值
		 * @private
         */
        _setOption: function(key, value){
			if(key == "layoutconfig" && typeof value == "object"){
    			this.options.layoutconfig = value;
            	try{
            		this.layoutobject.layout(this, this.layoutcontainer, value);
					//重新布局后，刷新组件的子组件
					this.refreshChildComponent();
            	}catch(e){
            		jazz.error('错误的修改布局！！！');
            	}
			}
			this._super(key, value);
        },		
	
		/**
         * @desc 设置组件的布局 当有新组件加入或组件改变大小/位置时，就需要执行此方法
         * @param {container} 需要布局的容器对象
		 * @throws
		 * @example $('#container').container('doLayout', container);
         */			
        doLayout: function(container){
        	var _layout = this.options.layout,
        	    comp = jazz.layout[ _layout], 
        	    obj , that = this;

        	function replaceLetter(str){
        		var reg = /\b(\w)|\s(\w)/g;
        		return str.replace(reg,function(m){return m.toUpperCase();});
        	}

        	this.layoutcontainer = container;
        	
        	if(typeof jazz.layout[ _layout ] == 'undefined'){
        		_layout = jazz.layout.auto;
        	}
        	        	
    		if(!(typeof(this.options.layoutconfig) == 'object')){
    			this.options.layoutconfig = jazz.stringToJson(this.options.layoutconfig);
        	}
        	
        	if(_layout == 'fit') {
        		var $this = this;
        		this.element.layout({
            		layout: 'fit',
            		layoutconfig: {
            			callback: function(){
            				$this._panelFitCallback($this);          				
            			}
            		}
        		});
        	}else{
    			if(jazz.config.isUseRequireJS === true){				
    				require(['layout/jazz.' + replaceLetter(_layout) + "Layout"], function(){
        				obj = that.layoutcontainer[ comp ]();
        				that.layoutobject = obj.data(comp);
        				that.layoutobject.layout(that, that.layoutcontainer, that.options.layoutconfig);
        			});
    			}else{    				
    				obj = this.layoutcontainer[ comp ]();
    				this.layoutobject = obj.data(comp);
    				this.layoutobject.layout(this, this.layoutcontainer, this.options.layoutconfig);
    			}
        		
        	}
        }

	});

});
(function( $, factory ){

	if ( jazz.config.isUseRequireJS === true ) {
		define( ['jquery', 
		         'jazz.Container', 
		         'jazz.Toolbar' ], factory );
	} else {
		factory($);
	}	 
})(jQuery, function($){
/** 
 * @version 0.5
 * @name jazz.panel
 * @description 是面板容器，是一特定的功能和结构化组件。
 * @constructor
 * @extends jazz.container
 */
    $.widget("jazz.panel", $.jazz.container, {
       
        options: /** @lends jazz.panel# */ {
        	
        	/**
        	 *@desc 组件类型
        	 */
        	vtype: 'panel',
            
            /**
			 *@type string
			 *@desc 背景颜色
			 *@default white
			 */
            bgcolor: null,
            
    		/**
    		 *@type array
    		 *@desc 按钮集合，[{},{},{}], {}对应button的options. 
    		 *@default null
    		 */
    		buttons: null,
            
			/**
			 *@type boolean
			 *@desc 标题栏是否显示关闭按钮
			 *@default false
			 */               
            closable: false,
            
			/**
			 *@type boolean
			 *@desc 触发窗体大小改变，true 折叠， false 非折叠，
			 *@default false
			 */              
            collapsable: false,

            /**
			 *@type Object
			 *@desc 在标题栏自定操作按钮
			 *@default null
			 *@example 	
			 *<br>[{       	
			 *<br>	id: 't_1',
	         *<br>	align: 'left',
	         *<br>	icon: 'test.png',
	         *<br>	click: function(e){
	         *<br>	}
	         *<br>},{……},{……}]
			 */  
            customtitlebutton: null,
            
            /**
             *@type String
             *@desc frame的名称
             *@default ""
             */            
            framename: "",
            
            /**
             *@type String
             *@desc 内容区域URL
             *@default null
             */
            frameurl: null,
			
            /**
             *@type String
             *@desc 设置方式与原生overflow相同
             *@default "auto"
             */
			overflow: "auto",
            
			/**
			 *@type boolean
			 *@desc 是否显示容器的边框
			 *@default true
			 */               
            showborder: true,

    		/**
			 *@type Boolean
			 *@desc 是否显示标题栏   true显示 false不显示
			 *@default true
			 */
    		titledisplay: false,        	
        	
			/**
			 *@type String
			 *@desc 标题名称
			 *@default ''
			 */          	
        	title: '',
        	
    		/**
			 *@type String
			 *@desc 标题名称的显示位置 left center right
			 *@default 'left'
			 */
    		titlealign: 'left',
    		
    		/**
			 *@type String
			 *@desc 标题前的图片 例如：../../images/title.png
			 *@default null
			 */
    		titleicon: null,
    		
            /**
			 *@type Boolean
			 *@desc 控制标题框上操作按钮的位置   right 右侧  left 左侧
			 *@default false
			 */
    		titlebuttonalign: 'right',
        		
			/**
			 *@type boolean
			 *@desc 是否显示可触发窗体大小改变的按钮
			 *@default false
			 */
            toggleable: false,
            
			/**
			 *@type string
			 *@desc 控制折叠方向   vertical   horizontal   未定入API  需要完善
			 *@default vertical
			 *@private
			 */
            toggleorientation : 'vertical',
            
            //event
			/**
			 *@desc 关闭窗体前触发
			 *@param {event} 事件		 
			 *@event
			 *@example
			 *<br/>$("XXX").panel("option", "beforeclose", function(event){  <br/>} <br/>});
			 *或:
			 *<br/>$("XXX").on("panelbeforeclose",function(event){  <br/>} <br/>});
			 *或：
			 *function XXX(){……}
			 *<div…… beforeclose="XXX()"></div> 或 <div…… beforeclose="XXX"></div>	
			 */	           
            beforeclose: null,
            
			/**
			 *@desc 关闭窗体后触发
			 *@param {event} 事件		 
			 *@event
			 *@example
			 *<br/>$("XXX").panel("option", "afterclose", function(event){  <br/>} <br/>});
			 *或:
			 *<br/>$("XXX").on("panelafterclose",function(event){  <br/>} <br/>});
			 *或：
			 *function XXX(){……}
			 *<div…… afterclose="XXX()"></div> 或 <div…… afterclose="XXX"></div>	
			 */	 	            
            afterclose: null,
            
			/**
			 *@desc 窗体收起前触发
			 *@param {event} 事件		 
			 *@event
			 *@example
			 *<br/>$("XXX").panel("option", "beforecollapse", function(event){  <br/>} <br/>});
			 *或:
			 *<br/>$("XXX").on("panelbeforecollapse",function(event){  <br/>} <br/>});
			 *或：
			 *function XXX(){……}
			 *<div…… beforecollapse="XXX()"></div> 或 <div…… beforecollapse="XXX"></div>	
			 */	             
            beforecollapse: null,
            
			/**
			 *@desc 窗体收起后触发
			 *@param {event} 事件		 
			 *@event
			 *@example
			 *<br/>$("XXX").panel("option", "aftercollapse", function(event){  <br/>} <br/>});
			 *或:
			 *<br/>$("XXX").on("panelaftercollapse",function(event){  <br/>} <br/>});
			 *或：
			 *function XXX(){……}
			 *<div…… aftercollapse="XXX()"></div> 或 <div…… aftercollapse="XXX"></div>	
			 */	            
            aftercollapse: null,
            
			/**
			 *@desc 窗体展开前触发
			 *@param {event} 事件		 
			 *@event
			 *@example
			 *<br/>$("XXX").panel("option", "beforeexpand", function(event){  <br/>} <br/>});
			 *或:
			 *<br/>$("XXX").on("panelbeforeexpand",function(event){  <br/>} <br/>});
			 *或：
			 *function XXX(){……}
			 *<div…… beforeexpand="XXX()"></div> 或 <div…… beforeexpand="XXX"></div>	
			 */              
            beforeexpand: null,
            
			/**
			 *@desc 窗体展开后触发
			 *@param {event} 事件		 
			 *@event
			 *@example
			 *<br/>$("XXX").panel("option", "afterexpand", function(event){  <br/>} <br/>});
			 *或:
			 *<br/>$("XXX").on("panelafterexpand",function(event){  <br/>} <br/>});
			 *或:
			 *function XXX(){……}
			 *<div…… afterexpand="XXX()"></div> 或 <div…… afterexpand="XXX"></div>	
			 */
            afterexpand: null
        },
        
        /** @lends jazz.panel */        
        
		/**
         * @desc 创建组件
		 * @private
         */        
        _create: function() {
        	this._super();
        	
        	this.compId = this.getCompId();
        	
        	var title = this.element.attr('title');
        	if(title){
        		this.element.removeAttr('title');
        	}
        	
        	this.element.addClass('jazz-panel');
        	
        	//创建基本组件
       	    this._createPanelElement();
        },
        
        /**
         * @desc 初始化
         * @private
         */
        _init: function(){
		    	
        	this._super();
        	
/*        	//是否需要重新刷新
        	var isrefresh = false;
        	var parent = this.element.parent();
        	if(this.isScrollX(parent) || this.isScrollY(parent)){
        		isrefresh = true;
        	}
*/        	
        	//是否显示边框  边框未渲染任何子元素时加载
        	this._showborder();
        	
			//标题栏信息
			this._title();
            
        	//定义标题栏操作按钮容器
        	this._titleButton();
        	
        	//关闭
            this._closable();
            
            //自定义标题栏按钮
            this._customTitleButton();
            
            //是否可收起
            this._toggleable();     
            
            //是否显示标题
            this._titledisplay();

            //是否显示颜色
            this._bgcolor();

			//计算panel宽度
			this._width();

            //添加按钮
            this._buttons();
            
            //计算panel高度
            this._height();
            
			//初始化内容区域
			this._frameurl();     
			
        	//设置加载容器布局
            this.doLayout(this.content);

            //处理content内容
            if(this.options.content){
            	this._createContent(this.content);    	
            }
       
            //处理items内容
            if(this.options.items){
            	this._createItems(this.content);            	
            }
            
            //判断初始化时是否折叠
            this._collapsable();
			
			this._overflow();
			
/*
	    	if(this.isScrollX(parent) || this.isScrollY(parent)){
	    		isrefresh = true;
	    	}
	    	if(isrefresh){
		    	var pcom = this.getParentComponent();
		    	pcom.attr("refresh", "1");
		    	//jazz.log("***refresh****"+this.options.name+"***"+pcom.attr("refresh"));
	    	}
*/
		},
        
        /**
         * @desc 背景颜色
         * @private
         */
        _bgcolor: function(){
        	if(this.options.bgcolor != null){
        		this.content.css('background', this.options.bgcolor);        
        	}
        },

        /**
         * @desc 按钮
         * @private
         */        
        _buttons: function(){
        	var buttons = this.options.buttons;
        	if($.isArray(buttons)){
        		//是否存在，存在移除
        		if(this.toolbar){
        			this.toolbar.remove();
        		}
        		this.toolbar = $('<div>').appendTo(this.element);
        		for(var i=0, len=buttons.length; i<len; i++){
        			buttons[i]["vtype"] = "button";
        		}
        		this.toolbar.addClass('jazz-panel-toolbar').toolbar({items: buttons});
        	}
        },
        
        /**
         * @desc 关闭窗口
         * @private
         */
        _closable: function(){
        	if(this.options.closable){
        		var $this = this;
        		var a = this.titlebar.find('.jazz-panel-titlebar-close');
        		if(a.hasClass('jazz-panel-titlebar-close')){
        			a.remove();
        		}                
                var obj = this._renderTitleButton('jazz-panel-titlebar-close', 'jazz-titlebar-icon-close');
                obj.off('click.panelclose').on('click.panelclose', function(e) {
                	$this.close();
	                e.preventDefault();
	            });
        	}else{
        		this.titlebar.find('.jazz-panel-titlebar-close').remove();
        	}
        },
        
        /**
         * @desc 判断初始化时是否折叠
         * @private
         */        
        _collapsable: function(){
        	if(this.options.toggleable){
        		if(this.options.collapsable){
        			this.collapse();
        		}
        	}
        },
        
        /**
         * @desc 创建panel组件结构
         * @private
         */
        _createPanelElement: function(){
            var compId = this.compId, el = this.element, vtype = this.options.vtype;
            var div = [];
            div.push('<div id = "');
            div.push(compId);
            div.push('_content" class="jazz-panel-content"></div>');
            el.wrapInner(div.join(""));

            div = [];
            div.push('<div id = "'+compId+'_titlebar" class="jazz-panel-titlebar jazz-panel-header jazz-');
            div.push(vtype);
            div.push('-titlebar" style="text-align: left;"><div id="');
            div.push(compId);
            div.push('_titlebar_inner" class="jazz-');
            div.push(vtype);
            div.push('-titlebar-inner" style="width:100%; height:100%"></div></div>');
            
            el.prepend(div.join(""));
            
            this.titlebar = $('#'+compId+'_titlebar');
            this.titlebarInner = $('#'+compId+'_titlebar_inner');
            this.content = $('#'+compId+'_content');
            if(this.options.content){
            	this.content.append(this.options.content);            	
            }
        },
                        
        /**
         * @desc 初始化容器大小
         * @private
         */
        _compSize: function(){
        	
        	this._width();
        	
        	this._height();
        },

        /**
         * @desc 自定义操作按钮
         * @private
         */
        _customTitleButton: function(){
        	var ctb = this.options.customtitlebutton;
        	if(ctb){
        		if(!$.isArray(ctb)){
        			ctb = jazz.stringToJson(ctb);
        		}
		    	var $this = this;
		    	$.each(ctb, function(i, handler){
		        	var customIcons = $this.handlerIcons1;
		        	if(handler.align == 'right' || handler["vtype"]){
		        		customIcons = $this.handlerIcons2;
		        	}
		        	$this._customIcon(handler, customIcons, handler["icon"]);
		    	});        			
        	}
        },
        
        /**
         * @desc 定义弹出框操作按钮
		 * @private
         */
        _customIcon: function(handler, handlerIcons, icon, iconClass) {
        	var $this = this;
        	var f = "float: left";
        	if(handler.align == "right"){
        		f = "float: right";
        	}
        	if(!iconClass){ iconClass = "";}
        	if(icon){ icon = 'style="background: url(\'' + icon + '\') no-repeat"'; }else{icon=""; }
        	var id = handler.id || "c_btn_" + jazz.getRandom();
            var c = $('<a id="'+id+'" class="jazz-panel-titlebar-icon jazz-panel-titlebar-custom" style="'+f+'"></a>').appendTo(handlerIcons);
            
            var vtype = handler["vtype"];
            if(vtype){
            	var btnobj = $('<div name="'+handler["name"]+'"></div>');
            	$("#"+id).append(btnobj);
            	btnobj[vtype](handler);
            }else{
            	$("#"+id).append('<span '+icon+' class="jazz-titlebar-icon jazz-titlebar-icon-custom '+iconClass+' " />');            	
            }
            
            c.on('click', function(e){
            	if($.isFunction(handler['click'])){
	            	handler.click.call(this, e, {
	            		object: $this,
	            		element: $this.element
	            	});
            	}
            });
        },        

        /**
         * @desc 初始化内容区域
         * @private
         */
        _frameurl: function() {
            if(this.options.frameurl != null){
            	this.content.empty();
            	var framename = this.options.framename;
            	if(framename){
            		this.frameId = framename;           		
            	}else{
            		var name = this.options.name;
            		if(name){
            			this.frameId = 'frame_'+name;
            		}else{
            			this.frameId = 'frame_'+jazz.getRandom();            		
            		}
            	}
            	
            	var width = this.content.width(), height = this.content.height();
            	if(this.options.height == "auto"){
            		height = "auto";
            	}
            	
        		this.frameObject = $('<iframe name="'+this.frameId+'" id="' + this.frameId +'" framespacing="0" vspace="0" frameborder="0" border="0" marginwidth="0" marginheight="0"></iframe>');
	    		this.displayDiv = $('<div style="display:none; width:100%; height:100%; background:#FFFFFF;"></div>').appendTo(this.content);
	    		this.content.css({"font-size": "0px"});
				this.content.append(this.frameObject);
	    		this.frameObject.css({width: width, height: height}).attr("src", this.options.frameurl || "");
	    		this.pageParams = [];
	    		this.pageParams.push({url: this.options.frameurl});    		
        	}
        },

        /**
         * @desc 组件高度
         * @private
         */
        _height: function(){	
        	var layout = this.options.layout, height = this.options.height;
        	if(layout != 'fit'){
				this._super();
				if(height != "auto"){
					if(this.iscalculateheight){
						var h = 0;
						if(this.toolbar && this.options.vtype!="gridpanel"){
							h = this.toolbar.outerHeight(true);
						}
						var titleHeight = 0;
						if(this.options.titledisplay){
							titleHeight = this.titlebar.outerHeight(true);
						}
						this.content.outerHeight(this.options.calculateinnerheight - titleHeight - h, true);
					}
					
					if(this.options.frameurl != null && this.frameObject){
						this.frameObject.height(this.content.height());
					}
				}else{
					this.element.height("auto");
					this.content.height("auto");
					if(this.options.frameurl != null && this.frameObject){
						this.frameObject.height("auto");
					}        			
				}
        	}        	
        },
		
        /**
         * @desc 标题栏上的操作按钮
         * @private
         */	
		_overflow: function(){
			this.content.css("overflow", this.options.overflow);
		},
        
        /**
         * @desc 标题栏上的操作按钮
         * @private
         */
        _titleButton: function(){
	    	var icon_width = "";
	    	if(jazz.isIE(7) || jazz.isIE(6)){
	    		icon_width += 'width:100px';
	    	}
	    	
	        //操作按钮集 左侧区域
	        this.handlerIcons1 = $('<span class="jazz-panel-rtl-left" style="'+icon_width+'"></span>').appendTo(this.titlebarInner);
	        
	        //操作按钮集右侧区域
	        this.handlerIcons2 = $('<span class="jazz-panel-rtl-right" style="'+icon_width+'"></span>').appendTo(this.titlebarInner);
	        
	    	var handlerIcons = this.handlerIcons1;
	    	
	        if(this.options.titlebuttonalign == 'right') {
	        	handlerIcons = this.handlerIcons2;
	        }
	        
	        this.handlerIcons = handlerIcons;
        },
        
        /**
         * @desc 标题栏是否显示
         * @private
         */        
        _titledisplay: function(){
            if(!this.options.titledisplay){
            	this.titlebar.css('display', 'none');
            }else{
            	this.titlebar.css('display', '');
            }        	
        },

        /**
         * @desc fit布局的回调函数
         * @param {$this} 当前类的类对象
         * @private
         */
        _panelFitCallback: function($this){
        	var h = 0;
        	if($this.toolbar){
        		h = $this.toolbar.outerHeight(true);
        	}
        	if($this.options.titledisplay){
        		$this.content.outerHeight($this.element.height() - $this.titlebar.outerHeight(true) - h, true);
        	}else{
        		$this.content.outerHeight($this.element.height() - h, true);
        	}
        	if($this.options.frameurl){
        		$this.content.css({overflow: 'hidden'});
        		if($this.options.frameurl != null){
					$this.frameObject.outerHeight($this.content.height(), true);
        		}
        	}
        	if($this.options.vtype=="gridpanel" && $this.options.layout=="fit"){
        		//$this._width();
        	    //girlpanel只計算高度
        	    //宽度由resize事件
        		$this._height();
        	}else {
        		this._refreshChildHeight();
        	}
        },        
        
        /**
         * @desc 渲染操作按钮
		 * @param {styleClass} 头样式
		 * @param {icon} 图片样式
		 * @param {id}
		 * @private
         */
        _renderTitleButton: function(styleClass, icon, id) {
        	var f = "float:"+this.options.titlebuttonalign;
        	var _id = id ? 'id="'+id+'"': '';
            var obj = $('<a '+_id+' class="jazz-panel-titlebar-icon ' + styleClass + '" style="'+f+'" >' +
              '<span class="jazz-titlebar-icon ' + icon + '"></span></a>');
            
            if("jazz-panel-titlebar-close" == styleClass){
            	if(this.options.titlebuttonalign == "left"){
            		this.handlerIcons.append(obj);
            	}else{
            		this.handlerIcons.prepend(obj);
            	}                	
            }else{
            	this.handlerIcons.append(obj);
            }
            
            return obj;
        },        
        
		/**
         * @desc 动态改变属性
         * @param {key} 对象的属性名称 
         * @param {value} 对象的属性值
		 * @private
         */
        _setOption: function(key, value){
        	switch(key){
	    		case 'title':
	    			this.options.title = value;
	    			this.title.html(value);
	    		break;
	    		case 'titlealign':
	    			this.options.titlealign = value;
	    			this.titlebar.css({'text-align': value});
	    		break;	
	    		case 'titleicon':
	    			this.options.titleicon = value;
	    			this.title.css({'background': 'url("'+value+'")', 'background-repeat': 'no-repeat', 'padding-left': '22px'});
	    		break;
	    		case 'bgcolor':
	        		this.options.bgcolor = value;
	        		this.content.css('background-color', value);
	        	break;
	    		case 'toggleable':
	        		this.options.toggleable = value;
	        		this._toggleable();
		            if(this.options.collapsable) {
		            	this.collapse();            	
		            }else {
		            	this.expand();
		            }
	        	break;
	    		case 'collapsable':
	    			if(this.options.toggleable){
	    				if(value == "true" || value == true){
	    					this.collapse();
	    				}else{
	    					this.expand();
	    				}    	
    				}else{
    					this.options.collapsable = value;
    				}
	        	break;
				case 'overflow':
					this.options.overflow = value;
					this._overflow(true);
				break;
	    		case 'titlebuttonalign':
	        		var align = value =="left" ? "left" : "right";
	        		if(align === "left"){
		        		if(this.options.titlebuttonalign=="right"){
		        			this.handlerIcons1.append(this.handlerIcons2.contents());
		        			this.handlerIcons2.empty();
		        			this.handlerIcons = this.handlerIcons1;
		        		}
	        		}else{
	        			if(this.options.titlebuttonalign=="left"){
		        			this.handlerIcons2.append(this.handlerIcons1.contents());
		        			this.handlerIcons1.empty();	
		        			this.handlerIcons = this.handlerIcons2;
	        			}
	        		}
	        		this.options.titlebuttonalign = align;
	        	break;	
	    		case 'customtitlebutton':
	    			this.options.customtitlebutton = value;
	    			this._customTitleButton();
	    		break;
	    		case 'closable':
	    			if(value == "true" || value == true) { 
	    				this.options.closable = true; 
	    			}else{
	    				this.options.closable = false;
	    			}
	    			this._closable();
	    		break;	        	
	    		case 'showborder':
	    			if(value == "true" || value == true) { 
	    				this.options.showborder = true; 
	    			}else{
	    				this.options.showborder = false;
	    			}
	    			this._showborder();
	    			//border的改变会影响高度和宽度的变化
	    			this._compSize();
	    		break;
	    		case 'frameurl':
	    			if(this.options.frameurl == null){
	    				this.options.frameurl = value;
	    				this._frameurl();
	    			}else{
	    				this.options.frameurl = value;
	    				this.frameObject.attr("src", value);
	    			}
	    		break;
	    		case 'titledisplay':
	    			this.options.titledisplay = value;
	    			this._compSize();
	    			this._titledisplay();
	    		break;
	    		case 'buttons':
	    			var b = this.options.buttons;
	    			this.options.buttons = value;
	    			this._buttons();
	    			if(b==null){
	    				this._compSize();	    				
	    			}
	    		break;
        	}
        	this._super(key, value);
        },
        
		/**
         * @desc 滑动向上
		 * @private
         */         
        _slideUp: function() {
            this._event('beforecollapse');
            
            if(this.options.calculateinnerheight != -1){
            	this.content_height = this.content.height();
            	this.element.height("auto");
            }            
            
            this.content.css("display", "none");
            
            this._event('aftercollapse');
            this.options.collapsable = true; 
        },

		/**
         * @desc 滑动向下
		 * @private
         */         
        _slideDown: function() {
	        this._event('beforeexpand');

	        if(this.options.calculateinnerheight != -1){
	        	this.element.height(this.options.calculateinnerheight);
	        	this.content.height(this.content_height);
	        }
	        this.content.css("display", "block");
	       
	        this._event('afterexpand');
	        this.options.collapsable = false;
        },

		/**
         * @desc 滑动向左
		 * @private
         */          
        _slideLeft: function() {
            var $this = this;

            this.originalWidth = this.options.calculateinnerwidth;

            this.title.hide();
            this.toggler.hide();
            this.content.hide();

            this.element.animate({
                width: '42px'
            }, this.options.toggleSpeed, 'easeInOutCirc', function() {
                $this.toggler.show();
                $this.element.addClass('jazz-panel-collapsed-h');
                $this.options.collapsable = !$this.options.collapsable;
            });
        },

		/**
         * @desc 滑动向右
		 * @private
         */            
        _slideRight: function() {
            var $this = this,
            expandWidth = this.originalWidth || '100%';

            this.toggler.hide();

            this.element.animate({
                width: expandWidth
            }, this.options.toggleSpeed, 'easeInOutCirc', function() {
                $this.element.removeClass('jazz-panel-collapsable-h');
                $this.title.show();
                $this.toggler.show();
                $this.options.collapsable = !$this.options.collapsable;

                $this.content.css({
                    'visibility': 'visible',
                    'display': 'block',
                    'height': 'auto'
                });
            });
        },        
        
        /**
         * @desc 判断是否显示边框
         * @private
         */          
        _showborder: function(){
	        if (this.options.showborder) {
	        	this.element.addClass("jazz-panel-border");
			} else {
				this.element.removeClass("jazz-panel-border");
			}
        },        
        
        /**
         * @desc 标题栏内容
         * @private
         */
        _title: function(){
            var title = this.options.title || "";
            //先删除下边的对象
            this.titlebarInner.children().remove();
            
        	var titleicon = "";
        	if(this.options.titleicon){
        		titleicon = "style=\"background: url('"+this.options.titleicon+"') no-repeat; padding-left: 22px; \"";
        	}
        	
        	var tfontclass = 'jazz-panel-title-font jazz-'+this.options.vtype+'-title-font';

	    	if(this.options.titlealign){
	        	this.titlebar.css({'text-align': this.options.titlealign});
	        }

	    	this.titlebarInner.append('<span id="'+this.compId+'_title" class="'+tfontclass+'" '+titleicon+' >' + title + '&nbsp;</span>');	
	    	
	    	this.title = $('#'+this.compId+'_title');
        },        
        
		/**
         * @desc 是否可收起
		 * @private
         */
        _toggleable: function(){
        	var $this = this;
	        if(this.options.toggleable) {
	        	var icon = this.options.collapsable ? 'jazz-titlebar-icon-expand' : 'jazz-titlebar-icon-collapse';
	        	this.titlebar.find('#toggleableId').remove();
	        	
	        	this.toggler = this._renderTitleButton("", icon, "toggleableId");
	            this.toggler.off("click.toggler").on("click.toggler", function(e) {
		            if($this.options.collapsable) {
		            	$this.expand();	            	
		            }else {
		            	$this.collapse();
		            }
	                e.preventDefault();
	            });
	        }else{
	        	this.titlebar.find('#toggleableId').remove();
	        }	        
        },
        
		/**
         * @desc 组件宽度
		 * @private
         */
        _width: function(){
        	this._super();
        	if(this.iscalculatewidth && this.options.width != "auto"){
    			this.content.outerWidth(this.options.calculateinnerwidth, true);
    			if(this.options.titledisplay){
    				this.titlebar.width('auto');
    			}
    			if(this.options.frameurl != null && this.frameObject){
    				this.frameObject.width(this.content.width());
    			}
        	}
        },

        /**
         * @desc 添加自定义按钮
         * @param {handlers} 添加自定义按钮数组对象
         * @example $(XXX).panel("addTitleButton", [{id: 't_1', align: 'left', icon: 'test2.png', 
         *  <br> //iconClass: 'customClass1',
         *	<br>   click: function(e, ui){
         *	<br>  	  ui.win.previous();
         *	<br>   }
         *  <br> }, {……}, {……}]);
         */
        addTitleButton: function(handlers){
        	var $this = this;
        	if($.isArray(handlers)){
	        	$.each(handlers, function(i, handler){
	            	var customIcons = $this.handlerIcons1;
	            	if(handler.align == 'right'){
	            		customIcons = $this.handlerIcons2;
	            	}
	            	$this._customIcon(handler, customIcons, handler.icon, handler.iconClass);
	        	});
        	}
        },        
        
		/**
         * @desc 关闭窗口
         * @example $(XXX).panel("close");
         */        
        close: function() {
            var $this = this;
            
            this._event('beforeclose', null);
            
            this.element.fadeOut("normal",
                function() {
                    $this._event('afterclose', null);
                }
            );
        },

		/**
         * @desc 窗口的收起
		 * @example $(XXX).panel("collapse");
         */         
        collapse: function() {
            this.toggler.children('span.jazz-titlebar-icon').removeClass('jazz-titlebar-icon-collapse').addClass('jazz-titlebar-icon-expand');
            
            if(this.options.toggleorientation === 'vertical') {
                this._slideUp();
            } 
            else if(this.options.toggleorientation === 'horizontal') {
                this._slideLeft();
            }
        },        
        
		/**
         * @desc 窗口的展开
         * @example $(XXX).panel("expand");
         */         
        expand: function() {
            this.toggler.children('span.jazz-titlebar-icon').removeClass('jazz-titlebar-icon-expand').addClass('jazz-titlebar-icon-collapse');
            
            if(this.options.toggleorientation === 'vertical') {
                this._slideDown();
            } 
            else if(this.options.toggleorientation === 'horizontal') {
                this._slideRight();
            }
        },
        
		/**
         * @desc 获得标题名称
         */  
        getTitle: function(){
        	return this.options.title;
        },
        
        /**
         * @desc 隐藏自定义按钮
         * @param {r} 通过选择器，得到按钮对象并隐藏  例如： "#id" ".class_name"  "div[name='btn']"
         */
        hideTitleButton: function(r){
        	$(r+"").hide();
        },

        /**
         * @desc 动态改变iframe的src
         * @param {src} 设置iframe的src元素
         */
        iframeSrcHandler: function(src){
        	if(this.frameObject){
        		this.content.loading();
        		this.frameObject.attr('src', src);
        		var $this = this;
        		this.frameObject.load(function(){
        			$this.content.loading("hide");
			    });
        	}        
        },        
        
        /**
         * @desc 打开窗口
         */
        open: function(){
        	var $this=this;
        	this._event('beforeopen',null);
        	this.element.fadeIn("normal",
        	      function(){
        		       $this._event('afteropen',null);
        	      }		
        	);
        },
        
        /**
         * @desc 移除自定义按钮
         * @param {r} 通过选择器，得到按钮对象并移除  例如： "#id" ".class_name"  "div[name='btn']"
         */
        removeTitleButton: function(r){
        	$(r+"").remove();
        },
        
        /**
         * @desc 显示自定义按钮
         * @param {r} 通过选择器，得到按钮对象并显示  例如： "#id" ".class_name"  "div[name='btn']"
         */      
        showTitleButton: function(r){
        	$(r+"").show();
        }       
    });
});(function( $, factory ){

	if ( jazz.config.isUseRequireJS === true ) {
		define( ['jquery', 
		         'jazz.loading', 
		         'jazz.Panel' ], factory );
	} else {
		factory($);
	}	 
})(jQuery, function($){
	/**
	 * @version 0.5
	 * @name jazz.window
	 * @description 一种窗体容器，弹出页面。
	 * @constructor
	 * @extends jazz.panel
	 */
    $.widget("jazz.window", $.jazz.panel, {
       
    	options: /** @lends jazz.window# */ {
        	
    		vtype: 'window',
    		
    		/**
    		 *@type Boolean
    		 *@desc 显示关闭面板的按钮
    		 *@default true
    		 */
    		closable: true,
    		
    		/**
    		 *@type String
    		 *@desc  是否采用Esc键关闭窗体， true 可以用Esc键关闭窗体， false不可以
    		 *@default false
    		 */
    		closeonescape: false,
    		
    		/**
    		 *@type Boolean
    		 *@desc 关闭状态  true 关闭   false 隐藏 
    		 *@default true
    		 */
    		closestate: true,        
    		
    		/**
			 *@type Boolean
			 *@desc 窗口是否拖动
			 *@default false
			 */
            draggable: true,
            
            /**
             *@type String
             *@desc 窗口高度
             *@default 230
             */
            height: 230,
            
            /**
             *@type Boolean
             *@desc 窗口是否最大化展开
             *@default false
             */            
            maximize: false,
            
            /**
             *@type Number
             *@desc 窗口最小宽度
             *@default 200
             */
            minwidth: 200,
            
            /**
             *@type Number
             *@desc 窗口的最小高度
             *@default 200
             */
            minheight: 200,
            
            /**
             *@type Boolean
             *@desc 显示最小化面板的按钮
             *@default false
             */
            minimizable: false,
            
            /**
             *@type Boolean
             *@desc 显示最大化面板的按钮
             *@default false
             */
            maximizable: false,
            
            /**
             *@type Boolean
             *@desc 窗口是否显示为模式窗体 true 遮罩层  false 无遮罩层
             *@default true
             */
            modal: true,
            
            /**
			 *@type Boolean
			 *@desc 窗口是否可通过拖拽改变尺寸
			 *@default false
			 */
            resizable: false,
            
            /**
             *@type Object
             *@desc 任务栏
             *@default null
             *@private
             */            
            taskbar: null,
            
    		//覆盖panel中的属性，因为panel默认不显示
    		/**
    		 * @type Boolean
    		 * @desc 是否显示标题
    		 * @default true
    		 */
    		titledisplay: true,            
            
            /**
			 *@type Boolean
			 *@desc 窗口是否可见
			 *@default false
			 */
            visible: false,
            
            /**
             *@type String
             *@desc 窗口宽度
             *@default '300'
             */
            width: 300,

            
            //event
            /**  
             *@desc 弹出框展示后触发
             *@param {event} 事件
             *@event
			 *@example
			 *<br/>$("XXX").window("option", "afteropen", function(event){  <br/>} <br/>});
			 *或:
			 *<br/>$("XXX").on("windowafteropen",function(event){  <br/>} <br/>});
			 *或:
			 *function XXX(){……}
			 *<div…… afteropen="XXX()"></div> 或 <div…… afteropen="XXX"></div>	
			 */
            afteropen: null,

            /**  
			 *@desc 弹出框展示前触发
			 *@param {event} 事件
			 *@event
			 *@example
			 *<br/>$("XXX").window("option", "beforeopen", function(event){  <br/>} <br/>});
			 *或:
			 *<br/>$("XXX").on("windowbeforeopen",function(event){  <br/>} <br/>});
			 *或:
			 *function XXX(){……}
			 *<div…… beforeopen="XXX()"></div> 或 <div…… beforeopen="XXX"></div>	
			 */
            beforeopen: null,
            
            /**  
			 *@desc 弹出框隐最大化触发
			 *@event
			 *@example
			 *<br/>$("XXX").window("option", "maximize", function(event){  <br/>} <br/>});
			 *或:
			 *<br/>$("XXX").on("windowmaximize",function(event){  <br/>} <br/>});
			 *或:
			 *function XXX(){……}
			 *<div…… maximize="XXX()"></div> 或 <div…… maximize="XXX"></div>	
			 */
            maximize: null,
            
            /**  
			 *@desc 弹出框隐最小化触发
			 *@event
			 *@example
			 *<br/>$("XXX").window("option", "minimize", function(event){  <br/>} <br/>});
			 *或:
			 *<br/>$("XXX").on("windowminimize",function(event){  <br/>} <br/>});
			 *或:
			 *function XXX(){……}
			 *<div…… minimize="XXX()"></div> 或 <div…… minimize="XXX"></div>	
			 */
            minimize: null
        },
        
        /** @lends jazz.window */
		
		/**
         * @desc 创建组件
		 * @private
         */
        _create: function() {
        	this._super();
        },

        _init: function() {
        	this._super();
        	
        	this.element.addClass('jazz-window jazz-helper-hidden');
        	
            //icons
            this.icons = this.titlebarInner.find('.jazz-panel-titlebar-icon');
            this.closeIcon = this.handlerIcons.children('.jazz-panel-titlebar-close');
            
            //最大化
            this._maximizable();
            
            //最小化
            this._minimizable(); 
            
            //是否采用esc关闭页面
            this._esc();
            
            this.blockEvents = 'focus.window mousedown.window mouseup.window keydown.window keyup.window';          
            this.parent = this.element.parent();
            
            //事件
            this._winbindEvents();

            //拖动
            this._draggable();

            //改变窗体大小
            if(this.options.resizable){
            	this._setupResizable();
            }

            //默认最大化展开
            if(this.options.maximize){
            	this.toggleMaximize();
            }
          
            //docking zone
            if($(document.body).children('.jazz-window-docking-zone').length === 0) {
                $(document.body).append('<div class="jazz-window-docking-zone"></div>');
            }            
            
            this._open();
            
            this.pageindex = 0;
        },

        /**
         * @desc 弹出框获取焦点
         * @private
		 * @example this._applyFocus();
         */
        _applyFocus: function() {
            this.element.find(':not(:submit):not(:button):input:visible:enabled:first').focus();
        },
        
        /**
         * @desc 窗口拖动
         * @private
         */
        _draggable: function(){
            if(this.options.draggable) {
            	this.titlebar.addClass('jazz-panel-move-titlebar');
                /*
				if(this.options.maximizable){
                	this._setupDraggable();
                }else if(!this.options.maximize){
                	this._setupDraggable();
                }
				*/
				this._setupDraggable();
            }else{
            	this.titlebar.removeClass('jazz-panel-move-titlebar');
            	this.element.draggable("option", "disabled", true);
            }     	
        },
        
        /**
         * @desc 隐藏遮罩层
		 * @private
         */
        _disableModality: function(){
        	this.modality.loading('destroy');
            this.modality = null;
            $(document).unbind(this.blockEvents).unbind('keydown.window');
        },        

        /**
         * @desc 锁定窗口
         * @private
         * @param zone
		 * @example this._dock();
         */
        _dock: function(zone) {
            this.element.appendTo(zone).css('position', 'static');
            this.element.css({'height':'auto', 'width':'auto', 'float': 'left'});
            this.content.hide();
            this.handlerIcons.find('.jazz-titlebar-icon-minus').removeClass('jazz-titlebar-icon-minus').addClass('jazz-titlebar-icon-plus');
            this.minimized = true;

            if(this.options.resizable) {
                this.resizers.hide();
            }

            zone.css('z-index',++jazz.config.zindex);

            this._event('minimize');
        },
        
        /**
         * @desc 是否用Esc键关闭窗口
         * @private
         */
        _esc: function(){
        	if(this.options.closeonescape) {
        		var $this = this;
	            $(document).on('keydown.window', function(e) {
	                var keyCode = $.ui.keyCode,
	                active = parseInt($this.element.css('z-index'), 10) === jazz.config.zindex;
	
	                if(e.which === keyCode.ESCAPE && $this.element.is(':visible') && active) {
	                    $this.close();
	                }
	            });  
        	}else{
        		$(document).off('keydown.window');
        	}
        },        
        
        /**
         * @desc 显示遮罩层
		 * @private
         */
        _enableModality: function() {
        	var $this = this;
        	//this.modalId = "modal_"+this.getCompId()+"_"+jazz.getRandom();
        	var _height = "100%";
            if(jazz.isIE(6)){
            	_height = jazz.util.windowHeight();
            }
        	this.modality = $('<div></div>').addClass('jazz-window-modal').css({
                            	'top': '0px',
                            	'left': '0px',                            	
                                'width': '100%',
                                'height': _height,
                                'z-index': $this.element.css('z-index') - 1
                            }).appendTo(document.body).loading({blank: true});
        },        

        /**
         * @desc 确定窗体的显示位置
         * @private
         */
        _initPosition: function() {
    		if(this.options.maximize){
    			this.element.css({top: 0, left: 0});
    		}else{
    			var windowWidth = jazz.util.windowWidth(), windowHeight = jazz.util.windowHeight();
    			var eleWidth = this.element.width(), eleHeight = this.element.height();

    			var top = 0, left = 0;
    			if(eleWidth > windowWidth){
    				left = $(window).scrollLeft() + 0;
    			}else{
    				left = $(window).scrollLeft() + Math.ceil((windowWidth - eleWidth)/2);
    			}

    			if(eleHeight > windowHeight){
    				top = $(window).scrollTop() + 0;
    			}else{
    				top = $(window).scrollTop() + Math.ceil((windowHeight - eleHeight)/2 - 2);
    			}
    			
    			this.element.css({top: top, left: left});
    		}
            this.positionInitialized = true;
        },
        
        /**
         * @desc 最大化按钮
         * @private
         */
        _maximizable: function(){
        	if(this.options.maximizable === true){
        		var $this = this;
        		var a = this.titlebarInner.find('.jazz-titlebar-icon-extlink');
        		if(a.hasClass('jazz-titlebar-icon-extlink')){
        			this.titlebarInner.find('.jazz-panel-titlebar-maximize').remove();
        		}
        		var obj = this._renderTitleButton('jazz-panel-titlebar-maximize', 'jazz-titlebar-icon-extlink');
	            this.titlebar.off('dblclick.window').on('dblclick.window', function(e){
	                 $this.toggleMaximize();
	                 e.preventDefault();
	            }); 
                obj.off('click.panelmax').on('click.panelmax', function(e) {
                    $this.toggleMaximize();
                    e.preventDefault();
                });
        	}else{
        		this.titlebarInner.find('.jazz-panel-titlebar-maximize').remove();
        	}
        },

        /**
         * @desc 最小化按钮
         * @private
         */        
        _minimizable: function(){
        	if(this.options.minimizable === true){
        		var $this = this;
        		var a = this.titlebarInner.find('.jazz-titlebar-icon-minus');
        		if(a.hasClass('jazz-titlebar-icon-minus')){
        			this.titlebarInner.find('.jazz-panel-titlebar-minimize').remove();
        		}
        		var obj = this._renderTitleButton('jazz-panel-titlebar-minimize', 'jazz-titlebar-icon-minus');
                obj.on('click.panelmin', function(e) {
                    $this.toggleMinimize();
                    e.preventDefault();
                });        		
        	}else{
        		this.titlebarInner.find('.jazz-panel-titlebar-minimize').remove();
        	}
        },

        /**
         * @desc 由最大化还原成正常窗口
         * @private
         */        
        _maxToResotre: function(){
            this.element.removeClass('jazz-window-maximized');
            this._restoreState();

            this.handlerIcons.find('.jazz-titlebar-icon-newwin').removeClass('jazz-titlebar-icon-newwin').addClass('jazz-titlebar-icon-extlink');
            this.maximized = false;        	
        },
        
        /**
         * @desc 移动到最顶层
         * @private
         */
        _moveToTop: function() {
            this.element.css('z-index', ++jazz.config.zindex);
        },
        
        /**
         * @desc 打开窗口
         * @private
         */        
        _open: function(){
            //是否可见
            if(this.options.visible){
                this.open();
            }        	
        },

		/**
         * @desc 处理content容器
         * @private
		 */
		_overflow: function(){
			this.content.css("overflow", this.options.overflow);
		},
        
        /**
         * @desc 显示弹出框触发afteropen事件
         * @private
         */
        _postShow: function() {
            //execute user defined callback
            this._event('afteropen', null);

            this._applyFocus();
        },       

        /**
         * @desc 恢复原窗口大小
         * @private
		 * @example this._restoreState();
         */
        _restoreState: function() {
            this.element.width(this.state.width).height(this.state.height);
            this._winCompSize(this.state.height);         
            
            var win = $(window);
            this.element.offset({
                    top: this.state.offset.top + (win.scrollTop() - this.state.windowScrollTop),
                    left: this.state.offset.left + (win.scrollLeft() - this.state.windowScrollLeft)
            });
        },
        
        _setOption: function(key, value){
        	switch(key){
				case 'closeonescape':
					if(value == "true" || value == true) { 
						this.options.closeonescape = true; 
					}else{
						this.options.closeonescape = false;
					}
					this._esc();
				break;   
				case 'draggable':
					if(value == "true" || value == true) { 
						this.options.draggable = true;
					}else{
						this.options.draggable = false;
					}
					this._draggable();
					break;
        		case 'resizable':
        			if(value == "true" || value == true) { 
        				this.options.resizable = true;
        			}else{
        				this.options.resizable = false;
        			}
        			this._setupResizable();
        		break;
        		case 'maximize':
            		if(value == "true" || value == true) { 
            			this.options.maximize = true;
            			//非最大化时，变成最大化窗口
            			if(!this.maximized){
            				this.toggleMaximize();            				
            			}
            		}else{
            			if(this.maximized){
            				this._maxToResotre();
            			}
            			this.options.maximize = false;
            		}
        		break;
        		case 'maximizable':
            		if(value == "true" || value == true) { 
            			this.options.maximizable = true;
            		}else{
            			this.options.maximizable = false;
            		}
            		this._maximizable();
        		break;
        		case 'minimizable':
            		if(value == "true" || value == true) {
            			this.options.minimizable = true;
            		}else{
            			this.options.minimizable = false;
            		}
            		this._minimizable();
        		break;
        		case 'visible':
            		if(value == "true" || value == true) {
            			this.options.visible = true;
            			this.element.show();
            		}else{
            			this.options.visible = false;
            			this.element.hide();
            		}
        		break;         		
        	}
        	this._super(key, value);
        },
        
        /**
         * @desc 设置拖拽
         * @private
         */
        _setupDraggable: function() {
			var $this = this;
        	this.element.draggable({
                cancel: '.jazz-panel-content, .jazz-panel-titlebar-close',
                handle: '.jazz-panel-titlebar',
				containment: "body",
                start: function(e, ui){
                	if($this.maximized){  //拖动开始时判断是否是最大化窗口，如果是最大化窗口，将窗口回复原状进行拖动
                		$this.toggleMaximize();
                	}
                	if($this.frameObject != null){
						$this.content.css("overflow", "hidden");
                		$this.frameObject.css('marginLeft', '-4000px');
                		$this.displayDiv.css('display', 'block');
                	}
               	 	$this.element.css('z-index', ++jazz.config.zindex);
                },
                drag: function(e, ui){
				},
                stop: function(e, ui){
                	if($this.frameObject != null){
            			$this.displayDiv.css('display', 'none');
                		$this.frameObject.css('marginLeft', '0px');
						$this.content.css("overflow", $this.options.overflow);
                	}
                }
            });
        },

        /**
         * @desc 设置大小调整
         * @private
         */
        _setupResizable: function() {
        	if(this.options.resizable === true){
            	var $this = this;
            	this.element.resizable({
                    minWidth : this.options.minwidth,
                    minHeight : this.options.minheight,
                    start: function(e, ui){
                    	if($this.options.frameurl!=null){
							$this.content.css("overflow", "hidden");
                    		$this.frameObject.css('marginLeft', '-4000px');
                    		$this.displayDiv.addClass('jazz-window-framemb');
                    	}
                    	$this.content.width('100%');
                    },
                    resize: function(){},
                    stop: function(e, ui){
                        var width = ui.size.width;
                        var toHeight = ui.size.height;
                        if ($this.titlebar) {
                            toHeight -= $this.titlebar.outerHeight();
                        }
                        if ($this.toolbar) {
                            toHeight -= $this.toolbar.outerHeight();
                        }
                        $this.content.outerWidth(width);
                        $this.content.outerHeight(toHeight);
                    	if($this.options.frameurl!=null){
                    		$this.displayDiv.removeClass('jazz-window-framemb');
                    		$this.frameObject.outerWidth($this.content.width()).outerHeight($this.content.height()).css('marginLeft', '0px');
                    	}
                    }
                });                    
	        	this.resizers = this.element.children('.jazz-resizable-handle');
        	}else{
        		this.element.resizable("destroy");
        	}
        },

        /**
         * @desc 保存窗体状态
         * @private
         */
        _saveState: function() {
        	var el = this.element, win = $(window);
            this.state = {
                width: el.width(),
                height: el.height(),
                offset: el.offset(),
                windowScrollLeft: win.scrollLeft(),
                windowScrollTop: win.scrollTop()
            };
        },
        
        /**
         * @desc 绑定事件
         * @privatef
         */
        _winbindEvents: function() {   
            var $this = this, el = this.element;    
            
            el.on('click.window', function(e){
            	el.css('z-index', ++jazz.config.zindex);
            });
            
        	if(this.options.frameurl!=null){
        		$('#'+this.frameId).load(function(){
        			$('#'+$this.frameId).contents().find('body').bind('mousedown.iframe', function(e){
           			 	$this.element.css('z-index', ++jazz.config.zindex);
            		});        			
        		});
        	}
        },        
        
        /**
         * @desc 计算内容区大小
         * @private
         */
        _winCompSize: function(height) {
        	var h = 0;
        	if(this.toolbar){
        		h = this.toolbar.outerHeight();
        	}
            this.content.width('auto').outerHeight(height - this.titlebar.outerHeight() - h);
            if(this.options.frameurl != null){
            	var h = this.content.height();
            	this.frameObject.width('100%').outerHeight(h).load(function(){
            		$(this).width('100%').outerHeight(h);
            	});
            }        	
        },
           
        /**
         * @desc 关闭弹出框
         * @param {trigger} 是否触发事件  true触发事件 false不触发事件 默认true
		 * @example $("#div_id").window('close');
         */
        close: function(trigger) {
             if(this.options.taskbar instanceof jQuery){
            	var id = $('#'+this.liId);
            	if(id instanceof jQuery){
            		id.remove();
            	}
             }

             if(this.options.closestate == true){ 
	             if(!trigger){
	            	 this._event('beforeclose', null);
	             }
				 if(this.options.frameurl!=null){
					 this.frameObject.attr('src', 'about:blank');
					 try{
						 var dom = this.frameObject.get(0);
						 if(!jazz.isIE(8)){
							 dom.contentWindow.document.write(''); 
						 }
						 dom.contentWindow.document.clear();
					 }catch(e){
						  //this.frameObject.parentNode.removeChild(this.frameObject.get(0));
						 this.frameObject.remove();
					 }
				 }
				 this.element.remove();
				 this.destroy();
		         if(this.options.modal) {
		         	this._disableModality();
		         }
		         if(!trigger){
		        	 this._event('afterclose', null);
		         }       
             }else{
            	 this.element.hide();
            	 if(this.options.afterhidden){
	            	 this._event('afterhidden', null);
            	 }
		         if(this.options.modal) {
		        	this._disableModality();
			     }            	 
             }
        },        

        /**
         * @desc 当前页显示
         */
        currentPage: function(url, align){
        	var obj = {
        		url: url
        	};
        	this.pageParams.push(obj);
        	this.pageindex = this.pageindex + 1;   

        	this.slider('left', url);
        	
        	if(this.pageindex === 1){
        		this.customIconId = 'customIconId'+jazz.getRandom();
        		var $this = this;
        		this.addTitleButton([{
        			id: this.customIconId,
        			align: align,
        			iconClass: 'jazz-leftarrow-icon',
        			click: function(e, ui){
        				$this.previous();
        			}
        		}]);
        	}
        },

        /**
         * @desc 下一页
         */
        next: function(){
        	var index = this.pageindex + 1;
        	if(index!=this.pageParams.length){
	        	var obj = this.pageParams[index];
	        	if(!!obj){
	        		this.slider('right', obj["url"]);
	        		this.pageindex = this.pageindex + 1;
	        	}
        	}
        },

        /**
         * @desc 显示弹出框
		 * @example $("#div_id").window('open');
         */
        open: function() {
        	this.element.css('z-index', ++jazz.config.zindex);

        	if(this.element.is(':visible')) {
                return;
            }
            
            this._event('beforeopen', null);

            //确定窗体展现的位置
            //if(!this.positionInitialized) {
                this._initPosition();
            //}

            this.element.show();

            var _url = this.options.frameurl;
			if(_url!=null){
				if(this.options.closestate == false){
					if(!this.frameObject.attr('src')){
						this.frameObject.attr('src', _url);
					};
				}else{
					this.frameObject.attr('src', _url);					
				}
			}

            this._postShow();

            this._moveToTop();

            if(this.options.modal) {
                this._enableModality();
            }
            
            //为青海项目单独开发的，放在门户的托盘上的
            if(this.options.taskbar instanceof jQuery){
            	var s = "";
            	if(this.options.titleicon){
            		s = 'style="background: url('+this.options.titleicon+') no-repeat center center "';
            	}
            	this.liId = 'li_id_'+jazz.getRandom();
            	var id = this.options.id ? this.options.id: this.options.name;
            	$('<li id="'+this.liId+'" winid="'+id+'"><div><span class="jazz-portal-bottom-li-img" '+s+'></span>'
    		  	 +'<span class="jazz-portal-bottom-li-word">'+this.getTitle()+'</span>'
    		  	 +'<span class="jazz-portal-bottom-li-close"></span></div></li>').appendTo(this.options.taskbar); 
            }
        },
        
        /**
         * @desc 上一页
         */
        previous: function(){
        	var index = this.pageindex - 1;
        	if(index > -1){
	        	var obj = this.pageParams[index];
	        	if(!!obj){
		        	this.slider('left', obj["url"]);
		        	this.pageindex = this.pageindex - 1;
		        	if(this.pageindex === 0){
		        		this.removeTitleButton("#"+this.customIconId);
		        	}
	        	}
        	}
        },
        
        /**
         * @desc 平滑效果
         * @param {align} 滑动方向 默认left
         * @param {url} 设置url
         */
        slider: function(align, url){
        	if(!!url){
    			var $this = this;
    			this.content.loading();
    			var margin = {marginLeft: (0 - parseInt(this.element.width()))};
                if(align=='right'){
        			margin = {marginLeft: parseInt(this.element.width())};
        		}
                if(this.options.frameurl!=null){
	    			this.frameObject.animate(margin, 200, null, function(){
    	        		$this.frameObject.attr('src', url);
    	        		$this.frameObject.load(function(){
    	        			 $this.content.loading("hide");
    	        			 $this.frameObject.css({marginLeft: 0});
    				    });
	    			});
                }
        	}
        },
        
        /**
         * @desc 最大化
         */
        toggleMaximize: function() {
            if(this.minimized) {
                this.toggleMinimize();
            }

            if(this.maximized) {
            	this._maxToResotre();
            }else {
                this._saveState();

                var winTop = this.state.windowScrollTop;        
                var winLeft = this.state.windowScrollLeft;
                
                var page = this.getPageSize();
                var winHeight = page.windowHeight, winWidth = page.windowWidth;

                if(this.options.taskbar instanceof jQuery){
                	winHeight = winHeight - this.options.taskbar.outerHeight();
                }
                
                this.element.addClass('jazz-window-maximized').outerWidth(winWidth).outerHeight(winHeight)
                            .offset({top: winTop, left: winLeft});
                
                this._winCompSize(winHeight);

                this.handlerIcons.find('.jazz-titlebar-icon-extlink').removeClass('jazz-titlebar-icon-extlink').addClass('jazz-titlebar-icon-newwin');
                this.maximized = true;
                this._event('maximize');
            }
        },

        /**
         * @desc 最小化
         */
        toggleMinimize: function() {
            var animate = true,
            dockingZone = $(document.body).children('.jazz-window-docking-zone');

            if(this.maximized) {
            	if(this.options.maximizable){
            		this.toggleMaximize();
            	}
                animate = false;
            }

            var $this = this;
            if(this.minimized) {
                //this.element.appendTo(this.parent).css({'float': 'none'});
                this._restoreState();
                this.content.show();
                this.handlerIcons.find('.jazz-titlebar-icon-plus').removeClass('jazz-titlebar-icon-plus').addClass('jazz-titlebar-icon-minus');
                this.minimized = false;

                if(this.options.resizable) {
                    this.resizers.show();
                }
                
            } else {
                this._saveState();
                
                if(this.options.taskbar instanceof jQuery){
                	this.element.css({'margin-left': '-3000px'});
                }else{
	                if(animate) {
	                    this.element.effect('transfer', {
	                        to: dockingZone,
	                        className: 'jazz-window-minimizing'
	                     }, 300,
	                     function() {
	                        $this._dock(dockingZone);
	                        var width = $this.handlerIcons1.width()*2;
	                        if($this.handlerIcons1.width() < $this.handlerIcons2.width()){
	                        	width = $this.handlerIcons2.width()*2;
	                        }
	                        $this.element.width(width + $this.titlebar.width() + 40);
	                     });
	                } else {
	                    this._dock(dockingZone);
	                    var width = $this.handlerIcons1.width()*2;
	                    if($this.handlerIcons1.width() < $this.handlerIcons2.width()){
	                    	width = $this.handlerIcons2.width()*2;
	                    }                 
	                    $this.element.width(width + $this.titlebar.width() + 40);
	                }
                
                }
            }
            
        }

    });

});
(function($, factory) {

    if (jazz.config.isUseRequireJS === true) {
        define(['jquery',
            'jazz.Panel',
            'form/jazz.form.TextField',
            'form/jazz.form.TextareaField',
            'form/jazz.form.ComboxField',
            'form/jazz.form.ComboxTree',
            'form/jazz.form.AutocompletecomboxField',
            'form/jazz.form.ColorField',
            'form/jazz.form.DateField',
            'form/jazz.form.CheckboxField',
            'form/jazz.form.RadioField',
            'form/jazz.form.NumberField'
        ], factory);
    } else {
        factory($);
    }
})(jQuery, function($) {
    /**
     * @version 0.5
     * @name jazz.formpanel
     * @description 是一个承载表单组件，是一完成特定的功能和结构化组件。
     * @constructor
     * @extends jazz.panel
     * @requires
     * @param
     * @example $('#formpanel_id').formpanel(); //在id='frompanel_id'的元素上绑定表单容器
     */
    $.widget("jazz.formpanel", $.jazz.panel, {

        options: /** @lends jazz.formpanel# */ {

            /**
             *@type String
             *@desc 组件类型
             *@default formpanel
             */
            vtype: 'formpanel',

            /**
             *@type String
             *@desc 页面布局类型 
             *@default table
             */
            layout: 'table',

            /**
             *@type String
             *@desc table页面列布局
             *@default 
             */
            layoutconfig: {
                cols: 2,
                columnwidth: ['50%', '*']
            },


            /**
             *@type JSON or String
             *@desc JSON数据或url地址 
             *@default null
             */
            dataurl: null,

            /**
             *@type Object
             *@desc 参数
             *@default null
             */
            dataurlparams: null,

            /**
             *@type 布尔值
             *@desc 表单元素是否全部显为文本, 功能同readonly, 建议使用readonly属性实现  true显示 false 不显示
             *@default false
             */
            dataview: false,

            /**
             *@type Boolean
             *@desc 是否是可读字段 true只读  false非只读
             *@default false
             */
            readonly: false,
            
            /**
             *@type Boolean
             *@desc 是否可以显示查询条件 true显示  false不显示
             *@default false
             */
            iscondition: false,
            
            /**
             *@type Boolean
             *@desc 当属性iscondition=true时, 查询条件的label名称
             *@default "查询条件"
             */
            searchlabel: "查询条件",
            
    		/**
			 *@desc 当iscondition=true时，增加节点时，触发事件
			 *@param {event} 事件
			 *@event
			 *@example
			 *<br/>$("XXX").formpanel("option", "conditionaddevent", function(event){  <br/>} <br/>});
			 *或:
			 *<br/>$("XXX").on("formpanelconditionaddevent",function(event, ui){  <br/>} <br/>});
			 *或：
			 *function XXX(){……}
			 *<div…… conditionaddevent="XXX()"></div> 或 <div…… conditionaddevent="XXX"></div>
			 */	            
            conditionaddevent: null,
            
    		/**
			 *@desc 当iscondition=true时，删除节点时，触发事件
			 *@param {event} 事件
			 *@event
			 *@example
			 *<br/>$("XXX").formpanel("option", "conditiondeleteevent", function(event){  <br/>} <br/>});
			 *或:
			 *<br/>$("XXX").on("formpanelconditiondeleteevent",function(event, ui){  <br/>} <br/>});
			 *或：
			 *function XXX(){……}
			 *<div…… conditiondeleteevent="XXX()"></div> 或 <div…… conditiondeleteevent="XXX"></div>
			 */
            conditiondeleteevent: null,
            
    		/**
			 *@desc 当iscondition=true时，点击全部撤销节点时，触发事件
			 *@param {event} 事件
			 *@event
			 *@example
			 *<br/>$("XXX").formpanel("option", "conditionreseteevent", function(event){  <br/>} <br/>});
			 *或:
			 *<br/>$("XXX").on("formpanelconditionreseteevent",function(event, ui){  <br/>} <br/>});
			 *或：
			 *function XXX(){……}
			 *<div…… conditionreseteevent="XXX()"></div> 或 <div…… conditionreseteevent="XXX"></div>
			 */            
            conditionreseteevent: null
        },

        /** @lends jazz.formpanel */

        /**
         * @desc 创建组件
         * @private
         */
        _create: function() {
            this._super();
            this.element.addClass("jazz-formpanel");
        },

        /**
         * @desc 初始化组件
         * @private
         */
        _init: function() {
            this._super();
            
            this.content.addClass("jazz-formpanel-content");
            
            if(this.options.iscondition){
            	this.content.prepend("<div class='jazz-formpanel-condition'>" +
            			"<div class='jazz-formpanel-title'>" +
            			"<div class='jazz-formpanel-title-img'></div><div class='jazz-formpanel-title-name'>" + this.options.searchlabel + "</div>" +
            			"</div>" +
            			"<div class='jazz-formpanel-con-c'></div>" +
            			"<div class='jazz-formpanel-con-btn jazz-formpanel-con-btn2'><div class='jazz-formpanel-btn-span'></div></div><div style='clear:both'></div>"+
            			"</div>");
            	this.isconobj = this.content.find(".jazz-formpanel-con-c");
            	var $this = this;
            	$.each(this.getChildrenComponent(), function() {
            		var name = $(this).attr("name");
            		$this.isconobj.append("<div class='jazz-formpanel-con' name='"+name+"_con' id='"+name+"_con'></div>");
            	});
            }

            if (this.options.dataurl) {
                this.reload();
            }
            
            //if (this.options.layout == "auto") {
            //    this.content.css("overflow", "hidden");
            //}
        },

        /**
         * @desc ajax请求函数
         * @return 返回请求响应的数据
         * @private
         */
        _ajax: function() {
            //this.element.loading();
            var param = {
                url: this.options.dataurl,
                params: this.options.dataurlparams,
                async: true,
                showloading: false,
                callback: this._callback //回调函数
            };
            $.DataAdapter.submit(param, this);
        },

        /**
         * @desc ajax请求回调函数
         * @params {data} ajax请求返回的值
         * @params {sourceThis} 当前类对象
         * @private
         */
        _callback: function(data, sourceThis) {
            var jsonData = data;
            var $this = sourceThis;
            if (jsonData && jsonData["data"]) {
                $.each($this.getChildrenComponent(), function(name, obj) {
                    var $obj = $(obj);
                    var childtype = $obj.attr("vtype");
                    var isInited = jazz._isComponentInited($obj),
                        f = $this._filterVtype(childtype);
                    var value = jsonData.data[name];
                    if (isInited && f) {
                        $this._runChildSetValue(childtype, value, obj);
                    }
                });
            }

            if ($.isFunction($this.callbackfunction)) {
                $this.callbackfunction.call($this);
            }
        },

        /**
         * @desc 设置dataview属性
         * @private
         */
        _dataview: function() {
            var $this = this;
            $.each(this.getChildrenComponent(), function(name, obj) {
                var $obj = $(obj);
                var childtype = $obj.attr("vtype");
                var isInited = jazz._isComponentInited($obj),
                    f = $this._filterVtype(childtype);
                if (isInited && f) {
                    $this._readonly($obj.data(childtype));
                }
            });
        },

        /**
         * @desc 过滤掉formpanel中不是表单组件的其他组件
         * @params {vtype} vtype类型
         * @private
         * @returns {Boolean}
         */
        _filterVtype: function(vtype) {
            if (vtype == 'toolbar' || vtype == 'button' || vtype == 'gridpanel') {
                return false;
            } else {
                return true;
            }
        },

        /**
         * @desc 根据type获取元素值
         * @params {name} 表单中的子元素的name值
         * @params {name} 表单中的子元素的name值  
         * @private
         */
        _getProperties: function(type, name) {
            if (!name) {
                var formJson = {};
                formJson["name"] = this.options.name;
                formJson["vtype"] = "formpanel";

                var formdata = {};
                var $this = this;
                $.each(this.getChildrenComponent(), function(childname, obj) {
                    var $obj = $(obj);
                    var childtype = $obj.attr("vtype");
                    var isInited = jazz._isComponentInited($obj),
                        f = $this._filterVtype(childtype);
                    if (isInited && f) {
                        formdata[childname] = $obj[childtype](type);
                    }
                });
                formJson["data"] = formdata;
                return formJson;
            } else {
                var value = "";
                $.each(this.getChildrenComponent(), function(childname, obj) {
                    var $obj = $(obj);
                    var childtype = $obj.attr("vtype");
                    var isInited = jazz._isComponentInited($obj);
                    if (isInited && name == childname) {
                        value = $obj[childtype](type);
                    }
                });
                return value;
            }
        },

        /**
         * @desc 执行子组件的readonly方法
         * @params {comp} 组件对象
         * @private
         */
        _readonly: function(comp) {
            if (this.options.dataview == true || this.options.readonly == true) {
                comp.options.readonly = true;
                comp._readonly();
            } else {
                comp.options.readonly = false;
                comp._readonly();
            }
        },

        /**
         * @desc 执行子组件的setValue方法
         * @params {vtype} 子组件的vtype类型
         * @params {value} 子组件的值   
         * @params {obj} 组件对象
         * @private
         */
        _runChildSetValue: function(vtype, value, obj) {
            if (vtype == 'datefield' && (value + "").length > 10) {
                value = value.substring(0, 10);
            }
            var comp = $(obj).data(vtype);
            comp.setValue(value);
        },

        /**
         * @desc 设置组件属性的值
         * @param {key} 对象的属性名称 
         * @param {value} 对象的属性值
         * @private
         */
        _setOption: function(key, value) {
            switch (key) {
                case 'dataurlparams':
                    this.options.dataurlparams = value;
                    break;
                case 'dataurl':
                    this.options.dataurl = value;
                    break;
                case 'dataview':
                case 'readonly':
                    if (value == true || value == "true") {
                        this.options.dataview = true;
                        this.options.readonly = true;
                    } else {
                        this.options.dataview = false;
                        this.options.readonly = false;
                    }
                    this._dataview();
                    break;
            }
            this._super(key, value);
        },

        /**
         * 设置condition查询条件
         * @param {obj} obj.vtype obj.name obj.text obj.value
         * @private
         */
        _setCondition: function(obj){
        	if(this.isconobj){
        		var that = this;
        		var conobj = this.isconobj.find("div[name='"+obj.options.name+"_con']");
        		if(conobj.length > 0){
        			var v = obj.getValue(), t = obj.getText();
        			if(!obj.options.multiple){//单选,移除其他兄弟
        				conobj.empty();
        				if(v){
        					conobj.addClass("jazz-formpanel-con2");
        					conobj.removeClass("jazz-formpanel-con-height");
        					if(obj.options.label){
        						conobj.append("&nbsp;"+obj.options.label+"：<div class='jazz-formpanel-con-t' value='"+v+"'>"+t+"<div class='jazz-formpanel-con-img'>&nbsp;&nbsp;</div></div>");        						
        					}else{
        						conobj.append("<div class='jazz-formpanel-con-t' value='"+v+"'>"+t+"<div class='jazz-formpanel-con-img'>&nbsp;&nbsp;</div></div>");
        					}
        					this._conditionclick();
        					//obj.element.hide();
        					this._event("conditionaddevent", null);
        				}
        			}else{
        				conobj.empty();
        				var vj = v.split(","), tj = t.split(",");
	        			for(var i=0, len=vj.length; i<len; i++){
	        				if(vj[i]){
	        					if(i==0){
	        						conobj.addClass("jazz-formpanel-con2");
	        						conobj.removeClass("jazz-formpanel-con-height");
	        						if(obj.options.label){
	        							conobj.append("&nbsp;"+obj.options.label+"：<div class='jazz-formpanel-con-t' value='"+vj[i]+"'>"+tj[i]+"<div class='jazz-formpanel-con-img'>&nbsp;&nbsp;</div></div>");	        							
	        						}else{
	        							conobj.append("<div class='jazz-formpanel-con-t' value='"+vj[i]+"'>"+tj[i]+"<div class='jazz-formpanel-con-img'>&nbsp;&nbsp;</div></div>");
	        						}
	        						this._conditionclick();
	        					}else{
	        						conobj.append("<div class='jazz-formpanel-con-t' value='"+vj[i]+"'>"+tj[i]+"<div class='jazz-formpanel-con-img'>&nbsp;&nbsp;</div></div>");	        						
	        					}
	        				}
	        				if((i+1)==len){
	        					this._event("conditionaddevent", null);
	        				}
	        			}
        			}
        			$.each(conobj.find(".jazz-formpanel-con-img"), function(){
        				var $this = $(this);
        				$(this).off("click").on("click", function(){
        					$this.parent().remove("");
        					var cn = conobj.children().length;
        					if(cn==0){
        						conobj.removeClass("jazz-formpanel-con2");
        						conobj.addClass("jazz-formpanel-con-height");
        						conobj[0].innerHTML = "";
        						if(that.isconobj.find(".jazz-formpanel-con-t").length==0){
        							var nobj = that.isconobj.next();
        							nobj.off("click");
        							nobj.addClass("jazz-formpanel-con-btn2");
        						};
        						obj.element.show();
        					};
        					var _value = "";
        					$.each(conobj.children(".jazz-formpanel-con-t"), function(i){
        						if(i==0){
        							_value = $(this).attr("value");
        						}else{
        							_value += ","+ $(this).attr("value");
        						}
        					});

     					    //重新设置值
        					obj.setValue(_value);
        					
        					that._event("conditiondeleteevent", null, {name: obj.options.name, num: cn});

        				});
        			});
        			
        		}
        		
        		
        	}
        },
        
        _conditionclick: function(){
			var $this = this;
        	var nobj = this.isconobj.next();
        	nobj.removeClass("jazz-formpanel-con-btn2");
			nobj.off("click").on("click", function(){
				$this.reset();
				$this._conditionrest(nobj);
                $.each($this.getChildrenComponent(), function(childname, obj) {
                	var $obj = $(obj);
                    var childtype = $obj.attr("vtype");
                    if(childtype && childtype!="hiddenfield"){
                    	$(this).show();
                    }
                });
				$this._event("conditionreseteevent", null);
			});
        },
        
        _conditionrest: function(nobj){
			$.each(this.isconobj.find(".jazz-formpanel-con"), function(){
				$(this).addClass("jazz-formpanel-con-height");
				$(this).empty();
				$(this).removeClass("jazz-formpanel-con2");
			});
			nobj.addClass("jazz-formpanel-con-btn2");
        },
        
        /**
         * @desc 获取表单元素数据
         * @params {name} 表单中的子元素的name值
         * @return  String or Json
         * @example  $('#formpanel_id').formpanel('getValue','inputname','username'); 获取单个name=username 的元素值
         * @example  $('#formpanel_id').formpanel('getValue'); 获取整个表单的值
         */
        getValue: function(name) {
            return this._getProperties('getValue', name);
        },

        /**
         * @desc 获取表单元素数据
         * @params {name} 表单中的子元素的name值
         * @return  String or Json
         * @example  $('#formpanel_id').formpanel('getText','inputname','username'); 获取单个name=username 的元素值
         * @example  $('#formpanel_id').formpanel('getText'); 获取整个表单的值
         */
        getText: function(name) {
            return this._getProperties('getText', name);
        },

        /**
         * @desc 初始化表单数据，依据dataurl
         * @params {data} 加载的JSON数据，暂时不支持
         * @params {callbackfunction} 回调函数 
         * @example $('#formpanel_id').formpanel('reload', null, function(){ …… }); 
         */
        reload: function(data, callbackfunction) {
            this.callbackfunction = callbackfunction;
            if($.isArray(data)){
            	this._callback(data, this);
            }else if(this.options.dataurl && typeof(this.options.dataurl) == 'string'){          	
            	this._ajax();
			}else if (!jazz.isEmptyObject(this.options.dataurl)) {
				this._callback(this.options.dataurl, this);
            }
        },

        /**
         * @desc 表单重置
         * @params {flag} 布尔值，true时情况hiddenfield隐藏域的值，默认情况下不清除
         * @example  $('#formpanel_id').formpanel('reset'); $('#formpanel_id').formpanel('reset',true);
         */
        reset: function(flag) {
            $.each(this.getChildrenComponent(), function(i, obj) {
                var $obj = $(obj);
                var childtype = $obj.attr("vtype");
                if (childtype != 'toolbar' && childtype != 'button') {
                    if (!flag && childtype == 'hiddenfield') {
                        return true;
                    }
                    var isInited = jazz._isComponentInited($obj);
                    if (isInited) {
                        $obj[childtype]('reset');
                    }
                }
            });
        },

        /**
         * @desc 设置from表单元素值
         * @params {name} 参数为空时，设置表单的json数据，name不为空时，value设置form下元素的值
         * @params {value} 表单元素值
         * @example  $('#formpanel_id').formpanel('setValue','inputname','username'); 设置单个name=username 的元素值
         * @example  $('#formpanel_id').formpanel('setValue','name'); 设置整个表单的值
         */
        setValue: function(name, value) {
            if (name instanceof Object) {
                this.options.data = name;
                this._callback(this.options.data, this);
            } else {
                $.each(this.getChildrenComponent(), function(childname, obj) {
                    var $obj = $(obj);
                    var childtype = $obj.attr("vtype");
                    var isInited = jazz._isComponentInited($obj);
                    if (childname == name && isInited) {
                        $this._runChildSetValue(childtype, value, obj);
                    }
                });
            }
        },

        /**
         * @desc 校验formpanel中表单元素的rule规则
         * @param {[exceptElementName]} formpanel中排除校验的元素名称
         * @return {boolean} 通过校验返回true，否则为false
         * @public
         */
        validate: function() {
            var flag = true;

            //校验当前formpanel中的子元素
            //通过(div[vtype])找出所有子元素
            //避免通过this.getChildrenComponent()丢失子元素
            var subElements = this.element.find('div[vtype]');
            if (subElements.length == 0) {
                //无子元素的时候，默认校验通过

            } else {
                subElements.each(function(index, element) {
                    var el = $(element);
                    var vtype = el.attr('vtype'),
                        $field = el.data(vtype);
                    var options = $field.options;
                    var rule = options.rule;
                    if (rule && vtype != "gridpanel" && vtype != "hiddenfield" && vtype != "checkboxfield" && vtype != "radiofield" && options.isrule) { //过滤掉formpanel中嵌套的gridpanel
                        var msg = options.msg;
                        var f = jazz.doTooltip($field, $field.getText(), rule, msg);
                        if (f == false) {
                            flag = false;
                            $field._validateStyle(f);
                        }
                    }
                });
            }

            return flag;
        }

    });

});
(function( $, factory ){
	if ( jazz.config.isUseRequireJS === true ) {
		define( ['jquery', 'jazz.BoxComponent'], factory );
	} else {
		factory($);
	}	 
})(jQuery, function($){
	/**
	 * @version 0.5
	 * @name jazz.tabpanel
	 * @description 一种基础性的tab容器。
	 * @constructor
	 * @extends jazz.container
	 * @requires
	 * @example $('#div_id').tabpanel();
	 */
    $.widget("jazz.tabpanel", $.jazz.boxComponent, {
    	
    	options: /** @lends jazz.tabpanel# */ {
    		/**
    		 * @type  String
    		 * @desc  组件类型 
    		 * @default  'tabpanel'
    		 */      
    		vtype: "tabpanel",

    		/**
			 *@type Number
			 *@desc 当前活动的tab页
			 *@default 0
			 */
            activeindex: 0,
            
    		/**
			 *@type boolean
			 *@desc 是否允许关闭第一个标签
			 *@default false
			 */
            isclosefirst: false,
            
    		/**
			 *@type Number
			 *@desc tab标题的总宽度或高度超出所在容器时的显示类型
			 *@default null
    		 */
    		overflowtype: 2,
            
            /**
			 *@type String
			 *@desc tab标题所摆放的位置，'top'标题在上边 'left'标题在左边 'bottom'标题在下边 'right'标题在右边
			 *@default 'top'
			 */
            orientation:'top',    		
    		
			/**
			 *@type boolean
			 *@desc 否显示容器的边框
			 *@default true
			 */               
            showborder: true,
            
            /**
			 *@type boolean
			 *@desc 是否显示tab页签上的关闭按钮
			 *@default false
			 */
            showtabclose: true,
    		
    		/**
			 *@type Number
			 *@desc tab标题内容的宽度
			 *@default auto 自适应宽度
			 */
    		tabtitlewidth: null,
    		
    		/**
    		 *@type  String
    		 *@desc  标签标题水平对齐方向 'left'左对齐 'right'右对齐
    		 *@default  'left'
    		 */
    		tabalign: 'left',
            
            // callbacks
            
            /**
			 *@desc 当切换tab页签触发
			 *@param {event,index} 事件,tab坐标
			 *@example $("#div_id").tabpanel({change: function( event, index ){  <br/>} <br/>});
			 */
            change: null ,
    		
    		/**
			 *@desc 当关闭tab页签触发
			 *@param {event,index} 事件,tab坐标
			 *@example $("#div_id").tabpanel({close: function( event, index ){  <br/>} <br/>});
			 */
    		close: null
    		
        },
        
        /** @lends jazz.tabpanel */
        
        /**
         * @desc 创建组件
		 * @private
         */
        _create: function() {
        	
        	this._super();
            
            this.options.selected = this.options.activeindex;

            this.element.addClass('jazz-tabview').addClass('jazz-tabview-' + this.options.orientation);
            
            this._tabsCreateContent();
            
            this._showborder();
            
        },
        
        /**
         * @desc  绑定tabpanel各类响应事件
         * @private
         */
        _init: function(){
        	
        	this.tabsinner = this.navContainer.parent();
        	this.tabswrapContainer = this.tabsinner.parent();
            this.tabsHeader = this.tabswrapContainer.parent();
            
            this.tablefttitleheight = this.navContainer.find("li").outerHeight(true);
            this.tablefttitlewidth = this.navContainer.find("li").outerWidth(true);
        
            //tabs 超出宽度后展现形式 
            this.isorientation = true;
            
        	//设置容器的大小
            this._compSize();

            this._tabsPositionInit();            
            
//          this._innerWidth();
//          this._innerHeight();
//			this.isInner = true;
			
			//绑定tab事件
			this._bindEvents();
        },
        
        /**
         * @desc 新增tab标签页之前验证tab的相关定义是否满足添加的条件
         * @param taboption  新增tab的相关定义
         * @returns {Boolean} true 通过校验 false 未通过校验
         */
        _beforeAddTab: function(taboption){
        	var prefix = "jazz_tabpanel_custom_";/*,
        		index = taboption['tabindex'] 
        			? taboption['tabindex'] 
        			: (this.getLength() - 1);*/
        	
        	if(!taboption['tabid']){
        		jazz.warn('参数中未找到属性[tabid]');
        		return false;
        	}
        	if(!taboption['tabtitle']){
        		jazz.warn('参数中未找到属性[tabtitle]');
        		return false;
        	}
        		
        	//如果存在相同的id
        	if(this.element.find("#" + prefix + taboption['tabid']).length){
        		jazz.warn('参数中存在重复的[tabid]值');
        		return false;
        	}
        	
        	return true;
        },

        /**
         * @desc  绑定左右结构的更多操作的点击事件
         * @private
         */
        _bindMoreEvents: function(){
        	var $this=this, timer;
        	
        	this.tabs_more.off(".tabmenu").on("mouseenter.tabmenu", function(e){

    			if (timer){
    				clearTimeout(timer);
    				timer = null;
    			}        		
        		
	   			var templist = [], lileft, liright,
				    innerleft = $this.tabsinner.offset().left, innerright = innerleft + $this.tabsinner.outerWidth(true);	       			
				
	   			$this.navContainer.find('li').each(function(i){
	        		var ethis = $(this);
	        		lileft = ethis.offset().left;
	        		liright = lileft + ethis.outerWidth(true);
		        		if(lileft < innerleft || innerright < liright){
		        			templist.push({"text": ethis.find("a")[0].innerHTML, "index": i});
		        		}		        			
	       		});     		
	   			
	   			var list = [], len = templist.length; 
	   			if(len > 0){
		   			list.push('<div class="jazz-tabs-list jazz-inline" islayout="no" style="display:none;">');
		   			list.push('  <div class="jazz-tabs-list-in">');
	        		for(var i=0, j=len; i<j; i++){
	        			list.push('<div class="jazz-tabs-item" index="');
	        			list.push(templist[i]["index"]);
	        			list.push('">');
	        			list.push('<div class="jazz-tabs-item-text">');
	        			list.push(templist[i]["text"]);
	        			list.push('</div>');
	        			list.push("</div>");
	        		}
		   			list.push('  </div>');
		   			list.push('</div>');
		   			if($this.tabslist){
		   				$this.tabslist.remove();
		   			}
		   			$this.tabslist = $(list.join("")).appendTo("body");		   				
		   			
		        	var winheight = $(window).height() || document.body.clientHeight,
	        		    winwidth = $(window).width() || document.body.clientWidth,
	        	        left = 0, top = 0, itemwidth = $this.tabslist.outerWidth(true), 
	        	                           itemheight = $this.tabslist.outerHeight(true);
		        		//右键时执行
		        		//left = $(this).offset().left + $(this).outerWidth(true), top = $(this).offset().top	
		        		left = $this.tabsHeader.offset().left + $this.tabsHeader.outerWidth() - $this.tabslist.width() - 2 , top = $(this).offset().top + $(this).outerHeight();
		        	
	            	if(left + itemwidth > winwidth + $(document).scrollLeft()){
	            		left = left - itemwidth;
	            	}
	            	//else{
	            	//	left = left + itemwidth;
	            	//}        	    
	        		if(top > winheight + $(document).scrollTop()){
	        			top = winheight + $(document).scrollTop() - itemheight;
	        		}
		        	if(top < 0){top = 0;}     		
	        	
		        	$this.tabslist.css({top: top, left: left, position: "absolute", "z-index": ++jazz.config.zindex});
		        	$this.tabslist.show();
		        	
		        	$this.tabslist.find(".jazz-tabs-item").on("click.tabslist", function(e){
		        		var index = $(this).attr("index");
		        		$this.select(index);
		        		$this.tabslist.remove();
		        		e.preventDefault();
		        	});
		        	
		        	$this.tabslist.off(".tabslist").on("mouseenter.tabslist", function(){
		    			if (timer){
		    				clearTimeout(timer);
		    				timer = null;
		    			}
		        	}).on("mouseleave.tabslist", function(){
					    timer = setTimeout(function(){
					    	if($this.tabslist){
					    		$this.tabslist.remove();
					    	}
						}, 100);		        		
		        	});
	   			}
        	}).on("mouseleave.tabmenu", function(){
        		timer = setTimeout(function(){
	        		if($this.tabslist){
	        			$this.tabslist.remove();
	        		}
        		}, 100);
        	});
        },
        
       /**
        * @desc  绑定上下结构的标签页的滚动事件
        * @private
        */
        _bindTopAndBottomScrollEvent: function(){
        	var $this = this,
        		scrollwidth = this.tablefttitlewidth || this.options.tabtitlewidth;
        	this.tabsHeader.off("click.left", ".tabs-scroller-left").on("click.left", ".tabs-scroller-left", function(){
	        		var scrollleft = $this.tabsinner.scrollLeft() + scrollwidth;
		       		if($this.options.tabalign=='right'){
		       			$this.tabsinner.scrollLeft(scrollleft);
		       		}else{
			       		var tabsTotalWidth = 0;
			       		$this.navContainer.children('li').each(function(i){
		       				tabsTotalWidth += $(this).outerWidth();
			       		});
		            	var scrollTotalWidth = tabsTotalWidth - $this.tabsinner.width();
			       		if(scrollleft > scrollTotalWidth){
			       			$this.tabsinner.scrollLeft(scrollTotalWidth);
		        		}else{
		        			$this.tabsinner.scrollLeft(scrollleft);
		        		}
		       		}
        	});
        	
        	this.tabsHeader.off("click.right", ".tabs-scroller-right").on("click.right", ".tabs-scroller-right" ,function(){
	        		var scrollleft = $this.tabsinner.scrollLeft()- scrollwidth;
	        		if($this.options.tabalign=='right'){
		       			var tabsTotalWidth = 0;
		       			$this.navContainer.find('li').each(function(i){
		       				tabsTotalWidth += $(this).outerWidth();
			       		});
		        		if($this.tabsinner.scrollLeft() < scrollwidth - tabsTotalWidth){
		        			scrollleft = scrollWidth - tabsTotalWidth;
		        		}
		       		}
	        		$this.tabsinner.scrollLeft(scrollleft);
        	});
         },
        
        /**
         * @desc  绑定左右结构的标签页的滚动事件
         * @private
         */
        _bindLeftAndRightScrollEvent: function(){
        	var $this = this, scrollheight = this.tablefttitleheight;
        	this.tabsHeader.off("click.top", ".tabs-scroller-top").on("click.top", ".tabs-scroller-top", function(){
        		var scrolltop = $this.tabsinner.scrollTop() + scrollheight;
	        	var tabsTotalHeight = 0;
	        	$this.navContainer.children('li').each(function(i){
	            	tabsTotalHeight += $(this).outerHeight(true);
		       	});
		       	var scrollTotalHeight = tabsTotalHeight - $this.tabsinner.height();
	        	if(scrolltop > scrollTotalHeight){
	        		$this.tabsinner.scrollTop(scrollTotalHeight);
	        	}else{
	        	    $this.tabsinner.scrollTop(scrolltop);
	        	}
        	});
        	this.tabsHeader.off("click.bottom", ".tabs-scroller-bottom").on("click.bottom", ".tabs-scroller-bottom", function(){
        			var scrolltop = $this.tabsinner.scrollTop() - scrollheight;
        			$this.tabsinner.scrollTop(scrolltop);
        	});
        },
        
        /**
         * @desc 绑定事件
         * @private
		 * @example this._bindEvents();
         */
        _bindEvents: function() {
            var $this = this;
            //Tab header events
            this.navContainer.off('click.tab', 'li').on('click.tab', 'li', function(e) {
                var element = $(this);

                if($(e.target).is(':not(.jazz-icon-close)')) {
                    var index = element.index();

                    if(!element.hasClass('jazz-state-disabled') && index != $this.options.selected) {
                        $this.select(index);
                    }
                }

                e.preventDefault();
            });

            //Closable tabs
            this.navContainer.off('click.tabclose', 'li .jazz-icon-close')
            		.on('click.tabclose', 'li .jazz-icon-close', function(e) {
                    var index = $(this).parent().parent().index();
                    $this.remove(index);
                    e.preventDefault();
                });
            
            //绑定标签过多时滚动的事件
            if(this.options.orientation == 'top' || this.options.orientation == 'bottom'){            	
            	this._bindTopAndBottomScrollEvent();
            }else if(this.options.orientation == 'left' || this.options.orientation == 'right'){            	
            	this._bindLeftAndRightScrollEvent();
            }
        },        
        
		/**
        * @desc 
        * @param {panel}
        * @private
		* @return 返回布尔值
		* @example this._isLoaded('panel');

       _isLoaded: function(panel) {
           return panel.data('loaded') === true;
       },        
        
        /**
         * @desc 初始化容器大小
         * @private
         */
        _compSize: function(){
        	this._width();
        	this._height();
        },
        
		/**
         * @desc 组件宽度
		 * @private
         */        
        _width: function(){
        	this._super();
            this._innerWidth();
        },
        
        _innerWidth: function(){
        	var orientation = this.options.orientation;
        	if(orientation == 'top' || orientation == 'bottom'){
				if(this.options.width == "auto"){
					this.panelContainer.outerWidth(this.element.width());
				}else{
					this.panelContainer.outerWidth(this.options.calculateinnerwidth);
				}
            }else if(orientation == 'left' || orientation == 'right'){
				this.tabsHeaderWidth = this.tabsHeader.outerWidth(true);
				var tabwidth;
				if(this.options.width == "auto"){
					tabwidth = this.element.width() - this.tabsHeaderWidth;				
				}else{
					tabwidth = this.options.calculateinnerwidth - this.tabsHeaderWidth;
				}
				this.panelContainer.outerWidth(tabwidth);
            }
        	this.panelContainer.children().width(this.panelContainer.width());
        },
        
        /**
         * @desc 组件高度
         * @private
         */        
        _height: function(){
        	var height = this.options.height;
        	if(height=="auto"){
        		this.element.height("auto");
                this.panelContainer.children().height('auto');
        	}else{
        		this._super();
        		if(this.iscalculateheight){
//        			if(this.isInner){
        				this._innerHeight();
//        			}        			
        		}
        	}
        },

        _innerHeight: function(){
        	this.tabsHeaderHeight = this.tabsHeader.outerHeight(true);
        	var orientation = this.options.orientation;
        	if(orientation == 'top' || orientation == 'bottom'){
        		if(this.options.calculateinnerheight != '-1'){
                	this.panelContainer.outerHeight(this.options.calculateinnerheight - this.tabsHeaderHeight);
        		}
            }else if(orientation == 'left' || orientation == 'right'){
            	if(this.options.calculateinnerheight == '-1'){
            		this.panelContainer.outerHeight("auto");
            	}else{
            		this.tabsHeader.outerHeight(this.options.calculateinnerheight);
            		this.tabswrapContainer.outerHeight(this.tabsHeader.height());
            		this.tabsinner.outerHeight(this.tabswrapContainer.height());
            		this.panelContainer.outerHeight(this.options.calculateinnerheight);
            	}
            }
        },
        
        /**
         * @desc  创建组件内部元素结构
         * @private
         */
        _tabsCreateContent: function(){
        	
        	var element = this.element;
        	/**
             * ul列表是标题栏
             * 第一个div是panel的容器
             */
            this.navContainer = element.find('ul:first');
            this.panelContainer = element.find('>div:first');
            
        	//装饰tab标题部分
            this.navContainer.addClass('jazz-tabview-nav')
            				 .wrap('<div class="jazz-tabview-header"></div>')
            				 .wrap('<div class="jazz-tabview-wrap"></div>')
            				 .wrap('<div class="jazz-tabview-in"></div>');
            
            var li = this.navContainer.find("li");
            
            li.addClass('jazz-tabview-default').eq(this.options.activeindex)
										       .addClass('jazz-tabview-selected jazz-state-active');
            
			if(!!this.options.tabtitlewidth){
				li.outerWidth(this.options.tabtitlewidth);
			}
            
            if((this.options.orientation == 'top' || this.options.orientation == 'bottom')){
            	li.addClass("jazz-tabview-tabalign-" + this.options.tabalign);
            }
            
            li.find("a").addClass("nav-content-middle");
            
            if(this.getLength() > 0){
            	this._tabShowtabclose();          	
            }
            
            //装饰tab内容区域
            this.panelContainer.addClass('jazz-tabview-panels').children().addClass('jazz-tabview-panel');
            this.panelContainer.children('div.jazz-tabview-panel:not(:eq(' + this.options.activeindex + '))').hide();
        },
        
        _tabShowtabclose: function(index){
        	var flag = true, tempwidth = 0;
        	this.templeft = 0;
        	if(index || index===0){
        		flag = false;
        	}else{
        		index = 0;
        	}

        	var isclosefirst = this.options.isclosefirst, first = "";
        	if(!isclosefirst && index==0){
        		first = "-first";
        	}
        	
        	var liobj = this.navContainer.find("li:eq("+index+")");
        	
        	if(this.options.showtabclose && flag){
        		var lilist = this.navContainer.find("li");
        		var strleft = "", strright = "";
        		$.each(lilist,function(i){
        			if(i==0){
        				strleft = "<div class ='nav-content-left'></div>";
        				strright = "<div class ='nav-content-right"+first+"'><span class='jazz-icon-close nav-close'></span></div>";
        			}else{
        				strleft = "<div class ='nav-content-left'></div>";
        				strright = "<div class ='nav-content-right'><span class='jazz-icon-close nav-close'></span></div>";
        			}
        			$(this).prepend(strleft).append(strright);
        		});
            }else if(this.options.showtabclose){
        		if(index===0 && !isclosefirst){
        			liobj.prepend("<div class ='nav-content-left'></div>")
        			                                          .append("<div class ='nav-content-right-first'></div>");
        			this.navContainer.find("li:eq("+index+1+") .nav-content-right-first")
        			                                          .addClass("nav-content-right")
        			                                          .removeClass("nav-content-right-first")
        			                                          .append("<span class='jazz-icon-close nav-close'></span>");
        		}else{
        			liobj.prepend("<div class ='nav-content-left'></div>")
        			                                          .append("<div class ='nav-content-right'><span class='jazz-icon-close nav-close'></span></div>");
        		}
            }
        	
        	if(!isclosefirst && index==0){
        		this.tempright = liobj.find(".nav-content-right-first").outerWidth(true);
        	}else{
        		this.tempright = liobj.find(".nav-content-right").outerWidth(true);
        	}
        	this.templeft = liobj.find(".nav-content-left").outerWidth(true);
        	
            tempwidth =  this.templeft + this.tempright;
            
			if(!!this.options.tabtitlewidth){
				liobj.outerWidth(this.options.tabtitlewidth);
				tempwidth = liobj.width() - tempwidth;
			}
            
            if(this.options.showtabclose && flag){
            	this.navContainer.find("li a").outerWidth(tempwidth);
            }else{
            	liobj.find("a").outerWidth(tempwidth);
            }
        },
        
        /**
         * @desc  设置当标签页比较多时的显示方式
         * @private
         */
        _tabsPositionInit: function(){
        	var orientation = this.options.orientation,
        	    overflowtype = this.options.overflowtype;
        	
        	if(orientation=='top' || orientation=='bottom'){
        		var line = "<div class='jazz-tabview-header-" + orientation + "'></div>";
	       		if(orientation=='bottom'){
	       			if(this.isorientation){
	       				this.element.append(this.tabsHeader);
		       			this.tabsHeader.prepend(line);	
	       				this.isorientation = false;
	       			}
	       		}else{
	       			if(this.isorientation){
	       				this.tabsHeader.append(line);	
	       				this.isorientation = false;
	       			}
	       		}
	       		
	       		if(overflowtype==1){
	       			this._initSelectableTopAndBottom();
            	}else if(overflowtype==2){
            		this._computeTabsHeader();
            	}
	       		
        	}else if(orientation=='left' || orientation=='right'){
            	if(overflowtype==1){
            		this.tabs_more = $('<div class="tabs-more-vertical"></div>').appendTo(this.tabsHeader);
            		this._initSelectableLeftAndRight();
            	}else if(overflowtype==2){
            		this._computeTabsHeader();
            	}
            	
        	}
        },
        
        /**
         * @desc  设置标签标题导航部分
         * @private 
         */
        _computeTabsHeader: function(){
        	var orientation = this.options.orientation,
        		tempTabsWidth = 0,
        		tempTabsHeight = 0;
        	//上下结构
        	if(orientation == 'top' || orientation == 'bottom'){
        		this.navContainer.find('li').each(function(i){
	        		 tempTabsWidth += $(this).outerWidth(true);
	        	});
        		this.navContainer.outerWidth(tempTabsWidth);
        		
	       		if(tempTabsWidth > this.tabsinner.width()){
	       			if(this._isResetMoreTab()){
	            		return;
	            	}

	       			var tabheight = this.tabsinner.height();
	       			if(!this.tabs_scroller_left){
	       				this.tabswrapContainer.addClass("jazz-tabview-wrap-level");
	       				
	       				this.tabs_scroller_left = $('<a class="tabs-scroller-left"></a>').appendTo(this.tabsHeader);
	       				this.tabs_scroller_right = $('<a class="tabs-scroller-right"></a>').appendTo(this.tabsHeader);
	       				this.tabs_scroller_left.height(tabheight).show(); 
	       				this.tabs_scroller_right.height(tabheight).show();
	       			}
	       			
	       			if(this.options.tabalign=='right'){
	       				this.tabsinner.scrollLeft(tempTabsWidth);
	       			}
	       			if(orientation == "bottom"){
	       				this.tabs_scroller_left.css({'bottom': 0, 'top': 'auto'});
	       				this.tabs_scroller_right.css({'bottom': 0, 'top': 'auto'});
	       			}
	       			
	       			this.tabsinner.outerHeight(tabheight);
		       		
	       		}else{
	       			if(this.tabs_scroller_left){
	       				this.tabs_scroller_left.remove();
	       				this.tabs_scroller_right.remove();
	       				this.tabs_scroller_left = null;
	       				this.tabs_scroller_right = null;
	       				this.tabswrapContainer.removeClass("jazz-tabview-wrap-level");
	       				this.tabsinner.scrollLeft(0);
	       			}
	       			
	       			if(this.options.tabalign=='right'){
	       				this.tabsinner.scrollLeft(tempTabsWidth);
	       			}
	       		}
        	}else if(orientation=='left' || orientation=='right'){
        		
        		if(this.options.height == "auto"){
        			return false;
        		}
        		
	        	tempTabsHeight = this.navContainer.height();
	        	
	       		if(tempTabsHeight > this.tabsinner.height()){
	       			if(this._isResetMoreTab()){
	            		return;
	            	}
	       			
	       			if(!this.tabs_scroller_top){
	       				this.tabswrapContainer.addClass("jazz-tabview-wrap-vertical");
	       				this.tabswrapContainer.outerHeight(this.tabsHeader.height());
	       				this.tabsinner.outerHeight(this.tabswrapContainer.height());
	       				this.tabs_scroller_top = $('<a class="tabs-scroller-top"></a>').prependTo(this.tabsHeader);
	       				this.tabs_scroller_bottom = $('<a class="tabs-scroller-bottom"></a>').appendTo(this.tabsHeader);
	       			}
	       			
	       			this.tabs_scroller_top.css({"width" : (this.options.tabtitlewidth.replace(/px/g, '') + 'px' 
	       						|| this.tabsHeader.width()), "display":"block"});
	       			this.tabs_scroller_bottom.css({
	       				"width" : (this.options.tabtitlewidth.replace(/px/g, '') + 'px' 
	       						|| this.tabsHeader.width()),
	       				"display" : "block"});
	       		}else{
	       			if(this.tabs_scroller_top){
	       				this.tabs_scroller_top.remove();
	       				this.tabs_scroller_bottom.remove();
	       				this.tabswrapContainer.removeClass("jazz-tabview-wrap-vertical");
	       				this.tabs_scroller_top = null;
	       				this.tabs_scroller_bottom = null;
	       				this.tabsinner.scrollTop(0);
	       			}
	       		}
        	}
        },
        
        /**
         * @desc  设置当标签过多时
         * 	更多操作的显示位置和样式
         * @private
         */
        _computeTabsHeaderMore: function(){
        	var orientation = this.options.orientation, tabalign = this.options.tabalign;
        	if(orientation=='top' || orientation=='bottom'){
	    		var tempTabsWidth = 0;
	        	this.navContainer.find('li').each(function(i){
	       			tempTabsWidth += $(this).outerWidth(true);
	       		});
	        	this.navContainer.outerWidth(tempTabsWidth);
	        
	       		if(tempTabsWidth > this.tabsinner.width()){
	       			if(tabalign == "left"){
	       				if(!this.tabs_more){
	       					this.tabs_more = $('<div class="tabs-more-horizon-right"></div>').appendTo(this.tabsHeader);	       					
	       				}
	       				this.tabswrapContainer.addClass("jazz-tabview-wrap-falls-right");	
	       			}else{
	       				if(!this.tabs_more){
	       					this.tabs_more = $('<div class="tabs-more-horizon-left"></div>').appendTo(this.tabsHeader);
	       				}
	       				this.tabswrapContainer.addClass("jazz-tabview-wrap-falls-left");
	       			}
	       			var height = this.tabsHeader.height();
	       			this.tabswrapContainer.outerHeight(height || "auto");
	       			if(height != 0){
	       				this.tabs_more.outerHeight(this.tabswrapContainer.height());	       				
	       			}
	       			this.tabs_more.show();
	       			
	       			//为li绑定选中事件
	       			this._bindMoreEvents();
	       		}else{
	       			if(this.tabs_more){	       				
	       				this.tabs_more.hide();
	       			}
	       		}
	       		this.tabswrapContainer.outerWidth(this.tabsHeader.width() || this.options.calculateinnerwidth);
       			
	        }else if(orientation=='left'|| orientation=='right'){
	    		var tempTabsHeight = this.navContainer.height();
	       		if(tempTabsHeight > this.tabsinner.height()){
	       			this.tabsinner.outerHeight(this.tabsHeader.height() - this.tabs_more.outerHeight());
	       			this.tabs_more.outerWidth(this.tabsHeader.width()).show();
	       			
	       			//为li绑定选中事件
	       			this._bindMoreEvents();
	       		}else{
	       			this.tabs_more.hide();
	       		}
	        }
        },
        
        /**
         * @desc 检查是否需要重置更多标签
         * @returns {Boolean} false 没有生成更多dom节点 true 已经生成更多dom节点
         */
        _isResetMoreTab: function(){
        	if(this.tabsHeader.children('div[class^="tabs-scroller"]').length){
        		return true;
        	}
        	return false;
        },
        
        /**
         * @desc  初始化上下结构的标签页
         * @private
         */
        _initSelectableTopAndBottom: function(){
    		var tempTabsWidth = 0, tabalign = this.options.tabalign;
    		this.navContainer.find('li').each(function(i){
       			if($(this).css("display")!="none"){
   					tempTabsWidth += $(this).outerWidth(true);
   				}
       		});
    		this.navContainer.outerWidth(tempTabsWidth);
    		
    		if(tempTabsWidth > this.tabsinner.width()){
       			if(tabalign == "left"){
       				this.tabs_more = $('<div class="tabs-more-horizon-right"></div>').appendTo(this.tabsHeader);
       				this.tabswrapContainer.addClass("jazz-tabview-wrap-falls-right");
       			}else{
       				this.tabs_more = $('<div class="tabs-more-horizon-left"></div>').appendTo(this.tabsHeader);
       				this.tabswrapContainer.addClass("jazz-tabview-wrap-falls-left");
       			}
       			this.tabs_more.show();
       			
       			//为li绑定选中事件
       			this._bindMoreEvents();
       			
       			if(tabalign == "right"){
       				this.tabsinner.scrollLeft(this.navContainer.outerWidth(true));
       			}
       		}else{
       			//this.tabs_more.remove();
       			if(tabalign == "left"){
       				this.tabswrapContainer.removeClass("jazz-tabview-wrap-falls-right");
       			}else{
       				this.tabswrapContainer.removeClass("jazz-tabview-wrap-falls-left");
       			}
       			//this.tabswrapContainer.outerWidth(this.tabsHeader.width());
       			
       			if(tabalign == "right"){
       				this.tabsinner.scrollLeft(this.navContainer.outerWidth(true));
       			}
       		}
        },
        
        /**
         * @desc  初始化左右结构的标签页
         * @private
         */
        _initSelectableLeftAndRight: function(){
        	var tempTabsHeight = this.navContainer.height();
       		if(tempTabsHeight > this.tabsinner.height()){
       			this.tabsinner.outerHeight(this.tabsinner.height() - this.tabs_more.outerHeight());
       			this.tabs_more.outerWidth(this.tabswrapContainer.width()).show();
       			this._bindMoreEvents();
       		}else{
       			this.tabs_more.hide();
       		}
        },
        
        /**
         * @desc  检查当前显示的标签页标题是否在屏幕浏览器可视区域内
         * @returns {Boolean}
         */
        _isOnScreen: function(index){
     	    //当前标签title的位置相对于tabpanel的容器位置
     	    var liobj = this.navContainer.children(':eq('+index+')'),
     	    	orientation = this.options.orientation,
     	    	scrollNum = 0;
     	    var inneroffset = this.tabsinner.offset();
 	    	var tabsinner = {
     	        top: inneroffset.top,
     	        left: inneroffset.left
     	    };
 	    	tabsinner.right = tabsinner.left + this.tabsinner.width();
 	    	tabsinner.bottom = tabsinner.top + this.tabsinner.height();
     	     
     	    var li = liobj.offset();
     	    li.right = li.left + liobj.outerWidth(true);
     	    li.bottom = li.top + liobj.outerHeight(true);
     	        	    
     	    if(orientation == "left" || orientation == "right"){
     	    	//当前tab标签在显示范围内不做位置变化
     	    	var scrollTop = this.tabsinner.scrollTop();
     	    	if((tabsinner.top < li.top && li.bottom < tabsinner.bottom)){
     	    		return false;
     	    	}
     	    	//超出在上方
     	    	if(li.top < tabsinner.top){
     	    		scrollNum = scrollTop - (tabsinner.top - li.top);
     	    	}
     	    	//超出在下方
         	    if(tabsinner.bottom < li.bottom){
         	    	scrollNum = scrollTop + (li.bottom - tabsinner.bottom);
         	    }
 	    		return {
 	    			scrollNum: scrollNum,
 	    			direction: "scrollTop"
 	    		};
     	    }
    	    
     	    if(orientation == "top" || orientation == "bottom"){
     	    	//当前tab标签在显示范围内不做位置变化
     	    	var scrollLeft = this.tabsinner.scrollLeft();
     	    	if((tabsinner.left <= li.left && li.right <= tabsinner.right)){
     	    		return false;
     	    	}
     	    	//超出在左侧
         	    if(li.left < tabsinner.left){
         	    	scrollNum = scrollLeft - (tabsinner.left - li.left);
         	    }
         	    //超出在右侧
         	    if(tabsinner.right < li.right){
         	    	scrollNum = scrollLeft + (li.right - tabsinner.right);
         	    }
         	    
     	    	return {
     	    		scrollNum: scrollNum,
     	    		direction: "scrollLeft"
     	    	};        	    
     	    }
     	    //当前视野内可见
     	    return false;
     	},
     	
         /**
          * @desc 
          * @param {panel}
          * @private
  		* @example this._markAsLoaded('panel');
          */
         _markAsLoaded: function(panel) {
             panel.data('loaded', true);
         },    	
        
        /**
         * @desc 动态设置属性
         * @param key
         * @param value
         */
        _setOption: function( key, value ) {
            this._super( key, value );
     	   if('width' == key){
     		   this._width();
     		   this._tabsPositionInit();       		
     	   }else if('height' == key){
     		   this._height();
     		   this._tabsPositionInit();
     	   }else if('showtabclose' == key){
     		   this.options.showtabclose = value;
     		   $(".nav-content-left").remove();
 			   $(".nav-content-right").remove();
 			   $(".nav-content-right-first").remove();
     		   this._tabShowtabclose();
     	   }
        },

        /**
         * @desc 判断是否显示边框
         * @private
         */          
        _showborder: function(){
	        if (this.options.showborder) {
	        	this.panelContainer.addClass("jazz-tab-border");
			} else {
				this.panelContainer.removeClass("jazz-tab-border");
			}
        },        
        
        /**
         * @desc tab页添加方法
         * @param taboption tab页url路径
         * 	{
		 *		tabid: '',	tab页的id
		 *		tabtitle: '',	tab页的标题
		 *		tabindex: '', 新增加tab页索引值,确定新增加页面的位置,如果放在最后一个可以不设置该值
		 *		taburl: '',	tab页的url
		 *		tabcontent: ''	tab页的内容
		 *	}
		 * <br> taburl是链接到指定地址文件
		 * <br> tabcontent是展示具体内容
		 * <br> taburl和tabcontent这两个参数只需要定义一个即可, 优先使用taburl
         * @example $('#div_id').tabpanel(taboption);
         */
        addTab: function(taboption) {
        	var $this = this,
        		prefix = "jazz_tabpanel_custom_",
        		tabLength = $this.getLength(),
        		index = taboption['tabindex'];
     	
        	var tempwidth = taboption['tabtitlewidth'] || 100;
        	var tabli = "<li class='jazz-tabview-default'><a style='width:"+tempwidth+"px;' class='nav-content-middle' href='" 
        			+ prefix + taboption['tabid'] + "'>" 
        			+ taboption['tabtitle'] 
        			+ "</a></li>",
        		tabdiv = "<div class='jazz-tabview-panel' id='" + prefix + taboption['tabid'] + "'>" + (taboption['tabcontent'] || "") + "</div>";
    		if(taboption['taburl']){
    			tabdiv = "<div class='jazz-tabview-panel' id='" 
    				+ prefix + taboption['tabid']
	    			+ "'><iframe src='" 
	    			+ taboption['taburl'] 
	    			+ "' id='" 
	    			+ prefix + taboption['tabid'] + "_" 
	    			+ $this.options.frameName 
	    			+ "' name='" + prefix + taboption['tabid'] 
	    			+ "_iframepage' frameBorder='0' scrolling='yes' width='100%'" 
	    			+ " height='100%'></iframe></div>";
    		}
    		//保证新增的tab索引在合理的位置
        	if(index < 0 ){
        		index = 0;
        	}
        	if(index > tabLength){
        		index = tabLength;
        	}    		
      	
        	//检查添加tab标签页
        	if(!this._beforeAddTab(taboption)){
        		return;
        	}
        	//在指定位置插入tab
        	if(index == tabLength){
        		if(tabLength===0){
        			$this.navContainer.append(tabli);
        		}else{
        			$this.navContainer.children(":last").after(tabli);        			
        		}
        		$this.panelContainer.append(tabdiv);
        	}else{  		
        		$this.navContainer.children(':eq('+index+')').before(tabli);
        		$this.panelContainer.children(':eq('+index+')').before(tabdiv);
        	}
        	
        	var _height = this.options.height, cheight;
        	if(_height=="auto"){
        		cheight = "auto";
        	}
     	
        	if((this.options.orientation == 'top' || this.options.orientation == 'bottom')){
        		this.navContainer.children(':eq('+ index +')').addClass("jazz-tabview-tabalign-" + this.options.tabalign);
        		if(cheight!="auto"){
        			cheight = this.options.calculateinnerheight - this.tabsHeader.outerHeight();
        			this.panelContainer.outerHeight(cheight);
        		}else{
        			this.panelContainer.height("auto");
        		}
        		this.panelContainer.children(':eq('+ index +')').css({'width':this.options.calculateinnerwidth, 
            		"height": cheight});
            }else{
            	if(cheight!="auto"){
            		cheight = this.options.calculateinnerheight;
            	}
            	this.panelContainer.children(':eq('+ index +')').css({'width':this.options.calculateinnerwidth - this.tabsHeaderWidth, 
            		"height": cheight});
            }
    		
    		this._tabShowtabclose(index);
    		
    		if(this.options.overflowtype == 2){
    			this._computeTabsHeader();
    		}else if(this.options.overflowtype == 1){
    			this._computeTabsHeaderMore();
    		}
    		
    		this.select(index);
        },

       /**
        * @desc 获取tab页个数方法
        * @return number
		* @example $('XXX').tabpanel('getLength');
        */
       getLength: function() {
           return this.navContainer.children().length;
       },

       /**
        * @desc 获取当前活动的tab页
        * @return number
		* @example $('#div_id').tabpanel('getActiveIndex');
        */
       getActiveIndex: function() {
           return this.options.selected;
       },

       /**
        * @desc 关闭当前活动的tab页不可用
        * @param {index} tab页码数从0开始第1个tab
		* @example $('#div_id').tabpanel('disable','index');
        */
       disable: function(index) {
           this.navContainer.children().eq(index).addClass('jazz-state-disabled');
           this.navContainer.children().eq(index).find('.jazz-icon-close').off("click.tab").on("click.tab",function(e){
        	   e.stopPropagation();
           });
       },

       /**
        * @desc 打开当前活动的tab页可用
        * @param {index} tab页码数从0开始第1个tab 
	    * @example $('#div_id').tabpanel('enable','index');
        */
       enable: function(index) {
           this.navContainer.children().eq(index).removeClass('jazz-state-disabled');
       },
       
       /**
        * @desc tab页删除方法
		 * @param {index} tab页的索引值,索引值从0开始 
		 * @example $('XXX').tabpanel('remove', 'index');
        */
       remove: function(index) {
       	var len = this.getLength();
   	    if(index < 0 || index > len ){return false;}
   	   
           var header = this.navContainer.children().eq(index),
           	panel = this.panelContainer.children().eq(index);

           this._event('close', null, {"index": index, "tabid": panel.attr("id")});
           
           if(this.options.stopcloseevent){
           	return;
           }

           header.remove();
           panel.remove();

           var activeindex = this.options.activeindex;
           if(activeindex == index){
           	index = index - 1;
           	if(len == 0){ return ;}
           	if(index < 0){
           		index = 0;
           	}            	
           }else{
           	if(activeindex < index){
           		index = activeindex;
           	}else{
           		index = activeindex - 1;
           	}
           }
           
           if(this.options.overflowtype == 2){
           	this._computeTabsHeader();
           }else if(this.options.overflowtype == 1){
           	this._computeTabsHeaderMore();
           }

           this.select(index);
       },
       
       /**
        * @desc tab页选择方法
		 * @param {index} tab标签页的索引值
		 * @param {nochangeevent} 是否触发change事件，默认触发
		 * @example $('XXX').tabpanel('select','index');
        */
       select: function(index, nochangeevent) {
	       if(this.getLength()===0){
	       		return false;
	       }
       	
           this.options.selected = index;
           var newPanel = this.panelContainer.children().eq(index),
          		headers = this.navContainer.children(),
          		oldHeader = headers.filter('.jazz-state-active'),
          		newHeader = headers.eq(newPanel.index()),
          		oldPanel = this.panelContainer.children('.jazz-tabview-panel:visible');

           oldHeader.removeClass('jazz-tabview-selected jazz-state-active');
           oldPanel.hide();
           //oldPanel.css({"z-index":"-1000"});
       	
	       newHeader.removeClass('jazz-tabview-hover').addClass('jazz-tabview-selected jazz-state-active');
	       newPanel.show();        	
	       	//newPanel.css({"z-index":"0"});

       	   this.options.activeindex = index;

           var nowPosition = this._isOnScreen(index);
           if(nowPosition){
           	   this.tabsinner[nowPosition['direction']](nowPosition['scrollNum']);
           }
           
           if(!nochangeevent){
        	   this._event('change', null, {"index": index, "tabid": newPanel.attr("id")});        	   
           }
       }       

    });
});
(function( $, factory ){

	if ( jazz.config.isUseRequireJS === true ) {
		define( ['jquery',
		         'jazz.Validator', 
		         '../jazz.Tooltip'], factory );
	} else {
		factory($);
	}	 
})(jQuery, function($){
/** 
 * @version 1.0
 * @name jazz.field
 * @description 表单元素的基类，提供基本的元素内容。
 * @constructor
 * @extends jazz.boxComponent
 */
	$.widget('jazz.field', $.jazz.boxComponent, {
		
	    options: /** @lends jazz.field# */ {
        	
        	/**
    		 *@type String
    		 *@desc 组件默认值
    		 *@default
    		 */
        	defaultvalue: '',
        	
        	/**
        	 *@type Boolean
        	 *@desc 是否禁用 true不可用 false可用
        	 *@default true
        	 */ 
        	disabled: false,
        	
        	/**
        	 *@type Boolean
        	 *@desc 是否可编辑 true可编辑 false不可编辑 
        	 *@default true
        	 */
        	editable: true,
        	
        	/**
        	 *@type Boolean
        	 *@desc 控制组件是否参与验证 true　验证 false　不验证
        	 *@default true
        	 */        	
        	isrule: true,

        	/**
        	 *@type String
        	 *@desc 组件标签信息
        	 *@default 
        	 */
        	label: '',
        	
        	/**
        	 *@type String
        	 *@desc 标签的显示位置   left 居左  center 居中  right 居右
        	 *@default 'right'
        	 */
        	labelalign: 'right',
        	
        	/**
        	 *@type Number
        	 *@desc 组件标签的宽度
        	 *@default 80
        	 */
        	labelwidth: '',
        	
        	/**
        	 *@type String
        	 *@desc 组件标签信息和内容区的分隔符
        	 *@default ':'
        	 */
        	labelsplit: '：',
			
			/**
			 *@type String
			 *@desc 输入框内容区的前缀
			 *@default ''
			 */			
			prefix: '',
        	
        	/**
        	 *@type Boolean
        	 *@desc 是否是可读字段 true只读  false非只读
        	 *@default false
        	 */
        	readonly: false,
			
			/**
			 *@type String
			 *@desc 组件的验证规则
			 *@default ''
			 */	
        	rule: '',
        	
        	/**
        	 * @type Number
        	 * @desc 数据有效性的验证类型，用于验证不通过后的提示信息如何展示 共有 0 1 2 3种验证
        	 * @default 0
        	 */
        	ruletype: 0,
			
			/**
			 *@type String
			 *@desc 输入框内容区的后缀
			 *@default ''
			 */			
			suffix: '',
			
			/**
			 *@type String
			 *@desc 输入框的提示信息
			 *@default ''
			 */			
			tooltip: '',
			
			/**
			 *@type String
			 *@desc 输入框默认提示文字
			 *@default ''
			 */		
			valuetip: ''			
		},
		
		/** @lends jazz.field */
		
        /**
         * @desc 生成公用部分的dom元素
         * @private 
         */
		_create: function(){
			this._super();
			
			var el = this.element;
			
			//定义disabled属性时，与IE的disabled属性名相同，
			//导致IE7 IE8 IE9下边DIV遮罩，所在要判断如果有这个属性就将其去掉
			if(this.element.prop("disabled")){
				this.element.removeAttr("disabled");
			}
			
			this.compId = this.getCompId();

			//设置组件必要属性
			el.addClass('jazz-field-comp').addClass('jazz-' + this.options.vtype + '-comp');
			
			var comp = '<label id="'+this.compId+'_label" class="jazz-field-comp-label jazz-form-text-label" for="'+this.compId+'_input"></label>'
			         + '<div id="'+this.compId+'_out" class="jazz-field-comp-out"><div id="'+this.compId+'_in" class="jazz-field-comp-in jazz-field-comp-in2">'
			         + '<span id="'+this.compId+'_prefix" class="jazz-field-comp-prefix"></span>'
			         + '<div id="'+this.compId+'_frame" class="jazz-field-input-frame"><label id="'+this.compId+'_editor" class="jazz-form-readonly" style="display:none"></label></div>'
			         + '<span id="'+this.compId+'_suffix" class="jazz-field-comp-suffix"></span>'
			         + '</div><div id="'+this.compId+'_r" class="jazz-field-comp-r jazz-helper-hidden"></div></div>';
			
			el.append(comp);
			
			//创建相应对象
			this.label = $('#'+this.compId+'_label');
			this.grandpa = $('#'+this.compId+'_out');
			this.parent = $('#'+this.compId+'_in');
			this.inputFrame = $('#'+this.compId+'_frame');
			this.inputview = $('#'+this.compId+'_editor');
			this.prefix = $('#'+this.compId+'_prefix');
			this.suffix = $('#'+this.compId+'_suffix');
			this.ruleImg = $('#'+this.compId+'_r');
			
			//验证区域警示图片所要占用宽度
			this.ruleAreaWidth = jazz.config.ruleImgWidth;	
			
			//icon图标所占的宽度
			this.arrowwidth = jazz.config.fieldIconWidth;
		},
		
        /**
         * @desc 初始化
         * @private
         */
		_init: function(){
			this._super();
			
			//设置组件的验证状态是验证通过的
			this.options.isverify = true;			
			
			this._formpanel();

			this._label();
			//label显示位置
			this._labelalign();
			//label宽度
			this._labelwidth();			
			//前缀
			this._prefix();
			//后缀
			this._suffix();
			//浮动的提示信息
			this._tooltip();
			//设置默认值
			this._defaultvalue();
			//值提示
			this._valuetip();
			//验证
			this._rule();
			//输入框是否可编辑
			this._editable();
			//默认false, 是否可用，true不可用，不可用时输入框置灰显示， false可用
			this._disabled();
			
			if(this.options.vtype=="hiddenfield"){
				this.element.hide();
			}
			this.isInputBox = this._filterVtype();
			
			this._width();
			
			this._height();

			//默认false, 是否只读 true只读 无输入框  false非只读 有输入框, 
			//放在计算的宽度高度之后执行，防止初始化时，设置成readonly==false时，计算宽度时缺少边框
			this._readonly();		
		},
		
        /**
         * @desc 设置默认值
         * @private
         */
		_defaultvalue: function(){
        	//默认值
        	var value = this.options.defaultvalue;
        	if(value || value===0){
        		this.setValue(value);
        	}	
		},
		
        /**
         * @desc 设置组件是否置灰
         * @private
         */		
		_disabled: function(){
    		if(this.options.vtype != "hiddenfield"){
        		if(this.options.disabled == true || this.options.disabled == "disabled"){
        			this.inputtext.attr("disabled", "disabled");
        			this.inputtext.addClass("jazz-field-disabled");
        			this.options.isrule = false;
        		}else{
        			if(this.inputtext.prop("disabled")){
        				this.inputtext.removeAttr("disabled");
        				this.inputtext.removeClass("jazz-field-disabled");
        			}
        			this.options.isrule = true;
        		}
    		}			
		},
		
        /**
         * @desc 设置是否可编辑  默认true, 是否可编辑 true可编辑  false不可编辑
         * @private
         */		
		_editable: function(){
			if(this.options.editable == false){
				this.inputtext.attr("readonly", "true");
			}else{
				this.inputtext.removeAttr("readonly");
			}	
		},

        /**
         * @desc 当表单组件被放置到formpanel里时，formpanel设置的属性相当于全局属性，控制表单的显示
         * @private
         */		
		_formpanel: function(){
			var compParent = this.getParentComponent(), dataview = false, readonly = false;
			compParent = $(compParent);
			if(compParent.attr("vtype") === "formpanel"){
				this.formpanelobj = compParent.data("formpanel");
				dataview = this.formpanelobj.options.dataview;
				readonly = this.formpanelobj.options.readonly;
				this.condition = this.formpanelobj.options.iscondition;
			}
			if(dataview == "true" || dataview == true || readonly == "true" || readonly == true){
				//判断是否存在readonly属性, 不存在时，恰巧formpanel有这个属性设置，则按formpanel的值进行设置
				var b = this.element.attr("readonly") ? false: true;
				if(b){
					this.options.readonly = true;
				}
			}
		},
		
		/**
		 * @desc 过滤掉没有输入框的组件 true有输入框  false没有输入框 例如  radio  checkbox  attachment 都没有输入框
		 * @private
		 * @returns {Boolean}
		 */
		_filterVtype: function(){
			var vtype = this.options.vtype;
			if(vtype !="radiofield" && vtype != "checkboxfield" 
				& vtype !="hiddenfield" && vtype != "attachment"){
				return true;
			}else{
				return false;
			}
		},

		/**
		 * @desc 设置组件高度
		 * @private
		 */
		_height: function(){
			var height = this.options.height;
			this.options.height = height != "auto" ? height : jazz.config.fieldDefaultHeight;
			this._super();

	        if(this.iscalculateheight){
	        	this._heightContent();
	        }
		},
		
		/**
		 * @desc 设置组件内部高度
		 * @private
		 */		
		_heightContent: function(){
        	var bw = this.parent.css("border-bottom-width");
        	if(bw){
        		bw = bw.substring(0, 1);
        	}else{
        		bw = 0;
        	}
        	
        	//计算组件的高度
        	if(this.isInputBox){
        		this.inputtext.outerHeight(this.options.calculateinnerheight - parseInt(bw)*2);
        	}else{
        		this.parent.css("border", "0px");
        	}			
		},
		
		/**
		 * @desc 设置组件描述
		 * @private
		 */
		_label: function(){
			var label = this.options.label || "";
			if(label){
				this.label.css({"display": 'block'});
				var newlabel = label + this.options.labelsplit;
				this.label.html(newlabel);
			}else{
				this.label.css({"display": 'none'});
			}
		},

		/**
		 * @desc 设置组件描述的显示位置
		 * @private
		 */		
		_labelalign: function(){
			if(this.options.label){
				var labelalign = this.options.labelalign;
				var align = ["left", "center", "right"];
				if($.inArray(labelalign, align) >= 0){
					this.label.css({"text-align": labelalign});				
				}else{
					this.label.css({"text-align": "right"});
				}
			}
		},
		
		/**
		 * @desc 设置组件描述的宽度
		 * @private
		 */		
		_labelwidth: function(){
			if(this.options.label){
				var labelwidth = this.options.labelwidth || jazz.config.fieldLabelWidth || 80;
				this.label.outerWidth(labelwidth);
			}
		},
		
		/**
		 * @desc 设置组件描述的宽度
		 * @private
		 */		
		_labelsplit: function(){
			this._label();
		},
		
		/**
		 * @desc 设置组件前缀
		 * @private
		 */			
		_prefix: function(){
			var prefix = this.options.prefix;
			if(!prefix){
				this.prefix.css({"display": 'none'});
			}else{
				this.prefix.css({"display": 'block'}).html(prefix);
			}			
		},
		
		/**
		 * @desc 设置组件是否为输入框或者是文本
		 * @private
		 */			
		_readonly: function(){
			//请注意：
			//1. _readonly 共有三处  当前是一处
			//2. 组件为 checkbox, radio时，jazz.form.checkboxfield.js中覆盖了_readonly
			//3. 组件为number, combox, comboxtree等继承iconfield类的下拉框组件，都在jazz.form.icon.js中对_readonly进行了覆盖
			if(this.options.readonly == true){
	    		this.parent.removeClass("jazz-field-comp-in2");
				this.inputtext.css({"display": "none"});										
				this.inputview.css({"display": "block"});
				var text = this.inputtext.val();
				if(text == this.options.valuetip){
					this.inputview.html("&nbsp;");
				}else{
					this.inputview.html(text || "&nbsp;");	
				}
			}else{
				this.inputview.css({"display": "none"});
				this.inputtext.css({"display": "block"});					
				this.parent.addClass("jazz-field-comp-in2");
			}
		},
		
		/**
		 * @desc 设置权限验证
		 * @private
		 */		
		_rule: function(){ 
			var rule = this.options.rule, label = this.options.label;
			if(rule){
				this.options.isrule = true;
			}else{
				this.options.isrule = false;
			} 
			if(label){
				var x = this.label.find("font").html() || "";
				var f = false;
				if(x=="*"){
					f = false;
				}else{
					f = true;
				}
				rule = (rule+"").indexOf("must");
				if(rule >=0 && f){
					this.label.prepend("<font color='red'>*</font>"); 
				}else if(rule < 0 && !f){
					this.label.find("font").remove();
				}
				
			}   
		},

//		/**
//		 * @desc 判断动态修改rule属性时，是否对组件进行验证
//		 * @private
//		 */			
//		_ruleverify: function(){
//			var rule = this.options.rule;
//			if((rule+"").indexOf("must")>=0){
//				var vtype = this.options.vtype;
//				if(vtype=="comboxfield" || vtype=="comboxtreefield" || vtype=="autocompletecomboxfield"){
//					this.reload();
//				}				
//			}
//			if(rule){
//				this._validator();
//			}else{
//				this._validatoroff();
//			}
//		},
		
		/**
         * @desc 动态改变属性
         * @param {key} 对象的属性名称 
         * @param {value} 对象的属性值
		 * @private
         */
        _setOption: function(key, value){
        	switch(key){
        		case 'height':
        			this.options.height = value;
        			this._height();
        		break;
	        	case 'width':
	        		this.options.width = value;
	        		this._width();
	        		break;        		
    			case 'defaultvalue':
    				this.options.defaultvalue = value;
    				this._defaultvalue(value);
    				break;        	
        		case 'editable':
        			this.options.editable = value;
        			this._editable();
        			break;	
        		case 'readonly':
        			this.options.readonly = value;
        			this._readonly();
        			break;	
        		case 'rule':
        			this.options.rule = value;
        			this._rule();
        			if(value){
        				this._validator();
        			}else{
        				this._validatoroff();
        				this.verify();
        			}
        			break;
        		case 'ruletype':
        			this.options.ruletype = value;
        			this._widthInner();
        			var b = this.verify();
        			this._validateStyle(b);
        			break; 			
        		case 'prefix':
	        		this.options.prefix = value;
	        		this._prefix();
	        		//修改内容区宽度
	        		this._widthContent();
	        		break;
        		case 'suffix':
	        		this.options.suffix = value;
	        		this._suffix();
	        		//修改内容区宽度
	        		this._widthContent();
	        		break;
	        	case 'tooltip':
	        		this.options.tooltip = value;
	        		this._tooltip();
	        		break;
	        	case 'disabled':
	        		this.options.disabled = value;
	        		this._disabled();
	        		break;
				case 'valuetip':
					var oldtip = this.options.valuetip;
					this.options.valuetip = value;
					this._valuetip(true, oldtip);
					break;
				case 'label':
					this.options.label = value;
					this._label();
					this._labelalign();
					this._labelwidth();
					this._width();
					break;
				case 'labelalign':
					this.options.labelalign = value;
					this._labelalign();
					break;
				case 'labelwidth':
					this.options.labelwidth = value;
					this._labelwidth();
					//因为label宽度发生变化，重新计算组件宽度
					this._width();
					break;
				case 'labelsplit':
					this.options.labelsplit = value;
					this._labelsplit();
					break;
        	}
        	this._super(key, value);
        },
		
        /**
         * @desc 设置输入框的文本展现内容
         * @param {value} 设置的文本内容
         * @private
		 */
		_setInputview: function(value){
			var val = value;
			if(val === "" || val == undefined){ val = ""; }
			if(this.options.blanktext != val && this.options.valuetip != val){
				this.inputview.html(val+"&nbsp;");     	
			}else{
				this.inputview.html("&nbsp;");
			}				
		},        
        
        /**
         * @desc 切换组件展现形式（编辑或者不可编辑）
         * @private
		 */
		_suffix: function(){
			var suffix = this.options.suffix;
			if(!suffix){
				this.suffix.css({"display": 'none'});
			}else{
				this.suffix.css({"display": 'block'}).html(suffix);
			}
		},
		
		/**
         * @desc 设置tooltip提示信息
		 * @private
         */
		_tooltip: function(){
			if(this.options.tooltip){
				var $this = this;
				this.element.tooltip({
					 showevent : 'mousedown',
					 hideevent : 'blur',
					 content : $this.options.tooltip || "",
					 position: $this.options.tooltipposition || 0
				});
			}
		},		
		
        /**
         * @desc 取消验证的绑定事件
         * @private
         */
        _validatoroff: function(){
        	var vtype = this.options.vtype;
        	this.inputtext.off("keyup.rule blur.rule");
        	if("datefield"===vtype){
        		this.element.off("datefielditemselect.rule");
        	}else if('numberfield'===vtype){
        		this.upArrows.off("click.ruleUp");
        		this.downArrows.off("click.ruleDown");
        	}
        },
        
		/**
		 * @desc 验证显示风格
		 * @params {state} 验证状态 false未通过验证  true通过验证
		 * @private
		 */
		_validateStyle: function(state){
			//根据验证规则调整组件
			 if(this.options.ruletype == "0"){
				 if(state == false){
					 this.parent.css("width", this.parentwidth - this.ruleAreaWidth);
					 this.inputFrame.css("width", this.framewidth - this.ruleAreaWidth);
					 if(this.isInputBox){
						 this.inputtext.outerWidth(this.inputFrame.width());
					 }
				 }else{
					 this.parent.css("width", this.parentwidth);
					 this.inputFrame.css("width", this.framewidth);
					 if(this.isInputBox){
						 this.inputtext.outerWidth(this.framewidth);
					 }
				 }
			 }			
		},
		
        /**
         * @desc 验证方法
         * @private
         */			
        _validator: function(){ 
        	var $this = this;
        	//this._validatoroff();
        	var vtype = this.options.vtype;
        	if(this.options.rule){
        		if('textfield'===vtype || 'textareafield'===vtype || 'comboxfield'===vtype || 'datefield'===vtype 
					|| 'comboxtreefield'===vtype || 'numberfield'===vtype || 'passwordfield'===vtype 
					|| 'autocompletecomboxfield'===vtype ){
        			var keyuptimeout, blurtimeout;
	        		this.inputtext.off("keyup.rule blur.rule").on("keyup.rule", function(){
    			         if(keyuptimeout){
    			       	     window.clearTimeout(keyuptimeout);
    			         }
    			         keyuptimeout = setTimeout(function(){
	        				 var val = $this.getText();
	        				 //验证
	        				 var state = jazz.doTooltip($this, val, $this.options.rule, $this.options.msg);
	        				 $this._validateStyle(state);
	        			 }, 500);
	        		}).on('blur.rule', function(){
	        			 if(blurtimeout){
	   			       	     window.clearTimeout(blurtimeout);
	   			         }
	        			 blurtimeout = setTimeout(function(){
	        				 var val = $this.getText();
							 var state = jazz.doTooltip($this, val, $this.options.rule, $this.options.msg);
							 $this._validateStyle(state);
	        			 }, 500);
					});
        		}
        		if("datefield"===vtype){
        			var vtime;
        			this.element.off("datefielditemselect.rule").on("datefielditemselect.rule", function(){
        				if(vtime){
        					window.clearTimeout(vtime);
        				}
        				vtime = setTimeout(function(){
						     var val = $this.getText();
							 var state = jazz.doTooltip($this, val, $this.options.rule, $this.options.msg);
							 $this._validateStyle(state);
	        			 }, 500);
        			});
        		}
        		if('numberfield'===vtype){
        			var uptimeout;
        			this.upArrows.off("click.ruleUp").on("click.ruleUp", function(){
	        			 if(uptimeout){
	   			       	     window.clearTimeout(uptimeout);
	   			         }
	        			 uptimeout = setTimeout(function(){
						     var val = $this.getText();
							 var state = jazz.doTooltip($this, val, $this.options.rule, $this.options.msg);
							 $this._validateStyle(state);
	        			 }, 100);
        			});
        			this.downArrows.off("click.ruleDown").on("click.ruleDown", function(){
	        			 if(uptimeout){
	   			       	     window.clearTimeout(uptimeout);
	   			         }
	        			 uptimeout = setTimeout(function(){
						     var val = $this.getText();
							 var state = jazz.doTooltip($this, val, $this.options.rule, $this.options.msg);
							 $this._validateStyle(state);
	        			 }, 100);
        			});
        		}
        		if('colorfield'===vtype){
        			var colortimeout;
        			this.inputtext.off('blur.rule').on('blur.rule', function(){
	        			 if(colortimeout){
	   			       	     window.clearTimeout(colortimeout);
	   			         }
	        			 colortimeout = setTimeout(function(){
	        				 var val = $this.getText();
							 var state = jazz.doTooltip($this, val, $this.options.rule, $this.options.msg);
							 $this._validateStyle(state);
	        			 }, 200);
					});
        		}
        	}
        },	
        
        /**
         * @desc 值提示
         * @param {opt} true 动态修改时调用  false 非动态修改时调用
         * @param {oldtip} 修改之间的valuetip值 
         * @private
         */	        
        _valuetip: function(opt, oldtip){
        	//输入框内提示信息
        	var valuetip = this.options.valuetip;
        	if(opt){
        		//动态改属性时
        		var value = this.inputtext.val();
        		if(value=='' || value==oldtip){
        			this.inputtext.val(valuetip);
        			this.inputtext.addClass("jazz-field-comp-input-tip");        			
        		}
        	}else if(!this.options.defaultvalue && valuetip){
        		//初始化时执行
    			this.inputtext.val(valuetip);
    			this.inputtext.addClass("jazz-field-comp-input-tip");
        	}
        },       
        
		/**
         * @desc 设置组件的宽度
		 * @private
		 */          
        _width: function(){
        	var width = this.options.width;
        	this.options.width = width != "auto" ? width : jazz.config.fieldDefaultWidth;
        	this._super();
        	if(this.iscalculatewidth){
        		this._widthInner();
        	}
        },
        
		/**
		 * @desc 重置组件内容区宽度大小
		 * @private
		 */        
        _widthInner: function(){
			var labelWidth = 0;
			if(this.label.css("display") == "block"){
				labelWidth = this.label.outerWidth() + 5;
			}
			
			//验证区
			var ruletype = this.options.ruletype;
			
			var innerwidth = this.options.calculateinnerwidth;
			
			var iew = 1; //满足在ie6下多减去一个像素
			
//			if(jazz.isIE(7) || jazz.isIE(6)){
				this.grandpa.outerWidth(innerwidth - labelWidth - iew);
//			}else{
//				this.grandpa.css({'padding-left': labelWidth});
//				this.grandpa.outerWidth(innerwidth);
//			}

			var iDivWidth = 0;
			if(ruletype==1){
				iDivWidth = innerwidth - labelWidth  - this.ruleAreaWidth;
			}else{
				iDivWidth = innerwidth - labelWidth;
			}
			this.parent.outerWidth(iDivWidth - iew);
			this._widthContent();        	
        },
        
		/**
		 * @desc 重置组件内容区宽度大小
		 * @private
		 */
		_widthContent: function(){
			var prefixWidth = 0, suffixWidth = 0; //前缀宽度, 后缀宽度
			
			this.parentwidth = this.parent.width();
			if(this.options.prefix){
				prefixWidth = this.prefix.outerWidth();
			}
			if(this.options.suffix){
				suffixWidth = this.suffix.outerWidth();
			}

			var vtype = this.options.vtype;
			if(vtype == "datefield" || vtype == "comboxfield" || vtype == "numberfield" || vtype == "comboxtreefield" || vtype == "colorfield"){
				this.inputFrame.css({"padding-left": prefixWidth, "padding-right": suffixWidth});
				this.inputFrame.outerWidth(this.parentwidth - this.arrowwidth);
				if(this.options.suffix){
					this.suffix.css("right", this.arrowwidth+"px");
				}
			}else{
				this.inputFrame.css({"padding-left": prefixWidth, "padding-right": suffixWidth});
				this.inputFrame.outerWidth(this.parentwidth);
			}
			
    		this.framewidth = this.inputFrame.width();
   			
   			//判断是否存在输入框，有输入框，则设置输入框宽度
   			if(this.isInputBox){
   				this.inputtext.outerWidth(this.framewidth);
   			}
		},        

		/**
         * @desc 获取输入框文本值的值
		 * @return String
		 * @example $('XXX').field('getText');
		 */      
        getText: function(){
        	var value = this.inputtext.val() || "";
        	if(value == this.options.valuetip || value == this.options.blanktext){
        		value = "";
        	}
        	return value;
        },
		
		/**
         * @desc 获取输入框的值
         * @return String
		 * @example $('XXX').field('getValue');
         */				
		getValue: function(){
			var value = this.input.val();			
        	if(value == this.options.valuetip){
				value = "";
			}
        	//value = value.replace(/\n\r/g, "<br>&nbsp;&nbsp;");
        	//value = value.replace(/\r\n/g, "<br>&nbsp;&nbsp;");
        	//value = value.replace(/\n/g, "<br>");
        	//value = value.replace(/\t/g, "&nbsp;&nbsp;&nbsp;&nbsp;");
        	//value = value.replace(/ /g, "&nbsp;");
			return value;
		},		
		
		/**
         * @desc  重置输入框值
         * @example $('XXX').field('reset');
         */
		reset: function(){
			this.input.val("");
			if(this.options.valuetip){
				this.inputtext.val(this.options.valuetip).addClass('jazz-field-comp-input-tip');
			}else{
				this.inputtext.val("");
			}
			this.inputview.text("");
		},
		
		/**
         * @desc 设置显示的文本内容
         * @param {value} 设置的显示文本
		 * @example $('XXX').field('setText', text);
         */
        setText: function(text){
			var val = text;
			if(val === "" || val == undefined){ val = ""; }
			//设置输入框中的值
			var valuetip = this.options.valuetip;
			if(valuetip != "" && valuetip == val ){
				this.inputtext.val(val).addClass("jazz-field-comp-input-tip");
			}else{
				this.inputtext.val(val).removeClass("jazz-field-comp-input-tip");
			}
			//设置查看的值
			this._setInputview(val);
        },
		
		/**
         * @desc 设置元素值
         * @param {value} 设置的值
		 * @example $('XXX').field('setValue', value);
         */	
		setValue: function(value) {
			var val = value;
			if(val === "" || val == undefined){ val = ""; }
			this.input.val(val).removeClass("jazz-field-comp-input-tip");
			//设置查看的值
			this._setInputview(val);
		},
		
		/**
         * @desc 设置formpanel的显示条件
		 * @example $('XXX').field('setValue', value);
         */		
        setCondition: function(){
        	if(this.condition){
    			this.formpanelobj._setCondition(this);
    		}
        },
		
		/**
         * @desc 组件验证 验证通过返回 true, 验证未通过返回 false
		 * @example $('XXX').field('verify');
		 * @return boolean
         */		
		verify: function(){
//			var val = this.getText();
//			var state = jazz.doTooltip(this, val, this.options.rule, this.options.msg);
//			this._validateStyle(state);
			var isverify = this.options.isverify ? true : false;
			return isverify;
		}
	});	

});
(function( $, factory ){

	if ( jazz.config.isUseRequireJS === true ) {
		define( ['jquery',
		         'form/jazz.form.Field'], factory );
	} else {
		factory($);
	}	 
})(jQuery, function($){
	/**
	 * @version 1.0
	 * @name jazz.textfield
	 * @description 文本输入类组件。
	 * @constructor
	 * @extends jazz.field
	 */
    $.widget("jazz.textfield", $.jazz.field, {
    	
    	options: /** @lends jazz.textfield# */ {

        	/**
    		 *@type String
    		 *@desc 组件类型
    		 *@default textfield
    		 */
			vtype: 'textfield',
			
			/**
			 *@type Number
			 *@desc 最大输入长度
			 *@default null
			 */              
            maxlength: null,			

    		// callbacks
    		/**
			 *@desc 鼠标焦点离开输入框时触发
			 *@param {event} 事件
			 *@param {ui.newValue} 新修改的值 
			 *@param {ui.oldValue} 旧值
			 *@event
			 *@example
			 *<br/>$("XXX").textfield("option", "change", function(event, ui){  <br/>} <br/>});
			 *或:
			 *<br/>$("XXX").on("textfieldchange",function(event, ui){  <br/>} <br/>});
			 *或：
			 *function XXX(){……}
			 *<div…… change="XXX()"></div> 或 <div…… change="XXX"></div>
			 */
    		change: null,
    		
    		/**
			 *@desc 鼠标焦点进入输入框时触发
			 *@param {event} 事件
			 *@event
			 *@example
			 *<br/>$("XXX").textfield("option", "enter", function(event){  <br/>} <br/>});
			 *或:
			 *<br/>$("XXX").on("textfieldenter",function(event, ui){  <br/>} <br/>});
			 *或：
			 *function XXX(){……}
			 *<div…… enter="XXX()"></div> 或 <div…… enter="XXX"></div>
			 */			
			enter: null,
    		
    		/**
			 *@desc 点击键盘按键结束时触发
			 *@param {event} 事件
			 *@event
			 *@example
			 *<br/>$("XXX").textfield("option", "keyup", function(event){  <br/>} <br/>});
			 *或:
			 *<br/>$("XXX").on("textfieldkeyup",function(event, ui){  <br/>} <br/>});
			 *或：
			 *function XXX(){……}
			 *<div…… keyup="XXX()"></div> 或 <div…… keyup="XXX"></div>
			 */			
			keyup: null
    	},
    	
    	/** @lends jazz.textfield */
    	
        /**
         * @desc 创建组件
         * @private
         */ 
        _create: function() {
        	//创建组件
        	this._super();
        	
        	this._createElements();
        },
        
        /**
         * @desc 创建结构组件
         * @private
         */ 
        _createElements: function(){
        	this.inputtext = this.input = $('<input id="'+this.compId+'_input" class="jazz-field-comp-input" type="text" name="'+this.options.name+'" autocomplete="off">').appendTo(this.inputFrame);        	
        },

        /**
         * @desc 初始化组件
         * @private
         */ 
		_init: function(){
			
			this._super();

			this._bindEvent();
			
			//验证
			this._validator();            
		},
		
		/**
         * @desc 相关事件处理
         * @private
		 */
		_bindEvent: function(){
			var $this = this;
			this.inputtext.off("focus.textfield blur.textfield keyup.textfield").on("focus.textfield", function(){
        		if($(this).val() == $this.options.valuetip){
					$(this).val("");
					$(this).removeClass('jazz-field-comp-input-tip');
				}
        		$this.inputValue = $this.inputtext.val();
        		$this._event("enter", null, {newValue: $this.inputValue});

        	}).on("blur.textfield", function(){
        		var value = $(this).val();
        		if(value == "" && $this.options.valuetip){
					$(this).val($this.options.valuetip);
					$(this).removeClass("jazz-field-comp-input-tip").addClass("jazz-field-comp-input-tip");
				}
        		var ui = {
    				newValue: value || "",    //新值
    				oldValue: $this.inputValue || ""       	  //旧值
        		};
        		$this._event("change", null, ui);
        		
        	}).on("keyup.textfield", function(e) {
            	setTimeout(function(){
            		var text = $this.inputtext.val(), length = text.length;
            		var maxlength = $this.options.maxlength;
            		if(maxlength){
	            		if(length > maxlength) {
	                    	text = text.substr(0, maxlength);
	                        $this.inputtext.val(text);
	                    }
            		}
            		$this._event("keyup", e, {newValue: text});
            	}, 500);
            });		
		}	
		
    });
    
});
(function( $, factory ){

	if ( jazz.config.isUseRequireJS === true ) {
		define( ['jquery', 'form/jazz.form.TextField'], factory );
	} else {
		factory($);
	}	 
})(jQuery, function($){
	/** 
	 * @version 1.0
	 * @class jazz.textareafield
	 * @description 文本输入类组件。
	 * @constructor
	 * @extends jazz.textfield
	 */
    $.widget("jazz.textareafield", $.jazz.textfield, {
       
        options: /** @lends jazz.textareafield# */ {
        	
			/**
			 *@type String
			 *@desc 组件的效验类型
			 *@default 'textareafield'
			 */        	
        	vtype: 'textareafield',
        	
        	/**
    		 *@type String
    		 *@desc 前后缀的位置 0 前缀和后缀左右排列  1 前缀和后缀上下排列
    		 *@default 0
    		 */			
			prefixposition: 0       
            	
    		// callbacks
        },

		/** @lends jazz.textareafield */
		
        /**
         * @desc 创建组件
         * @private
         */
        _create: function() {
        	this._super();
        },
        
        /**
         * @desc 创建结构组件
         * @private
         */ 
        _createElements: function(){
        	this.inputtext = this.input = $('<textarea id="'+this.compId+'_input" class="jazz-textarea-resize jazz-field-comp-input" type="text" name="'+this.options.name+'" autocomplete="off" ></textarea>').appendTo(this.inputFrame);
        	
           	//当有前后缀时，控制显示位置
        	var prefixposition = jazz.config.prefixPosition;
        	if(prefixposition){
        		this.options.prefixposition = prefixposition;
        	}        	
        },
        
        /**
         * @desc 初始化组件
         * @private
         */        
        _init: function(){
        	this._super();
        },
        
		/**
		 * @desc 设置组件内部高度, 动态改变prefixposition属性时，在基类中调用
		 * @private
		 */
		_heightContent: function(){
        	var bw = this.parent.css("border-bottom-width");
        	if(bw){
        		bw = bw.substring(0, 1);
        	}else{
        		bw = 0;
        	}
    		var innerheight = this.options.calculateinnerheight;
    		
    		//单独处理textarea组件的前缀、后缀，如果prefixposition==1则前后缀的结构为上下结构
			var preH = 0, sufH = 0;
			if(this.options.prefixposition == "1"){
    			if(this.options.prefix){
    				preH = this.prefix.outerHeight();
    				this.inputFrame.css("padding-top", preH);
    			}
    			if(this.options.suffix){
    				sufH = this.suffix.outerHeight();
    				this.inputFrame.css("padding-bottom", sufH);
    				this.suffix.removeClass("jazz-field-comp-suffix").addClass("jazz-field-comp-suffix2");
    			}
    			var _h = innerheight - parseInt(bw)*2 - preH - sufH;
    			this.inputtext.outerHeight(_h);
		    }else{
		    	this.inputFrame.css({"padding-top": 0, "padding-bottom": 0});
		    	this.suffix.removeClass("jazz-field-comp-suffix2").addClass("jazz-field-comp-suffix");
		    	this.inputtext.outerHeight(innerheight - parseInt(bw)*2);
		    }
		},        
        
		/**
         * @desc 动态改变属性
         * @param {key} 对象的属性名称 
         * @param {value} 对象的属性值
		 * @private
         */	
		_setOption: function(key, value){
			switch(key){
	    		case 'prefixposition':
	    			this.options.prefixposition = value;
	    			this._widthContent();
	    			this._heightContent();
	    		break;				
			}
			this._super(key, value);
		},
		
		/**
		 * @desc 重置组件内容区宽度大小
		 * @private
		 */
		_widthContent: function(){
			var prefixWidth = 0, suffixWidth = 0,  //前缀宽度, 后缀宽度
				//判断textarea前缀、后缀的显示位置
				prefixposition = this.options.prefixposition;
			
			this.parentwidth = this.parent.width();
			if(this.options.prefix){
				if(prefixposition == 1){					
					prefixWidth = this.parentwidth;
				}else{
					prefixWidth = this.prefix.outerWidth();
				}
			}
			if(this.options.suffix){
				if(prefixposition == 1){				
					suffixWidth = this.parentwidth;
				}else{
					suffixWidth = this.suffix.outerWidth();
				}
			}
					
			if(prefixposition == 1){
				this.inputFrame.css({"padding-left": 0, "padding-right": 0});
				this.inputFrame.outerWidth(this.parentwidth);
			}else{
				this.inputFrame.css({"padding-left": prefixWidth, "padding-right": suffixWidth});
				this.inputFrame.outerWidth(this.parentwidth);
			}
    		
    		this.framewidth = this.inputFrame.width();
   			this.inputtext.outerWidth(this.framewidth);
		}		
		
    });
    
});
(function( $, factory ){

	if ( jazz.config.isUseRequireJS === true ) {
		define( ['jquery',
		         'form/jazz.form.Field'], factory );
	} else {
		factory($);
	}	 
})(jQuery, function($){
	/**
	 * @version 1.0
	 * @name jazz.hiddenfield
	 * @description 隐藏域字段组件。
	 * @constructor
	 * @extends jazz.field
	 */
    $.widget("jazz.hiddenfield", $.jazz.field, {
        
    	options: /** @lends jazz.hiddenfield# */ {
    		
    		/**
			 *@type String
			 *@desc 组件类型
			 *@default hiddenfield
			 */
			vtype: 'hiddenfield',
			
			/**
			 *@type Number
			 *@desc 数字类型
			 *@default 延迟请求间隔时间
			 */
			delay: 300,
			
			/**
			 *@type Number
			 *@desc 数字类型
			 *@default 延迟间隔时间
			 */
			delaycount: 30000
				
    	},
    	
    	/** @lends jazz.hiddenfield */
    	
        /**
         * @desc 创建组件
         * @private
         */  
        _create: function() {
        	this._super();
			this.inputtext = this.input = $('<input type="hidden" id="'+this.compId+'_input" name="'+this.options.name+'" >').appendTo(this.inputFrame);
        },
    	
    	_init: function(){
    		this._super();
    	},
    	
        /**
         * @desc ajax请求函数
         * @param {cacheflag} boolean  true 请求数据,不取缓存数据   false 取缓存数据   default 默认通过缓存通道  
         * @return 返回请求响应的数据
         * @private
         */
        _ajax: function(cacheflag, callbackfunction){
        	var $this = this;
        	var i = 1, delay = $this.options.delay, delaycount = $this.options.delaycount;
        	try{
				var timeout = setInterval(function(){
					var status = false;
	            	data = G.getPageDataSetCache($this.options.dataurl, $this.options.dataurlparams, cacheflag);
	                
	                if(data && data.status === 'success'){
	                	clearInterval(timeout);
	                	var d = data["data"];
	                	// jazz.config.platForm 为other时是Optimus框架返回数据格式，为sword时是Sword框架返回数据格式
	                	if(jazz.config.platForm=='other'){
	                	    $.each(d,function(i,sondata){
	                	    	d = sondata["data"];
	                        });
	                	}
                        //执行回调函数
                        $this._callback(d);
                        //执行用户回调函数
	                	if($.isFunction(callbackfunction)){
	                		callbackfunction.call(this, d);
	                	}
	                    status = true;
	                }
	                i++;
	                
					if(status || delay*i > delaycount){
						clearInterval(timeout);
					}
				}, delay);
        	}catch(e){
        	}
        }
    	
    });
});
(function( $, factory ){

	if ( jazz.config.isUseRequireJS === true ) {
		define( ['jquery',
		         'form/jazz.form.HiddenField'], factory );
	} else {
		factory($);
	}	 
})(jQuery, function($){
	/**
	 * @version 1.0
	 * @name jazz.checkboxfield
	 * @description 表单元素的多选框。
	 * @constructor
	 * @extends jazz.hiddenfield
	 * @example $('XXX').checkboxfield();
	 */	

    $.widget("jazz.checkboxfield", $.jazz.hiddenfield, {
		
    	options: /** @lends jazz.checkboxfield# */ {
    		
    		/**
    		 *@type String
    		 *@desc 组件类型
    		 *@default 'checkboxfield'
    		 */
    		vtype: 'checkboxfield',
    		
    		/**
    		 *@type Array
    		 *@desc 获取数据项url地址
    		 *@default []
    		 *@example [{"checked": true, "text": "男", "value": "1"},{"text": "女", "value": "2"}] 
    		 */
    		dataurl: [],

    		/**
    		 *@type number
    		 *@desc 每一个数据项的宽度 
    		 *@default 100
    		 */    		
    		itemwidth: 100,
    		
            //callbacks
    		/**
			 *@desc 当选择了某项时，触发itemselect事件  配合dataurl属性使用
			 *@param {event} 事件
			 *@param {ui} 选中项的值 {checked: boolean, text: "", value: ""}
			 *@event
			 *@example
			 *<br/>$("XXX").checkboxfield("option", "itemselect", function(event, value){  <br/>} <br/>});
			 *或:
			 *<br/>$("XXX").on("checkboxfielditemselect",function(event, value){  <br/>} <br/>});
			 *或：
			 *function XXX(){……}
			 *<div…… itemselect="XXX()"></div> 或 <div…… itemselect="XXX"></div>
			 */
			itemselect: null
    	},
    	
    	/** @lends jazz.checkboxfield */
        /**
         * @desc 创建组件
         * @private
         */  
        _create: function() {
        	//创建组件
        	this._super();
        	
        	var vtype = this.options.vtype;
        	if(vtype == "checkboxfield"){
        		this.checkfield = "checkbox";
        	}else{
        		this.checkfield = "radio";
        	}
        },
        
        /**
         * @desc 初始化组件
         * @private
         */ 
        _init: function(){
        	this._dataItems(); 
        	
        	this._super();  
        	
        	this._bindEvents();
        },
    	
    	/**
         * @desc 绑定事件
         * @private
         */ 
        _bindEvents: function() {
            var $this = this;
            if((this.options.disabled != true && this.options.disabled != "disabled" ) &&  this.options.editable == true){
            	 this.parent.off('click.checkboxfield').on('click.checkboxfield', function(e) {
	               	 var target = e.target, $target = $(target);
	               	 if($target.is('span') || $target.is('label')){
		               	 var boxid = $target.attr("id");
		               	 boxid = boxid.substring(0, boxid.length-5);
		               	 var boxObj = $('#'+boxid);
		               	 
		   				 if($target.is('span')){
		   	                  $this._toggle(boxObj, $target ,e);			  
		   				 }
		   				 if($target.is('label')){
		   					  span = $('#'+boxid+'_span');
		   					  
		   					  if(boxObj.prop('checked')){
		   						  boxObj.prop("checked", false);
		   						  $this._nocheckImg(span);
		   					  }else{
		   						  boxObj.prop("checked", true);
		   						  $this._checkImg(span);
		   					  }
		   					  
		   					  $this._event("itemselect", e ,{checked: !$this._isChecked(boxObj), text: boxObj.attr("text"), value: boxObj.val()});
		   				 }
	               	 }
            	 });
			}
        },        
        
        /**
         * @desc 生成数据项
		 * @private
         */
        _callback: function(data) {
        	if(data){
        		this._commonDom(data, this.compId);
        	}
        	//如果reload方法中有回调, 则调用回调函数
        	if(this.callbackFunc){
        		this.callbackFunc.call(this, this.getValue());
        	}
        },
        
		/**
         * @desc 选中当前对象
		 * @param {box} radio对象
         * @private
		 */   
        _checked: function(box, spanObj){
    		box.prop('checked', true);
    		this._checkImg(spanObj);
        },
        
		/**
         * @desc 选中当前对象
		 * @param {obj} radio对像中的span对象
         * @private
		 */ 
        _checkImg: function(obj){
        	obj.removeClass('jazz-'+this.checkfield+'-nochecked').addClass('jazz-'+this.checkfield+'-checked');
        },        
        
        /**
         * @desc 生成数据dom
         * @{items} 数据项
         * @{compId} id
         * @private
         */ 
        _commonDom: function(items, compId) {
        	this.parent.addClass("jazz-field-comp-in-check");
        	this.compIdspan = compId;
        	var name = this.options.name;
        	var div = '<div class="jazz-checkbox-frame">';
        	if(items && items.length>0){
        		var $this = this; this.checkItems = [], this.allobject = [];
        		var disabled = '';
				if($this.options.disabled == true || $this.options.editable == false){
					disabled = ' disabled="false" ';
				}
        		$.each(items, function(i, item){
        			var id = compId+'_box_'+item.value; $this.allobject[i] = item;
        			$this.checkItems.push(id);
        			var chkedspan = " jazz-"+$this.checkfield+"-nochecked " , chkedtext= "";
        			if(item.checked=="true" || item.checked){
        				chkedspan = " jazz-"+$this.checkfield+"-checked ";
        				chkedtext= " checked='true' ";
        			}
        			
        			div = div + '<div index="'+i+'" class="jazz-field-comp2 jazz-checkbox-item" style="width: '+$this.options.itemwidth+'px;">'
        					+ '<div class="jazz-checkbox-hidden"><input type="'+$this.checkfield+'" index="'+i+'" id="'+id+'" text="'+item.text+'" name="'+name+'" '+chkedtext+' value="'+item.value+'" '+disabled+'/></div>'
        					+ '<span id="'+id+'_span" class="jazz-checkbox '+chkedspan+'"></span>'
        					+ '<div style="padding-left: 25px"><label id="'+id+'label" class="jazz-checkbox-label">'+item.text+'</label></div>'
        					+ '</div>';
        		});
        	}
        	div += '<div class="jazz-field-clear"></div></div>';
        	this.inputFrame.append(div);
        	
        	this._readonly();
        },
        
		/**
         * @desc 生成checkbox项
         * @private
         */
        _dataItems: function(){
        	this.inputFrame.children(".jazz-checkbox-frame").remove();
        	
        	if(typeof(this.options.dataurl) == 'string' && /^\s*[\[|{](.*)[\]|}]\s*$/.test(this.options.dataurl)){
        		//转换成对象
        		this.options.dataurl = jazz.stringToJson(this.options.dataurl);
        	}
        	
            if(typeof(this.options.dataurl) == 'object' && jazz.isArray(this.options.dataurl)){            	
            	this._commonDom(this.options.dataurl, this.compId);
            	
        		//如果reload方法中有回调, 则调用回调函数
            	if(this.callbackFunc){
            		this.callbackFunc.call(this, this.getValue());
            	}
			}else{
				this._ajax();
			}
        },        
        
        /**
         * @desc 设置默认值
         * @private
         */
		_defaultvalue: function(){
        	//默认值
        	var value = this.options.defaultvalue;	
        	if(value || value===0){
        		var $this = this;
        		$.each(this.checkItems, function(i, data){
            		$this.inputFrame.find("input[id='"+data+"']").removeAttr('checked');
            		var span = $('#'+data+'_span');
            		span.removeClass('jazz-'+$this.checkfield+'-checked').addClass('jazz-'+$this.checkfield+'-nochecked');
            	});        		
            	$.each((value+"").split(","), function(i, data){
            		$this.inputFrame.find("input[value='"+data+"']").attr('checked', 'true');
            		var span = $('#'+$this.compIdspan+'_box_'+data+'_span');
            		span.removeClass('jazz-'+$this.checkfield+'-nochecked').addClass('jazz-'+$this.checkfield+'-checked');
                });
            	this.inputview.text(this.getText());            	
        	}		
		},  
		
        /**
         * @desc 设置组件是否置灰
         * @private
         */		
		_disabled: function(){
			if(this.options.disabled == true || this.options.disabled == "disabled"){
				this.inputFrame.children(".jazz-checkbox-frame").addClass("jazz-field-disabled");
				this.parent.off('click.checkboxfield');
			}else{
				this.inputFrame.children(".jazz-checkbox-frame").removeClass("jazz-field-disabled");
				this._bindEvents(); 
			}
		},
        
		/**
         * @desc 覆盖field中的_editable方法
         * @private
         */
        _editable: function(){
    		if(this.options.editable == false || this.options.editable == "false"){
    			this.parent.off('click.checkboxfield');
    		}else{
    			this._bindEvents(); 
    		}        	
        },        
        
        /**
         * @desc 覆盖field中的_height方法
         * @private
         */
        _height: function(){
        	this.parent.css("border", "0px");
        },
        
		/**
         * @desc 判断是否选中
		 * @param {box} radio对象
         * @private
		 */ 
        _isChecked: function(box){
        	return box.prop('checked');
        },
        
		/**
         * @desc 设置每一项的宽度
         * @private
		 */         
        _itemwidth: function(){
        	var itemwidth = this.options.itemwidth;
        	if(itemwidth){
        		this.inputFrame.find(".jazz-checkbox-item").outerWidth(itemwidth);        		
        	}
        },
        
		/**
         * @desc 取消当前对象
		 * @param {obj} radio对像中的span对象
         * @private
		 */
        _nocheckImg: function(obj){
        	obj.removeClass('jazz-'+this.checkfield+'-checked').addClass('jazz-'+this.checkfield+'-nochecked');
        }, 
        
		/**
		 * @desc 设置组件是否为输入框或者是文本
		 * @private
		 */        
        _readonly: function(){
			if(this.options.readonly == true){
				this.inputFrame.children(".jazz-checkbox-frame").css({"display": "none"});
				this.inputview.css({"display": "block"});
				this.inputview.html(this.getText() || "");
			}else{
				this.inputview.css({"display": "none"});
                this.inputFrame.children(".jazz-checkbox-frame").css({"display": "block"});
			}  
        },        
        
        /**
         * @desc 设置组件属性的值
         * @param {key} 对象的属性名称 
         * @param {value} 对象的属性值
		 * @private
         */
        _setOption: function(key, value){
        	switch(key){
	        	case 'itemwidth':
	        		this.options.itemwidth = value;
	        		this._itemwidth();
	        		break;
        	}
        	this._super(key, value);
        },     
        
		/**
         * @desc 切换是否被选中
		 * @param {box} radio对象
		 * @param {spanObj} radio对像中的span对象
         * @private
		 */ 
        _toggle: function(box, spanObj, event) {
            if(this._isChecked(box)) {
                this._unchecked(box, spanObj);
            } else {
                this._checked(box, spanObj);
            }
            
            this._event("itemselect", event, {checked: this._isChecked(box), text: box.attr("text"), value: box.val()});
        },
        
		/**
         * @desc 解除勾选
		 * @param {box} radio对象
		 * @param {spanObj} radio对像中的span对象
         * @private
		 */ 
        _unchecked: function(box, spanObj) {
        	box.prop('checked', false);
        	this._nocheckImg(spanObj);        	
        },
        
		/**
         * @desc 获取当前选中状态对象的文本值
		 * @return 所有选中文本值
		 * @example $('XXX').checkboxfield('getText');
		 */
        getText: function(){
        	var name = this.options.name;
        	var chkvalue = new Array(); 
        	this.parent.find("input[name='"+name+"']:checked").each(function(){
        		chkvalue.push($(this).attr("text"));
        	});
        	return chkvalue.join(',');
        },
        
        /**
         * @desc 获取当前选中状态对象的值
         * @return 所有选中的值
         * @example $('XXX').checkboxfield('getValue');
         */
        getValue: function(){
        	var name = this.options.name;
        	var chkvalue = new Array(); 
        	this.parent.find("input[name='"+name+"']:checked").each(function(){
        		chkvalue.push($(this).val());
        	});
        	return chkvalue.join(',');
        },
        
        /**
         * @desc 获取当前选中状态对象
         * @return 所有选中的值
         * @example $('XXX').checkboxfield('getSelectJsonObject');
         */
        getSelectJsonObject: function(){
        	var arr = [], $this = this;
        	this.parent.find("input[name='"+this.options.name+"']:checked").each(function(){
        		var i = $(this).attr("index");
        		arr[i] = $this.allobject[i];
        	});
        	return arr;
        },        
        
        /**
         * @desc 动态加载数据
		 * @example $('XXX').checkboxfield('reload');
         */           
        reload: function(data, func) {
        	this.callbackFunc = func;
        	if(data){
        		this.options.dataurl = data;
        	}
        	this._dataItems();
        },           
        
		/**
         * @desc 取消当前选中状态对象
		 * @example $('XXX').checkboxfield('reset');
		 */
        reset: function(){
        	for(var i=0, len=this.checkItems.length; i<len; i++){
        		var obj = $('#'+this.checkItems[i]+'');
        		var span = $('#'+this.checkItems[i]+'_span');
        		span.removeClass('jazz-'+this.checkfield+'-checked').addClass('jazz-'+this.checkfield+'-nochecked');
        		obj.attr('checked', false);
        	}
        },
             
		/**
         * @desc 设置当前状态对象选中
		 * @param {value} 选中对象的值
		 * @example $('XXX').checkboxfield('setValue','2,4');
		 */
        setValue: function(value){
        	var $this = this;
//        	if(value){
        		$.each((value+"").split(","),function(i,data){
            		$this.parent.find("input[value='"+data+"']").attr('checked', 'true');
            		var span = $('#'+$this.compIdspan+'_box_'+data+'_span');
            		span.removeClass('jazz-checkbox-nochecked').addClass('jazz-checkbox-checked');
            	});
//        	}else{
//        		$.each($this.checkItems,function(i,data){
//            		$this.parent.find("input[id='"+data+"']").attr('checked', 'true');
//            		var span = $('#'+data+'_span');
//            		span.removeClass('jazz-checkbox-nochecked').addClass('jazz-checkbox-checked');
//            	});
//        	}
        	this.inputview.text(this.getText() || "");
        }
        
    });
    
});
(function( $, factory ){

	if ( jazz.config.isUseRequireJS === true ) {
		define( ['jquery',
		         'form/jazz.form.CheckboxField'], factory );
	} else {
		factory($);
	}	 
})(jQuery, function($){
	/**
	 * @version 1.0
	 * @name jazz.radiofield
	 * @description 表单元素的单选按钮。
	 * @constructor
	 * @extends jazz.checkboxfield
	 * @example $('XXX').radiofield();
	 */	
    
    $.widget("jazz.radiofield", $.jazz.checkboxfield, {
       
    	options: /** @lends jazz.radiofield# */ {
    		
    		/**
    		 *@type String
    		 *@desc 组件类型
    		 *@default radiofield
    		 */
    		vtype: 'radiofield'
    		
            // callbacks
    	},
    	
    	/** @lends jazz.radiofield */ 
    	
        /**
         * @desc 创建组件
         * @private
         */
        _create: function() {
        	//创建组件
        	this._super();
        },
        
        /**
         * @desc 初始化组件
         * @private
         */   
        _init: function(){
        	this._super();
        },
        
    	/**
         * @desc 绑定事件
         * @private
         */ 
        _bindEvents: function() {
            var $this = this;
            if(this.options.disabled != true &&  this.options.editable == true){
            	 this.parent.off('click.checkboxfield').on('click.checkboxfield', function(e) {
            		 var target = e.target, $target = $(target);
            		 if($target.is('span') || $target.is('label')){
		               	 var boxid = $target.attr("id");
		               	 boxid = boxid.substring(0, boxid.length-5);
		               	 var box = $('#'+boxid);
		               	 
		   				 if($target.is('span')){
		   	                 if(!$this._isChecked(box)){
		                       	 $this._nocheckAllImg();
		   	                 }
		   	                 $this._toggle(box, $target,e);
		   				 }
		   				 if($target.is('label')){
			                 var span = $('#'+boxid+'_span');
			                 if(!$this._isChecked(box)){
				               	 $this._nocheckAllImg();
				               	 $this._checked(box, span);
			                 }
		   					 $this._event("itemselect", e ,{checked: true, text:box.attr("text"), value: box.val()});
		   				 }
            		 }
               });
			}
        },        

		/**
         * @desc 取消所有radio对象
         * @private
		 */ 
        _nocheckAllImg: function(){
        	for(var i=0, len=this.checkItems.length; i<len; i++){
        		var span = $('#'+this.checkItems[i]+'_span');
        		span.removeClass('jazz-radio-checked').addClass('jazz-radio-nochecked');
        	}         	
        },        
                
		/**
         * @desc 切换是否被选中
		 * @param {box} radio对象
		 * @param {spanObj} radio对像中的span对象
         * @private
		 * @example this._toggle();
		 */  
        _toggle: function(box, spanObj, event) {
            if(!this._isChecked(box)) {
                this._checked(box, spanObj);
            } 
			this._event("itemselect", event ,{checked: true, text:box.attr("text"), value:box.val()});
        },
        
		/**
         * @desc 获取当前选中状态对象的值
		 * @return 所有选中的值
		 * @example $('XXX').radiofield('getValue');
		 */
        getValue: function(){
        	var name = this.options.name;
        	return this.parent.find("input[name='"+name+"'][type='radio']:checked").val() || "";
        },        
        
		/**
         * @desc 设置当前状态对象选中
		 * @param {value} 选中对象的值
		 * @example $('XXX').radiofield('setValue','2');
		 */
        setValue: function(value, name){
        	this.reset();
        	var $this = this;
        	$.each((value+"").split(","),function(i, data){
        		$this.parent.find("input[value='"+data+"'][type='radio']").attr('checked', 'true');
        		var span = $('#'+$this.compIdspan+'_box_'+data+'_span');
        		span.removeClass('jazz-radio-nochecked').addClass('jazz-radio-checked');
        	});
        	this.inputview.text(this.getText() || "");
        }
        
    });
    
});
(function( $, factory ){

	if ( jazz.config.isUseRequireJS === true ) {
		define( ['jquery', 'form/jazz.form.HiddenField'], factory );
	} else {
		factory($);
	}	 
})(jQuery, function($){
	/**
	 * @version 1.0
	 * @name jazz.passwordfield
	 * @description 基本的数字字段。
	 * @constructor
	 * @extends jazz.hiddenfield
	 * @example $('XXX').passwordfield();
	 */
    $.widget("jazz.passwordfield", $.jazz.hiddenfield, {
        
        options: /** @lends jazz.passwordfield# */ {
        	
    		/**
    		 *@type String
    		 *@desc 组件类型
    		 *@default passwordfield
    		 */        	
        	vtype: 'passwordfield',
        	
    		/**
			 *@type String
			 *@desc 中等强度密码提示
			 *default '中'
			 */               
            goodlabel: '中',

    		/**
			 *@type Boolean
			 *@desc 是否显示强弱的提示信息  false 不显示  true 显示
			 *@default false
			 */            
            passwordtip: false,
        	
    		/**
			 *@type String
			 *@desc 提示信息
			 *@default ''
			 */           	
            promptlabel: jazz.config.i18n.password,
            
    		/**
			 *@type String
			 *@desc 高等强度密码提示
			 *@default '强'
			 */               
            stronglabel: '强',

    		/**
			 *@type String
			 *@desc 低等强度密码提示
			 *@default '弱'
			 */              
            weaklabel: '弱'
                        
        },
       
        /** @lends jazz.passwordfield */ 
        /**
         * @desc 创建组件
         * @private
         */         
        _create: function() {
        	//创建组件
        	this._super();
        	
    		this.input = this.inputtext = $('<input id="'+this.compId+'_input" class="jazz-field-comp-input" type="password" name="'+this.options.name+'" autocomplete="off" >').appendTo(this.inputFrame);
        	
    		this._passwordtip();
        },
        
        /**
         * @desc 初始化组件
         * @private
         */                 
        _init: function(){
        	this._super();
        	
            this._bindEvents();
            
			//验证
			this._validator();
        },       
        
        /**
         * @desc 覆盖valuetip提示, passwordfield不支持valuetip功能
         * @private
         */         
        _valuetip: function(){},
        
		/**
		 *@desc 提示信息显示位置
		 *@private
		 */         
        _align: function() {
            this.panel.css({
                left:'', 
                top:'',
                'z-index': ++jazz.zindex
            })
            .position({
                my: 'left top',
                at: 'right top',
                of: this.parent
            });
        },
        
    	/**
         * @desc 绑定事件
         * @private
         */     
        _bindEvents: function() {
        	if(this.options.passwordtip == true) {
	            var $this = this;
	            
	            this.inputtext.off('focus.passwordfield blur.passwordfield keyup.passwordfield').on('focus.passwordfield', function() {
	            	if($this.options.passwordtip == "true" || $this.options.passwordtip == true){
	            		$this.infoText.text($this.options.promptlabel);	            		
	            	}
	                $this.showTip();
	            }).on('blur.passwordfield', function() {
	                $this.hideTip();
	            }).on('keyup.passwordfield', function() {
	                var value = $this.inputtext.val(),
	                label = null,
	                meterPos = null;
	
	                if(value.length === 0) {
	                    label = $this.options.promptlabel;
	                    meterPos = '0px 0px';
	                }else {
	                    var score = $this._testStrength($this.inputtext.val());
	
	                    if(score < 30) {
	                        label = $this.options.weaklabel;
	                        meterPos = '0px -10px';
	                    }
	                    else if(score >= 30 && score < 80) {
	                        label = $this.options.goodlabel;
	                        meterPos = '0px -20px';
	                    } 
	                    else if(score >= 80) {
	                        label = $this.options.stronglabel;
	                        meterPos = '0px -30px';
	                    }
	                }
	
	                $this.meter.css('background-position', meterPos);
	                $this.infoText.text(label);
	                
	                $this._align();
	            });
        	}
        },
        
    	/**
         * @desc 是否显示密码强弱的提示信息
         * @private
         */
        _passwordtip: function(){
        	if(!this.element.prop(':disabled') && this.options.passwordtip == true) {
                var panelMarkup = '<div class="jazz-password-panel jazz-state-highlight jazz-helper-hidden">';
                panelMarkup += '<div class="jazz-password-meter" style="background-position:0px 0px"></div>';
                panelMarkup += '<div class="jazz-password-info">' + this.options.promptlabel + '</div>';
                panelMarkup += '</div>';

                this.panel = $(panelMarkup).insertAfter(this.element);
                this.meter = this.panel.children('div.jazz-password-meter');
                this.infoText = this.panel.children('div.jazz-password-info');

                if(this.options.inline) {
                    this.panel.addClass('jazz-password-panel-inline');
                } else {
                    this.panel.addClass('jazz-password-panel-overlay').appendTo('body');
                }
            }        	
        },

		/**
		 *@desc 规格化
		 *@param {x} 
		 *@param {y}
		 *@private
		 */         
        _normalize: function(x, y) {
            var diff = x - y;

            if(diff <= 0) {
                return x / y;
            }
            else {
                return 1 + 0.5 * (x / (x + y/4));
            }
        },
        
		/**
         * @desc 动态改变属性
         * @param {key} 对象的属性名称 
         * @param {value} 对象的属性值
		 * @private
         */
        _setOption: function(key, value){
        	switch(key){
        		case 'passwordtip':
        			this.options.passwordtip = value;
        			if(value == true){
        				this._passwordtip();
        				this._bindEvents();
        			}else{
        				if(this.panel){
        					this.inputtext.off('focus.passwordfield blur.passwordfield keyup.passwordfield');
        					this.panel.hide();
        				}
        			}
        		break;
        	}
        	this._super(key, value);
        },
        
		/**
		 *@desc 效验密码的强弱
		 *@param {str} 输入的字符串
		 *@private
		 */         
        _testStrength: function(str) {
            var grade = 0, 
            val = 0, 
            $this = this;

            val = str.match('[0-9]');
            grade += $this._normalize(val ? val.length : 1/4, 1) * 25;

            val = str.match('[a-zA-Z]');
            grade += $this._normalize(val ? val.length : 1/2, 3) * 10;

            val = str.match('[!@#$%^&*?_~.,;=]');
            grade += $this._normalize(val ? val.length : 1/6, 1) * 35;

            val = str.match('[A-Z]');
            grade += $this._normalize(val ? val.length : 1/6, 1) * 30;

            grade *= str.length / 8;

            return grade > 100 ? 100 : grade;
        },

		/**
		 *@desc 隐藏提示
		 *@example $('XXX').passwordfield('hideTip');
		 */  		
        hideTip: function() {
            if(this.options.inline){
                this.panel.slideUp();
            }else{
                this.panel.fadeOut();
            }
        },

		/**
		 *@desc 显示提示
		 *@example $('XXX').passwordfield('showTip');
		 */  
        showTip: function() {
            if(!this.options.inline) {
                this._align();

                this.panel.fadeIn();
            }
            else {
                this.panel.slideDown(); 
            }        
        }
        
    });
    
});
(function( $, factory ){

	if ( jazz.config.isUseRequireJS === true ) {
		define( ['jquery',
		         'form/jazz.form.HiddenField'], factory );
	} else {
		factory($);
	}	 
})(jQuery, function($){
	/**
	 * @version 1.0
	 * @name jazz.iconfield
	 * @description 选择输入组件的基类。
	 * @constructor
	 * @extends jazz.hiddenfield
	 */
    $.widget("jazz.iconfield", $.jazz.hiddenfield, {
    	
    	options: /** @lends jazz.iconfield# */ {

        	/**
    		 *@type String
    		 *@desc 组件类型
    		 *@default textfield
    		 */
			vtype: 'iconfield'

    	},
    	
    	/** @lends jazz.iconfield */
    	
        /**
         * @desc 创建组件
         * @private
         */ 
        _create: function() {
        	//创建组件
        	this._super();
        	this.inputtext = $('<input id="'+this.compId+'_text" class="jazz-field-comp-input" type="text" autocomplete="off">').appendTo(this.inputFrame);
        },

        /**
         * @desc 初始化组件
         * @private
         */ 
		_init: function(){
			this._super();
		},
		
		/**
		 * @desc 设置组件是否为输入框或者是文本
		 * @private
		 */			
		_readonly: function(){
			if(this.options.readonly == true){
	    		this.parent.removeClass("jazz-field-comp-in2");
				this.inputtext.css({"display": "none"});					
				this.inputview.css({"display": "block"});
				var text = this.inputtext.val();
				if(this.options.vtype == 'colorfield'){
					text = this.inputview.attr("value");
				}
				if(text == this.options.valuetip){
					this.inputview.html("&nbsp;");
				}else{
					this.inputview.html(text || "&nbsp;");	
				}				
				this.parent.children(".jazz-field-icon").css({"display": "none"});
				//把下拉图片的宽度清0，然后再生新计算组件宽度
				this.arrowwidth = 0;
				//修改内容区宽度
        		this._widthContent();
			}else{
				this.inputview.css({"display": "none"});
				this.inputtext.css({"display": "block"});					
				this.parent.addClass("jazz-field-comp-in2");
				this.parent.children(".jazz-field-icon").css({"display": "block"});
				
				this.arrowwidth = jazz.config.fieldIconWidth;
				//修改内容区宽度
        		this._widthContent();
			}		
		}
    });
    
});
(function( $, factory ){

	if ( jazz.config.isUseRequireJS === true ) {
		define( ['jquery', 'form/jazz.form.IconField'], factory );
	} else {
		factory($);
	}	 
})(jQuery, function($){
	/**
	 * @version 1.0
	 * @name jazz.numberfield
	 * @description 基本的数字字段。
	 * @constructor
	 * @extends jazz.iconfield
	 */
    $.widget("jazz.numberfield", $.jazz.iconfield, {
    	
    	options: /** @lends jazz.numberfield# */ {
    		
    		/**
			 *@type String
			 *@desc 组件的效验类型
			 *@default 'numberfield'
			 */
    		vtype: 'numberfield',  		
            
            /**
			 *@type Number
			 *@desc 数值最大值
			 *@default 1.0
			 */
            max: null,
            
            /**
			 *@type Number
			 *@desc 数值最小值
			 *@default 1.0
			 */
            min: null,
            
            /**
             *@type Number
             *@desc 数值间间隔的步长
             *@default 1.0
             */
            step: 1.0,
            
            // callbacks
    		
    		/**
			 *@desc 当文本框值变化时触发
			 *@param {event} 事件
			 *@param {ui.newvalue} 新修改的值
			 *@param {ui.oldvalue} 旧值
			 *@event
			 *@example
			 *初始化：
			 *<br/>$("#input_id").numberfield({change: function( event, ui ){  <br/>} <br/>});
			 *非初始化:
			 *<br/>$("#input_id").on("numberfieldchange",function( event, ui ){  <br/>} <br/>});
			 */
    		change: null
        },
        
        /** @lends jazz.numberfield */
        /**
         * @desc 创建组件
         * @private
         */  
        _create: function() {
        	//创建组件
        	this._super();
        	this.parent.append('<a class="jazz-field-icon jazz-number-btn jazz-number-btn-up"><span id="'+this.compId+'_up" class="jazz-number-img jazz-number-upImg"></span></a>'
	                          +'<a class="jazz-field-icon jazz-number-btn jazz-number-btn-down"><span id="'+this.compId+'_down" class="jazz-number-img jazz-number-downImg"></span></a>');

			this.upArrows = $('#'+this.compId+'_up');
			this.downArrows = $('#'+this.compId+'_down');
			
			this.input = this.inputtext;
			
//			this.upArrows.hover(function() {
//            }).focus(function() {
//            	$(this).addClass('jazz-number-upImg2');
//            }).blur(function() {
//            	$(this).removeClass('jazz-number-upImg2');
//            });
//			this.downArrows.hover(function() {
//            }).focus(function() {
//            	$(this).addClass('jazz-number-downImg2');
//            }).blur(function() {
//            	$(this).removeClass('jazz-number-downImg2');
//            });
        },

        /**
         * @desc 初始化组件
         * @private
         */
        _init: function(){
        	this._super();
        	
        	this._initValue();
        	var step = this.options.step;
            step = step || 1;
            
            if(parseInt(step, 10) === 0) {
                this.options.precision = step.toString().split(/[,]|[.]/)[1].length;
            }
            
            this._bindEvents();
            
			//验证
			this._validator();            
        },
        
    	/**
         * @desc 绑定事件
         * @private
         */ 
        _bindEvents: function() {
            var $this = this;
            this.parent.children('.jazz-number-btn').off('mouseout.number mouseup.number mousedown.number')
            	.on('mouseout.number', function() {
                    if($this.timer) {
                        window.clearInterval($this.timer);
                    }
                }).on('mouseup.number', function() {
                    window.clearInterval($this.timer);
                    //$this.inputtext.focus();
                }).on('mousedown.number', function(e) {
                    var element = $(this),
                    dir = element.hasClass('jazz-number-btn-up') ? 1 : -1;
                    $this.inputtext.focus();
                    $this._repeat(null, dir);
                    e.preventDefault();
                });

            this.inputtext.off("keydown.number keyup.number blur.number focus.number")
            .on("keydown.number", function (e) {   
                var keyCode = $.ui.keyCode;
                switch(e.which) {
                    case keyCode.UP:
                        $this._spin($this.options.step);
                    break;
                    case keyCode.DOWN:
                        $this._spin(-1 * $this.options.step);
                    break;
                }
            }).on("keyup.number", function () {
                $this._updateValue();              
            }).on("blur.number", function () {
            	if($this.inputtext.val()===''){
            		$this._valuetip();
            	}else{
            		$this._format();
            	}
            	$this._triggerChange();
            }).on("focus.number", function () {
        		var value = $(this).val();
            	if(value == $this.options.valuetip){
					$(this).val("");
					$(this).removeClass('jazz-field-comp-input-tip');
				}
        		if(!isNaN(value)){
        			$this._format();
        			$this.oldvalue = $(this).val();
        		}else{
        			$this.oldvalue = "";
        		}
            });
            
//            //mousewheel
//            this.element.bind('mousewheel', function(event, delta) {
//                if($this.element.is(':focus')) {
//                    if(delta > 0)
//                        $this._spin($this.options.step);
//                    else
//                        $this._spin(-1 * $this.options.step);
//
//                    return false;
//                }
//            });
        },
        
        /**
         * @desc 设置组件是否置灰
         * @private
         */        
        _disabled: function(){
        	this._super();
        	if(this.options.disabled == true || this.options.disabled == "disabled"){
        		this.parent.children('.jazz-number-btn').off('mouseout.number mouseup.number mousedown.number');
        		this.inputtext.off("keydown.number keyup.number blur.number focus.number");
        	}else{
        		this._bindEvents();
        	}
        },

        /**
         * @desc 格式化值
		 * @private
         */
        _format: function() {
            var value = this.value;
            var newvalue;

            if(this.options.precision){
                newvalue = parseFloat(this._toFixed(value, this.options.precision));
            }else{
                newvalue = parseInt(value, 10);
            }
            if((this.options.min || this.options.min===0) && newvalue < this.options.min) {
                newvalue = this.options.min;
            }
            if(this.options.max && newvalue > this.options.max) {
                newvalue = this.options.max;
            } 
            
            if(isNaN(newvalue)){
            	this._valuetip();
            }else{
            	this.value = newvalue;
            	this.inputtext.val(newvalue);
            }
        },
        
        /**
         * @desc 初始值
		 * @private
         */
        _initValue: function() {
            var value = this.inputtext.val();

            if(value === '' || (!this.options.defaultvalue && value == this.options.valuetip)) {
                if(this.options.min || this.options.min===0){
                    this.value = this.options.min;
                }else{
                    this.value = '';
                }
            } else {
//                if(this.options.prefix){
//                    value = value.split(this.options.prefix)[1];
//                }
//                if(this.options.suffix){
//                    value = value.split(this.options.suffix)[0];
//                }

                if(this.options.step){
                    this.value = parseFloat(value);
                }else{
                    this.value = parseInt(value, 10);
                }
            }
        },
        
        /**
         * @desc 加载值
		 * @param {interval}
		 * @param {dir}  
		 * @private
         */
        _repeat: function(interval, dir) {
            var $this = this, i = interval || 500;
            window.clearTimeout(this.timer);
            this.timer = window.setTimeout(function() {
                $this._repeat(40, dir);
            }, i);
            this._spin(this.options.step * dir);
        },
        
		/**
         * @desc 动态改变属性
         * @param {key} 对象的属性名称 
         * @param {value} 对象的属性值
		 * @private
         */
        _setOption: function(key, value){
        	switch(key){
        		case 'max':
        			this.options.max = value;
        			break;
        		case 'min':
        			this.options.min = value;
        			break;
        		case 'step':
        			this.options.step = value;
        		break;
        	}
        	this._super(key, value);
        },
        
        /**
         * @desc 组件赋值
         * @param {step} 增长值
		 * @private
         */       
        _spin: function(step) {
            var newvalue, currentValue = this.value ? this.value : 0;
            currentValue = parseInt(currentValue, 10);
            
            if(this.options.precision){
                newvalue = parseFloat(this._toFixed(currentValue + step, this.options.precision));
            }else{
                newvalue = parseInt(currentValue + step, 10);
            }
            
            if((!!this.options.min || this.options.min===0) && newvalue < this.options.min) {
                newvalue = this.options.min;
            }
            
            if(!!this.options.max && newvalue > this.options.max) {
                newvalue = this.options.max;
            }

            this.inputtext.val(newvalue);
            this.value = newvalue;
            
            //this.oldvalue = currentValue;
        },
        
        /**
         * @desc 计算精度值
         * @param {value} 现有值
         * @param {precision}
         * @return 返回计算后的精度值
		 * @private
         */        
        _toFixed: function (value, precision) {
            var power = Math.pow(10, precision||0);
            return String(Math.round(value * power) / power);
        },

        /**
         * @desc change事件
         * @private
         */		
		_triggerChange: function(){
			var newvalue = this.value;
			var oldvalue = this.oldvalue;
			var ui = {
				newvalue: newvalue,                   //新值
				oldvalue: oldvalue                    //旧值
			};
			this._event("change", null, ui);
		},
                
        /**
         * @desc 更新值
		 * @private
         */
        _updateValue: function() {
            var value = this.inputtext.val();

            if(value === '') {
                if(this.options.min || this.options.min===0){
                    this.value = this.options.min;
                }else{
                    this.value = '';
                }
            }else {
                if(this.options.step){
                    value = parseFloat(value);
                }else{
                    value = parseInt(value, 10);
                }
                if(!isNaN(value)) {
                    this.value = value;
                }
            }
        },

		/**
         * @desc 设置元素值  
         * @param {value} 设置的值
		 * @example $('XXX').numberfield('setValue', value);
         */
		setValue: function(value) {
			this._super(value);
			if(value === "" || value == undefined){ value = this.options.min; }
			if(value){
				this.oldvalue = Number(value);
				this.value = Number(value);				
			}
		}
    });
});
(function( $, factory ){

	if ( jazz.config.isUseRequireJS === true ) {
		define( ['jquery',
		         'form/jazz.form.IconField'], factory );
	} else {
		factory($);
	}	 
})(jQuery, function($){
	/**
	 * @version 1.0
	 * @name jazz.dropdownfield
	 * @description 选择下拉组件的基类。
	 * @constructor
	 * @extends jazz.iconfield
	 */
    $.widget("jazz.dropdownfield", $.jazz.iconfield, {
    	
    	options: /** @lends jazz.dropdownfield# */ {

        	/**
    		 *@type String
    		 *@desc 组件类型
    		 *@default textfield
    		 */
			vtype: 'dropdownfield',
    		
			/**
			 *@type object
			 *@desc 下拉组件的容器,提供给可编辑表格使用
			 */
			appendTo: null,    		
    		
        	/**
			 *@type Number
			 *@desc 滚动条显示高度
			 *@default 200
			 */         
            downheight: 200,
            
            /**
             *@type String
             *@desc 请求数据的url地址
             *@default null
             */      
            dataurl: null,
            
            /**
             *@type Object
             *@desc 请求数据地址对应的参数 {}
             *@default null
             *@example {"key1":"value1", "key2": "value2"}
             */            
            dataurlparams: null,
            
        	/**
        	 *@type Boolean
        	 *@desc 是否可编辑 true可编辑 false不可编辑 
        	 *@default true
        	 */
        	editable: true,  
        	
        	/**
        	 *@type Boolean
        	 *@desc 是否懒加载数据(是否在初始组件时加载数据)， true 初始化时不加载数据 false初始化时加载数据
        	 *@default true
        	 */	
        	islazydata: false,        	
            
			/**
			 *@type number
			 *@desc 组件下拉框的最大宽度
			 *@default -1
			 */			
			maxdownwidth: -1,
			
			/**
			 *@type number
			 *@desc 组件下拉框的最小宽度
			 *@default -1
			 */
			mindownwidth: -1
    	},
    	
    	/** @lends jazz.dropdownfield */
    	
        /**
         * @desc 创建组件
         * @private
         */
        _create: function() {
        	//创建组件
        	this._super();
        	this.trigger = $('<span id="'+this.compId+'_ar" class="jazz-field-icon jazz-field-comp-ar"></span>').appendTo(this.parent);
        	this.datastatus = false;
        
        	this._createDownpanel();
        },

        /**
         * @desc 初始化组件
         * @private
         */
		_init: function(){
			this._super();
		},

		/**
         * @desc 调整下拉列表的展现位置
		 * @private
         */
        _alignPanel: function() {
        	var vtype = this.options.vtype;
        	if(vtype != "datefield" && vtype != 'colorfield'){
        		var parentwidth = this.parent.width();
        		if(this.options.maxdownwidth > 0 && this.options.maxdownwidth > parentwidth){
        			parentwidth = this.options.maxdownwidth;
        		}
        		
        		if(this.options.mindownwidth > 0 && this.options.mindownwidth < parentwidth){
        			parentwidth = this.options.mindownwidth;
        		}
        		this.panel.css("width",parentwidth);
        	}
			this._itemScroll();
            this.panel.css({'z-index': ++jazz.zindex})
                .position({
                	my: 'left top',
                	at: 'left bottom',
                	of: this.parent,
                	collision:"flipfit"
            });      	
        },

		/**
         * @desc 绑定事件
		 * @private
         */         
        _binddropdown: function() {
            var $this = this;
            var vtype = this.options.vtype;
            this.parent.off('mousedown.dropdown').on('mousedown.dropdown', function(e) {
            	$this._event("enter", e);
            	var target = e.target, $target = $(target);
			    if($target.is('span') || target==$this.inputtext.get(0)){
			    	if(vtype == 'comboxfield'){
						$this._updateSelectItemStyle();
					}
			    	var b = true;
			    	if(jazz.isArray($this.dataset)){
			    		b = $this.dataset.length > 0 ? true : false;
			    	}
			    	$this._showDropdown(b);
			    }

			    if($.browser.msie){
				    //修复IE下光标跳到最开始的问题
				    if($this.inputtext.get(0).createTextRange()){
	            		var range = $this.inputtext.get(0).createTextRange();
						range.collapse(false);
						range.select();
	            	}
			    }
			    
			    //e.stopPropagation();
            });
        },
        
		/**
         * @desc 生成panel
		 * @private
         */				
		_createDownpanel: function(){
			var name = this.options.name;
			
            var vtype = this.options.vtype;
            var zindex = ++jazz.config.zindex + 1000;
            //dropdownpanel_ 前缀不要修改, jazz.Event.js中有引用
			this.panel = $('<div name="dropdownpanel_'+name+'" type="'+vtype+'"  class="jazz-dropdown-panel jazz-widget-content jazz-helper-hidden jazz-'+vtype+'-panel"/>').appendTo(this.options.appendTo || document.body);
            this.panel.css('z-index', zindex);
			this.itemsWrapper = $('<div class="jazz-dropdown-wrapper" />').appendTo(this.panel);
			if(vtype== 'comboxtreefield'){
				//$('<div name="reset_comboxtree_'+name+'" class="jazz-comboxtree-reset">请选择</div>').appendTo(this.panel);
				this.resetcomboxtree = $("div[name='reset_comboxtree_"+name+"']");
				this.ulId = "zTree_"+name;
				this.itemsContainer = $('<ul id="'+this.ulId+'" class="ztree" style="margin-top:0; width:auto;"></ul>').appendTo(this.itemsWrapper);
			}else if(vtype== 'datefield' || vtype== 'colorfield'){
				this.itemsContainer = this.itemsWrapper;
			}else{
				this.itemsContainer = $('<ul class="jazz-dropdown-list jazz-helper-reset"></ul>').appendTo(this.itemsWrapper);
			}
			//临时处理
			this.panel.off("mousedown").on("mousedown",function(event){
        		//防止this.panel事件冒泡到document上，
        		event.stopPropagation();
        	});
		},
		
        /**
         * @desc 前后修改数据的变化
		 * @private
         */
        _changeData: function(){
        	var _change0 = function(v){
        		if(v===0){return v;}else{return v || "";};
        	};
        	var ui = {oldValue: _change0(this._oldValue), oldText: _change0(this._oldText),
        			  newValue: _change0(this._newValue), newText: _change0(this._newText) };
        	_change0 = null;
        	return ui;
        },
        
        /**
         * @desc 设置组件是否不可用
		 * @private
         */        
        _disabled: function(){
        	this._super();
        	if(this.options.disabled == true || this.options.disabled == "disabled"){
        		this.parent.off('mousedown.dropdown');
        	}else{
        		this._binddropdown();
        	}
        },
		
		/**
         * @desc 计算下拉列表查询框的宽度
		 * @private
         */
        _dimensionList: function() {
            if(this.options.filterable) {
                this.filterInput.width(this.filterContainer.width() - 20);
            }
        },

		/**
         * @desc 生成提示信息panel
		 * @private
         */				
		_hideDropdown: function(){
			this.panel.hide();
		},

		/**
         * @desc 列表框是否显示滚动条
		 * @private
         */        
        _itemScroll: function(){
        	 //当下拉组件的列表高度大于设定的高度时，显示滚动条
            var scrollh = this.options.downheight || 200;
            scrollh = parseInt(scrollh);
            
            if(this.panel.height() > scrollh) {
                this.itemsWrapper.outerHeight(scrollh);
                this.panel.height(scrollh);
            }      	
        },	
        
        /**
         * @desc 生成数据项
         * @param {callback_function} 回调函数
		 * @private
         */
		_setValueCallback: function(callback_function) {
			if($.isFunction(callback_function)){
				callback_function.call(this,null,this._changeData());
			}            
        },        
		
		/**
         * @desc  设置元素值
		 * @param {value} 设置的值
		 * @param {callback_function} 回调函数
		 * @private
         */
		_setValueData: function(value, callback_function){
			var $this = this;
			var i = 1, delay = 100, delaycount = $this.options.delaycount;
			var timeout = setInterval(function(){
				var status = $this.datastatus;
				if(status){
					if(value != $this.getValue()){
						$this.setText("");
					}
					$this._setData(value, callback_function);
				}
				i++;
				if(status || delay*i > delaycount){
					clearInterval(timeout);
				}
			}, delay);
		},        
        
		/**
         * @desc 是否显示下拉列表
         * @param {b} 判断是否隐藏 true 显示
		 * @private
         */				
		_showDropdown: function(b){
			if(b){
				//date:20160302
				//原来的drop组件一直属于body对象
				//所以导致以下2个问题
				//1.droppanel组件会在输入框父级对象的外边显示出来
				//2.如果输入框组件的父级position是auto的话，会导致滑动条滚动的时候，droppanel不跟着输入框走
				//先找到panel对象的name
//				if(this.panel.attr("isMoved") !== "isMoved"){
//					var name = this.panel.attr("name").replace("dropdownpanel_", "");
//					$("div[name=" + name + "]").parent().css("position", "relative");
//					this.panel.css("position", "absolute");
//					//将droppanel放到输入框平级
//					this.panel.appendTo($("div[name=" + name + "]").parent()).attr("isMoved", "isMoved");
//					this.panel.position({
//						"my":"left top",
//						"at":"left bottom",
//						"of":$("div[name=" + name + "]").children().eq(1)
//					});
//					
//				}
//

				//脱离文档流
				this.panel.css({"position": "fixed", "left": 0, "top": 0});				
				this.panel.show();
				
				this.panel.css("position", "absolute");
				this._alignPanel();
				
				if(this.options.vtype == 'comboxfield'){
					this._dimensionList();
				} 
			}else{
				this.panel.hide();
			}
		}      
        
    });
    
});(function( $, factory ){

	if ( jazz.config.isUseRequireJS === true ) {
		define( ['jquery',
		         'form/jazz.form.DropdownField'], factory );
	} else {
		factory($);
	}	 
})(jQuery, function($){
	
	/**
	 * @version 1.0
	 * @name jazz.comboxfield
	 * @description 表单元素的选择填报类。
	 * @constructor
	 * @extends jazz.dropdownfield
	 * @requires
	 * @example $('XXX').comboxfield();
	 */

    $.widget("jazz.comboxfield", $.jazz.dropdownfield, {
        
        options: /** @lends jazz.comboxfield# */ {
			
        	/**
			 *@type String
			 *@desc 组件类型
			 *@default 'comboxfield'
			 */        	        	
        	vtype: 'comboxfield',
        	
        	/**
        	 *@type boolean
        	 *@desc  缓存开关 true 使用缓存  false 不使用缓存
        	 *@default true 使用缓存
        	 */
        	cacheflag: true,        	
        	
			/**
			 *@type String
			 *@desc 空白项，显示的默认文本内容 
			 *@default '请选择……'
			 */	    		
    		blanktext: jazz.config.fieldBlankText,        	
        	
        	/**
        	 *@type Boolean
        	 *@desc 是否区分字母的大小写过滤  true 区分大小写
        	 *@default false
        	 */             
        	casesensitive: false,

            /**
             *@type Function
             *@desc 自定义combox下拉列表展现内容
             *@default null
             *@example
             *datarender: function(data){var a = "<div>"+data["text"]+"***"+data["value"]+"</div>" return a;}
             */
            datarender: null,
            
        	/**
        	 *@type Boolean
        	 *@desc 是否可编辑 true可编辑 false不可编辑 
        	 *@default true
        	 */
        	editable: false,        

            /**
			 *@type Boolean
			 *@desc 是否进行过滤
			 *@default false
			 */            
            filterable: false,
            
			/**
			 *@type String
			 *@desc 过滤模式  startsWith  contains   endsWith
			 *@default 'contains'
			 */            
            filtermatchmode: 'contains',
            
			/**
			 *@type Function
			 *@desc 自定义查询过滤函数
			 *@default null
			 *@private
			 */                
            filterfunction: null,   //目前没有实现， 以后实现 filtermatchmode: custom  0.5 以后版本在加
			
			/**
			 *@type Boolean
			 *@desc 是否显示空白项
			 *@default true
			 *@private
			 */              
            isshowblankitem: true,
            
            /**
			 *@type Boolean
			 *@desc 是否多选 true是复选，false是单选
			 *@default false
			 */            
            multiple: false,
            
            /**
			 *@type Number
			 *@desc 默认显示记录的所引值
			 *@default null
			 */            
            selectedindex: null,
            
            /**
			 *@type Object
			 *@desc 将默认text value 转换成所需要的
			 *@default simpleData: { text: "text",  value: "value" }
			 */             
            simpledata: {
            	text: "text",
            	value: "value"
            },
			
            // callbacks
			
    		/**
			 *@desc 鼠标焦点进入输入框时触发
			 *@param {event} 事件
			 *@event
			 *@example
			 *<br/>$("XXX").comboxfield("option", "enter", function(event, ui){  <br/>} <br/>});
			 *或:
			 *<br/>$("XXX").on("comboxfieldenter",function(event, ui){  <br/>} <br/>});
			 */			
			enter: null,
    		
    		/**
			 *@desc 鼠标焦点离开输入框时触发
			 *@param {event} 事件
			 *@param {ui.newValue} 新修改的值 
			 *@param {ui.newText} 新修改的文本
			 *@param {ui.oldValue} 旧值
			 *@param {ui.oldText}  旧文本
			 *@event
			 *@example
			 *<br/>$("XXX").comboxfield("option", "change", function(event, ui){  <br/>} <br/>});
			 *或:
			 *<br/>$("XXX").on("comboxfieldchange",function(event, ui){  <br/>} <br/>});
			 *或：
			 *function XXX(){……}
			 *<div…… change="XXX()"></div> 或 <div…… change="XXX"></div>
			 */
			change: null,
    		
    		/**
			 *@desc 当选择了某项时，触发itemselect事件  配合dataurl属性使用
			 *@param {event} 事件
			 *@param {ui.value} 选中项的值
			 *@param {ui.text} 选中项的文本 
			 *@event
			 *@example
			 *<br/>$("XXX").comboxfield("option", "itemselect", function(event, ui){  <br/>} <br/>});
			 *或:
			 *<br/>$("XXX").on("comboxfielditemselect",function(event, ui){  <br/>} <br/>});
			 *或：
			 *function XXX(){……}
			 *<div…… itemselect="XXX()"></div> 或 <div…… itemselect="XXX"></div>
			 */
			itemselect: null
            
        },

		/** @lends jazz.comboxfield */
	
        /**
         * @desc 创建组件
         * @private
         */ 
        _create: function() {
        	//创建组件
        	this._super();
        	//dropdownfield中定义
        	//this._createDownpanel();
        }, 
        
        /**
         * @desc 初始化组件
         * @private
         */ 
        _init: function() {
        	//定义展现的数据集合
        	this.blankitem = [], this.dataset = [], this.datakeyvalue = {};

        	//是否可以对列表项进行过滤
        	this._filterable();
        	
        	//设置过滤数据的匹配机制
            this._setupFilterMatcher();

            //是否显示空白项
            this._isshowblankitem();
            
        	//加载数据
        	this._loaddata();
        	
        	this._super();
        	
        	this._bindEvent();
        	
        	this._validator();
        },
        
		/**
         * @desc 绑定事件
		 * @private
         */         
        _bindEvent: function() {
            var $this = this;

            this.itemsContainer.off("click.comboxfield").on("click.comboxfield", function(e){
            	var t = $(e.target); 
            	if(t.is(".jazz-dropdown-list-item a")){
            		
            		$this._selectedItem(e, t);

    				e.stopPropagation();
                 }
            });

            this._bindEventFilterInput();
            
            this._bindEventInputtext();
            
//            //绑定列表  
//        	if(!this.options.disabled){
//        		this._binddropdown(this.dataset.length);  
//        	}
        },
        
        /**
         * @desc 绑定过滤查询事件
		 * @private
		 */
        _bindEventFilterInput: function(){
        	var $this = this;
            if(this.options.filterable) {
                this.filterInput.off('keyup.comboxfield').on('keyup.comboxfield', function() {
                    $this._filter($(this).val());
                });
            }     	
        },
        
        /**
         * @desc 绑定输入框事件
		 * @private
		 */
        _bindEventInputtext: function(){
        	var $this = this;
        	this.inputtext.off("focus.comboxfield blur.comboxfield").on("focus.comboxfield", function(){
        		if($(this).val()==$this.options.valuetip){
					$(this).val("");
					$(this).removeClass('jazz-field-comp-input-tip');
				}
        	}).on("blur.comboxfield", function(){
        		if($(this).val()=="" && !!$this.options.valuetip){
					$(this).val($this.options.valuetip);
					$(this).addClass('jazz-field-comp-input-tip');
				}
        	});        	
        },
      
        /**
         * @desc 处理设置值的回调函数
         * @param {value} 值
         * @param {callback_function} 回调函数
		 * @private
         */ 
        _setData: function(value, callback_function){
        	this._oldValue = this.getValue(), this._oldText = this.getText();
        	var text = "";
			if(this.options.multiple){
				var arr = value.split(",");
				for(var i=0, len=arr.length; i<len; i++){
					if(i==0){
						text = this._getDataText(arr[i]);
					}else{
						text = text + "," + this._getDataText(arr[i]);
					}
				}
			}else{
				text = this._getDataText(value);
			}
			if(text){
				this._setTextValue(text, value);
				this._newText = text;
			}
			this._newValue = value;
			this._setValueCallback(callback_function);
        },
        
        /**
         * @desc 选择列表项
		 * @private
		 */        
        _selectedItem: function(e, t){
            var ui;
            t = t.closest("li");
            this._newText = t.data('text'), this._newValue = t.data('value');
            var obj = null;
            for(var i=0, len=this.dataset.length; i<len; i++){
            	if(this.dataset[i]["value"] == this._newValue){
            		obj = this.dataset[i];
            	}
            }
            
            ui = {text: this._newText, value: this._newValue}; 
            if(obj){
            	ui = $.extend(ui, obj);
            }
            
        	this.inputtext.removeClass("jazz-field-comp-input-tip");
        	
        	var multiple = this.options.multiple;
			if(multiple){
				if(t.hasClass("jazz-state-highlight")){
					t.removeClass("jazz-state-highlight");
				}else{
					t.addClass("jazz-state-highlight");
				}
				
				this._oldValue = this.getValue(), this._oldText = this.getText();
				var value = this._getSelectedData();
				//设置鼠标选中记录时的值
				this._setSelectedValue(value);
				this._event("itemselect", e, ui);
			}else{
				this._oldValue = this.getValue(), this._oldText = this.getText();
				//设置鼠标选中记录时的值
				this._setSelectedValue(t.data('value'));
                this._hideDropdown();
                
                this._event("itemselect", e, ui);
            	
            	this._event("change", e, $.extend(this._changeData(), ui));
			}        	
        },
        
        /**
         * @desc 处理设置值的回调函数
         * @param {data} 返回的结果集
         * @param {value} 值
         * @param {callback_function} 回调函数
		 * @private
         */        
		_setValue: function(data, value, callback_function){
            if(jazz.isArray(data)){       	
            	this.dataset = data;
            	this._dataItems();
            	this._setData(value, callback_function);           
        	}
		},
 
        /**
         * @desc ajax生成数据的回调
		 * @private
         */
        _callback: function(data, callbackfunction) {
            if(jazz.isArray(data)){           	
            	this.dataset = data;
            	this._dataItems(true);  //auto组件需要    _dataItems(true)
        	}
            if($.isFunction(callbackfunction)){
            	callbackfunction.call(this, data);
            }
        },
        
		/**
         * @desc 包含内容过滤
         * @param {value} 实际值
         * @param {filter} 过滤值
		 * @private
         */         
        _containsFilter: function(value, filter) {
            return value.indexOf(filter) !== -1;
        },

		/**
         * @desc 生成数据项
		 * @private
         */
        _dataItems: function() {
        	var rule = this.options.rule;
        	this.itemsContainer.empty();
        	var liset = []; this.valueset = [];
            for(var i = 0; i < this.dataset.length; i++) {
                var option = this.dataset[i],
                value = option[this.options.simpledata.value], text = option[this.options.simpledata.text],
                content = text, datarender = this.options.datarender;
                this.datakeyvalue[value] = text+"", this.valueset[i] = value;
                
                if(datarender){
                	if(!$.isFunction(datarender)){
        				if(/\(/.test(datarender)){
        					datarender = datarender.split("(")[0];
        				}
        				datarender = eval(datarender+"");
                	}
                	content = datarender.call(this, option);
                }
                liset.push('<li data-value="' + value + '" data-text="' + text + '" class="jazz-dropdown-list-item" ><a href="javascript:;">' + content + '</a></li>');
            }
           
        	if(this.blankitem.length > 0 && (rule+"").indexOf("must") < 0){
        		this.itemsContainer.append(this.blankitemdom);
                //合并全部数据
                this.dataset = this.blankitem.concat(this.dataset);
        	}            
            
            if(liset.length>0){
            	this.itemsContainer.append(liset.join(""));
            }
            
            if(this.options.selectedindex){
            	var _value = this.valueset[this.options.selectedindex];
            	this.setValue(_value);
            }
            
            //this.items所有<li>元素的对象集合
            this.items = this.itemsContainer.children('.jazz-dropdown-list-item');
            
            this.datastatus = true;
            
        },
        
		/**
         * @desc 从后匹配过滤
         * @param {value} 实际值
         * @param {filter} 过滤值
		 * @private
         */  
        _endsWithFilter: function(value, filter) {
            return value.indexOf(filter, value.length - filter.length) !== -1;
        },

		/**
         * @desc 过滤
         * @param {value} 过滤值
		 * @private
         */        
        _filter: function(value) {
//            this.initialHeight = this.initialHeight || this.itemsWrapper.height();   
            var filterValue = this.options.casesensitive ? $.trim(value) : $.trim(value).toLowerCase();
            for(var i = 0; i < this.dataset.length; i++) {
                var option = this.dataset[i],
                itemLabel = this.options.casesensitive ? option[this.options.simpledata.text] : option[this.options.simpledata.text].toLowerCase(),
                item = this.items.eq(i);
                if(this.filterMatcher(itemLabel, filterValue)){
                    item.show();
            	}else{
                	item.hide();
                }
            }
//            var h = this.itemsContainer.height();
//            if(h < this.initialHeight) {
//                this.itemsWrapper.css('height', 'auto');
//                this.panel.height('auto');
//            }else {
//                this.itemsWrapper.height(this.initialHeight);
//            }
        },
        
        /**
         * @desc 是否可以对查询的结果过滤
		 * @private
         */
        _filterable: function(){
            //查询
            if(this.options.filterable) {
            	if(this.filterContainer){
            		this.filterContainer.remove();
            	}
                this.filterContainer = $('<div class="jazz-dropdown-filter"></div>').prependTo(this.panel);
                this.filterInput = $('<input type="text" autocomplete="off" class="jazz-field-comp-input">').appendTo(this.filterContainer);
                this.filterContainer.append('<span class="jazz-dropdown-search"></span>');
            }        	
        },

        /**
         * @desc 获取当前选中的列表项
		 * @private
         */        
        _getActiveItem: function() {
            return this.items.filter('.jazz-state-highlight');
        },
        
        /**
         * @desc 根据传入的值获得结果集中对应的文本内容
         * @param {value} 要查询的值
         * @private
         * @returns String
         */        
        _getDataText: function(value){
        	return this.datakeyvalue[value] || "";
        },
            
        /**
         * @desc 根据当前选中的条目，组织显示字符串
         * @private
         * @returns String
         */
        _getSelectedData: function(){
        	var items = this.itemsContainer.children(".jazz-state-highlight"); 
        	var value = "";
    		$.each(items, function(i, item){
    			var obj = $(item);
    			if(i == 0){
    				value = obj.data("value");
    			}else{
    				value = value + "," + obj.data("value");
    			}
    		});        	
        	
        	return value;
        },

		/**
         * @desc 是否显示空白的数据项
		 * @private
         */
        _isshowblankitem: function(){
        	this.blankitem = [], blanktext = this.options.blanktext;
        	if(this.options.isshowblankitem && !this.options.multiple){
        		var str = '{'+this.options.simpledata.text+': "'+blanktext+'", '+this.options.simpledata.value+': ""}';
        		str = eval('('+str+')');
        		this.blankitem = [str];
        		this.blankitemdom = $('<li data-value="" data-text="' + blanktext + '" class="jazz-dropdown-list-item" ><a href="javascrript:;">' + (blanktext || ' ') + '</a></li>');
        	}
        },
        
        /**
         * @desc 加载数据
		 * @private
         */
        _loaddata: function(){
        	/**
        	 * 针对个别浏览器,包括不限于IE7-
        	 * dataurl数组字符串未转换的情况
        	 */
        	if(typeof(this.options.dataurl) == 'string' && /^\s*[\[|{](.*)[\]|}]\s*$/.test(this.options.dataurl)){
        		//转换成对象
        		this.options.dataurl = jazz.stringToJson(this.options.dataurl);
        	}
        	
            if(jazz.isArray(this.options.dataurl)){          	
            	this.dataset = this.options.dataurl;
            	this._dataItems();
			}else{
				this._ajax(!this.options.cacheflag);
			}
        },
               
		/**
         * @desc 设置过滤的匹配机制
		 * @private
         */        
        _setupFilterMatcher: function() {
            this.filterMatchers = {
                'startsWith': this._startsWithFilter,
                'contains': this._containsFilter,
                'endsWith': this._endsWithFilter,
                'custom': this.options.filterfunction
            };

            this.filterMatcher = this.filterMatchers[this.options.filtermatchmode];
        },

		/**
         * @desc 从前匹配过滤
         * @param {value} 实际值
         * @param {filter} 过滤值 
		 * @private
         */          
        _startsWithFilter: function(value, filter) {
            return value.indexOf(filter) === 0;
        },

        /**
         * @desc 设置组件属性的值
         * @param {key} 对象的属性名称 
         * @param {value} 对象的属性值
		 * @private 
         */
        _setOption: function(key, value){
        	switch(key){
	        	case 'selectedindex':
	        		if(value){
	                    if(value){
	                    	this.options.selectedindex = value;
	                    	var _value = this.valueset[this.options.selectedindex];
	                    	this.setValue(_value);
	                    }
	        		}
	        		break;	 
        	}
        	this._super(key, value);
        },
        
		/**
         * @desc 设置鼠标选中记录时的值
         * @param {value} 选中的值 
		 * @private
         */
        _setSelectedValue: function(value){
        	var text = "", val = (value+"").split(",");
        	for(var i=0, len=val.length; i<len; i++){
        		if(i==0){
        			text = this._getDataText(val[i]);        			
        		}else{
        			text = text + "," + this._getDataText(val[i]);
        		}
        	}
        	this._setTextValue(text, value);
        	
        	this.setCondition();
        },
        
		/**
         * @desc 设置鼠标选中记录时的值
         * @param {text}  文本 
         * @param {value} 值 
		 * @private
         */        
        _setTextValue: function(text, value){
        	this.input.val(value);
        	if(value==="" && this.options.blanktext){
        		text = this.options.blanktext;
        	}
        	this.setText(text);
        },

        /**
         * @desc 更新下拉列表中当前选中的样式
         * @private
         */
        _updateSelectItemStyle: function(){
        	var value = this.getValue();
        	items = this.itemsContainer.children();
    		items.removeClass("jazz-state-highlight");
    		if(this.options.multiple){
        		$.each(items, function(i, item){
        			var obj = $(item);
        			if(obj.data('value') !=='' && (value+"").indexOf(obj.data('value')+"") > -1){
        				obj.addClass("jazz-state-highlight"); 
        			}
        		});
    		}else{
        		$.each(items, function(i, item){
        			var obj = $(item);
        			if(obj.data('value')+"" == value){
        				obj.addClass("jazz-state-highlight"); 
        			}
        		});    			
    		}
        },
                
        /**
         * @desc 动态添加组件下拉框中的内容
         * @param {text} 文本内容
         * @param {value} 文本对应的数值
		 * @example $('div_id').comboxfield('addOption', 'text', 'value');
         */           
        addOption: function(text, value) {
            var item = $('<li data-value="' + value 
            		+ '" data-text="' + text 
            		+ '" class="jazz-dropdown-list-item"><a href="javascript:;">' 
            		+ text + '</a></li>');
            item.appendTo(this.itemsContainer);
            var str = '{"'+this.options.simpledata.text+'": "'+text+'", "'+this.options.simpledata.value+'": "'+value+'"}';
    		str = eval('('+str+')');
            this.dataset.push(str);
            this.datakeyvalue[value] = text;
        },
        
		/**
         * @desc 获取当前选中状态对象的索引
		 * @param {value} 对象值
		 * @return 选中对象的索引
		 * @private 
		 */  
        getDataIndex: function(value){
        	for(var i=0, len=this.dataset.length; i<len; i++){
        		if(this.dataset[i][this.options.simpledata.value] == value){
        			return i;
        		}
        	}
        },        
        
		/**
         * @desc 获取当前选中状态对象的值
		 * @return 所有选中的值
		 * @example $('XXX').comboxfield('getValue');
		 */
        getValue: function() {
        	var value = "";
        	if(this.options.editable == true){
        		var text = this.inputtext.val();
        		if(text != this.options.valuetip && text != this.options.blanktext){
	                for(var i = 0; i < this.dataset.length; i++) {
	                    var option = this.dataset[i], label = option[this.options.simpledata.text];
	                    text = $.trim(text);
	                    if(label===text){
	                    	text = option[this.options.simpledata.value];
	                    	break;
	                    }
	                }
	                value = text;
        		}else{
        			value = "";
        		}
        	}else{
        		value = this._super();
        	}
        	return value;
        },
        
        /**
         * @desc 动态隐藏组件下拉框中的内容
         * @param {value} 文本对应的数值
		 * @example $('XXX').comboxfield('hideOption','value');
         */           
        hideOption: function(value) {
        	this.itemsContainer.children("[data-value='"+value+"']").hide();
        },
     
        /**
         * @desc 动态添加组件下拉框中的内容
         * @param {data} 静态数据
         * @param {callbackfunction} 回调函数
		 * @example $('XXX').comboxfield('reload', data, function(){ });
         */           
        reload: function(data, callbackfunction) {
        	this.reset();
        	if(data && jazz.isArray(data)){
        		this._callback(data, callbackfunction);  		
        	}else{
        		var dataurl = this.options.dataurl;
				if(dataurl) {
					if(jazz.isArray(dataurl)) {
						this._callback(dataurl, callbackfunction);
					}else {
//						var $this = this;
						this._ajax(!this.options.cacheflag, callbackfunction); 
//							function(data){
//							$this._callback(data, callbackfunction);                    	
//						});
					}
				}        		
        	}
        },

        /**
         * @desc 动态移除组件下拉框中的内容
         * @param {value} 文本对应的数值
         */
        removeOption: function(value) {
        	for(var i=0,len=this.dataset.length; i<len; i++){
        		if(this.dataset[i][this.options.simpledata.value] == value){
        			this.dataset.splice(i, 1);
        			break;
        		}
        	}
        	this.itemsContainer.children("[data-value='"+value+"']").remove();
        },

        /**
         * @desc 动态显示组件下拉框中的内容
         * @param {value} 文本对应的数值
		 * @example $('XXX').comboxfield('showOption','value');
         */           
        showOption: function(value) {
        	this.itemsContainer.children("[data-value='"+value+"']").show();
        },

		/**
         * @desc 设置当前状态对象选中
		 * @param {value} 选中对象的值
		 * @param {callback_function} 设置值后的回调函数
		 * @example $('XXX').comboxfield('setValue', '2', callback_function);
		 */
		setValue: function(value, callback_function) {
			if(value || value===0){
				if(typeof(value) == "object" && jazz.isArray(value)){
					this.dataset = value;
					//是存在空白项
					this._isshowblankitem();
					//数据项
					this._dataItems();
					this.reset();
					this._setValueCallback(callback_function);
				}else{
					value = value+"";
					//判断结果集是否存在
					if(this.dataset.length > 0){
						var text = "";
						if(this.options.multiple){
							var arr = value.split(",");
							for(var i=0, len=arr.length; i<len; i++){
								if(i==0){
									text = this._getDataText(arr[i]);
								}else{
									text = text + "," + this._getDataText(arr[i]);
								}
							}
						}else{
							text = this._getDataText(value);
						}
						
						if(text){
							this._setTextValue(text, value);
						}				
						this._setValueCallback(callback_function);
						
					//结果集不存在，查询结果后在设置值
					}else{
						if(this.options.islazydata || this.options.vtype == "autocompletecomboxfield"){					
							if(this.options.dataurl) {
								if(jazz.isArray(this.options.dataurl)) {
									this._setValue(this.options.dataurl, value, callback_function);
								}else {
									var $this = this;
									this._ajax(!this.options.cacheflag, function(data){
										$this._setValue(data, value, callback_function);	                    	
									});
								}
							}													
						}else{
							this._setValueData(value, callback_function);
						}
					}
				}
			}else{
				this.reset();
			}
		}	

    });
    
});(function( $, factory ){

	if ( jazz.config.isUseRequireJS === true ) {
		define( ['jquery', 
				 'form/jazz.form.DropdownField', 
				 'jazz.Date'], factory );
	} else {
		factory($);
	}	 
})(jQuery, function($){
/** 
 * @version 0.5
 * @name jazz.datefield
 * @description 时间类。
 * @constructor
 * @extends jazz.field
 * @requires
 * @example $('#input_id').datefield();
 */
	$.widget('jazz.datefield', $.jazz.dropdownfield, {
	    options: /** @lends jazz.datefield# */ {
			
			/**
			 *@type String
			 *@desc 组件的效验类型
			 *@default ''
			 */
			vtype: 'datefield',		
	        
            /**
	         *@type  boolean
	         *@desc  是否显示年份月份下拉框
	         *@default  true
	         */
	        isshowdatelist: true,		
	        
	        //event
            /**
             *@desc 鼠标焦点离开输入框时触发
             *@param {event} 事件
             *@param {ui.newValue} 新修改的值 
             *@param {ui.oldValue} 旧值
             *@event
             *@example
             *<br/>$("XXX").datefield("option", "change", function(event, ui){  <br/>} <br/>});
             *或:
             *<br/>$("XXX").on("datefieldchange",function(event, ui){  <br/>} <br/>});
             *或：
             *function XXX(){……}
             *<div…… change="XXX()"></div> 或 <div…… change="XXX"></div>
             */
            change: null,

            /**
			 *@desc 鼠标焦点进入输入框时触发
			 *@param {event} 事件
			 *@event
			 *@example
			 *<br/>$("XXX").datefield("option", "enter", function(event){  <br/>} <br/>});
			 *或:
			 *<br/>$("XXX").on("datefieldenter",function(event){  <br/>} <br/>});
			 *或：
			 *function XXX(){……}
			 *<div…… enter="XXX()"></div> 或 <div…… enter="XXX"></div>
			 */			
			enter: null,
    		
    		/**
			 *@desc 当选择了某项时，触发itemselect事件  
			 *@param {event} 事件
			 *@param {value} 选中项的值 
			 *@event
			 *@example
			 *<br/>$("XXX").datefield("option", "itemselect", function(event, value){  <br/>} <br/>});
			 *或:
			 *<br/>$("XXX").on("datefielditemselect",function(event, value){  <br/>} <br/>});
			 *或：
			 *function XXX(){……}
			 *<div…… itemselect="XXX()"></div> 或 <div…… itemselect="XXX"></div>
			 */
			itemselect: null

		},
		
		/** @lends jazz.datefield*/
		
        /**
         * @desc 创建组件
         * @private
         */  
		_create: function(){
			//创建组件
        	this._super();
        	this.trigger.removeClass("jazz-field-comp-ar").addClass("jazz-field-comp-date");
        	//this._createDownpanel();
        	
        	this.input = this.inputtext;
		},
		
        /**
         * @desc 初始化组件
         * @private
         */
        _init: function() {
        	this._super();
        	
        	this._dropdate();
        	
        	var $this = this;
        	this.inputtext.off("focus.datefield blur.datefield").on("focus.datefield", function(){
        		if($(this).val() == $this.options.valuetip){
					$(this).val("");
					$(this).removeClass('jazz-field-comp-input-tip');
				}
        	}).on("blur.datefield", function(){
        		if($(this).val()=="" && $this.options.valuetip){
					$(this).val($this.options.valuetip);
					$(this).removeClass('jazz-field-comp-input-tip').addClass('jazz-field-comp-input-tip');
				}
        	});
        	
			//验证
			this._validator();         	
        },
 
        /**
         * @desc 下拉树
         * @private 
         */        
        _dropdate: function(){
        	var dropdatej = this.itemsContainer.date({
        		isshowdatelist: this.options.isshowdatelist
        	});
        	var $this = this;
        	dropdatej.off("dateselect.datefield").on("dateselect.datefield",function(event, ui){
        		$this._oldValue = $this._oldText = $this.getValue();
        		$this.setValue(ui.date);
                $this._event("itemselect", event ,{"value": ui.date});
                $this.panel.hide();
                $this._newValue = $this._newText = ui.date;
            	$this._event("change", event, $this._changeData());
        	});        	
        },

		/**
         * @desc 列表框是否显示滚动条
		 * @private
         */        
        _itemScroll: function(){},        
        
        /**
         * @desc 设置组件属性的值
         * @param {key} 对象的属性名称 
         * @param {value} 对象的属性值
		 * @private 
         */
        _setOption: function(key, value){
        	switch(key){
	        	case 'isshowdatelist':
	        		this.options.isshowdatelist = value;
	        		this.itemsContainer.date("option", "isshowdatelist", value);
	        		break;
        	}
        	this._super(key, value);
        }
		
	});

});(function( $, factory ){

	if ( jazz.config.isUseRequireJS === true ) {
		define( ['jquery',
		         'jazz.Tree', 
		         'form/jazz.form.DropdownField'], factory );
	} else {
		factory($);
	}	 
})(jQuery, function($){
	
	/**
	 * @version 0.5
	 * @name jazz.comboxtreefield
	 * @description 表单元素的选择填报类。
	 * @constructor
	 * @extends jazz.dropdownfield
	 * @requires
	 * @example
	 */	

    $.widget("jazz.comboxtreefield", $.jazz.dropdownfield, {
       
        options: /** @lends jazz.comboxtreefield# */ {
			
       		/**
			 *@type String
			 *@desc 组件类型
			 *@default comboxtreefield
			 */
			vtype: 'comboxtreefield',

			/**
			 *@type Object
			 *@desc zTree的setting对象
			 *@default null
			 */ 
            setting: {
			    data: {
					key: {
						children: "children",
						name: "text",
						title: "",
						url: "url"
					},			    	
					simpleData: {
						enable: true,
						idKey: "id",
						pIdKey: "pId",
						rootPId: 0
					}
				},
				async: {
					enable: true,
					contentType: "application/x-www-form-urlencoded; charset=utf-8",
					dataType:"json"
					//autoParam:["id","level"]
				},							
				check: {
					enable: true,
					radioType: 'all'
				},
				view: {
					dblClickExpand: true
				},							
				callback: {
					
				}
            },
            
            /**
			 *@type String
			 *@desc 默认选中节点显示的字段属性
			 *@default 'name'
			 */            
            //showlabel: "name",
            
			/**
			 *@type Number
			 *@desc 滚动条显示高度
			 *@default 200
			 */         
            downheight: 200,  
            
        	/**
        	 *@type Boolean
        	 *@desc 是否可编辑 true可编辑 false不可编辑 
        	 *@default true
        	 */
        	editable: false, 
        	
        	/**
        	 *@type Boolean
        	 *@desc 是否显示选择框 true显示 false不显示 
        	 *@default true
        	 */
        	checkenable : true,
            
			/**
			 *@type Boolean
			 *@desc 是否只选叶子节点 true 选叶子节点，false  选父子节点
			 *@default 'true'
			 */            
            isleaf: false,
            
			/**
			 *@type Boolean
			 *@desc 是否显示操作按钮 true 显示操作按钮，false 不显示操作按钮
			 *@default 'true'
			 */            
            iscontrol: false,
            
			/**
			 *@type Boolean
			 *@desc 是否多选 true是复选框，false是单选框
			 *@default 'true'
			 */            
            multiple: false,          
			
            // callbacks
			
    		/**
			 *@desc 鼠标焦点进入输入框时触发
			 *@param {event} 事件
			 *@event
			 *@example
			 *<br/>$("XXX").comboxtreefield("option", "enter", function(event, ui){  <br/>} <br/>});
			 *或:
			 *<br/>$("XXX").on("comboxtreefieldenter",function(event, ui){  <br/>} <br/>});
			 */			
			enter: null,
    		
    		/**
			 *@desc 鼠标焦点离开输入框时触发
			 *@param {event} 事件
			 *@param {ui.newValue} 新修改的值 
			 *@param {ui.oldValue} 旧值
			 *@event
			 *@example
			 *<br/>$("XXX").comboxtreefield("option", "leave", function(event, ui){  <br/>} <br/>});
			 *或:
			 *<br/>$("XXX").on("comboxtreefieldleave",function(event, ui){  <br/>} <br/>});
			 */
    		leave: null,
    		
    		/**
			 *@desc 当选择了某项时，触发itemselect事件  配合dataurl属性使用
			 *@param {event} 事件
			 *@param {value} 选中项的值 
			 *@event
			 *@example
			 *<br/>$("XXX").comboxtreefield("option", "itemselect", function(event, value){  <br/>} <br/>});
			 *或:
			 *<br/>$("XXX").on("comboxtreefielditemselect",function(event, value){  <br/>} <br/>});
			 */
			itemselect: null
        },

        /** @lends jazz.comboxtreefield */

        /**
         * @desc 创建组件 
         * @private
         */  
        _create: function() {
        	//创建组件
        	this._super();
        	//this._createDownpanel();       	
        },
        
        /**
         * @desc 初始化组件
         * @private
         */
        _init: function() {
        	this.dataset = [];
        	
        	if(this.options.iscontrol){
        		this.panel.addClass("jazz-dropdown-panel2");
        		this.panel.append('<div class="jazz-dropdown-btn"><div class="jazz-dropdown-btn2"><div class="jazz-dropdown-btn-b jazz-dropdown-btn-qd">确定</div><div class="jazz-dropdown-btn-b jazz-dropdown-btn-qx">取消</div></div></div>');
        		var $this = this;
        		this.panel.find(".jazz-dropdown-btn-qd").on("click", function(){
					$this.setText($this.node_label || "");
					$this.input.val($this._newValue || "");
					
					$this.setCondition();
					$this.panel.hide();
        		});
        		
        		this.panel.find(".jazz-dropdown-btn-qx").on("click", function(){
        			$this.reset();
        			$this.node_label = $this._newText = "", $this._newValue = "";
        		});
        	}
        	
        	this._treeSetting();
        	
        	this._loadtree();    

        	this._super();

        	this._bindEventInputtext();
        	
        	this._validator();
        },
        
        /**
         * @desc 绑定输入框事件
		 * @private
		 */
        _bindEventInputtext: function(){
        	var $this = this;
        	this.inputtext.off("focus.comboxfield blur.comboxfield").on("focus.comboxfield", function(){
        		if($(this).val()==$this.options.valuetip){
					$(this).val("");
					$(this).removeClass('jazz-field-comp-input-tip');
				}
        	}).on("blur.comboxfield", function(){
        		if($(this).val()=="" && !!$this.options.valuetip){
					$(this).val($this.options.valuetip);
					$(this).addClass('jazz-field-comp-input-tip');
				}
        	});
        },        
        
        /**
         * @desc 生成数据项
		 * @private
         */
        _callback: function(data) {
        	if(!!data){
        		if(jazz.isIE(7) || jazz.isIE(6)){
        	    	if(typeof(this.options.setting.async.autoParam) != 'object'){
        	    		this.options.setting.async.autoParam = jazz.stringToJson(this.options.setting.async.autoParam);
        	    	}
        	    }  
    			this._initTreeEvent();

//    			for(var i = 0, len = data.length; i < len; i++){
//    				var d = data[i];
//    				if(d["id"]){
//    					d["value"] = d["id"];
//    				}
//    				if(d["name"]){
//    					d["text"] = d["name"];
//    				}
//    			}
    			this.dataset = data;
    			this.zTreeObj = $.fn.zTree.init(this.itemsContainer, this.options.setting, data);
    			
    			this.datastatus = true;
    		}
        	
//        	if(!this.options.disabled){
//        		this._binddropdown(this.options.vtype);
//    		}
    		
    		this._validator();
    		
//    		if(this.options.defaultvalue){
//    			this.setValue(this.options.defaultvalue);
//    		}else{
//    			this.setText(this.options.blanktext);
//          }
        },
        
		/**
         * @desc 列表框是否显示滚动条
		 * @private
		 * @example this._itemScroll();
         */        
        _itemScroll: function(){
        	this.panel.outerHeight(this.options.downheight);  
        	this.itemsWrapper.addClass("jazz-dropdown-wrapper2");
        },        

        /**
         * @desc 初始化树组件事件
         * @private
         */
        _initTreeEvent: function(){
        	var $this = this;
        	if(!!this.options.setting.check){
        		
        		this.options.setting.callback.onClick = function(event, treeId, treeNode) {
    				//var z_tree_init_001 = $.fn.zTree.getZTreeObj(treeId);
        			var z_tree_init_001 = $this.zTreeObj;
					var _b = false;
					if(!treeNode.checked){
						_b = true;
					}
    				z_tree_init_001.checkNode(treeNode,_b,true,true);
    				if(!!$this.options.onclick){
    					eval($this.options.onclick).call(this, event, treeId, treeNode);
    				}
    		    };
        		
        		var tempClick = {click: null};
        		if(!!this.funOnClick){
        			$.extend(true, tempClick, {click: this.funOnClick});
        		}
 
        		
        		this.options.setting.callback.onCheck = function(e, treeId, treeNode){
        			$this._oldText = $this.getText(); $this._oldValue = $this.getValue();
        			
        			//var z_tree_init_001 = $.fn.zTree.getZTreeObj(treeId),
        			var z_tree_init_001 = $this.zTreeObj,
    				z_tree_init_nodes = z_tree_init_001.getCheckedNodes(true),
    				node_label = "",  node_code = '';

        			if(!$this.options.multiple){
        				z_tree_init_001.selectNode(treeNode);
            			if(!treeNode.checked){
        					z_tree_init_001.cancelSelectedNode();
            			}
        			}else{
        				if(!treeNode.checked){
        					z_tree_init_001.cancelSelectedNode();
            			}else{
            				z_tree_init_001.selectNode(treeNode);
            			}
        			}

    				//z_tree_init_nodes.sort(function compare(a,b){return a.id-b.id;});
        			
        			var jj=0;
    				for (var i=0, l=z_tree_init_nodes.length; i<l; i++) {
    					//不选父节点
    					if(z_tree_init_nodes[i].isparent && $this.options.isleaf){
    					}else{
    						if(jj==0){
        						node_label = z_tree_init_nodes[i][$this.options.setting.data.key.name];
        						node_code = z_tree_init_nodes[i][$this.options.setting.data.simpleData.idKey];    						
        					}else{
    							node_label = node_label + "," + z_tree_init_nodes[i][$this.options.setting.data.key.name];
        						node_code = node_code + "," + z_tree_init_nodes[i][$this.options.setting.data.simpleData.idKey]; 
        					}
    						jj++;
    					}
    				}

    				$this.node_label = $this._newText = node_label, $this._newValue = node_code;
    				if(!$this.options.iscontrol){
    					$this.setText(node_label);
    					$this.input.val(node_code);
    					
    					$this.setCondition();   					
    				}
    				
    				$this._event("itemselect", e, {"{text": node_label, "value":node_code});
    				
    				if(tempClick.click != null && $this.options.tempState!=0){
        				var func = eval(tempClick.click);
        				func(e, treeId, treeNode);
        			}
    				
    				$this.inputtext.focus();
    				if(!!$this.options.oncheck){
    					eval($this.options.oncheck).call(this, e, treeId, treeNode);
    	        	}
        		};
        	} else {
        		var tempClick = {click: null};
        		if(!!this.funOnClick){
        			$.extend(true, tempClick, {click: this.funOnClick});
        		}
        		
        		this.options.setting.callback.onClick = function(e, treeId, treeNode){

        			$this._oldText = $this.getText(); $this._oldValue = $this.getValue();
    				//var z_tree_init_001 = $.fn.zTree.getZTreeObj(treeId),
        			var z_tree_init_001 = $this.zTreeObj,
        			z_tree_init_nodes = z_tree_init_001.getSelectedNodes(),
    				node_label = "",  node_code = '';
    				
    				//z_tree_init_nodes.sort(function compare(a,b){return a.id-b.id;});
    				for (var i=0, l=z_tree_init_nodes.length; i<l; i++) {
    					if(i==0){
    						node_label = z_tree_init_nodes[i][$this.options.setting.data.key.name];
    						node_code = z_tree_init_nodes[i][$this.options.setting.data.simpleData.idKey];      						
    					}else{
    						node_label = node_label + "," + z_tree_init_nodes[i][$this.options.setting.data.key.name];
    						node_code = node_code + "," + z_tree_init_nodes[i][$this.options.setting.data.simpleData.idKey];    						
    					}
    				}
    				
    				$this.node_label = $this._newText = node_label, $this._newValue = node_code;
    				
    				if(!$this.options.iscontrol){
    					$this.setText(node_label);
    					$this.input.val(node_code);
    				
    					$this.setCondition();
    				}
        			if(tempClick.click != null){
        				var func = eval(tempClick.click);
        				func(e, treeId, treeNode);
        			}
        			
        			$this.inputtext.focus();
        		};       		
        	}
			 
			/*if(!!this.options.onasyncsuccess){
        		this.options.setting.callback.onAsyncSuccess = function(e, treeId, treeNode){
					eval($this.options.onasyncsuccess).call(this, e, treeId, treeNode);
			    };
        	}*/
        	
        	this.options.setting.callback.onAsyncSuccess = function(e, treeId, treeNode){
        		$this.datastatus = true;
        		if(!!$this.options.onasyncsuccess){
        			eval($this.options.onasyncsuccess).call(this, e, treeId, treeNode);
        		}
		    };
			if(!!this.options.onnodecreated){
				this.options.setting.callback.onNodeCreated = function(e, treeId, treeNode){
					eval($this.options.onnodecreated).call(this, e, treeId, treeNode);
			    };
        	}

			this.resetcomboxtree.off("click.comboxtreefield").on("click.comboxtreefield", function(){
				$this.reset();
				//$this.setText($this.options.blanktext);
         		//var treeObj = $.fn.zTree.getZTreeObj($this.ulId);
         		var treeObj = $this.zTreeObj;
         		if(!!treeObj){
         			var nodes = treeObj.getCheckedNodes(true);
             		for (var i=0, l=nodes.length; i < l; i++) {
             			treeObj.checkNode(nodes[i], false, true);
             		}
         		}
			});
        },
        
		/**
         * @desc 重新加载数据
         * 		 注： 在数据初始化时也调用了这个方法 jazz.SwordAdapter.js
         *       obj.find('select').comboxtreefield('loadData',);  目的是为了加载SwordPageData数据
		 * @param {data} 静态数据
		 * @private
		 * @example this._loadData(data);
         */
        _loadData: function(data, func){
			this.itemsContainer.children().remove();
    		this._loadtree(data, func);
        },              
        
        /**
         * @desc 实例化树，调取zTree
         * @param {data} 静态数据
         * @private
         */
        _loadtree: function(data, func){
        	if(data && jazz.isArray(data)){ //通过reload方法刷新静态数据时
        		this._callback(data);
        	}else if(!!this.options.dataurl){
				if(!!this.options.asyncurl){
					this.options.setting.async.url = this.options.asyncurl; 
				}else{
					this.options.setting.async.url = this.options.dataurl; 
				}
				if(typeof(this.options.dataurl) == 'object' && jazz.isArray(this.options.dataurl)){
					this._callback(this.options.dataurl);
				}else{
                    //true  去缓存数据
                    //func  回掉函数
					this._ajax(true, func);
				}
			}
        },        
		       
		/**
         * @desc 回显选中的数据
         * @param {codes} 节点集合
         * @param {aTree} 当前树对象
         * @param {callback_function} 回调函数
         */        
         _setNodeData: function(codes, aTree, callback_function){
			var $this = this, m = 1, delay = 100, delaycount = this.options.delaycount ,label = "",code = "";
         	if(codes || codes===0){
         		var codeArray = (codes+"").split(',') ;
         		var codetimeout = new Object();
         		for(var i=0; i<codeArray.length; i++){
         			code = $.trim(codeArray[i]);
         			var node = null;
         			if(!!code){
         				codetimeout["code_"+code] = setInterval(function(x){
         					return function(){
             					node = aTree.getNodeByParam($this.options.setting.data.simpleData.idKey, x, null);
             					m++;
             					if(!!node || delay*m > delaycount){
             						clearInterval(codetimeout["code_"+x]);
             						aTree.checkNode(node, false, true);
             						aTree.checkNode(node, true, true);
             						label = label + "," + node[$this.options.setting.data.key.name];
             	 	    			code = node[$this.options.setting.data.simpleData.idKey] + ",";
                 					$this.setText(label.substring(1));
                 					$this.input.val(codes);
                 					$this._setValueCallback(callback_function);
             					}
         					}
         				}(code), delay);
         			}
         		}
 	    		this._oldText = this.getText(); this._oldValue = this.getValue();
 	    		setTimeout(function(){
 	    			$this.node_label = $this._newText = label, $this._newValue = codes;
 	    		},delaycount/2);
         	}
        },  
		
//        /**
//         * @desc 设置组件属性的值
//         * @param {key} 对象的属性名称 
//         * @param {value} 对象的属性值
//		 * @private
//         */
//        _setOption: function(key, value){
//        	switch(key){
//	        	case 'disabled':
//	        		if(value){
//	        			this.parent.off('click');
//	        		}else{
//						this._binddropdown(this.options.vtype);
//	        		}
//	        		break;	 
//        	}
//        	this._super(key, value);
//        },	
        
        /**
         * @desc 处理设置值的回调函数
         * @param {value} 值
         * @param {callback_function} 回调函数
		 * @private
         */ 
        _setData: function(value, callback_function){
			//var aTree = $.fn.zTree.getZTreeObj(this.ulId);
			var aTree = this.zTreeObj;
     		if(aTree){
     			this._setNodeData(value, aTree, callback_function);
     		}            
        },
		
        /**
         * @desc 初始化ztree的settting配置
         * @private
         */
        _treeSetting: function(){
        	
        	if(this.options.checkenable){
				this.options.setting.check.chkStyle = "checkbox";

	    		if(!this.options.multiple){
	    			this.options.setting.check.chkStyle = "radio";		
	    		}else{
	    			this.resetcomboxtree.remove();
	    		}
			}else{
				this.options.setting.check.enable = false;
			}
    		
    		if(!!this.options.asyncenable){
				this.options.setting.async.enable = this.options.asyncenable; 
			}
    		
			if(!!this.options.autoparam){
				this.options.setting.async.autoParam = this.options.autoparam; 
			}
    		
			if(!!this.options.autochecktrigger){
				this.options.setting.check.autoCheckTrigger = this.options.autochecktrigger; 
			}
			if(!!this.options.radiotype){
				this.options.setting.check.radioType = this.options.radiotype; 
			}
			if(!!this.options.chkboxtype){
				this.options.setting.check.chkboxType = this.options.chkboxtype; 
			}
			
            if(!!this.options.setting.check){
            	this.funOnClick = this.options.setting.callback.onCheck;
			}else{
				this.funOnClick = this.options.setting.callback.onClick;
			}
        },        

        /**
         * @desc 获取值
		 * @return String
         */        
        getValue: function(){
        	var value = "";
        	if(this.options.editable == true){
        		var text = this.inputtext.val();
        		if(text != this.options.valuetip){
                    label = $.trim(this.node_label);
                    if(label===text){
                    	text = this._super();
                    }
	                value = text;
        		}else{
        			value = "";
        		}
        	}else{
        		value = this._super();
        	}
        	return value;       	
        },
        
        /**
         * @desc 初始化表单数据，依据dataurl
         * @param {data} 静态数据
         * @param {function} 回调函数
		 * @example $('XXX').comboxfield('reload', data, function(){ });
         */
        reload: function(data, func) {
        	this._loadData(data, func);
        },
        
		/**
         * @desc 重置
		 * @example $('XXX').comboxtreefield('reset');
		 */
        reset: function() {
        	this._super();
     		//var aTree = $.fn.zTree.getZTreeObj(this.ulId);
     		var aTree = this.zTreeObj;
     		if(aTree){
     			aTree.cancelSelectedNode();
     			aTree.checkAllNodes(false);
     			var nodes = aTree.getCheckedNodes(true);
     			$.each(nodes,function(i,node){
     				aTree.checkNode(node, false);
     			});
     		}
        },

		/**
         * @desc 设置当前状态对象选中
		 * @param {value} 选中对象的值
		 * @param {callback_function} 回调函数
		 * @example $('XXX').comboxtreefield('setValue', '2');
		 */
		setValue: function(value, callback_function) {
			if(value || value===0){
				if(typeof(value) == 'object' && jazz.isArray(value)){
					this._initTreeEvent();
					this.zTreeObj = $.fn.zTree.init($this.itemsContainer, this.options.setting, value);
		        	this._setValueCallback(callback_function);
				}else{
					this.reset();
					if(this.dataset.length > 0){
						this._setData(value, callback_function);
					}else{
						//非初始化时，加载数据
						if(this.options.islazydata){
							var $this = this;
							this._ajax(false, function(data){
								//2016-05-05发现重复调用了一次_callback(data)函数，在this._ajax()中已经调用了一次
								//$this._callback(data);
								$this._setValueData(value, callback_function);							
							});
						}else{
							this._setValueData(value, callback_function);
						}
			     	}	
				}
			}else{
				this.reset();
			}
		}
    });

});(function( $, factory ){

	if ( jazz.config.isUseRequireJS === true ) {
		define( ['jquery',
		         'form/jazz.form.ComboxField'], factory );
	} else {
		factory($);
	}	 
})(jQuery, function($){
	/**
	 * @version 1.0
	 * @name jazz.autocompletecomboxfield
	 * @description 表单元素的选择填报类。
	 * @constructor
	 * @extends jazz.comboxfield
	 * @example $('XXX').autocompletecomboxfield();
	 */

    $.widget("jazz.autocompletecomboxfield", $.jazz.comboxfield, {
       
        options: /** @lends jazz.autocompletecomboxfield# */ {
			
        	/**
			 *@type String
			 *@desc 组件类型
			 *@default 'autocompletecomboxfield'
			 */        	        	
        	vtype: 'autocompletecomboxfield',
        	
        	/**
			 *@type String
			 *@desc 保存数据类型 'text or 'value'
			 *@default 'text'
			 */            
            datatype: 'text',
        	
    		/**
			 *@type Number
			 *@desc 最小查询的长度 
			 *@default 1
			 */            
            minquerylength: 1
            
        },

		/** @lends jazz.autocompletecomboxfield */

        /**
         * @desc 创建组件
         * @private
         */
        _create: function() { 
        	this.options.editable = true;   //auto可编辑
        	this.options.multiple = false;  //auto不能为多选
        	this.options.isshowblankitem = false;  //autocomplete不支持空白项, 所以将该属性设置成false
        	
        	//创建组件
        	this._super();
        	
        	this.trigger.removeClass("jazz-field-comp-ar");
        },
        
        //重写父类的方法
        //是否对列表过滤，只适用于comboxfield
        _filterable: function(){},
        //加载数据项
        _loaddata: function(){},       
        
        /**
         * @desc 初始化组件
         * @private
         */ 
        _init: function() {
        	this.query = "";

        	this._super();
        },
        
        //覆盖父类方法
        _binddropdown: function(){},
        
		/**
         * @desc 绑定事件
		 * @private
         */         
        _bindEvent: function() {
            this._bindKeyEvents();
            
            var $this = this;
            this.itemsContainer.off("mousedown.comboxfield").on("mousedown.comboxfield", function(e){
            	var t = $(e.target);
            	if(t.is(".jazz-dropdown-list-item a") || t.is(".jazz-dropdown-list-item span")){

            		$this._selectedItem(e, t);
    				
    				e.stopPropagation();
                 }
            });            
            
            this._bindEventInputtext();
        },        

        /**
         * @desc 绑定的键盘事件
         * @private
         */
        _bindKeyEvents: function() {
            var $this = this;
            var dataurl = $this.options.dataurl;
            this.flag = true;
            this.inputtext.off('keyup.autocomplete, mousedown.autocomplete').on('keyup.autocomplete, mousedown.autocomplete',function(e) {
            	var keyCode = $.ui.keyCode, key = e.which, shouldSearch = true;
                if(key == keyCode.UP || key == keyCode.LEFT || key == keyCode.DOWN || key == keyCode.RIGHT || key == keyCode.TAB || key == keyCode.SHIFT ||
                   key == keyCode.ENTER || key == keyCode.NUMPAD_ENTER) {
                       shouldSearch = false;
                }
                
                if(shouldSearch) {
                	if(!!$this.timeout) {
                        window.clearTimeout($this.timeout);
                    }
    				$this.timeout = window.setTimeout(function() {
    					var value = $this.getValue();
    					var text = $this.getText();
    					if(dataurl && !$.isArray(dataurl)){
    						if($this.flag){
	    						if(dataurl.indexOf("?") != -1){
	    							dataurl += "&text={text}";
	        					}else{
	        						dataurl += "?text={text}";
	        					}
	    						$this.flag = false;
    						}
    						var url = encodeURI(dataurl.replace('{text}', text));
    						
    						if(!$this.options.cacheflag){
    							url += ("&tty=" + Math.random());
    						}
    						$this.options.dataurl = url;
    					}

    					if($this.options.dataurlparams){
    						$this.options.dataurlparams["text"] = text;
    						$this.options.dataurlparams["value"] = value;			
    					}
			
    					if($this.options.minquerylength == 0){
    						$this.datasearchflag = true;
    						$this._search(text);
    					}else if(text){
    						$this.datasearchflag = true;
    						$this._search(text);
    					}
    					
    				}, $this.options.delay);
                }
            });
        },
        
		/**
         * @desc 生成数据项
		 * @private
         */
        _dataItems: function(f){
	         var data = [], emptyQuery = ($.trim(this.query) === '');
	         if(f){
	            for(var i = 0 ; i < this.dataset.length; i++) {
	    			var option = this.dataset[i], optionLabel = option[this.options.simpledata.text]+"";
	                if(!this.options.casesensitive) {
	                    itemLabel = optionLabel.toLowerCase();
	                }
	                if(emptyQuery && this.options.minquerylength == 0){
						data.push(option);
					}else{
						if((this.filterMatcher(itemLabel, $.trim(this.query))) ){  //&& (this.query.length >= this.options.minquerylength)) {
							data.push(option);
						}
					}
	            }
	    		
	        	this.dataset = data;
        	}
       	
        	this._super();

        	if(f){
        		this._hideDropdown();
        		var len = data.length; 
        		if(len > 0){
        			var $this = this;
        			$.each(this.items, function(i, item){
        				var obj = $(item);
        				if($this.query){
        					var _a_obj = obj.children("a");
        					var text = _a_obj.html(), re = new RegExp(jazz.escapeRegExp($this.query || ""), 'gi'),
        					highlighedText = text.replace(re, '<span class="jazz-textfield-query">$&</span>');
        					_a_obj.html(highlighedText);
        				}
        			});
        			
        			if(this.datasearchflag && !this.panel.is(":visible") && this.datastatus){
    	        		this._showDropdown(len);
    	        		this.datasearchflag = false;
    	        	}        			
        		}
	        	
        	}
        },
        
		//覆盖field中的_editable方法， color组件不可编辑
		_editable: function(){
			this.options.editable = true;
			this._super();
		},        
        
        /**
         * @desc 查询
         * @param {text} 输入的查询条件
         * @private
         */
        _search: function(text) {
        	this.query = this.options.casesensitive ? text : text.toLowerCase();
            if(this.options.dataurl) {
            	if($.isArray(this.options.dataurl)) {
            		this.dataset = this.options.dataurl;
                	this._dataItems(true);
                }else {
                	//ajax接收的参数定义是是否请求新数据
                    this._ajax(!this.options.cacheflag);
                }
            }
        },		
  
		/**
         * @desc 获取输入框的值
         * @return String
		 * @example $('XXX').autocompletecomboxfield('getValue');
         */				
		getValue: function(){
			var value = "";
			if(this.options.datatype == this.options.simpledata.text){
				value = this.getText();
			}else{
				var supervalue = this._super();
				if(supervalue || supervalue===0){
					value = supervalue;
				}
			}
			return value;
		},
        
		/**
         * @desc 设置元素值 
         * @param {value} 设置的值
         * @param {callback_function} 设置值后的回调函数
		 * @example $('XXX').autocompletecomboxfield('setValue', value);
         */
		setValue: function(value, callback_function) {
			if(this.options.datatype == this.options.simpledata.text){
				this.setText(value);
				this._setValueCallback(callback_function);
			}else{
				this._super(value, callback_function);
			}
		}        
    });
});
(function( $, factory ){

	if ( jazz.config.isUseRequireJS === true ) {
		define( ['jquery',
		         'form/jazz.form.DropdownField'], factory );
	} else {
		factory($);
	}	 
})(jQuery, function($){
	
    var _idx=0, isIE=!$.support.cssFloat, _ie=isIE?'-ie':'',
	//isMoz=isIE?false:/mozilla/.test(navigator.userAgent.toLowerCase()) && !/webkit/.test(navigator.userAgent.toLowerCase()),
	baseThemeColors=['ffffff','000000','eeece1','1f497d','4f81bd','c0504d','9bbb59','8064a2','4bacc6','f79646'],
	subThemeColors=['f2f2f2','7f7f7f','ddd9c3','c6d9f0','dbe5f1','f2dcdb','ebf1dd','e5e0ec','dbeef3','fdeada',
		'd8d8d8','595959','c4bd97','8db3e2','b8cce4','e5b9b7','d7e3bc','ccc1d9','b7dde8','fbd5b5',
		'bfbfbf','3f3f3f','938953','548dd4','95b3d7','d99694','c3d69b','b2a2c7','92cddc','fac08f',
		'a5a5a5','262626','494429','17365d','366092','953734','76923c','5f497a','31859b','e36c09',
		'7f7f7f','0c0c0c','1d1b10','0f243e','244061','632423','4f6128','3f3151','205867','974806'],
	standardColors=['c00000','ff0000','ffc000','ffff00','92d050','00b050','00b0f0','0070c0','002060','7030a0'],
//	moreColors=[
//    		['003366','336699','3366cc','003399','000099','0000cc','000066'],
//    		['006666','006699','0099cc','0066cc','0033cc','0000ff','3333ff','333399'],
//    		['669999','009999','33cccc','00ccff','0099ff','0066ff','3366ff','3333cc','666699'],
//    		['339966','00cc99','00ffcc','00ffff','33ccff','3399ff','6699ff','6666ff','6600ff','6600cc'],
//    		['339933','00cc66','00ff99','66ffcc','66ffff','66ccff','99ccff','9999ff','9966ff','9933ff','9900ff'],
//    		['006600','00cc00','00ff00','66ff99','99ffcc','ccffff','ccccff','cc99ff','cc66ff','cc33ff','cc00ff','9900cc'],
//    		['003300','009933','33cc33','66ff66','99ff99','ccffcc','ffffff','ffccff','ff99ff','ff66ff','ff00ff','cc00cc','660066'],
//    		['333300','009900','66ff33','99ff66','ccff99','ffffcc','ffcccc','ff99cc','ff66cc','ff33cc','cc0099','993399'],
//    		['336600','669900','99ff33','ccff66','ffff99','ffcc99','ff9999','ff6699','ff3399','cc3399','990099'],
//    		['666633','99cc00','ccff33','ffff66','ffcc66','ff9966','ff6666','ff0066','d60094','993366'],
//    		['a58800','cccc00','ffff00','ffcc00','ff9933','ff6600','ff0033','cc0066','660033'],
//    		['996633','cc9900','ff9900','cc6600','ff3300','ff0000','cc0000','990033'],
//    		['663300','996600','cc3300','993300','990000','800000','993333']
//	],
//	brightColors=[
//	    '00ff33','00ff99','00ffff','00cc33','00cc99','00ccff','009933','009999','0099ff',
//	    '66ff33','66ff99','66ffff','66cc33','66cc99','66ccff','669933','669999','6699ff',
//	    '99ff33','99ff99','99ffff','99cc33','99cc99','99ccff','999933','999999','9999ff',
//	    'ffff33','ffff99','ffffff','ffcc33','ffcc99','ffccff','ff9933','ff9999','ff99ff',
//	    '006633','006699','0066ff','003333','003399','0033ff','000033','000099','0000ff',
//	    '666633','666699','6666ff','663333','663399','6633ff','660033','660099','6600ff',
//	    '996633','996699','9966ff','993333','993399','9933ff','990033','990099','9900ff',
//	    'ff6633','ff6699','ff66ff','ff3333','ff3399','ff33ff','ff0033','ff0099','ff00ff'
//	],
//	grayColors=[
//	    'ffffff','dddddd','cococo','969696','808080','646464','4b4b4b','242424','000000'     
//	],
	int2Hex=function(i){
		var h=i.toString(16);
		if(h.length==1){
			h='0'+h;
		}
		return h;
	},
	st2Hex=function(s){
		return int2Hex(Number(s));
	},
//	int2Hex3=function(i){
//		var h=int2Hex(i);
//		return h+h+h;
//	},
	toHex3=function(c){
		if(c.length>10){ // IE9
			var p1=1+c.indexOf('('),
				p2=c.indexOf(')'),
				cs=c.substring(p1,p2).split(',');
			return ['#',st2Hex(cs[0]),st2Hex(cs[1]),st2Hex(cs[2])].join('');
		}else{
			return c;
		}
	};
	
	/**
	 * @version 1.0
	 * @name jazz.colorfield
	 * @description 颜色选择器组件
	 * @constructor
	 * @extends jazz.dropdownfield
	 */	
    $.widget('jazz.colorfield', $.jazz.dropdownfield,{
    	
		options: /** @lends jazz.colorfield# */ {
        	/**
			 *@type String
			 *@desc 组件类型
			 *@default 'colorfield'
			 */ 
			vtype: 'colorfield',
			
			/**
			 *@type String
			 *@desc 颜色模板说明 可保留
			 *@default '全部颜色,标准颜色.'
			 */
			strings: '全部颜色,标准颜色',        	
			// callbacks
    		
    		/**
			 *@desc 鼠标焦点离开输入框时触发
			 *@param {event} 事件
			 *@param {ui.newValue} 新修改的值 
			 *@param {ui.oldValue} 旧值
			 *@event
			 *@example
			 *<br/>$("XXX").colorfield("option", "change", function(event, ui){  <br/>} <br/>});
			 *或:
			 *<br/>$("XXX").on("colorfieldchange",function(event, ui){  <br/>} <br/>});
			 *或：
			 *function XXX(){……}
			 *<div…… change="XXX()"></div> 或 <div…… change="XXX"></div>
			 */
			change: null
		},
		
		/** @lends jazz.colorfield */
		/**
		 * @desc 创建组件
		 * @private
		 */ 
		 _create: function(){
			this.options.downheight = 250;
			//创建组件
        	this._super();
		 },
		 
	 	/**
         * @desc 初始化组件
         * @private
         */ 
		_init: function(){
			this._super();
			
			this._paletteIdx=1;
			this._id='evo-cp'+_idx++;
			this._isPopup=true;
			this._palette=null;

			this._palette = this.itemsContainer.css({
        		"width": "205",
        		"height": "190"
        	}).addClass("evo-pop jazz-widget").append(this._paletteHTML());
			if(jazz.util.isIE(7)){
				this._palette.css("width","203");
				this._palette.css("height","220");
			}else if(jazz.util.isIE(8)){
				this._palette.css("width","224");
				this._palette.css("height","175");
			}
			
			this._palette.parent().addClass("jazz-panel").css({"background-color": "#fff"});
			
			this._bindEvent();
			
			this._validator();

		},
		
		//覆盖field中的_editable方法， color组件不可编辑
		_editable: function(){
			this.options.editable = false;
			this._super();
		},
		
		/**
         * @desc 生成颜色面板
         * @return 返回颜色面板
		 * @private
		 * @example this._paletteHTML();
         */
		_paletteHTML: function() {
			var h=[], pIdx=this._paletteIdx=Math.abs(this._paletteIdx),
				labels = this.options.strings.split(',');
			// palette
			h.push('<span>',this['_paletteHTML'+pIdx](),'</span>');
			// links
			h.push('<div class="evo-more"><a href="javascript:void(0)">', labels[1+pIdx],'</a>');
			h.push('</div>');
			return h.join('');
		},
		
		/**
         * @desc 生成颜色面板
         * @return 返回颜色面板
		 * @private
		 * @example this._paletteHTML1();
         */
		_paletteHTML1: function() {
			var h=[], labels=this.options.strings.split(','),
			oTD='<td style="background-color:#',
			cTD=isIE?'"><div style="width:2px;"></div></td>':'"><span/></td>',
			oTRTH='<tr><th colspan="10" class="jazz-widget-content">';
			// base theme colors
			h.push('<table class="evo-palette',_ie,'">',oTRTH,labels[0],'</th></tr><tr>');
			for(var i=0;i<10;i++){ 
				h.push(oTD, baseThemeColors[i], cTD);
			}
			h.push('</tr>');
			if(!isIE){
				h.push('<tr><th colspan="10"></th></tr>');
			}
			h.push('<tr class="top">');
			// theme colors
			for(i=0;i<10;i++){ 
				h.push(oTD, subThemeColors[i], cTD);
			}
			for(var r=1;r<4;r++){
				h.push('</tr><tr class="in">');
				for(i=0;i<10;i++){ 
					h.push(oTD, subThemeColors[r*10+i], cTD);
				}			
			}
			h.push('</tr><tr class="bottom">');
			for(i=40;i<50;i++){ 
				h.push(oTD, subThemeColors[i], cTD);
			}
			h.push('</tr>',oTRTH,labels[1],'</th></tr><tr>');
			// standard colors
			for(i=0;i<10;i++){ 
				h.push(oTD, standardColors[i], cTD);
			}
			h.push('</tr></table>');
			return h.join(''); 
		},
		
		/**
         * @desc 绑定事件
		 * @private
         */
		_bindEvent: function() {
			var es=this._palette.find('div.evo-color'), sel= "td"; //this.options.history?'td,.evo-cHist div':'td';
			this._cTxt1=es.eq(0).children().eq(0);
			this._cTxt2=es.eq(1).children().eq(0);
			var $this = this;
			this._palette.off("mouseover.colorfield").on('mouseover.colorfield', sel, function(evt){
				var c=toHex3($(this).attr('style').substring(17));
				$this.inputtext.css("background-color", c);
			});
			this.itemsContainer.off("mouseout.colorfield").on('mouseout.colorfield', function(evt){
				if($this._newValue){
					$this.inputtext.css("background-color", $this._newValue);
				}else{
					$this.inputtext.css("background-color", "#fff");
				}
			});
			this._palette.off("mousedown.colorfield").on('mousedown.colorfield', sel, function(e){
				$this._oldValue = $this._oldText = $this.getValue();
				var c=toHex3($(this).attr('style').substring(17));
        		$this._newValue = $this._newText = c;
				$this.setValue(c);
				$this.inputtext.css("background-color", c);			
				$this._hideDropdown();
				$this._event("change", e, $this._changeData());
			});			
        	this.inputtext.off("focus.colorfield blur.colorfield").on("focus.colorfield", function(){
        		if($this.input.val()=="" && $this.options.valuetip){
					$(this).val("");
					$(this).removeClass('jazz-field-comp-input-tip');
				}
        	}).on("blur.colorfield", function(){ 
        		if($this.input.val()=="" && $this.options.valuetip && !$this._newValue){
					$(this).val($this.options.valuetip);
					$(this).addClass('jazz-field-comp-input-tip');
				}
        	});			
		},
        
		/**
         * @desc 获取颜色值
		 * @param {v} 颜色值
		 * @example $('XXX').colorfield('getText');
         */
        getText: function(){
        	return this.getValue();
        },
        
		/**
         * @desc 获取颜色值
		 * @param {v} 颜色值
		 * @example $('XXX').colorfield('getValue');
         */
        getValue: function(){
        	return this.input.val() || "";
        },
        
		/**
         * @desc 获取颜色值
		 * @param {v} 颜色值
		 * @example $('XXX').colorfield('setValue','v');
         */
        setText: function(v){
        	this.setValue(v);
        },
        
		/**
         * @desc 设置颜色值  
		 * @param {value} 颜色值
		 * @example $('XXX').colorfield('setValue','#ff6633');
         */
		setValue: function(value) {
			if(value == "" || value == undefined){ value = ""; }
			this.inputtext.css("background-color", value);
			this.inputtext.val("");			
			this.inputview.html(value+"");
			this.input.val(value);
		}
		
	});
});
(function( $, factory ){

	if ( jazz.config.isUseRequireJS === true ) {
		define( ['jquery',
		         'form/jazz.form.Field'], factory );
	} else {
		factory($);
	}	 
})(jQuery, function($){
	/**
	 * @version 1.0
	 * @name jazz.levelfield
	 * @description 水平选择组件。
	 * @constructor
	 * @extends jazz.field
	 */
    $.widget("jazz.levelfield", $.jazz.hiddenfield, {
    	
    	options: /** @lends jazz.levelfield# */ {

        	/**
    		 *@type String
    		 *@desc 组件类型
    		 *@default levelfield
    		 */
			vtype: 'levelfield',
			
    		/**
    		 *@type Array
    		 *@desc 获取数据项url地址
    		 *@default []
    		 *@example [{"checked": true, "text": "男", "value": "1"},{"text": "女", "value": "2"}] 
    		 */
    		dataurl: [],
    		
    		/**
    		 *@type Number
    		 *@desc 下拉列表的高度
    		 *@default
    		 */    		
    		listheight: 0,
    		
            /**
			 *@type Boolean
			 *@desc 是否多选 true是复选，false是单选
			 *@default false
			 */            
            multiple: false,    		

    		// callbacks
    		/**
			 *@desc 鼠标焦点离开输入框时触发
			 *@param {event} 事件
			 *@event
			 *@example
			 *<br/>$("XXX").levelfield("option", "change", function(event, ui){  <br/>} <br/>});
			 *或:
			 *<br/>$("XXX").on("levelfieldchange",function(event, ui){  <br/>} <br/>});
			 *或：
			 *function XXX(){……}
			 *<div…… change="XXX()"></div> 或 <div…… change="XXX"></div>
			 */
    		change: null,
    		
    		/**
			 *@desc 当鼠标点击展开收起时触发
			 *@param {event} 事件
			 *@event
			 *@example
			 *<br/>$("XXX").levelfield("option", "exchange", function(event, ui){  <br/>} <br/>});
			 *或:
			 *<br/>$("XXX").on("levelfieldexchange",function(event, ui){  <br/>} <br/>});
			 *或：
			 *function XXX(){……}
			 *<div…… exchange="XXX()"></div> 或 <div…… exchange="XXX"></div>
			 */    		
    		exchange: null
    	},
    	
    	/** @lends jazz.levelfield */
    	
        /**
         * @desc 创建组件
         * @private
         */ 
        _create: function() {
        	//创建组件
        	this._super();
        	
        	this.parent.addClass("jazz-level-comp-level");
        },

        /**
         * @desc 初始化组件
         * @private
         */ 
		_init: function(){
			
			this._super();
			
			this.options.listheight = jazz.config.levelfieldlistheight || this.options.listheight;
			
			this._dataItems();
			
			//验证
			//this._validator();            
		},
		
		/**
         * @desc 相关事件处理
         * @private
		 */
		_bindEvent: function(){
			var $this = this;
			this.inputFrame.find(".jazz-level-div").off("click.levelfield").on("click.levelfield", function(){
				if(!$this.options.multiple){
					$(this).siblings().removeClass("jazz-level-checked");
				}
				var f = false;
        		if($(this).hasClass("jazz-level-checked")){
        			$(this).removeClass("jazz-level-checked");
        		}else{
        			$(this).addClass("jazz-level-checked");
        			f = true;
        		}
        		$this.setCondition();
        		$this._event("change", null, {checked: f, value: $(this).attr("value")});
        	});
		},
		
        /**
         * @desc 生成数据项
		 * @private
         */
        _callback: function(data) {
        	if(data){
        		this._commonDom(data, this.compId);
        	}
        	//如果reload方法中有回调, 则调用回调函数
        	if(this.callbackFunc){
        		this.callbackFunc.call(this, this.getValue());
        	}
        },		
		
        /**
         * @desc 生成数据dom
         * @{items} 数据项
         * @{compId} id
         * @private
         */ 
        _commonDom: function(items, compId) {
        	//var name = this.options.name;
        	var div = "<div class='jazz-level-frame'><div class='jazz-level-frame-inner'>";
        	if(items && items.length>0){
        		var $this = this; this.checkItems = [];
        		$.each(items, function(i, item){
        			var id = compId+'_box_'+item.value, chked = '';
        			$this.checkItems.push(id);
        			div += "<div class='jazz-level-div";
        			if(item.checked=="true" || item.checked){
        				chked = " jazz-level-checked";
        			}
        			div += chked+"' value='"+item.value+"' text='"+item.text+"'>"+item.text+"</div>";
        		});
        	}
        	div += "</div></div>";
        	this.element.height("auto");
        	this.inputFrame.append(div);
        	this.inputFrame.addClass("jazz-level-position");
        	this.inputFrame.append("<div class='jazz-level-expend'><div class='jazz-level-zk jazz-level-zk2'><span class='jazz-level-yy'>展开</span><div class='jazz-level-zk-img'>&nbsp;&nbsp;</div></div></div>");
        	
        	var zk = this.inputFrame.find(".jazz-level-frame").height();
        	if(zk > 35){
        		var zkobj = this.inputFrame.find(".jazz-level-zk");
        		zkobj.removeClass("jazz-level-zk2");
        		var $this = this;
        		zkobj.on("click", function(){
        			var fr = $this.inputFrame.children(".jazz-level-frame");
        			var frc = fr.children();
        			if(fr.hasClass("jazz-level-frame-height")){
        				fr.removeClass("jazz-level-frame-height");
        				zkobj.children(".jazz-level-yy")[0].innerHTML = "收起";
        				zkobj.children(".jazz-level-zk-img").addClass("jazz-level-zk-img2");
        				var h = fr.height();
        				if($this.options.listheight!=0 && h > $this.options.listheight){
        					fr.height($this.options.listheight);
        					frc.height($this.options.listheight);
        					frc.addClass("jazz-level-frame-height2");
        				}
        			}else{
        				fr.attr("style", "");
        				frc.attr("style", "");
        				frc.removeClass("jazz-level-frame-height2");
        				fr.addClass("jazz-level-frame-height");
        				zkobj.children(".jazz-level-yy")[0].innerHTML = "展开";
        				zkobj.children(".jazz-level-zk-img").removeClass("jazz-level-zk-img2");
        			}
        			if(!!window.iFrameHeight){  
        				iFrameHeight();
        			};
        			$this._event("exchange", null);
        		});
        		$this.inputFrame.children(".jazz-level-frame").addClass("jazz-level-frame-height");
        	}
        	
			this._bindEvent();
        },		
		
		/**
         * @desc 生成level项
         * @private
         */
        _dataItems: function(){
        	this.inputFrame.find(".jazz-level-div").remove();
        	
        	if(typeof(this.options.dataurl) == 'string' && /^\s*[\[|{](.*)[\]|}]\s*$/.test(this.options.dataurl)){
        		//转换成对象
        		this.options.dataurl = jazz.stringToJson(this.options.dataurl);
        	}
        	
            if(typeof(this.options.dataurl) == 'object' && jazz.isArray(this.options.dataurl)){            	
            	this._commonDom(this.options.dataurl, this.compId);
            	
        		//如果reload方法中有回调, 则调用回调函数
            	if(this.callbackFunc){
            		this.callbackFunc.call(this, this.getValue());
            	}
			}else{
				this._ajax();
			}
        },
        
		/**
         * @desc 获取当前选中状态对象的文本值
		 * @return 所有选中文本值
		 * @example $('XXX').levelfield('getText');
		 */
        getText: function(){
        	var chkvalue = new Array(); 
        	$.each(this.inputFrame.find(".jazz-level-div"), function(){
        		if($(this).hasClass("jazz-level-checked")){
        			chkvalue.push($(this).attr("text")||"");
        		}
        	});
        	return chkvalue.join(',');
        },        
        
        /**
         * @desc 获取当前选中状态对象的值      
         * @return 所有选中的值
         * @example $('XXX').levelfield('getValue');
         */
        getValue: function(){
        	var chkvalue = new Array(); 
        	$.each(this.inputFrame.find(".jazz-level-div"), function(){
        		if($(this).hasClass("jazz-level-checked")){
        			chkvalue.push($(this).attr("value")||"");
        		}
        	});
        	return chkvalue.join(',');
        },        
        
        /**
         * @desc 动态加载数据
		 * @example $('XXX').levelfield('reload');
         */
        reload: function(data, callbackfunction) {
        	this.callbackFunc = callbackfunction;
        	this.inputFrame.empty();
        	if(data && jazz.isArray(data)){ 
        		this._callback(data);  		
        	}else{
        		var dataurl = this.options.dataurl;
				if(dataurl) {
					if(jazz.isArray(dataurl)) {
						this._callback(dataurl);
					}else {
//						var $this = this;
						this._ajax(!this.options.cacheflag);
					}
				}        		
        	}
        },        
        
		/**
         * @desc 取消当前选中状态对象
		 * @example $('XXX').levelfield('reset');
		 */
        reset: function(){
        	$.each(this.inputFrame.find(".jazz-level-div"), function(){
        		$(this).removeClass("jazz-level-checked");
        	});
        },
        
		/**
         * @desc 设置当前状态对象选中
		 * @param {value} 选中对象的值
		 * @example $('XXX').levelfield('setValue','2,4');
		 */
        setValue: function(value){
        	$.each(this.inputFrame.find(".jazz-level-div"), function(){
        		var a = (value+"").split(",");
        		$(this).removeClass("jazz-level-checked");
        		for(var i=0, len=a.length; i<len; i++){
        			if($(this).attr("value") == a[i]){
        				$(this).addClass("jazz-level-checked"); 
        			}
        		}
        	});
        }      
		
    });
    
});
(function( $, factory ){

	if ( jazz.config.isUseRequireJS === true ) {
		define( ['jquery',
		         'form/jazz.form.Field'], factory );
	} else {
		factory($);
	}	 
})(jQuery, function($){
	/**
	 * @version 1.0
	 * @name jazz.letterfield
	 * @description 按字母分类汉字组件。
	 * @constructor
	 * @extends jazz.field
	 */
    $.widget("jazz.letterfield", $.jazz.hiddenfield, {
    	
    	options: /** @lends jazz.letterfield# */ {

        	/**
    		 *@type String
    		 *@desc 组件类型
    		 *@default letterfield
    		 */
			vtype: 'letterfield',
			
    		/**
    		 *@type Array
    		 *@desc 获取数据项url地址
    		 *@default []
    		 *@example [{"checked": true, "text": "男", "value": "1"},{"text": "女", "value": "2"}] 
    		 */
    		dataurl: [],
    		
    		/**
    		 *@type Number
    		 *@desc 下拉列表的高度
    		 *@default 80
    		 */
    		listheight: 80,
    		
            /**
			 *@type Boolean
			 *@desc 是否多选 true是复选，false是单选
			 *@default false
			 */            
            multiple: false, 
            
            /**
			 *@type String
			 *@desc 不匹配汉字显示的分类名称
			 *@default false
			 */            
            otherpy: "其他",

    		// callbacks
    		/**
			 *@desc 鼠标焦点离开输入框时触发
			 *@param {event} 事件
			 *@event
			 *@example
			 *<br/>$("XXX").letterfield("option", "change", function(event, ui){  <br/>} <br/>});
			 *或:
			 *<br/>$("XXX").on("letterfieldchange",function(event, ui){  <br/>} <br/>});
			 *或：
			 *function XXX(){……}
			 *<div…… change="XXX()"></div> 或 <div…… change="XXX"></div>
			 */
    		change: null
    	},
    	
    	/** @lends jazz.letterfield */
    	
        /**
         * @desc 创建组件
         * @private
         */ 
        _create: function() {
        	//创建组件
        	this._super();
        	
        	this.parent.addClass("jazz-letter-comp");
        	
        	this._initArray();
        },

        /**
         * @desc 初始化组件
         * @private
         */
		_init: function(){
			
			this._super();
			
			this.options.listheight = jazz.config.letterfieldlistheight || this.options.listheight;
			
			this._dataItems();         
		},
		
		_initArray: function(){
        	this.letter = {"A": [], "B": [], "C": [], "D": [], "E": [], "F": [], "G": [], 
 			       "H": [], "I": [], "J": [], "K": [], "L": [], "M": [], "N": [], 
 			       "O": [], "P": [], "Q": [], "R": [], "S": [], "T": [], "U": [], 
 			       "V": [], "W": [], "X": [], "Y": [], "Z": []};
		 	//存储未匹配的汉字
		 	this.other = {"other": []};
		 	//存储默认首个数据项
		 	this.firstdata = {};
		 	//存储选中数据
		 	this.storedata = [];
		 	//存储原始数据
		 	this.itemsdata = [];			
		},
		
		/**
         * @desc 相关事件处理
         * @private
		 */
		_bindEvent: function(itemscomp){
			var $this = this;
			var py, data, time;
    		this.inputFrame.find(".jazz-letter-zm").off(".py").on("mouseenter.py", function(){
    			var that = $(this);
    			time = setTimeout(function(){
	    			that.parent().children().removeClass("jazz-letter-zm-hover");
	    			that.addClass("jazz-letter-zm-hover");
	    			py = that.attr("py");
	    			if(py=="other"){
	    				data = $this.other[py];
	    			}else{
	    				data = $this.letter[py];
	    			}
	    			$this._createItems(data, itemscomp, py);
	    			$this._hxdata();
    			}, 150);
    		}).on("mouseleave.py", function(){
    			if(time){
    				window.clearTimeout(time);    				
    			}
    		});
		},
		
        /**
         * @desc 生成数据项
		 * @private
         */
        _callback: function(data) {
        	if(data){
        		this._commonDom(data, this.compId);
        	}
        	//如果reload方法中有回调, 则调用回调函数
        	if(this.callbackFunc){
        		this.callbackFunc.call(this, this.getValue());
        	}
        },
        
        /**
         * @desc 对字母进行分组
         * @{ch} 首字母 
         * @{item} 数据项
         * @private
         */        
        _characterGroup: function(ch, item){
        	var arr = (ch+"").split(","), c;
			for(var i=0, len=arr.length; i<len; i++){
            	c = arr[i];
				if("ABCDEFGHIJKLMNOPQRSTUVWXYZ".indexOf(c) >= 0){
					this.letter[c].push(item);
            	}else{
            		this.other["other"].push(item);
            	}
    		}
		},        
		
        /**
         * @desc 生成数据dom
         * @{items} 数据项
         * @{compId} id
         * @private
         */
        _commonDom: function(items, compId) {
        	var div = [], $this = this;
        	div.push('<div class="jazz-letter-div">');
        	if(items && items.length>0){
        		this.itemsdata = items;
        		
        		var py, ch, k=0, flag = false;
        		$.each(items, function(i, item){
        			var text = item.text;
        			if(text){
    					ch = text.charAt(0);
    					if(ch){
    					   py = jazz.util.chineseToPy(ch);
    					   $this._characterGroup(py, item);
    					}
        			}
        		});
        		
        		div.push('<div class="jazz-letter-character">');
        		$.each(this.letter, function(i, item){
        			if(item.length){
        				if(k==0){
        					$this.firstdata[i] = item;
        					k++;
        				}
        				div.push('<div class="jazz-letter-zm jazz-inline" py="');
        				div.push(i);
        				div.push('">');
        				div.push(i);
        				div.push('</div>');
        				flag = true;
        			}
        		});
        		if(this.other["other"].length > 0){
        			div.push('<div class="jazz-letter-zm jazz-letter-zm-qt jazz-inline" py="other">');
        			div.push(this.options.otherpy);
        			div.push('</div>');       			
        		}
        		div.push('</div>');
        		
        		if(flag){
    				div.push('<div class="jazz-letter-cursor"><div class="jazz-letter-cursor-img"></div></div>');
    				div.push('<div class="jazz-letter-items"></div>');
        		}
        	}
        	div.push("</div>");
        	
        	this.element.height("auto");
        	
        	this.inputFrame.append(div.join(""));
        	
        	var itemscomp = this.inputFrame.find(".jazz-letter-items");
        	if(itemscomp.length > 0){
        		itemscomp.addClass("jazz-letter-items-border");
        		itemscomp.outerHeight(this.options.listheight);

        		$.each(this.firstdata, function(i, item){
        			$this._createItems(item, itemscomp, i);
        		});
        		
        		this._bindEvent(itemscomp);
        	}
        },
		
		/**
         * @desc 生成数据项
         * @parem{item} 数据项集合
         * @parem{itemscomp} 数据项集合所在容器对象 
         * @parem{zm} 该数据项对应的字母
         * @private
         */
        _createItems: function(item, itemscomp, zm){
        	itemscomp.empty();
        	var len = item.length;
        	for(var i=0; i<len; i++){
        		itemscomp.append('<div class="jazz-letter-item" value="'+item[i]["value"]+'" text="'+item[i]["text"]+'">'+item[i]["text"]+'</div>');        		
        	}
        	if(len > 0){
        		var obj = this.inputFrame.find("div.jazz-letter-zm[py='"+zm+"']");
        		if(obj.length > 0){
        			this._cursorImg(obj);
        		}
        	}
        	var $this = this;
        	itemscomp.off(".item").on("click.item", function(e){
        		var target = $(e.target);
        		if(target.hasClass("jazz-letter-item")){
        			if(!$this.options.multiple){
        				target.parent().removeClass("jazz-letter-checked");
        			}
        			var f = false, value = target.attr("value"), text = target.attr("text");
        			if(target.hasClass("jazz-letter-checked")){
        				target.removeClass("jazz-letter-checked");
        			}else{
        				target.addClass("jazz-letter-checked");
        				f = true;
        			}
        			$this._itemStore(f, value, text);
            		$this.setCondition();
            		$this._event("change", null, {"checked": f, "value": value, "text": text});        			
        		}
        	});
        },
        
		/**
         * @desc 生成数据项
         * @parem{obj} ABCD……的div对象 
         * @private
         */        
        _cursorImg: function(obj){
			var zmleft = obj.offset().left,
		    zmwidth = obj.outerWidth(),
		    left = obj.parent().offset().left;
		
			var img = this.inputFrame.find(".jazz-letter-cursor-img"),
			    imgleft = (zmleft - left) + Math.floor((zmwidth-img.width())/2);
			img.css({"left": imgleft});
			obj.addClass("jazz-letter-zm-hover");        	
        },
		
		/**
         * @desc 生成level项
         * @private
         */
        _dataItems: function(){
        	this.inputFrame.find(".jazz-letter-div").remove();
        	
        	if(typeof(this.options.dataurl) == 'string' && /^\s*[\[|{](.*)[\]|}]\s*$/.test(this.options.dataurl)){
        		//转换成对象
        		this.options.dataurl = jazz.stringToJson(this.options.dataurl);
        	}
        	
            if(typeof(this.options.dataurl) == 'object' && jazz.isArray(this.options.dataurl)){       	
            	this._commonDom(this.options.dataurl, this.compId);
            	
        		//如果reload方法中有回调, 则调用回调函数
            	if(this.callbackFunc){
            		this.callbackFunc.call(this, this.getValue());
            	}
			}else{
				this._ajax();
			}
        },
        
        /**
         * @desc 回显选中的数据
         */        
        _hxdata: function(){
    		var obj = this.inputFrame.find(".jazz-letter-items");
    		if(obj.length>0){
    			var val, len=this.storedata.length;
				var child = obj.children();
				if(child.length > 0){
    				child.removeClass("jazz-letter-checked");
    				var $this = this;
        			$.each(child, function(){
        				val = $(this).attr("value");
        				for(var i=0; i<len; i++){
        					if(val == $this.storedata[i]["value"]){
        						$(this).addClass("jazz-letter-checked");
        					}	
        				}
        			});
				}
    		}
        },
        
        /**
         * @desc 临时存储数据
         * @param{flag} true新增加数据 false在已有数据中剔除
         */
        _itemStore: function(flag, value, text){
        	if(flag){
        		this.storedata.push({"text": text, "value": value});
        	}else{
        		var temp = [];
        		for(var i=0, len=this.storedata.length; i<len; i++){
        			if(this.storedata[i]["value"] != value){
        				temp.push(this.storedata[i]);
        			}
        		}
        		this.storedata = temp;
//        		for(var i=0, len=this.storedata.length; i<len; i++){
//        			console.log("已经存储的数据="+this.storedata.length+"=value="+this.storedata[i]["value"]+" text="+this.storedata[i]["text"]);
//        		}        		
        	}
        },
        
		/**
         * @desc 获取当前选中状态对象的文本值
		 * @return 所有选中文本值
		 * @example $('XXX').letterfield('getText');
		 */
        getText: function(){
        	var v = []; 
        	$.each(this.storedata, function(i, item){
        		v.push(item["text"]);
        	});
        	return v.join(',');
        },        
        
        /**
         * @desc 获取当前选中状态对象的值      
         * @return 所有选中的值
         * @example $('XXX').letterfield('getValue');
         */
        getValue: function(){
        	var v = []; 
        	$.each(this.storedata, function(i, item){
        		v.push(item["value"]);
        	});
        	return v.join(',');
        },        
        
        /**
         * @desc 动态加载数据
		 * @example $('XXX').letterfield('reload');
         */
        reload: function(data, callbackfunction) {
        	this.callbackFunc = callbackfunction;
        	this.inputFrame.empty();
        	this._initArray();
        	if(data && jazz.isArray(data)){ 
        		this._callback(data);  		
        	}else{
        		var dataurl = this.options.dataurl;
				if(dataurl) {
					if(jazz.isArray(dataurl)) {
						this._callback(dataurl);
					}else {
//						var $this = this;
						this._ajax(!this.options.cacheflag); 
//								function(data){
//							$this._callback(data);               	
//						});
					}
				}        		
        	}
        },        
        
		/**
         * @desc 取消当前选中状态对象
		 * @example $('XXX').letterfield('reset');
		 */
        reset: function(){
        	var obj = this.inputFrame.find(".jazz-letter-items");
        	if(obj.length){
        		obj.children().removeClass("jazz-letter-checked");
        	}
        	this.storedata = [];
        },
        
		/**
         * @desc 设置当前状态对象选中
		 * @param {value} 选中对象的值
		 * @example $('XXX').letterfield('setValue','2,4');
		 */
        setValue: function(value){
        	if(value===0 || value){
        		var arr = (value+"").split(","),
        		    $this = this;
        		this.storedata = [];
        		$.each(this.itemsdata, function(i, item){
        			for(var i=0, len=arr.length; i<len; i++){
        				if(item["value"] == arr[i]){
        					$this.storedata.push(item);
        				}
        			}
        		});
        		for(var i=0,len=$this.storedata.length; i<len; i++){
        			console.log("this.storedata="+$this.storedata[i]["value"]);
        		}
        	}else{
        		this.storedata = [];
        	}
        	this._hxdata();
        }      
    });
    
});
(function ($, factory) {

    if (jazz.config.isUseRequireJS === true) {
        define(['jquery', 'jazz.BoxComponent'], factory);
    } else {
        factory($);
    }
})(jQuery, function ($) {
    /**
     * @version 0.5
     * @name jazz.date
     * @description 日历组件类（非弹出日历，弹出日历请用DateField）。
     * @constructor
     * @example $('XXX').date();
     */
    $.widget('jazz.date', $.jazz.boxComponent, {
        options: /** @lends jazz.date# */ {

            /**
             *@type String
             *@desc 组件的效验类型
             *@default 'date'
             */
            vtype: 'date',

            /**
             *@type String
             *@desc 日历组件宽度
             *@default '200'
             */
            width: 200,

            /**
             *@type String
             *@desc 日历组件高度
             *@default '200'
             */
            height: 200,

            /**
             *@type String
             *@desc 要显示的年
             *@default '当前年'
             */
            year: new Date().getFullYear(),

            /**
             *@type String
             *@desc 要显示的月
             *@default '当前月'
             */
            month: new Date().getMonth() + 1,

            /**
             *@type String
             *@desc 已经选择的日期（用于回填）
             *@default 'null'
             */
            defaultvalue: null,

            /**
             *@type  boolean
             *@desc  是否显示年份下拉框
             *@default  false
             */
            isshowdatelist: false,

            //event
            /**
             *@type function
             *@desc 选择日期时的回调函数
             *@event
             *@example
             **<br/>$("XXX").date("option", "select", function(event){  <br/>} <br/>});
             *或:
             *<br/>$("XXX").on("dateselect",function(event, ui){  <br/>} <br/>});
             *或：
             *function XXX(){……}
             *<div…… select="XXX()"></div> 或 <div…… select="XXX"></div>
             */
            select: null,

            /**
             *@type function
             *@desc 日历画完后的回调函数
             *@event
             *@example
             **<br/>$("XXX").date("option", "finish", function(event){  <br/>} <br/>});
             *或:
             *<br/>$("XXX").on("datefinish",function(event, ui){  <br/>} <br/>});
             *或：
             *function XXX(){……}
             *<div…… finish="XXX()"></div> 或 <div…… finish="XXX"></div>
             */
            finish: null,
            
            /**
             *@type function
             *@desc 选择上一年事件
             *@event
             *@example
             **<br/>$("XXX").date("option", "preyear", function(event){  <br/>} <br/>});
             *或:
             *<br/>$("XXX").on("preyear",function(event, ui){  <br/>} <br/>});
             *或：
             *function XXX(){……}
             *<div…… preyear="XXX()"></div> 或 <div…… preyear="XXX"></div>
             */            
            preyear: null,
            
            /**
             *@type function
             *@desc 选择上一月事件
             *@event
             *@example
             **<br/>$("XXX").date("option", "premonth", function(event){  <br/>} <br/>});
             *或:
             *<br/>$("XXX").on("premonth",function(event, ui){  <br/>} <br/>});
             *或：
             *function XXX(){……}
             *<div…… premonth="XXX()"></div> 或 <div…… premonth="XXX"></div>
             */             
            premonth: null,
            
            /**
             *@type function
             *@desc 选择下一年事件
             *@event
             *@example
             **<br/>$("XXX").date("option", "nextyear", function(event){  <br/>} <br/>});
             *或:
             *<br/>$("XXX").on("nextyear",function(event, ui){  <br/>} <br/>});
             *或：
             *function XXX(){……}
             *<div…… nextyear="XXX()"></div> 或 <div…… nextyear="XXX"></div>
             */            
            nextyear: null,
            
            /**
             *@type function
             *@desc 选择下一月事件
             *@event
             *@example
             **<br/>$("XXX").date("option", "nextyear", function(event){  <br/>} <br/>});
             *或:
             *<br/>$("XXX").on("nextyear",function(event, ui){  <br/>} <br/>});
             *或：
             *function XXX(){……}
             *<div…… nextmonth="XXX()"></div> 或 <div…… nextyear="XXX"></div>
             */                      
            nextmonth: null
        },

        /** @lends jazz.date*/

        /**
         * @desc 创建组件
         * @private
         */
        _create: function () {
            this._super();
            // 如果已经指定了默认日期，将默认日期的格式处理一下并转化为Date类型
            if (this.options.defaultvalue) {
                this.options.defaultvalue = new Date(this.options.defaultvalue.replace(/-/g, "/"));
            }

            // 创建dom元素
            this.element.addClass("jazz-date").css({
                "width": this.options.width,
                "height": this.options.height
            });

            // 上一年
            this.calendarPreYear = $('<div class="jazz-date-preyear"></div>').appendTo(this.element);
            // 上一月
            this.calendarPreMonth = $('<div class="jazz-date-premonth"></div>').appendTo(this.element);
            // 下一年
            this.calendarNextYear = $('<div class="jazz-date-nextyear"></div>').appendTo(this.element);
            // 下一月
            this.calendarNextMonth = $('<div class="jazz-date-nextmonth"></div>').appendTo(this.element);

            this.calendarText = $('<div class="jazz-date-text"><table align="center"><tr><td><div class="jazz-date-year-o">' + this.options.year + '</div></td><td> <div class="jazz-date-year-w">年</div> </td><td><div class="jazz-date-month-o">' + this.options.month + '</div></td><td> <div class="jazz-date-year-w">月</div> </td></tr></table></div>').appendTo(this.element);
            // 当前年
            this.calendarYear = this.calendarText.find('.jazz-date-year-o');
            //this.calendarYearText = this.calendarYear;
            // 当前月
            this.calendarMonth = this.calendarText.find('.jazz-date-month-o');
            //this.calendarMonthText = this.calendarMonth;
            if (this.options.isshowdatelist === true) {
                this.calendarYear.addClass("jazz-cursor-pointer");
                this.calendarMonth.addClass("jazz-cursor-pointer");
            }
            // 表头
            this.calendarHeader = $(
                '<table class="jazz-date-header" cellspacing="0" cellpadding="0" border="0" width="100%" '
                    + 'height="22" align="center" vAlign="middle">'
                    + '  <thead>'
                    + '    <tr>'
                    + '      <td style="height:22px" class="jazz-date-week">一</td>'
                    + '      <td class="jazz-date-week">二</td>'
                    + '      <td class="jazz-date-week">三</td>'
                    + '      <td class="jazz-date-week">四</td>'
                    + '      <td class="jazz-date-week">五</td>'
                    + '      <td class="jazz-date-week">六</td>'
                    + '      <td class="jazz-date-week">日</td>'
                    + '    </tr>'
                    + '  </thead>'
                    + '</table>').appendTo(this.element);
            // 表区
            this.items = $(
                '<table class="jazz-date-body" cellspacing="0" cellpadding="0" border="0" width="100%" '
                    + 'height="' + (this.options.height - this.calendarText.outerHeight(true) - this.calendarHeader.outerHeight(true) ) + '" '
                    + 'align="center" vAlign="middle">'
                    + '  </tbody>'
                    + '</table>').appendTo(this.element);


            this.yearnum = 5;
        },

        /**
         * @desc 初始化组件
         * @private
         */
        _init: function () {

            this._draw();

            this._bindEvent();
        },

        /**
         * @desc 绑定事件
         * @private
         */
        _bindEvent: function () {
            var $this = this;

            // 绑定事件
            this.calendarPreYear.off("mousedown.date").on("mousedown.date", function (e) {
                $this._listHide();
                $this.preYear();
                $this._event("preyear", e);
                e.stopPropagation();
            });
            this.calendarPreMonth.off("mousedown.date").on("mousedown.date", function (e) {
                $this._listHide();
                $this.preMonth();
                $this._event("premonth", e);
                e.stopPropagation();
            });
            this.calendarNextMonth.off("mousedown.date").on("mousedown.date", function (e) {
                $this._listHide();
                $this.nextMonth();
                $this._event("nextmonth", e);
                e.stopPropagation();
            });
            this.calendarNextYear.off("mousedown.date").on("mousedown.date", function (e) {
                $this._listHide();
                $this.nextYear();
                $this._event("nextyear", e);
                e.stopPropagation();
            });
            this.items.off("click.date, mouseover.date, mouseout.date").on("click.date",function (event) {
                var t = event.target, $t = $(t);
                // 如果选中的不是TD，或者选中的不是本月的TD，不做任何操作
                if (t.tagName != "TD" || $t.hasClass("jazz-date-pmonth") || $t.hasClass("jazz-date-nmonth")) {
                    return;
                }
                // 将已经选中的节点去掉
                $this.items.find(".jazz-date-selected").removeClass("jazz-date-selected");
                // 给当前节点添加样式
                $t.addClass("jazz-date-selected");
                // 抛出select事件
                var _day = t.innerHTML;
                if (_day && _day.length == 1) {
                    _day = "0" + _day;
                }
                var _month = $this.options.month;
                if (_month && (_month + "").length == 1) {
                    _month = "0" + _month;
                }
                $this._listHide();
                //$this._event("select", event, {"date": $this.options.year + "-" + _month + "-" + _day});
                var num = $t.prop("id").length;
                var newdate = $t.prop("id").substring(5,num);
                $this._event("select", event, {"date": newdate});
                event.stopPropagation();
            }).on("mouseover.date",function (event) {
                var t = event.target, $t = $(t);
                // 如果选中的不是TD，或者选中的不是本月的TD，不做任何操作
                if (t.tagName != "TD" || $t.hasClass("jazz-date-pmonth") || $t.hasClass("jazz-date-nmonth")) {
                    return;
                }
                $t.addClass("jazz-date-hover");
                event.stopPropagation();
            }).on("mouseout.date", function (event) {
                var t = event.target, $t = $(t);
                $t.removeClass("jazz-date-hover");
                event.stopPropagation();
            });

            $this.calendarYear.off("mousedown.date").on("mousedown.date", function (event) {
                if ($this.options.isshowdatelist === true) {
                    $this._listMonthHide();
                    $this._yearlist($this.searchyear);

                    if (!$this.listYear) {
                        $this._listyearShow();
                    }

                    $this.listYear.off("click.datelist").on("click.datelist", function (e) {
                        var target = $(e.target);
                        if (target.hasClass("jazz-date-yearlist-td")) {

                            var year = $.trim(target.text());
                            $this.calendarYear.text(year);
                            $this._listYearHide();
                            $this.options.year = parseInt(year || $this.options.year);
                            $this._preDraw(new Date($this.options.year, $this.options.month - 1, 1));
                        } else if (target.hasClass("jazz-date-yearlist-td-p")) {

                            $this.searchyear = $this.yearAfter[0] - $this.yearnum;
                            $this._yearlist($this.searchyear);
                            $this._listyearShow();
                        } else if (target.hasClass("jazz-date-yearlist-td-c")) {

                            $this._listYearHide();
                        } else if (target.hasClass("jazz-date-yearlist-td-n")) {

                            $this.searchyear = $this.yearBefore[$this.yearnum - 1] + $this.yearnum + 1;
                            $this._yearlist($this.searchyear);
                            $this._listyearShow();
                        }
                        e.stopPropagation();
                    });

                    event.stopPropagation();

                    $(document).off("mousedown.slistdate").on("mousedown.slistdate", function () {
                        $this._listHide();
                        $(this).off("mousedown.slistdate");
                    });
                }
            });

            $this.calendarMonth.off("click.date").on("click.date", function (event) {
                if ($this.options.isshowdatelist === true) {
                    $this._listYearHide();
                    if (!$this.listMonth) {
                        $this._monthlist();
                    }
                    /*else{
                     $this.listMonth.css("display", "block");
                     }*/
                    $this.listMonth.off("click.datelist").on("click.datelist", function (e) {
                        var target = $(e.target);
                        if (target.hasClass("jazz-date-monthlist-td")) {

                            var monthtext = $.trim(target.text());
                            var month = $this._monthTextToNumber(monthtext) || $this.options.month;
                            $this.calendarMonth.text(month);
                            $this._listMonthHide();
                            $this.options.month = month;
                            $this._preDraw(new Date($this.options.year, month - 1, 1));
                        }
                        e.stopPropagation();
                    });

                    event.stopPropagation();

                    $(document).off("mousedown.slistMdate").on("mousedown.slistMdate", function () {
                        $this._listHide();
                        $(this).off("mousedown.slistMdate");
                    });
                }
            });
        },

        /**
         * @todo 简化初始化年份月份列表预留
         * @param type year, month
         */
        _buildList: function (type) {

        },

        /**
         * @desc 绘制
         * @private
         */
        _draw: function () {
            //用来保存日期列表
            var arr = [];

            //用当月第一天在一周中的日期值作为当月离第一天的天数
            // firstday 为本月1号的星期值
            for (var i = 0, firstday = new Date(this.options.year, this.options.month - 1, 1).getDay() - 1; i < firstday; i++) {
                arr.push(0);
            }
            //用当月最后一天在一个月中的日期值作为当月的天数
            for (var i = 1, monthDay = new Date(this.options.year, this.options.month, 0).getDate(); i <= monthDay; i++) {
                arr.push(i);
            }

            //插入日期
            var frag = document.createDocumentFragment();
            while (arr.length) {
                //每个星期插入一个tr
                var row = document.createElement("tr");
                //每个星期有7天
                for (var i = 1; i <= 7; i++) {
                    var cell = document.createElement("td");
                    cell.innerHTML = "&nbsp;";
                    if (arr.length) {
                        var d = arr.shift();
                        if (d) {
                            cell.innerHTML = d;
                            var on = new Date(this.options.year, this.options.month - 1, d);
                            //判断是否今日
                            if (this._isSame(on, new Date())) {
                                $(cell).addClass("jazz-date-today");
                            }
                            //判断是否选择日期
                            if (this.options.defaultvalue && this._isSame(on, this.options.defaultvalue)) {
                                $(cell).addClass("jazz-date-selected");
                            }
                        } else {
                            $(cell).addClass("jazz-date-pmonth");
                        }
                        var cellmonth = this.options.month < 10 ? "0"+this.options.month : this.options.month;
                        var cellday = d < 10 ? "0"+d : d;
                        $(cell).attr("id", "date-"+this.options.year+"-"+cellmonth+"-"+cellday);
                    } else {
                        $(cell).addClass("jazz-date-nmonth");
                    }
                    row.appendChild(cell);
                }
                frag.appendChild(row);
            }
            //先清空内容再插入(ie的table不能用innerHTML)
            this.items.children().remove();
            this.items.append(frag);

            //将当前年月更新到界面上
            this.calendarYear.text(this.options.year);
            this.calendarMonth.text(this.options.month);

            //触发完成事件
            this._event("finish");
        },

        /**
         * @desc 判断两个日期是否同一日
         * @private
         */
        _isSame: function (d1, d2) {
            return (d1.getFullYear() == d2.getFullYear() && d1.getMonth() == d2.getMonth() && d1.getDate() == d2.getDate());
        },

        /**
         * @desc 列表隐藏
         * @private
         */
        _listHide: function () {
            this._listYearHide();
            this._listMonthHide();
        },

        /**
         * @desc 年列表隐藏
         * @private
         */
        _listYearHide: function () {
            if (this.listYear) {
                this.listYear.remove();
                this.listYear = null;
            }
        },

        /**
         * @desc 月份列表隐藏
         * @private
         */
        _listMonthHide: function () {
            if (this.listMonth) {
                this.listMonth.remove();
                this.listMonth = null;
            }
        },

        /**
         * @desc 年份列表显示
         * @private
         */
        _listyearShow: function () {
            var buf = [];
            buf.push('<div class="jazz-date-yearlist" style="display: block;">');
            buf.push('	<table cellspacing="0" cellpadding="3" border="0" align="center">');
            buf.push('		<tbody>');
            for (var i = 0; i < this.yearnum; i++) {
                buf.push('			<tr nowrap="nowrap">');
                buf.push('				<td class="jazz-date-yearlist-td" >');
                buf.push(this.yearAfter[i]);
                buf.push('				</td>');
                buf.push('				<td class="jazz-date-yearlist-td" >');
                buf.push(this.yearBefore[i]);
                buf.push('				</td>');
                buf.push('			</tr>');
            }
            buf.push('		</tbody>');
            buf.push('	</table>');
            buf.push('	<table cellspacing="0" cellpadding="3" border="0" align="center">');
            buf.push('		<tbody>');
            buf.push('			<tr>');
            buf.push('				<td class="jazz-date-yearlist-td-p"> ← </td>');
            buf.push('				<td class="jazz-date-yearlist-td-c"> × </td>');
            buf.push('				<td class="jazz-date-yearlist-td-n"> → </td>');
            buf.push('			</tr>');
            buf.push('		</tbody>');
            buf.push('	</table>');
            buf.push('</div>');
            var str = buf.join("");

            this.calendarYear.children(".jazz-date-yearlist").remove();
            this.listYear = $(str).appendTo(this.calendarYear);

            this.listYear.css({top: this.calendarYear.height() + 1});
        },

        /**
         * @desc 月份列表显示
         * @private
         */
        _monthlist: function () {
            var buf = [];
            buf.push('<div class="jazz-date-monthlist" style="display: block;">');
            buf.push('	<table cellspacing="0" cellpadding="3" border="0" align="center">');
            buf.push('		<tbody>');
            buf.push('			<tr nowrap="nowrap"><td class="jazz-date-monthlist-td" >一月</td><td class="jazz-date-monthlist-td" >七月</td></tr>');
            buf.push('			<tr nowrap="nowrap"><td class="jazz-date-monthlist-td" >二月</td><td class="jazz-date-monthlist-td" >八月</td></tr>');
            buf.push('			<tr nowrap="nowrap"><td class="jazz-date-monthlist-td" >三月</td><td class="jazz-date-monthlist-td" >九月</td></tr>');
            buf.push('			<tr nowrap="nowrap"><td class="jazz-date-monthlist-td" >四月</td><td class="jazz-date-monthlist-td" >十月</td></tr>');
            buf.push('			<tr nowrap="nowrap"><td class="jazz-date-monthlist-td" >五月</td><td class="jazz-date-monthlist-td" >十一</td></tr>');
            buf.push('			<tr nowrap="nowrap"><td class="jazz-date-monthlist-td" >六月</td><td class="jazz-date-monthlist-td" >十二</td></tr>');
            buf.push('		</tbody>');
            buf.push('	</table>');
//				buf.push('	<table cellspacing="0" cellpadding="3" border="0" align="center">');
//				buf.push('		<tbody>');
//				buf.push('			<tr>');
//				buf.push('				<td class="jazz-date-yearlist-td-p"> ← </td>');
//				buf.push('				<td class="jazz-date-yearlist-td-c"> × </td>');
//				buf.push('				<td class="jazz-date-yearlist-td-n"> → </td>');
//				buf.push('			</tr>');
//				buf.push('		</tbody>');
//				buf.push('	</table>');
            buf.push('</div>');
            var str = buf.join("");
            this.listMonth = $(str).appendTo(this.calendarMonth);
            this.listMonth.css({top: this.calendarMonth.height() + 1, right: '20px'});
        },

        /**
         * @desc 月份列表显示
         * @private
         */
        _monthTextToNumber: function (text) {
            var yue = jazz.config.i18n.months;
            for (var i = 0; i < yue.length; i++) {
                if (text == yue[i]) {
                    return (i + 1);
                }
            }
            return "";
        },

        /**
         * @desc 根据日期画日历
         * @private
         */
        _preDraw: function (date) {
            //再设置属性
            this.options.year = date.getFullYear();
            this.options.month = date.getMonth() + 1;
            //重新画日历
            this._draw();
        },

        /**
         * @desc 年列表
         * @param {year} 定位的年份
         * @private
         */
        _yearlist: function (year) {
            var _year = year ? parseInt(year) : this.options.year;
            this.yearAfter = [], this.yearBefore = [];
            for (var i = this.yearnum; i > 0; i--) {
                this.yearAfter.push(_year - i);
                this.yearBefore.push(_year + (this.yearnum - i));
            }
        },

        /**
         * @desc 将日历跳转回当前月
         * @example  $(XXX).date("currentMonth");
         */
        currentMonth: function () {
            this._preDraw(new Date());
        },

        /**
         * @desc 将日历跳转回下一月
         * @example $(XXX).date("nextMonth");
         */
        nextMonth: function () {
            this._preDraw(new Date(this.options.year, this.options.month, 1));
        },

        /**
         * @desc 将日历跳转回下一年
         * @example $(XXX).date("nextYear");
         */
        nextYear: function () {
            this._preDraw(new Date(this.options.year + 1, this.options.month - 1, 1));
        },

        /**
         * @desc 将日历跳转回上一月
         * @example  $(XXX).date("preMonth");
         */
        preMonth: function () {
            this._preDraw(new Date(this.options.year, this.options.month - 2, 1));
        },

        /**
         * @desc 将日历跳转回上一年
         * @example  $(XXX).date("preYear");
         */
        preYear: function () {
            this._preDraw(new Date(this.options.year - 1, this.options.month - 1, 1));
        }

    });
});
(function( $, factory ){
	if ( jazz.config.isUseRequireJS === true ) {
		define( ['jquery', 'jazz.BoxComponent'], factory );
	} else {
		factory($);
	}	 
})(jQuery, function($){	
	/**
	 * @version 0.5
	 * @name jazz.accordionpanel
	 * @description 
	 * @constructor
	 * @requires
	 * @example $('#div_id').accordionpanel();
	 */
    $.widget("jazz.accordionpanel", $.jazz.boxComponent,  {
       
    	options: /** @lends jazz.accordionpanel# */ {
    		
    		/**
        	 *@desc 组件类型
        	 */
        	vtype: 'accordionpanel',
        	
        	/**
			 *@type string
			 *@desc 当前活动面板的标题栏小图片
			 *@default 
			 */               
        	iconurl: "",
        	
        	/**
			 *@type string
			 *@desc 选中当前活动面板标题栏小图片
			 *@default 
			 */               
        	iconselect: "",
        	
			/**
			 *@type boolean
			 *@desc 否显示容器的边框
			 *@default true
			 */               
            showborder: true,
        	
        	 /**
			 *@type Number
			 *@desc 当前活动的accordionpanel页
			 *@default 0
			 */
             activeindex: 0,
             
             /**
  			 *@type Boolean
  			 *@desc 是否多个accordionpanel页展开
  			 *@default false
  			 */
             multiple: false,
             
     		/**
 			 *@desc 点击标题栏时触发
 			 *@param {event} 事件
 			 *@event
 			 *@example
 			 *<br/>$("XXX").textfield("option", "click", function(event){  <br/>} <br/>});
 			 *或:
 			 *<br/>$("XXX").on("textfieldclick",function(event, ui){  <br/>} <br/>});
 			 *或：
 			 *function XXX(){……}
 			 *<div…… click="XXX()"></div> 或 <div…… click="XXX"></div>
 			 */			
 			click: null
             
        },
        
        /** @lends jazz.accordionpanel */
        
        /**
         * @desc 创建组件
		 * @private
         */
        _create: function() {
        	this._super(); 
        	
        	this._showborder();
        	
        	if(this.options.multiple) {
            	var index = this.options.activeindex;
                this.options.activeindex = [];
                this._addToSelection(index);
            }
        
            this.element.addClass('jazz-accordion jazz-helper-reset');
            
            //加载内容区域
            var $this = this;
            this.childrens = this.element.children();
            $.each(this.childrens, function(i,child){
            	$(child).addClass('jazz-accordion-content jazz-helper-reset jazz-widget-content');
            	var childname = $(child).attr("name");
            	var childid = $(child).attr("id");
            	if(!childname){
            		$(child).attr("name", $this.getCompId()+"_content"+i);
            	}
            	if(!childid){
            		$(child).attr("id", $this.getCompId()+"_content"+i);
            	}

                var headerClass = (i == $this.options.activeindex) ? 'jazz-accordion-headericon-active' : 'jazz-accordion-headericon-unactive';
            	var headericon = $("<div class='"+headerClass+"'></div>");
            	var headertext = $("<div class='jazz-accordion-headertext'></div>");
            	
            	var iconurl = $(child).attr('iconurl');
            		
            	if(iconurl){
            		headertext.append('<span style="background:url('+iconurl+') 50% 50% no-repeat;" class="jazz-accordion-header-icon jazz-icon">p</span>');
            	}else{
            		headertext.css('padding-left', '5px');
            	}
            	headertext.append("<span title='"+$(child).attr("title")+"' class='jazz-accordion-header-text'>" 
            		+ $(child).attr("title")+"</span>");
            	
            	var header = $("<div class='jazz-accordion-header jazz-helper-reset jazz-state-default'></div>");
            	if(!childname){
            		header.attr("name",$this.getCompId()+"_header"+i);
            	}else{
            		header.attr("name",childname);
            	}
            	if(!childid){
            		header.attr("id",$this.getCompId()+"_header"+i);
            	}else{
            		header.attr("id",childid);
            	}
            	if($this.options.activeindex == i) { 
            		header.addClass('jazz-state-active');
            		iconurl = $(child).attr('iconselect');
                	if(iconurl){
                		headertext.find('.jazz-accordion-header-icon')
                			.css('background-image', "url("+iconurl+")");
                	}
                }else{
                	$(child).addClass('jazz-helper-hidden');
                }
            	header.append(headertext).append(headericon);
            	$(child).before(header);
            });
        },
        
        /**
         * @desc  绑定事件
         * @private
         */
        _init:function(){
        	
        	 //设置容器的大小
            this._compSize();
        	
        	this.headers = this.element.children('.jazz-accordion-header');
            this.panels = this.element.children('.jazz-accordion-content');
            this._bindEvents();

            var $this = this;
            if(this.options.multiple) {
            	$.each(this.options.activeindex,function(i,index){
            		var panel = $this.panels.eq(index);
            		$this._calscroll(panel);
            	});
            }else{
            	var panel = this.panels.eq(this.options.activeindex);
                this._calscroll(panel);
            }
        },
        
        /**
         * @desc 初始化容器大小
         * @private
         */
        _compSize: function(){
        	this._width();
        	this._height();
        },
        
        /**
         * @desc 判断是否显示边框
         * @private
         */          
        _showborder: function(){
	        if (this.options.showborder) {
	        	this.element.addClass("jazz-panel-border");
			} else {
				this.element.removeClass("jazz-panel-border");
			}
        }, 
        
		/**
         * @desc 组件宽度
		 * @private
         */        
        _width: function(){
        	this._super();
        	var $this = this;
        	if(this.iscalculatewidth && !!this.headers){
        		$.each(this.headers,function(i,header){
        			$(header).outerWidth($this.options.calculateinnerwidth);
        			$(header).next($this.options.calculateinnerwidth);
        			var headertextobj = $(header).children(".jazz-accordion-headertext");
    		    	var iconurl = headertextobj.children(".jazz-accordion-header-icon");
    		    	var headerWidth = $this.options.calculateinnerwidth - headertextobj.next().outerWidth(true);
    		    	headertextobj.width(headerWidth);
    		    	//等加载完图标和文字，计算文字需要的实际宽度，防止过长溢出
    		    	var textWidth = $this.options.calculateinnerwidth
    		    		- $(header).children('.jazz-accordion-headericon-active').outerWidth(true)
    		    		- $(header).children('.jazz-accordion-headericon-unactive').outerWidth(true);
    		    	
    		    	if(iconurl){
    		    		textWidth = headerWidth - headertextobj.children('.jazz-accordion-header-icon').outerWidth(true);
    		    	}
    		    	headertextobj.children('.jazz-accordion-header-text').outerWidth(textWidth);
            	});
        	}else{
        		$.each(this.childrens, function(i, child){
        			var childobj = $(child);
        			childobj.outerWidth($this.options.calculateinnerwidth);
        			childobj.prev($this.options.calculateinnerwidth);
        			var headerobj = childobj.prev();
        			var headertextobj = headerobj.children(".jazz-accordion-headertext");
    		    	var iconurl = childobj.attr('iconurl');
    		    	var headerWidth = $this.options.calculateinnerwidth - headertextobj.next().outerWidth(true);
    		    	if(headertextobj.children('.jazz-accordion-header-icon')){
    		    		headerWidth = headerWidth - 5;
    		    	}
    		    	headertextobj.width(headerWidth);
    		    	//等加载完图标和文字，计算文字需要的实际宽度，防止过长溢出
    		    	var textWidth = $this.options.calculateinnerwidth
    		    		- headerobj.children('.jazz-accordion-headericon-active').outerWidth(true)
    		    		- headerobj.children('.jazz-accordion-headericon-unactive').outerWidth(true);
    		    	
    		    	if(iconurl){
    		    		textWidth = headerWidth - headertextobj.children('.jazz-accordion-header-icon').outerWidth(true);
    		    	}
    		    	
    		    	headertextobj.children('.jazz-accordion-header-text').outerWidth(textWidth);
    		    	headertextobj.append("<div style='clear: both;'></div>");
    		    });
        	}
        },
        
        /**
         * @desc 组件高度
         * @private
         */        
        _height: function(){
        	this._super(); 
        	if(this.iscalculateheight && !!this.panels){
        		var panel = this.panels.eq(this.options.activeindex);
                this._calscroll(panel);
        	}
        },
        
        /**
         * @desc 绑定事件
         * @private
		 * @example this._bindEvents();
         */
        _bindEvents: function() {
            var $this = this;

            this.headers.off('click.accordion')
            /*.on('mouseover.accordion', function() {
                var element = $(this);
                if(!element.hasClass('jazz-state-disabled')) {
                    element.addClass('jazz-state-hover');
                }
            }).on('mouseout.accordion', function() {
                var element = $(this);
                if(!element.hasClass('jazz-state-disabled')) {
                    element.removeClass('jazz-state-hover');
                }
            })*/.on('click.accordion', function(e) {
                var element = $(this);
                if(!element.hasClass('jazz-state-disabled')) {
                    var tabIndex = element.index() / 2;
                    $this.options.activeLastIndex = tabIndex;
                    if(element.hasClass('jazz-state-active')) {
                        $this.unselect(tabIndex);
                    }
                    else {
                        $this.select(tabIndex);
                    }
                }

                e.preventDefault();
            });
            /**针对IE6绑定hover事件**/
            if(jazz.isIE(6)){
            	this.headers
	                .hover(function() {
	                    var element = $(this);
	                    if(!element.hasClass('jazz-state-disabled')) {
	                        element.addClass('jazz-state-hover');
	                    }
	                }, function() {
	                    var element = $(this);
	                    if(!element.hasClass('jazz-state-disabled')) {
	                        element.removeClass('jazz-state-hover');
	                    }
	                });
            }
        },

        /**
         * @desc accordionpanel显示方法
         * @private
         * @param {panel} accordionpanel页面对象 
		 * @example this._show('panel');
         */
        _show: function(panel) {
        	var iconurl;
            if(!this.options.multiple) {
                var oldHeader = this.headers.filter('.jazz-state-active');
                //oldHeader.removeClass('jazz-state-active').next().slideUp();
                oldHeader.removeClass('jazz-state-active').next().hide();
                oldHeader.children(".jazz-accordion-headericon-active").removeClass("jazz-accordion-headericon-active")
                .addClass("jazz-accordion-headericon-unactive");
            	oldHeader.each(function(i, header){
            		iconurl = $(header).next().attr('iconurl');
            		$(header).find('.jazz-accordion-header-icon')
        				.css('background-image', "url("+iconurl+")");
            	});
            }
            //activate selected
            var newHeader = panel.prev();
            newHeader.addClass('jazz-state-active').children(".jazz-accordion-headericon-unactive")
            	     .removeClass("jazz-accordion-headericon-unactive")
            		 .addClass("jazz-accordion-headericon-active");
            iconurl = panel.attr('iconselect');
        	if(iconurl){
        		newHeader.find('.jazz-accordion-header-icon')
        			.css('background-image', "url("+iconurl+")");
        	}
            
            //panel.slideDown('fast');
        	panel.show();
        },

        /**
         * @desc accordionpanel添加活动的页面方法
         * @private
         * @param {nodeId} accordionpanel页码数从0开始第1个accordionpanel  
		 * @example this._addToSelection('nodeId');
         */
        _addToSelection: function(nodeId) {
            this.options.activeindex.push(nodeId);
        },

        /**
         * @desc accordionpanel移除活动的页面方法
         * @private
         * @param {index} accordionpanel页码数从0开始第1个accordionpanel  
		 * @example this._removeFromSelection('index');
         */
        _removeFromSelection: function(index) {
            this.options.activeindex = $.grep(this.options.activeindex, function(r) {
                return r != index;
            });
        },
        
        /**
         * @desc accordionpanel页选择方法
		 * @param {index} accordionpanel页码数从0开始第1个accordionpanel 
		 * @example $('#div_id').accordionpanel('select','index');
         */
        select: function(index) {
        	var panel = this.panels.eq(index);        	
        	this._calscroll(panel);

            this._event('click', null, {state: 1, index: index});
            
            //update state
            if(this.options.multiple){
            	this.options.activeindex = [];
                this._addToSelection(index);
            }else{
            	this.options.activeindex = index;
            }
            
            $.each(panel.parents("div[vtype]:first").getChildrenComponent(), function(){
    			var element = $(this);
				var vtype = element.attr("vtype");
				element.data(vtype)._resizeHeight();
    		});
            
            this._show(panel);
        },

        /**
         * @desc accordionpanel页不选择方法
 		 * @param {index} accordionpanel页码数从0开始第1个accordionpanel 
 		 * @example $('#div_id').accordionpanel('unselect','index');
         */
        unselect: function(index) {
            var panel = this.panels.eq(index),
            header = panel.prev();

            this._event('click', null, {state: 0, index: index});
            
            header.removeClass('jazz-state-active')
            	.children(".jazz-accordion-headericon-active")
            	.removeClass("jazz-accordion-headericon-active")
            	.addClass("jazz-accordion-headericon-unactive");
            var iconurl = panel.attr('iconurl');
            header.find('.jazz-accordion-header-icon')
				.css('background-image', "url("+iconurl+")");
            
            panel.slideUp();

            this._removeFromSelection(index);
        },
        
        /**
         * @desc 计算滚动条  
	  	 * @private
	  	 * @param {panel} 当前活动页的内容区 
	  	 * @example this._calscroll(panel);
         */
        _calscroll: function(panel) {
        	var $this = this;
        	var allheight = this.options.calculateinnerheight , otherheight = 0;
        	if(this.options.multiple) {
        		this.element.css({"overflow":"auto"});
        	    var nScrollHight = this.element[0].scrollHeight; //滚动距离总长(注意不是滚动条的长度)
        	    var nScrollTop =this.element[0].scrollTop; //滚动到的当前位置
        	    if(nScrollTop + allheight >= nScrollHight){
            		$.each(this.headers,function(i,header){
            			var headertextobj = $(header).children(".jazz-accordion-headertext");
        		    	var iconurl = headertextobj.children(".jazz-accordion-header-icon");
        		    	var headerWidth = $this.options.calculateinnerwidth - headertextobj.next().outerWidth(true) - jazz.config.scrollWidth;
        		    	if(headertextobj.children('.jazz-accordion-header-icon')){
        		    		headerWidth = headerWidth - 5;
        		    	}
        		    	headertextobj.width(headerWidth);
        		    	//等加载完图标和文字，计算文字需要的实际宽度，防止过长溢出
        		    	var textWidth = $this.options.calculateinnerwidth
        		    		- $(header).children('.jazz-accordion-headericon-active').outerWidth()
        		    		- $(header).children('.jazz-accordion-headericon-unactive').outerWidth();
        		    	
        		    	if(iconurl){
        		    		textWidth = headerWidth - headertextobj.children('.jazz-accordion-header-icon').outerWidth();
        		    	}
        		    	headertextobj.children('.jazz-accordion-header-text').outerWidth(textWidth);
                	});
        	    }
        	}else{
        		if(allheight != -1){
        			$.each(this.headers,function(i,head){
                    	otherheight = otherheight + $(head).outerHeight(true);
                    });
                	var panelheight = allheight-otherheight;
                    panel.outerHeight(panelheight).css({"overflow":"auto"});
        		}
        	}
        },
        
        /**
         * @desc 销毁组件  
         * @throws
	  	   * @private
	  	   * @example this._destroy();
         */
        _destroy: function() {
            
        }
        
    });

});
(function($, factory) {

    if (jazz.config.isUseRequireJS === true) {
        define(['jquery', 'jazz.BoxComponent'], factory);
    } else {
        factory($);
    }
})(jQuery, function($) {
    /**
     * @version 1.0
     * @name jazz.button
     * @description 按钮组件。
     * @constructor
     * @extends jazz.boxComponent
     */
    $.widget("jazz.button", $.jazz.boxComponent, {

        options: /** @lends jazz.button# */ {
            /**
             *@desc 组件类型
             */
            vtype: 'button',
            /**
             *@type String
             *@desc button组件元素name标识
             *（建议使用非中文字符命名，考虑增加正则校验，以便css选择器使用）
             *@default null
             */
            name: null,
            /**
             *@type String
             *@desc button组件元素名称显示值
             *@default null
             */
            text: null,
            /**
             *@type String
             *@desc 鼠标停留button时显示的按钮说明
             *@default null
             */
            title: null,
            /**
             * @type number
             * @desc button宽度设置
             * @default auto
             */
            width: null,
            /**
             * @type number
             * @desc button高度设置
             * @default 23px
             */
            height: null,
            /**
             *@type String
             *@desc 按钮在toolbar组件上显示的位置 "left" 居左  "center" 居中  "right" 居右   
             *      注意该属性是针对button在toolbar组件中的位置使用的，button在其他组件中该属性不起作用。
             *@default 'left'
             */
            align: 'left',
            /**
             *@type Object
             *@desc button按钮图标显示位置（top/bottom/left/right）
             *@default left
             */
            iconalign: 'left',
            /**
             *@type boolean
             *@desc button组件是否为分离按钮splitButton（即带下拉箭头按钮），默认为false
             *@default false
             */
            issplitbutton: false,
            /**
             *@type String
             *@desc button组件中下拉箭头显示位置（top/bottom/left/right），默认值right。该属性配合issplitbutton=true使用
             *@default left
             */
            arrowalign: 'right',
            /**
             *@type Number
             *@desc button组件显示内容视图类型（0只有图标 1只有文字 2图标加文字）
             *@default 2
             */
            defaultview: 2,
            /**
             *@type String
             *@desc button按钮图标url路径，做为按钮的默认图片
             *@default null
             */
            iconurl: null,
            /**
             *@type String
             *@desc button按钮切换图标url路径，配合iconurl使用当鼠标按下时切换默认图标显示
             *@default null
             */
            toggleiconurl: null,
            /**
             *@type boolean
             *@desc toolbar组件是否可用状态，默认为false
             *@default false
             */
            disabled: false,
            /**
             *@type String
             *@desc button按钮划分所属共同组的名称
             *@default null
             */
            group: null,
            /**
             *@type String
             *@desc button按钮在共同组group中的click选中类型（ckeck复选,radio单选），该属性结合group使用
             *@default null
             */
            checktype: null,
            /**
             *@type boolean
             *@desc button组件是否延迟执行click事件，默认为false
             *      （该属性delay=true时，据延迟时间延迟click回调，解决表单短时多次点击重复提交问题）
             *@default false
             */
            delay: false,
            /**
             *@type Number
             *@desc button组件延迟执行click事件延时时间，默认为150ms
             *@default 150
             */
            delaytime: 150,
            /**
             *@type String
             *@desc button为复合下拉菜单的按钮组件时，下拉菜单menu显示方式，hover（鼠标滑过）/click（鼠标单击），
             *      该属性为显示下拉菜单menu使用。
             *@default 'hover'
             */
            showmenuevent: 'hover',
            /**
             *@type Object
             *@desc button组件元素下拉menu数据项数组，数据格式参考jazz.menu菜单组件数据格式
             *@default null
             */
            items: null,
            /**
             *@desc button组件click回调事件，实际为按钮mouseup时响应此回调
             *@param {event} 事件
             *@param {data} 数据 
             *@event click
             *@default null
             */
            click: null,
            /**
             *@desc button组件是否显示圆角，默认显示圆角
             *@type boolean
             *@default true
             */
            isfillet: true
                /**
                 *@desc button组件href指定，与click函数互斥
                 *（建议使用click函数实现相应其功能）
                 *（暂未提供该功能）
                 *@default null
                 */
                /*href:null*/
        },

        /** @lends jazz.button */
        /**
         * @desc 创建组件
         * @private
         */
        _create: function() {
            this._super();
            //1.创建button按钮准备
            //1.1 获取当前页面请求地址，计算button默认图片地址
            this._getButtonDefaultUrl();
            //1.2 在button创建前，保存原html,以待button组件销毁后重新创建使用，需要考虑组件销毁destroy方法，保留原html
            this.originHtml = this.element[0].outerHTML;
            var title = this.options.title || "";
            //1.3 考虑href，并考虑href与click事件的冲突
            this.element.addClass("button-main").wrap('<a class="jazz-button" href="javascript:;" title="' + title + '"></a>');
            //1.4 写入group属性，统一管理共同组按钮使用。
            var group = typeof this.options.group == "string" ? this.options.group : "";
            this.element.attr("group", group);
            this.container = this.element.parents('a:first');

            //2.create 按钮的外部包装部分
            //为了初始化table的hover事件缓存对象
            tempTable = this._createButtonOutterDom();
            this.container.append(tempTable);
            this.element.appendTo(this.container.find(".button-main-td"));
            //3.create 按钮的主体部分
            var main = this._createButtonInnerDom();
            this.element.append(main).attr("name", this.options.name || "");
            //4.处理按钮是否disabled样式
            if (this.options.disabled == true || this.options.disabled == "true") {
                this.options.disabled = true;
                this.container.addClass('jazz-state-disabled');
            } else {
                this.options.disabled = false;
            }
        },
        /**
         * @desc 初始化组件
         * @private
         */
        _init: function() {
            this._super();

            //1.button据options.width/height初始化时设置button宽度和高度，
            //2015-9-1，zys,制作自适应的高度宽度的button所以去掉设置的代码
            this._setButtonWidth();
            this._setButtonHeight();

            //2.绑定main按钮事件
            this._bindButtonEvents();

            //3.处理下拉菜单的情况
            if (this.options.items) {
                //items获取两种方式
                //一是直接为数组格式[{}]
                var items = eval(this.options.items);
//                if (!items) {
//                    var createitems = this.options.createitems;
//                    if (createitems) {
//                        items = this._customopration(this.options.createitems);
//                    }
//                }
                this.options.items = items || [];
                this._bindButtonMenuEvent();
            }
        },
        /**
         * @desc 通过正则获取插入body中元素的背景图url路径，得到当前页面的默认主目录路径，以此找到默认图标路径。
         * @private
         */
        _getButtonDefaultUrl: function() {
            try {
                var obj = $('<div id="div-img-src"  class="jazz-button-img-src"></div>').appendTo(document.body);
                var str = obj.css("background-image");
                //url("http://localhost:8082/JAZZ/lib/themes/default/images/tool-sprites-dark.png")
                var start = str.indexOf('(');
                var end = str.lastIndexOf('tool-sprites-dark.png');
                this.defaulturl = str.substring(start + 1, end).replace('"', "");
                obj.remove();
            } catch (e) {
                jazz.log(e);
            }
        },
        /**
         * @desc create 按钮this.element的外部包装部分（主要处理按钮下拉箭头时的排列为止）
         * @private
         */
        _createButtonOutterDom: function() {
            //1.确定下拉箭头arrow
            //如果issplitbutton=true，则显示下拉箭头，将items生成的menu绑定到下拉箭头上
            //若issplitbutton==false，则不显示下拉箭头，将items生成的menu绑定到element上
            var arrowclass = this.options.arrowalign ? "arrow-align-" + this.options.arrowalign : "arrow-align-right";
            var arrow = '<div class="button-arrow" style="display:none;margin:0px;"><img alt="" src="" /></div>';
            if (this.options.issplitbutton) {
                //arrow = '<div class="button-arrow '+arrowclass+'"><img alt="" src="../../../themes/default/button/images/jazz-button-arrow-down.png" /></div>'
                //arrow = '<div class="button-arrow '+arrowclass+'"><img alt="" src="'+this.defaulturl+'jazz-button-arrow-down.png" /></div>';
                arrow = '<div class="button-arrow ' + arrowclass + '"><img alt="" src="' + this.defaulturl + 'jazz-button-arrow-down.png"/></div>';
//              if (this.options.showmenuevent == "hover") {
//                  arrow = '<div class="button-arrow ' + arrowclass + '" style="width:13px;height:8px;"><img alt="" src="' + this.defaulturl + 'jazz-button-arrow-down.png" /></div>';
//                  this.container.css("margin", "0px");
//              }
            }
            //2.拼接放着main和arrow的tr和td
            //table的td个数有2个，不管是否有下拉箭头都生成相应存放的td
            //但是table的行数是由arrow的上下top/bottom布局决定的1
            var table = [];
            table.push('<table cellspacing="0" cellpadding="0" border="0" style="border-collapse:collapse;"><thead>');
            var isFillet = this.options.isfillet ? "-fillet" : "";
            if (this.options.arrowalign == "top") {
                table.push('<tr><td class="button-top-left');
                table.push(isFillet);
                table.push('-corner button-corner"></td><td class="button-top button-border button-background"></td><td class="button-top-right');
                table.push(isFillet);
                table.push('-corner button-corner"></td></tr></thead><tbody><tr class="button-background"><td class="button-left button-border"></td><td class="button-arrow-td">');
                table.push(arrow);
                table.push('</td><td class="button-right button-border"></td></tr>');
                table.push('<tr class="button-background"><td class="button-left button-border"></td><td class="button-main-td"></td><td class="button-right button-border"></td></tr>');
                table.push('</tbody><tfoot><tr><td class="button-bottom-left');
                table.push(isFillet);
                table.push('-corner button-corner"></td><td class="button-bottom button-border button-background"></td><td class="button-bottom-right');
                table.push(isFillet);
                table.push('-corner button-corner"></td></tr>');
            } else if (this.options.arrowalign == "bottom") {
                table.push('<tr><td class="button-top-left');
                table.push(isFillet);
                table.push('-corner button-corner"></td><td class="button-top button-background button-border"></td><td class="button-top-right');
                table.push(isFillet);
                table.push('-corner button-corner"></td></tr></thead><tbody>');
                table.push('<tr class="button-background"><td class="button-left button-border"></td><td class="button-main-td"></td><td class="button-right button-border"></td></tr>');
                table.push('<tr class="button-background"><td class="button-left button-border"></td><td class="button-arrow-td">');
                table.push(arrow);
                table.push('</td><td class="button-right button-border"></td></tr>');
                table.push('</tbody><tfoot><tr><td class="button-bottom-left');
                table.push(isFillet);
                table.push('-corner button-corner"></td><td class="button-bottom button-background button-border"></td><td class="button-bottom-right');
                table.push(isFillet);
                table.push('-corner button-corner"></td></tr>');
            } else if (this.options.arrowalign == "left") {
                table.push('<tr><td class="button-top-left');
                table.push(isFillet);
                table.push('-corner button-corner"></td><td colspan="2" class="button-top button-background button-border"></td><td class="button-top-right');
                table.push(isFillet);
                table.push('-corner button-corner"></td></tr></thead><tbody>');
                table.push('<tr class="button-background"><td class="button-left button-border"></td><td class="button-arrow-td">');
                table.push(arrow);
                table.push('</td><td class="button-main-td"></td><td class="button-right button-border"></td></tr>');
                table.push('</tbody><tfoot><tr><td class="button-bottom-left');
                table.push(isFillet);
                table.push('-corner button-corner"></td><td colspan="2" class="button-bottom button-background button-border"></td><td class="button-bottom-right');
                table.push(isFillet);
                table.push('-corner button-corner"></td></tr>)');
            } else {
                table.push('<tr><td class="button-top-left');
                table.push(isFillet);
                table.push('-corner button-corner"></td><td colspan="2" class="button-top button-background button-border"></td><td class="button-top-right');
                table.push(isFillet);
                table.push('-corner button-corner"></td></tr></thead><tbody>');
                table.push('<tr class="button-background"><td class="button-left button-border"></td><td class="button-main-td"></td><td class="button-arrow-td">');
                table.push(arrow);
                table.push('</td><td class="button-right button-border"></td></tr>');
                table.push('</tbody><tfoot><tr><td class="button-bottom-left');
                table.push(isFillet);
                table.push('-corner button-corner"></td><td colspan="2" class="button-bottom button-background button-border"></td><td class="button-bottom-right');
                table.push(isFillet);
                table.push('-corner button-corner"></td></tr>');
            }
            table.push('</tfoot></table>');
            return table.join("");
        },
        /**
         * @desc create 按钮this.element的主体部分（主要处理按钮图标和文字排列位置）
         * @private
         */
        _createButtonInnerDom: function() {
            //create 按钮的主体部分
            //该部分既是创建按钮图片上下左右放置的div Dom结构
            var text = this.options.text || "";
            var src = this.options.iconurl || "";
            var defaultview = this.options.defaultview;
            var textviewclass = "";
            //根据defaultview决定button组件显示的内容
            if (defaultview == 0 || defaultview == "0") { //0只显示图标
                text = "";
                textviewclass = "button-text-hide";
                //src = src || "../../../themes/default/button/images/button-default-dark.png";
                src = src || this.defaulturl + "button-default-dark.png";
            } else if (defaultview == 1 || defaultview == "1") { //1只显示文字
                text = text || "jazz-button";
                textviewclass = "button-text-only";
                src = "";
            } else { //2图标加文字
                text = text || "jazz-button";
                //src = src || "../../../themes/default/button/images/button-default-dark.png";
                src = src || this.defaulturl + "button-default-dark.png";
            }

            var textdiv = '<div class="button-text ' + textviewclass + '">' + text + '</div>';
            var hiddenImgClass = src ? "" : "button-image-hide";
            var img = '<img alt="" src="' + src + '" />';

            var main = "";
            if (this.options.iconalign == "top") {
                main = '<div class="button-main-top ' + hiddenImgClass + '">' + img + '</div>' + textdiv;
            } else if (this.options.iconalign == "bottom") {
                main = textdiv + '<div class="button-main-bottom ' + hiddenImgClass + '">' + img + '</div>';
            } else if (this.options.iconalign == "right") {
                textdiv = '<div class="button-text text-align-left ' + textviewclass + '">' + text + '</div>';
                main = textdiv + '<div class="button-main-right ' + hiddenImgClass + '">' + img + '</div>';
            } else {
                textdiv = '<div class="button-text text-align-right ' + textviewclass + '">' + text + '</div>';
                main = '<div class="button-main-left ' + hiddenImgClass + '">' + img + '</div>' + textdiv;
            }
            return main;
        },

        /**
         * @desc button组件绑定响应事件
         * @return undefined
         * @private
         * @example  this._bindButtonEvents();
         */
        _bindButtonEvents: function() {
            var $this = this;
            //处理gridpanel中toolbar定义的button数据传递问题
            var gridpanel = this.element.parents("[vtype=gridpanel]");

            //绑定this.element事件
            //将按钮点击事件绑定到button-main-td上（具体到button-main-td上，是因为区别下拉箭头的绑定事件）
            this.mainButton = this.container.find(".button-main-td,.button-corner,.button-border");
            this.mainButton.on('mousedown.button', function(e) {
                if (e.which === 2 || e.which === 3) { //右键、滚轮
                    return false;
                }
                var checktype = $this.options.checktype;
                if (!$this.options.disabled) {
                    //1.鼠标按下down的时候无论按钮group或checktype的情况，都选中按钮
                    //即mousedown时，选中按钮状态，留待mouseup时处理按钮的显示样式
                    if (checktype == "radio" || checktype == "check") {

                    } else {
                        $this._toggleSelectedStyle("selected");
                    }
                }
            }).on('mouseup.button', function(e) {
                if (e.which === 2 || e.which === 3) {
                    return false;
                }
                //1.mouseup时消除mousedown样式
                $this._handleMouseupEvent();
                //2.mouseup时响应click回调函数
                if (!$this.options.disabled) {
                    if ($this.options.click) {
                        var data = null;
                        if (gridpanel['length']) { //将按钮组件与gridpanel组件结合，处理选中数据行数据的接口
                            data = gridpanel.gridpanel("getSelection");
                        }
                        if ($this.options.delay) {
                            $this._event("click", e, data);
                            //置灰按钮
                            $this.disable();
                            //经过delaytime之后，将按钮重新置为可用（延迟时间解决重复提交bug问题）
                            setTimeout(function() {
                                $this.enable();
                            }, $this.options.delaytime);
                        } else {
                            $this._event("click", e, data);
                        }
                    }
                }
            });
            this.container.on('contextmenu.jazz-button-contextmenu', function(e) {
                //屏蔽鼠标右键
                return false;
            }).on('click.button', function(e) {
                //对于具有下拉菜单的复合按钮，当按钮整体container被点击时，
                //若showmenuevent=="hover"则显示鼠标滑过效果

                //注意：container的click事件不影响button-main-td的绑定事件
                if ($this.option.showmenuevent == "hover") {
                    $(this).trigger("mouseenter.menuButton");
                }
            });
        },
        /**
         * @desc mouseup时消除mousedown样式
         * @private
         */
        _handleMouseupEvent: function() {
            var $this = this;
            var disabled = $this.options.disabled;
            if (!disabled) {
                //1.鼠标按下down和弹起up的时候首先要根据按钮的checktype类型决定按钮状态的改变
                //a.checktype为null的普通按钮，只是按下显示pressed状态，弹起时候去掉显示的pressed状态，而不对其他按钮状态进行区别改变
                //b.checktype=radio，mousedown不做选中或不选中操作，mouseup的时候做选中状态，并且要对其他同组或者不同组的按钮进行状态上的修改
                //c.checktype=check，mousedown不做选中或不选中操作，mouseup的时候做相反的操作，但是不影响同组或不同组的其他按钮状态
                var group = $this.options.group;
                var checktype = $this.options.checktype;
                var toggleiconurl = $this.options.toggleiconurl;
                var iconurl = $this.options.iconurl;
                var defaultview = this.options.defaultview;

                if (checktype == "radio" || checktype == "check") {
                    if (checktype == "radio") {
                        //a.选中当前按钮
                        $this._toggleSelectedStyle("selected");
                        if (group) {
                            //b.将该组其他按钮（无论checktype什么类型）的选中状态都去掉
                            $('[group="' + group + '"]').each(function(i, domEle) {
                                if ($this.element[0] != this) {
                                    var obj = $(this).data("button");
                                    if (obj) {
                                        dv = obj.options.defaultview;
                                        if (parseInt(dv) == 2 || parseInt(dv) == 0) {
                                            if (obj.options.toggleiconurl) {
                                                obj.element.find("img").attr("src", obj.options.iconurl);
                                            }
                                        }
                                        obj.container.removeClass("jazz-button-pressed");
                                    }
                                }
                            });
                        } else {
                            //若未分组，对其他按钮不进行选中状态处理
                        }
                    } else if (checktype == "check") {
                        //mouseup的时候做相反的操作，但是不影响同组或不同组的其他按钮状态
                        if ($this.container.hasClass("jazz-button-pressed")) {
                            $this._toggleSelectedStyle("unselected");
                        } else {
                            $this._toggleSelectedStyle("selected");
                        }
                    }
                } else {
                    $this._toggleSelectedStyle("unselected");
                }
            }
        },
        
        /**
         * @desc 根据参数值切换默认图标和鼠标按下样式
         * @paras "selected"/"unselected"
         * @private
         */
        _toggleSelectedStyle: function(style) {
            var $this = this;
            var toggleiconurl = $this.options.toggleiconurl;
            var iconurl = $this.options.iconurl;
            var defaultview = this.options.defaultview;
            if (style == "selected") {
                if (parseInt(defaultview) == 2 || parseInt(defaultview) == 0) {
                    if (toggleiconurl) {
                        $this.element.find("img").attr("src", toggleiconurl);
                    }
                }
                $this.container.addClass("jazz-button-pressed");
            } else if (style == "unselected") {
                if (parseInt(defaultview) == 2 || parseInt(defaultview) == 0) {
                    if (toggleiconurl) {
                        $this.element.find("img").attr("src", iconurl);
                    }
                }
                $this.container.removeClass("jazz-button-pressed");
            }
        },
        /**
         * @desc 根据showmenuevent属性绑定不同的按钮下拉事件
         * @event {mouseover}{mouseout}{mousedown}{mouseup}
         * @private
         */
        _bindButtonMenuEvent: function() {
            //showmenuevent控制打开显示下拉menu的方式
            if (this.options.showmenuevent == "click") {
                this._bindButtonMenuClickEvent();
            } else {
                this._bindButtonMenuHoverEvent();
            }
            var $this = this;
            this.container.on('mouseleave.menuButton', function(e) {
                if (!$this.options.disabled) {
                    var cthis = $(this);
                    var menu = cthis.data("contextmenu");
                    if(menu){
	                    menu.timer = setTimeout(function(){
	                    	menu.hideMenu();
	                    	cthis.removeClass("jazz-button-pressed");
	    				}, 100);
                    }
                }
            });
        },
        /**
         * @desc 鼠标滑过按钮方式打开下拉菜单menu处理
         * @event{mouseenter}{mouseleave}
         * @private
         */
        _bindButtonMenuHoverEvent: function() {
            if (this.options.items.length == 0) {
                return;
            }
            var that = this;
            //延时鼠标移入移出事件
            var disabled = that.options.disabled;
            this.container.off('.menuButton').on('mouseenter.menuButton', function(e) {
                disabled = that.options.disabled;
                if (!disabled) {
                	var cthis = $(this);
                    //that._toggleSelectedStyle("selected");
                    //cthis.find(".button-arrow-td img").show();
                    cthis.addClass("jazz-button-pressed");
                    
                    var menu = cthis.data("contextmenu");
                    if(!menu){
	                    cthis.contextmenu({
	                    	event: "mouseenter",
	                    	target: cthis,
	                    	items: that.options.items
	                    	,container: cthis
	                    });
	                    menu = cthis.data("contextmenu");
                    }
                    
        			if (menu.timer){
        				clearTimeout(menu.timer);
        				menu.timer = null;
        			}
                    
                    menu.showMenu();
                }
            });
        },
        /**
         * @desc 根据items和issplitbutton属性绑定按钮下拉事件
         * @event{mousedown}{mouseup}
         * @private
         */
        _bindButtonMenuClickEvent: function() {
            if (this.options.items.length == 0) {
                return;
            }
            var that = this;
            var issplitbutton = that.options.issplitbutton;
            if (issplitbutton) {
                this.menuButton = this.container.find(".button-arrow-td");
            } else {
                //this.menuButton = this.element;
                this.menuButton = this.container.find(".button-main-td");
                that.menuButton.off('mousedown.button').off('mouseup.button');
            }

            this.menuButton.off('.menuButton').on('mousedown.menuButton', function(e) {
                if (e.which === 2 || e.which === 3) {
                    return false;
                }
                var disabled = that.options.disabled;
                var checktype = that.options.checktype;
                if (!disabled) {
                    //1.鼠标按下down的时候无论按钮group或checktype的情况，都选中按钮
                    //即，mousedown时，选中按钮状态
                    if (checktype == "radio" || checktype == "check") {
                    	
                    } else {
                        that._toggleSelectedStyle("selected");
                    }

                    var container = that.container;
                    var menu = container.data("contextmenu");
                    if(!menu){
                    	container.contextmenu({
	                    	event: "mouseenter",
	                    	target: container,
	                    	items: that.options.items
	                    	,container: container
	                    });
	                    menu = container.data("contextmenu");
                    }
                    
        			if (menu.timer){
        				clearTimeout(menu.timer);
        				menu.timer = null;
        			}
                    
                    menu.showMenu();
                }
                e.preventDefault();
                e.stopPropagation();
            }).on('mouseup.menuButton', function(e) {
                if (e.which === 2 || e.which === 3) {
                    return false;
                }
                var disabled = that.options.disabled;
                if (!disabled) {
                    that._handleMouseupEvent();
                }
            });
        },
//        /**
//         * @desc document.body mousedown事件控制menubutton显示与隐藏
//         * @private
//         */
//        _bindDocumentClickEvents: function() {
//            var $this = this;
//            $(document.body).bind('mousedown.buttonmenu', function(e) {
//                if ($this.menu.is(":hidden")) {
//                    return;
//                }
//                var target = $(e.target);
//                if (target.is($this.element)) {
//                    $this.menu.hide();
//                    return;
//                }
//                if (target.is($this.menuButton) || target.is($this.menu) || $this.menu.has(target).length > 0) {
//                    return;
//                }
//
//                var offset = $this.container.offset();
//                if (e.pageX < offset.left ||
//                    e.pageX > offset.left + $this.container.width() ||
//                    e.pageY < offset.top ||
//                    e.pageY > offset.top + $this.container.height()) {
//
//                    $this.menu.hide();
//                }
//            });
//        },
        /**
         * @desc 覆盖组件响应resize事件时，重新计算组件宽度的方法
         *      即按钮组件不予响应resize大小调整
         */
        _width: function() {

        },
        /**
         * @desc 覆盖组件响应resize事件时，重新计算组件高度的方法
         *      即按钮组件不予响应resize大小调整
         */
        _height: function() {

        },
        /**
         * @desc 设置button宽度，不予百分比设置（因为按钮无明确参照父对象）
         * @private
         */
        _setButtonWidth: function() {
            //按钮若是给定this.options.width 固定宽度，
            //则需要计算实际分配给this.element的宽度，
            //即为realwidth = this.options.width - this.container的边框边距 - (若是有.button-arrow-td下拉箭头的宽度）
            if (!this.options.width || /^\d+(\.\d+)?%$/.test(this.options.width)) {
                return;
            }
            var settingWidth = parseInt(this.options.width) || 0;
            var realWidth = 0,
                containerMargin = $(".button-corner", this.container).width(), //this.container.outerWidth(true)-this.container.width();
                arrowWidth = 0,
                issplitbutton = this.options.issplitbutton,
                arrowalign = this.options.arrowalign;
            if (settingWidth > 0) {
                if (issplitbutton && (arrowalign == "left" || arrowalign == "right")) {
                    arrowWidth = this.container.find("td.button-arrow-td").width();
                }
                var elmarginWidth = this.element.outerWidth(true) - this.element.outerWidth();
                realWidth = settingWidth - (containerMargin * 2) - arrowWidth - elmarginWidth; //圆角有两个
                if (realWidth > 0) {
                    this.element.width(realWidth);
                }
            }
        },
        /**
         * @desc 设置button高度，不予百分比设置（因为按钮无明确参照父对象）
         * @private
         */
        _setButtonHeight: function() {
            if (!this.options.height || /^\d+(\.\d+)?%$/.test(this.options.height)) {
                return;
            }
            var settingHeight = parseInt(this.options.height) || 0;
            var realHeight = 0,
                containerMargin = $(".button-corner", this.container).height(), //this.container.outerHeight(true)-this.container.height();
                arrowHeight = 0,
                issplitbutton = this.options.issplitbutton,
                arrowalign = this.options.arrowalign,
                el = this.container.find("td.button-main-td");
            if (settingHeight > 0) {
                if (issplitbutton && (arrowalign == "top" || arrowalign == "bottom")) {
                    arrowHeight = this.container.find("td.button-arrow-td").height();
                }
                var elmarginHeight = el.outerHeight(true) - el.outerHeight();
                realHeight = settingHeight - (containerMargin * 2) - arrowHeight - elmarginHeight; //圆角有两个
                if (realHeight > 0) {
                    //this.element.height(realHeight);
                    //this.element.css({"line-height":realHeight+"px"});
                    el.height(realHeight);
                    if (issplitbutton && (arrowalign == "left" || arrowalign == "right")) {
                        el.css({
                            "line-height": realHeight + "px"
                        });
                    }
                }
            }
        },
        /**
         * @desc 切换是否开启圆角
         * @private
         * */
        _setButtonFillet:function(value){
            value = (value == "true") ? true : value;
            value = (value == "false") ? false : value;
            
            if((typeof value != "boolean") || this.options.isfillet == value){
                return;
            }
            this.options.isfillet = value;
            if(this.options.isfillet){
                this.container.find(".button-top-left-corner")
                .removeClass("button-top-left-corner")
                .addClass("button-top-left-fillet-corner");
                
                this.container.find(".button-top-right-corner")
                .removeClass("button-top-right-corner")
                .addClass("button-top-right-fillet-corner");
                
                this.container.find(".button-bottom-left-corner")
                .removeClass("button-bottom-left-corner")
                .addClass("button-bottom-left-fillet-corner");
                
                this.container.find(".button-bottom-right-corner")
                .removeClass("button-bottom-right-corner")
                .addClass("button-bottom-right-fillet-corner");
            }else{
                this.container.find(".button-top-left-fillet-corner")
                .removeClass("button-top-left-fillet-corner")
                .addClass("button-top-left-corner");
                
                this.container.find(".button-top-right-fillet-corner")
                .removeClass("button-top-right-fillet-corner")
                .addClass("button-top-right-corner");
                
                this.container.find(".button-bottom-left-fillet-corner")
                .removeClass("button-bottom-left-fillet-corner")
                .addClass("button-bottom-left-corner");
                
                this.container.find(".button-bottom-right-fillet-corner")
                .removeClass("button-bottom-right-fillet-corner")
                .addClass("button-bottom-right-corner");
                
            }
        },
        /**
         * @desc 隐藏按钮下拉菜单
         * @private
         */
        _hideMenu: function() {
            this.menu.fadeOut('slow');
            //this._event('hide', null);
        },
        /**
         * @desc 显示按钮下拉菜单
         * @private
         */
        _showMenu: function() {
            this.menu.fadeIn('slow');
            this.menu.css({
                left: '',
                top: '',
                'z-index': ++jazz.zindex
            }).position({
                my: 'left top',
                at: 'left bottom',
                of: this.container
            });
            //this._event('show', null);
        },
        /**
         * @desc 动态改变属性
         * @param {key} 对象的属性名称 
         * @param {value} 对象的属性值
         * @private
         */
        _setOption: function(key, value) {
            switch (key) {
                case 'isfillet':
                    this._setButtonFillet(value);
                    break;
                case 'width':
                    this.options.width = value;
                    this._setButtonWidth();
                    break;
                case 'height':
                    this.options.height = value;
                    this._setButtonHeight();
                    break;
                case 'disabled':
                    if (value == true || value == "true") {
                        this.options.disabled = true;
                        this.container.addClass('jazz-state-disabled');
                    } else {
                        this.options.disabled = false;
                        this.container.removeClass('jazz-state-disabled');
                    }
                    break;
                case 'text':
                	if(value){
                		var textobj = this.element.find(".button-text");
                		this.options.text = value;
                		textobj.html(value);
                	}
                	break;
                case 'iconurl':
                    if (value == "") {
                        this.element.find("img").parent().addClass("button-image-hide");
                    } else {
                        this.element.find("img").parent().removeClass("button-image-hide");
                    }
                    this.element.find("img").attr("src", value);
            }
            this._super(key, value);
        },
        /**
         * @desc 关闭button，使不可用
         * @example  $('XXX').button('disable');
         */
        disable: function() {
            this._setOption("disabled", true);
        },
        /**
         * @desc 打开button，使可用
         * @example  $('XXX').button('enable');
         */
        enable: function() {
            this._setOption("disabled", false);
        },
        /**
         * @desc 隐藏按钮
         * @public
         * @example $('XXX').button('hide');
         */
        hide: function() {
            this.container.hide();
            if (this.menu && this.menu.is(":visible")) {
                this.menu.hide();
            }
            //this.menu.fadeOut('slow');
            //this._event('hide', null);
        },
        /**
         * @desc 显示按钮
         * @public
         * @example $('XXX').button('show');
         */
        show: function() {
            this.container.show();
        },
        /**
         * @desc button组件高亮按钮选中样式
         * @public
         * @example  $('XXX').button('highlight');
         */
        highlight: function() {
            if (!this.options.disabled) {
                if (this.options.toggleiconurl) {
                    this.element.find("img").attr("src", this.options.toggleiconurl);
                }
                this.container.addClass("jazz-button-pressed");
            }
        },
        /**
         * @desc buttton组件取消高亮按钮选中样式
         * @public
         * @example  $('XXX').button('unhighlight');
         */
        unhighlight: function() {
            if (!this.options.disabled) {
                if (this.options.toggleiconurl) {
                    this.element.find("img").attr("src", this.options.iconurl);
                }
                this.container.removeClass("jazz-button-pressed");
            }
        },
        /**
         * @desc 通过api模拟button组件点击click动作
         * @public
         * @example $('xxx').button('triggerClick');
         */
        triggerClick: function() {
                this.mainButton.trigger('mousedown.button');
                this.mainButton.trigger('mouseup.button');
            }
            /**
             * @desc 组件销毁（尚需统一销毁测试）
             */
            /*destroy: function() {
//          this.tempTable = null;
            this.container.remove();
            if (this.menu) {
                this.menu.remove();
            }
            this._super();
        }*/
    });
});
(function ($, factory) {

    if (jazz.config.isUseRequireJS === true) {
        define(['jquery', 'jazz.BoxComponent', 'form/jazz.form.ComboxField'], factory);
    } else {
        factory($);
    }
})(jQuery, function ($) {

    /**
     * 分页条模板元素
     * 首页、下一页、上一页、末页、刷新按钮等
     * 定义dom样式和事件
     * markup html代码，定义dom结构
     * create 生成当前元素地方法
     * update 当分页条翻页或更新时，更新当前元素的状态的方法
     * align  声明当前元素在分页条中的位置，左侧或右侧
     */
    var ElementHandlers = {
        '{FirstPageLink}': {
            markup: '<span title="首页" class="jazz-paginator-first jazz-paginator-element jazz-state-default jazz-corner-all"><span class="jazz-icon jazz-icon-seek-first">p</span></span>',
            create: function(paginator) {
                var element = $(this["markup"]);
                if (paginator.options.page == 0) {
                    element.addClass('jazz-state-disabled');
                    element.children().addClass("jazz-icon-disabled");
                }
                if (jazz.config.paginatorStyle === 'text') {
                    element.text('首页').addClass('jazz-paginator-text-btn');
                }
                element.on('click.paginator', function() {
                    if (!$(this).hasClass("jazz-state-disabled")) {
                        paginator.option('page', 0);
                    }
                });

                return element;
            },
            align: 'left',
            update: function(element, state) {
                if (state.page == 0) {
                    element.addClass('jazz-state-disabled').removeClass('jazz-state-hover jazz-state-active');
                    element.children().addClass("jazz-icon-disabled");
                } else {
                    element.removeClass('jazz-state-disabled');
                    element.children().removeClass("jazz-icon-disabled");
                }
            }
        },

        '{PreviousPageLink}': {
            markup: '<span title="上一页" class="jazz-paginator-prev jazz-paginator-element jazz-state-default jazz-corner-all"><span class="jazz-icon jazz-icon-seek-prev">p</span></span>',
            create: function(paginator) {
                var element = $(this["markup"]);
                if (paginator.options.page == 0) {
                    element.addClass('jazz-state-disabled');
                    element.children().addClass("jazz-icon-disabled");
                }
                if (jazz.config.paginatorStyle === 'text') {
                    element.text('上一页').addClass('jazz-paginator-text-btn');
                }
                element.on('click.paginator', function() {
                    if (!$(this).hasClass("jazz-state-disabled")) {
                        paginator.option('page', paginator.options.page - 1);
                    }
                });

                return element;
            },
            align: 'left',
            update: function(element, state) {
                if (state.page == 0) {
                    element.addClass('jazz-state-disabled').removeClass('jazz-state-hover jazz-state-active');
                    element.children().addClass("jazz-icon-disabled");
                } else {
                    element.removeClass('jazz-state-disabled');
                    element.children().removeClass("jazz-icon-disabled");
                }
            }
        },

        '{NextPageLink}': {
            markup: '<span title="下一页" class="jazz-paginator-next jazz-paginator-element jazz-state-default jazz-corner-all"><span class="jazz-icon jazz-icon-seek-next">p</span></span>',
            create: function(paginator) {
                var element = $(this["markup"]);
                if (paginator.options.page == (paginator.getPageCount() - 1)) {
                    element.addClass('jazz-state-disabled').removeClass('jazz-state-hover jazz-state-active');
                    element.children().addClass("jazz-icon-disabled");
                }
                if (jazz.config.paginatorStyle === 'text') {
                    element.text('下一页').addClass('jazz-paginator-text-btn');
                }
                element.on('click.paginator', function() {
                    if (!$(this).hasClass("jazz-state-disabled")) {
                        paginator.option('page', paginator.options.page + 1);
                    }
                });

                return element;
            },
            align: 'left',
            update: function(element, state) {
                if (state.page == (state.pagecount - 1)) {
                    element.addClass('jazz-state-disabled').removeClass('jazz-state-hover jazz-state-active');
                    element.children().addClass("jazz-icon-disabled");
                } else {
                    element.removeClass('jazz-state-disabled');
                    element.children().removeClass("jazz-icon-disabled");
                }
            }
        },

        '{LastPageLink}': {
            markup: '<span title="末页" class="jazz-paginator-last jazz-paginator-element jazz-state-default jazz-corner-all"><span class="jazz-icon jazz-icon-seek-end">p</span></span>',
            create: function(paginator) {
                var element = $(this["markup"]);

                if (paginator.options.page == (paginator.getPageCount() - 1)) {
                    element.addClass('jazz-state-disabled').removeClass('jazz-state-hover jazz-state-active');
                    element.children().addClass("jazz-icon-disabled");
                }

                if (jazz.config.paginatorStyle === 'text') {
                    element.text('末页').addClass('jazz-paginator-text-btn');
                }
                element.on('click.paginator', function() {
                    if (!$(this).hasClass("jazz-state-disabled")) {
                        paginator.option('page', paginator.getPageCount() - 1);
                    }
                });

                return element;
            },
            align: 'left',
            update: function(element, state) {
                if (state.page == (state.pagecount - 1)) {
                    element.addClass('jazz-state-disabled').removeClass('jazz-state-hover jazz-state-active');
                    element.children().addClass("jazz-icon-disabled");
                } else {
                    element.removeClass('jazz-state-disabled');
                    element.children().removeClass("jazz-icon-disabled");
                }
            }
        },

        '{PageLinks}': {
            markup: '<span class="jazz-paginator-pages jazz-paginator-pages-line-height"></span>',
            create: function(paginator) {
                var element = $(this.markup);
                //this.refresh(paginator, element);
                return element;
            },
            align: 'left',
            refresh: function(paginator, element){
                
                var page = paginator.option('page') + 1;
                var totalpages = paginator.getPageCount();
                
                element.empty();
             
                var num = paginator.option('cardnumber'), clazz = "";
                if(totalpages <= num){
	                for(var i=0; i<totalpages; i++){
	                	if(page == (i+1)){
	                		clazz = "jazz-state-selected";
	                	}else{
	                		clazz = "";
	                	}
	                	element.append('<span class="jazz-state-num '+clazz+' jazz-paginaotr-nowpage jazz-paginator-info">'+ (i+1) +'</span>');
	                }
                }else{
                	
                	if(page < num - 2){ //num-2  剔除第1页和最后页
                		for(var i=0, len=num-1; i<len; i++){
    	                	if(page == (i+1)){
    	                		clazz = "jazz-state-selected";
    	                	}else{
    	                		clazz = "";
    	                	}
                			element.append('<span class="jazz-state-num '+clazz+' jazz-paginaotr-nowpage jazz-paginator-info">'+ (i+1) +'</span>');
                		}
                		element.append('<span class="jazz-state-ellipsis jazz-paginaotr-nowpage jazz-paginator-info">…</span>');
                		if(page == totalpages){
                			clazz = "jazz-state-selected";
                		}else{
                			clazz = "";
                		}
                		element.append('<span class="jazz-state-num '+clazz+' jazz-paginaotr-nowpage jazz-paginator-info">'+ totalpages +'</span>');
                	}else{
                		
                		num = num-2; //num-2  剔除第1页和最后页
	                	var p = Math.ceil(num/2);
	                	if(page == 1){ clazz = "jazz-state-selected"; }else{ clazz = ""; } 
	                	//显示第一页
	                	element.append('<span class="jazz-state-num '+clazz+' jazz-paginaotr-nowpage jazz-paginator-info">1</span>');        	

                		if(page < totalpages - (num - p)){
		                	if(page - p > 1){
		                		element.append('<span class="jazz-state-ellipsis jazz-paginaotr-nowpage jazz-paginator-info">…</span>');
		                		var _n = 0;
		                		for(var i=0, len= p; i<len; i++){
		                			_n = page - (p-1) + i;
		    	                	if(page == _n){
		    	                		clazz = "jazz-state-selected";
		    	                	}else{
		    	                		clazz = "";
		    	                	}	                			
		                			element.append('<span class="jazz-state-num '+clazz+' jazz-paginaotr-nowpage jazz-paginator-info">'+ _n +'</span>');
		                		}	                		
	
		                	}else{
		                		//不显示省略号
		                		for(var i=2, len=page; i<=len; i++){
		                			if(page == i){ clazz = "jazz-state-selected"; }else{ clazz = ""; }
		                			element.append('<span class="jazz-state-num '+clazz+' jazz-paginaotr-nowpage jazz-paginator-info">'+ i +'</span>');
		                		}
		                	}
		                	
		                	if(page + (num - p) < totalpages){
			                	//当前页面后处理
			                	for(var i=1, len=(num - p); i<=len; i++){
		                			if(page == i){ clazz = "jazz-state-selected"; }else{ clazz = ""; }
		                			element.append('<span class="jazz-state-num '+clazz+' jazz-paginaotr-nowpage jazz-paginator-info">'+ (page+i) +'</span>');	                		
			                	}
		                	}
	                	
		                	//是否显示省略号
		                	if(page + (num - p) < totalpages - 1){
		                		element.append('<span class="jazz-state-ellipsis jazz-paginaotr-nowpage jazz-paginator-info">…</span>');
		                	}
		                	
		                	if(page == totalpages){
		                		clazz = "jazz-state-selected";
		                	}else{
		                		clazz = "";
		                	}
		                	element.append('<span class="jazz-state-num '+clazz+' jazz-paginaotr-nowpage jazz-paginator-info">'+ totalpages +'</span>');
                		}else{
                			element.append('<span class="jazz-state-ellipsis jazz-paginaotr-nowpage jazz-paginator-info">…</span>');
		                	for(var i=totalpages - num, len=totalpages; i<=len; i++){
	                			if(page == i){ clazz = "jazz-state-selected"; }else{ clazz = ""; }
	                			element.append('<span class="jazz-state-num '+clazz+' jazz-paginaotr-nowpage jazz-paginator-info">'+ i +'</span>');	                		
		                	}                			
                		}
	                	
	                	
                	}
                }
                
                var $this = this;
                element.find(".jazz-state-num").off(".stateNum").on("click.stateNum", function(){
                	paginator.option('page', parseInt($(this).html()) - 1);
                	$this.refresh(paginator, element);
                });

            },
            update: function(element, state, $this) {
            	this.refresh($this, element);
            }
        },
        
        '{PageInfo}': {
            markup: '<span class="jazz-paginator-element jazz-paginator-info jazz-paginator-text"></span>',
            create: function(paginator) {
                var element = $(this.markup),
                    nowP = (paginator.options.pagerows * (paginator.options.page + 1)),
                    html = "当前显示" + (paginator.options.pagerows * paginator.options.page + 1) + "-" + (nowP > paginator.options.totalrecords ? paginator.options.totalrecords : nowP) + "，共" + paginator.options.totalrecords + "条";
                if (jazz.config.paginatorStyle === 'text') {
                    html = "共<span class='jazz-paginator-totalrow'>" + paginator.options.totalrecords + "</span>条记录, 每页显示<div class='jazz-paginator-pagerows-input'></div>条, 共<span class='jazz-paginator-num'>" + paginator.getPageCount() + "</span>页. " +
                        '<span class="jazz-paginator-goto-info">跳转到 ' + '<input type="text" name="p_num" class="jazz-paginator-goto-input" />' + '</span><span title=\'确定\' class=\'jazz-paginator-element jazz-state-default js-goto\'>确定</span>';
                }

                element.html(html);
                var that = paginator;
                element.find('.js-goto').on('click', function() {
                    var p_num = parseInt($(this).prev().children('input').val());
                    if (!p_num || !jazz.isNumber(p_num) || (p_num < 1) || (p_num > that.getPageCount())) {
                        $(this).prev().children('input').val('');
                        return;
                    }
                    $(this).parents('[vtype=paginator]').paginator('setPage', (p_num - 1));
                });
                return element;
            },
            align: 'right',
            update: function(element, state) {
                var nowP = state['first'] + parseInt(state['pagerows']),
                    html;
                if (jazz.config.paginatorStyle === 'text') {
                    element.find('.jazz-paginator-goto-input').val('');
                    element.find('.jazz-paginator-num').text(state.pagecount);
                    element.find('.jazz-paginator-totalrow').text(state.totalrows);
//                    setTimeout(function() {
                        element.find('.jazz-paginator-pagerows-input').comboxfield("setValue", state['pagerows']);
//                    }, 100);
                } else {
                    html = "当前显示" + (state.first + 1) + "-" + (nowP > state['totalrows'] ? state['totalrows'] : nowP) + "，共" + state['totalrows'] + "条";
                    element.text(html);
                }
            }
        },
        '{PageGoto}': {
            markup: '<span class="jazz-paginator-goto-info">跳转到 ' + '<input type="text" name="p_num" class="jazz-paginator-goto-input" />' + '</span><span class="jazz-paginator-page jazz-paginator-element' + ' jazz-state-default jazz-paginator-goto"></span>',
            create: function(paginator) {
                var element = $(this['markup']);
                element.on('click.paginator', function() {
                    var p_num = parseInt($(this).parent().find('input.jazz-paginator-goto-input').val());
                    if (!p_num || !jazz.isNumber(p_num) || (p_num < 1) || (p_num > paginator.getPageCount())) {
                        $(this).parent().find('input.jazz-paginator-goto-input').val('');
                        return;
                    }
                    paginator.setPage(p_num - 1);
                });

                return element;
            },
            update: function(element, state) {
                element[0].value = "";
            }
        },

        '{PageRefresh}': {
            markup: '<span title="刷新" class="jazz-paginator-refresh jazz-paginator-element' + ' jazz-state-default jazz-corner-all"><span class="jazz-icon">' + 'p</span></span>',
            align: 'left',
            create: function(paginator) {
                var element = $(this['markup']);
                element.on('click.paginator', function() {
                    paginator.setPage(0, 'refresh');
                });

                return element;
            },
            update: function(element, state) {

            }
        }
    };


    /** 
     * @version 0.5
     * @name jazz.paginator
     * @description 分页组件。
     * @constructor
     * @extends jazz.boxComponent
     * @require 
     * @example $('#div_id').paginator();
     */
    $.widget("jazz.paginator", $.jazz.boxComponent, {

        options: /** @lends jazz.paginator# */ {

            /**
             *@desc 记录总数
             *@default 0
             */
            totalrecords: 0,

            /**
             *@desc 当前显示第几页
             *@default 0
             */
            page: 0,

            /**
             *@desc 每页的记录数
             *@default 10
             */
            pagerows: 10,
            
            /**
             *@desc 显示不同的主题风格
             *@default 0
             */            
            theme: 0,
            
            /**
             *@desc 当theme=1时，cardnumber=“7”翻页的数量
             *@default 7
             */
            cardnumber: 7,            

            /**
             *@desc 模板元素
             */
            template: '{FirstPageLink} {PreviousPageLink} {PageLinks} {LastPageLink} {NextPageLink} {PageInfo}',

            /**
             * @desc 自定义扩展按钮
             * @default []
             */
            buttons: [],

            /**
             * @desc 跳转页码执行的回调函数
             * @default null
             * @example function(page){
             *  //todo...
             * }
             */
            gopage: null
        },

        /**
         *@desc 创建组件
         *@private
         */
        _create: function() {
            this._super();

            this.element.addClass('jazz-paginator');
            this.element.addClass("jazz-paginator-ext"); //分页条样式在各主题中都是统一的
            this.element.append('<div class="jazz-paginator-content"><div class="jazz-paginator-left"></div><div class="jazz-paginator-right"></div><div style="clear:both;"></div></div>');
            this.id = this.element.attr('id');
            if (!this.id) {
                this.id = this.element.uniqueId().attr('id');
            }

            this.options.totalrecords = parseInt(this.options.totalrecords, 10) || 0;

            this.paginatorElements = [];
            this._initTemplate();

            var elementKeys = this.options.template.split(/[ ]+/),
                paginaotrLeft = this.element.find('.jazz-paginator-left'),
                paginaotrRight = this.element.find('.jazz-paginator-right');
            for (var i = 0, len = elementKeys.length; i < len; i++) {
                var elementKey = elementKeys[i],
                    handler = ElementHandlers[elementKey];
                if (handler) {
                    var paginatorElement = handler.create(this);
                    this.paginatorElements[elementKey] = paginatorElement;
                    if (handler['align'] == 'left') {
                        paginaotrLeft.append(paginatorElement);
                    } else {
                        paginaotrRight.append(paginatorElement);
                    }
                }
            }
            
            this._setPageRowBox();
            
            this.addButton();
            /**
             * 添加跳转按钮
             */
            if (jazz.config.paginatorStyle === 'text') {
                /*this.element.find(".jazz-paginator-content .jazz-paginator-goto-info")
                .after("<span title='跳转' class='jazz-paginator-element jazz-state-default js-goto'>跳转</span>");
                this.element.find('.js-goto').on('click', function(){
                  var p_num = parseInt($(this).prev().children('input').val());
                    if(!p_num || !jazz.isNumber(p_num) || (p_num < 1) || (p_num > that.getPageCount())){
                      $(this).prev().children('input').val('');
                        return;
                    }
                    $(this).parents('[vtype=paginator]').paginator('setPage', (p_num-1));
                });*/
            } else {
                this.element.find('.js-goto').remove();
                this.element.find(".jazz-paginator-content")
                    .append("<a title='跳转' href='javascript:;' class='jazz-paginaotr-hidden-button'>确定</a>");
            }
            /*
            //暂时由gridpanel与paginator的绑定
            var parent = this.getParentComponent();
            if(parent){
              if(parent.attr("vtype")=="gridpanel"){
                this.gridpanel = parent.data("gridpanel");
              }
            }
            
            this._bindEvents();*/
        },
       
        _init: function() {
            this._super();

            //暂时由gridpanel与paginator的绑定
            var parent = this.getParentComponent();
            if (parent instanceof $ && parent) {
                if (parent.attr("vtype") == "gridpanel") {
                    this.gridpanel = parent.data("gridpanel");
                }
                if (parent.attr("vtype") == "gridtreepanel") {
                    this.gridpanel = parent.data("gridtreepanel");
                }
            }

            this._bindEvents();
        },

        /**
         *@desc 绑定事件
         *@private
         */
        _bindEvents: function() {
            var $this = this,
                input;

            input = $this.element.find(".jazz-paginator-input input");
            input.on("keypress", function(e) {
                var curKey = e.keyCode;
                if (curKey == 13) {
                    var inputVal = $this.element.find('input[type="text"]').val();
                    if ($this._isPageLegal(inputVal) && (inputVal - 1) != $this.options.page) {
                        $this.setPage(inputVal - 1);
                    }
                }
            });
            //}
            $this.element.find('.jazz-paginaotr-hidden-button')
                .off('click.paginator')
                .on('click.paginator', function() {
                    var inputVal = $this.element.find('input[type="text"]').val();
                    if ($this._isPageLegal(inputVal) && (inputVal - 1) != $this.options.page) {
                        $this.setPage(inputVal - 1);
                    }
                });
        },        
        
        /**
         * @desc 初始化分页条的html模板
         */
        _initTemplate: function() {
            this.options.template = '{FirstPageLink}  {PreviousPageLink} {PageLinks} {NextPageLink} {LastPageLink} {PageRefresh} {PageInfo}';
            if (jazz.config.paginatorStyle === 'text') {
                this.options.template = '{FirstPageLink}  {PreviousPageLink} {NextPageLink} {LastPageLink} {PageInfo}';
            }
            
            if(this.options.theme == 1){
            	this.options.template = '{PreviousPageLink} {PageLinks} {NextPageLink}';            	
            }
        },

        /**
         * @desc 检查要跳转的页码是否合法
         * @param page 要跳转的页码
         * @returns {Boolean} true 当前要跳转的页码合法 <br>false 不合法
         * @private 
         */
        _isPageLegal: function(page) {
            if (!/^\d+$/.test(page)) {
                this.element.find('input[type="text"]').val((this.options.page + 1));
                return false;
            }
            if (page < 0 || page > Math.ceil(this.options.totalrecords / this.options.pagerows)) {
                return false;
            }
            return true;
        },

        /**
         *@desc 重置options属性值
         *@param {key} options属性
         *@param {value} options属性对应的值
         *@private
         */
        _setOption: function(key, value) {
            if (key == 'page') {
                this.setPage(value);
            } else {
                $.Widget.prototype._setOption.apply(this, arguments);
            }
        },

        /**
         * @desc 添加分页条数下拉列表
         * <br> 每页显示条数目前是确定的，可以考虑写成可配置的
         */
        _setPageRowBox: function(){
            var that = this;
            //缓存JAZZ配置项下拉图标宽度
            var tmp_paginator = {
                ar: jazz.config.fieldIconWidth
            };
            jazz.config.fieldIconWidth = 6;
            this.element.find('.jazz-paginator-pagerows-input')
                .comboxfield({
                    vtype: 'comboxfield',
                    name: 'jazz-paginator-pagerows-input-' + (jazz.getRandom()),
                    width: 30,
                    height: 20,
                    isshowblankitem: false,
                    dataurl: [{
                        text: "5",
                        value: 5
                    }, {
                        text: "10",
                        value: 10
                    }, {
                        text: "20",
                        value: 20
                    }, {
                        text: "50",
                        value: 50
                    }],
                    itemselect: function(e, ui) {
                    	that.options.pagerows = ui.value;
                        that.setPage(0, 'refresh');
                    }
                });
            this.element.find('.jazz-paginator-pagerows-input')
                .comboxfield('setValue', this.options.pagerows)
                .css({
                    margin: '3px 0 0',
                    padding: 0
                });
            //恢复下拉框input的默认宽度
            jazz.config.fieldIconWidth = tmp_paginator.ar;
        },
        
		/**
         * @desc 覆盖boxcomponent中的方法, 分页组件不需要刷新子组件的宽度
		 * @private
         */        
        _refreshChildWidth: function(){},       
        
        /**
         *@desc 修改分页组件的显示
         *@param {state.first} 当前页首条记录的索引值
         *@param {state.pagerows}  行数
         *@param {state.page}  当前显示的第几页页数
         *@param {state.pagecount} 总的页面数
         *@param 弃用 {state.pageLinks} 分页条显示页码的按键个数
         */
        _updateUI: function(state) {
            for (var paginatorElementKey in this.paginatorElements) {
                ElementHandlers[paginatorElementKey].update(this.paginatorElements[paginatorElementKey], state, this);
            }
        },

        /**
         * @desc 添加自定义按钮
         */
        addButton: function() {
            if (this.options.buttons === false) {
                return;
            }
            var $this = this,
                btns = $this.options.buttons;

            for (var i = 0, len = btns.length; i < len; i++) {
                var btn = btns[i],
                    id = btn.id || this.element.uniqueId(),
                    btnHtml = '';
                if ($.isFunction(btn.renderer)) {
                    btnHtml = btn.renderer.call(this);
                } else {
                    btnHtml = "<span>" + (btn.title ? btn.title : "") + "</span>";
                }
                $(btnHtml).appendTo(this.element.find('.jazz-paginator-left'));
                $this.element.find("> .jazz-paginator-refresh").attr('id', this.id + '_' + id)
                    .addClass('jazz-paginator-element jazz-paginator-custom ' +
                        (btn.classname ? btn.classname : ""));
                $this.element.find('.jazz-paginator-refresh')
                    .on('click', function() {
                        if ($.isFunction(btn['callback'])) {
                            btn.callback.call($this);
                        }
                    });
            }
        },        
        
        /**
         *@desc 获取页面数量
         *@return 页面数
         */
        getPageCount: function() {
            return Math.ceil(parseInt(this.options.totalrecords) / parseInt(this.options.pagerows)) || 1;
        },

        getPageFirstRowNum: function() {
            return parseInt(this.options.pagerows) * this.options.page;
        },
        
        /**
         *@desc 设置当前显示的页面
         *@param {p}  当前的页面数
         *@param {silent} 是否出触发paginate事件 true 不触发
         */
        setPage: function(p, silent) {
            var $this = this,
                pc = $this.getPageCount();
            //当前页面必须大于等于0并且小于总页数而且不能和当前页码相等
            //          排除强制刷新的情况，silent为refresh标志并且刷新页面到第一页
            if (p >= 0 && p < pc && ($this.options.page != p || (silent === 'refresh' && p === 0))) {
                var newState = {
                    first: $this.options.pagerows * p,
                    pagerows: $this.options.pagerows,
                    page: p,
                    pagecount: pc,
                    totalrows: $this.options.totalrecords
                };

                this.options.page = p;

                if (!silent || silent === 'refresh') {
                    var gopage = $this.options.gopage;
                    if ($.isFunction(gopage)) {
                        $this._event('gopage', null, newState);
                    } else if ($.isFunction(window[gopage])) {
                        window[gopage].call(this, newState);
                    } else {
                        if ($this.gridpanel) {
                            $this.gridpanel.bindPaginatorClickEvent((p + 1), $this.options.pagerows);
                        }
                    }
                }

                this._updateUI(newState);
            }
        },

        /**
         * 刷新分页条
         * @param rows 一页数据条数
         * @param totalRows 数据总数
         */
        updatePage: function(paginationInfo) {
            this.options.page = paginationInfo["page"] > 0 ? (paginationInfo["page"] - 1) : 0;
            this.options.pagerows = paginationInfo["pagerows"];
            this.options.totalrecords = paginationInfo["totalrecords"];

            this.element.find('.jazz-paginator-left').children().remove();
            this.element.find('.jazz-paginator-right').children().remove();

            var elementKeys = this.options.template.split(/[ ]+/),
                paginaotrLeft = this.element.find('.jazz-paginator-left'),
                paginaotrRight = this.element.find('.jazz-paginator-right');
            for (var i = 0, len = elementKeys.length; i < len; i++) {
                var elementKey = elementKeys[i],
                    handler = ElementHandlers[elementKey];
                if (handler) {
                    var paginatorElement = handler.create(this);
                    this.paginatorElements[elementKey] = paginatorElement;
                    if (handler['align'] == 'left') {
                        paginaotrLeft.append(paginatorElement);
                    } else {
                        paginaotrRight.append(paginatorElement);
                    }
                }
            }
            
            this._setPageRowBox();
            this.addButton();
            this._bindEvents();

            //更新分页条后
            //默认导航到第一条
            var state = {
                first: this.getPageFirstRowNum(),
                pagerows: this.options.pagerows,
                page: this.options.page,
                pagecount: this.getPageCount(),
                totalrows: this.options.totalrecords
            };

            this._updateUI(state);
        }        
    });
});
(function($, factory) {
    if (jazz.config.isUseRequireJS === true) {
        define(['jquery',
            'jazz.Paginator',
            'jazz.Loading',
            'jazz.DataFormat',
            'jazz.Panel'
        ], factory);
    } else {
        factory($);
    }
})(jQuery, function($) {

    (function($, undefined) {
        /**
         * 暂开辟jazz.gird空间，放置表格特性功能(如可编辑表格、可分组表格、合计功能表格等等)
         * 优化：以后jazz.gridpanel的扩展功能可以参考ext grid的方式注入扩展功能
         */
        jazz.namespace("grid");
        /**
         * @version 1.0
         * @name jazz.gridpanel
         * @description 表格类
         * @constructor
         * @extends jazz.panel
         */
        $.widget("jazz.gridpanel", $.jazz.panel, {
            options: /** @lends jazz.gridpanel# */ {

                /**
                 * @desc 组件类型
                 * @type 'String'
                 */
                vtype: 'gridpanel',
                /**
                 * @type String
                 * @desc gridpanel组件标识名称
                 * @default null
                 */
                name: null,
                /*width height title titledisplay 属性继承自panel*/
                /**
                 * @type String
                 * @desc 数据请求地址url
                 * @default null
                 */
                dataurl: null,
                /**
                 * @type json
                 * @desc 数据请求地址url的参数 {key: value, key2: value2……}
                 * @default null
                 */
                dataurlparams: null,
                /**
                 * @type boolean
                 * @desc 整个表格是否为可编辑表格（true可编辑/false不可编辑）
                 * @default false 
                 */
                iseditable: false,
                /**
                 * @type Boolean
                 * @desc 是否显式显示可编辑组件
                 * @default false
                 */
                isshoweditcell: false,
                /**
                 * @type String
                 * @desc 表格可编辑类型cell/row/column/table
                 * @default "cell"
                 */
                editortype: "cell",
                /**
                 * type boolean
                 * @desc 是否显示选择框
                 * @default true
                 */
                isshowselecthelper: true,
                /**
                 * @type boolean
                 * @desc 否显示工具条， true显示  false不显示
                 * @default true
                 */
                isshowtoolbar: true,
                /**
                 * @type boolean
                 * @desc 是否显示分页条
                 * @default true
                 */
                isshowpaginator: true,
                /**
                 * @type String
                 * @desc gridpanel组件显示视图，card/table
                 * @default table
                 */
                defaultview: "table",
                /**
                 * @type boolean
                 * @desc 是否显示行号
                 * @default true
                 */
                lineno: true,
                /**
                 * @type number
                 * @desc 序号列宽度
                 * @default 30
                 */
                linenowidth: 30,
                /**
                 * @type number
                 * @desc gridpanel表格线类型（0实线，1虚线，2点线）
                 * @default 0实线
                 */
                linetype: 0,
                /**
                 * @type number
                 * @desc gridpanel表格线样式（0无，1横纵，2横，3纵）
                 * @default 1横纵
                 */
                linestyle: 1,
                /**
                 * @type Boolean
                 * @desc 控制表格行是否允许选中开关（true/false）
                 * @default true
                 */
                rowselectable: true,
                /**
                 * @type Number
                 * @desc 组件的选中类型（0不选择, 1单选框, 2多选框）
                 * @default 2多选框
                 */
                selecttype: 2,
                /**
                 * @function
                 * @desc gridpanel数据加载时，自定义数据处理（例如自定义行、列等）
                 * @{event} 事件载体
                 * @{data} gridpanel组件加载的数据，为json数据{"data":rowsdata}
                 * @default null
                 */
                datarender: null,
                /**
                 * @function
                 * @desc 初始化gridpanel组件加载数据完成后，执行回调
                 * @{event} 事件载体
                 * @{data} gridpanel组件加载的数据，为json数据{"data":rowsdata,"paginationInfo":pagination}
                 * @default null
                 */
                dataloadcomplete: null,
                /**
                 * @type json
                 * @desc 数据查询请求参数 {key: value, key2: value2……}
                 * @default {}
                 */
                queryparams: {},
                /**
                 * @type json
                 * @desc 数据排序请求参数
                 * @default {}
                 */
                sortparams: {},
                /**
                 * @type Array
                 * @desc gridpanel组件元素内容
                 * @default null
                 */
                items: null,
                /**
                 * @type Boolean
                 * @desc 是否对各分组数据进行合计（true/false）
                 * @default false
                 */
                isgroupsummary: false,
                /**
                 * @type Boolean
                 * @desc 是否对当前页全部数据进行合计（true/false）
                 * @default false
                 */
                ispagesummary: false,
                /**
                 * @type String
                 * @desc 指定数据集中分组字段列，（规则待定，暂时前台据此字段列进行分组排序，未传给后台，建议应该是后台分组排序）
                 * ault null
                 */
                groupfield: null,
                /**
                 * @type String
                 * @desc 分组数据行的展示内容字段列（可以配合datarender自定义使用）
                 * @default null
                 */
                grouptitlefield: null,
                /**
                 * @type Boolean
                 * @desc 分组数据行是否展开（true/false）
                 * @default true
                 */
                isgroupexpand: true,
                paginatorcallback:null
            },
            /** @lends jazz.gridpanel */
            /**
             * @desc 创建gridpanel组件
             * @private
             */
            _create: function() {
                //1. 在gridpanel创建前，保存原html,以待gridpanel组件销毁后重新创建使用
                this.originHtml = this.element[0].outerHTML;
                //2.调用jazz.panel的create方法创建gridpanel的框架
                this._super();

                this.element.addClass('jazz-gridpanel');
            },
            /**
             * @desc 初始化gridpanel组件
             * @private
             */
            _init: function() {
                //this.isGridPanelAlreadyInit记录gridpanel是否是初始化状态
                /*
                 * gridpanel继承于panel，在panel的_init()中是先于panel的子组件初始化之前
                 * 执行了this._width()和this.height();对于width而言gridpanel不论固定宽度还是百分比设定
                 * 都与内部表格内容无关，可以使用默认this._width()方法，但是对于height而言gridpanel除了
                 * 固定高度、百分比设定之外，还可随着内部表格内容自适应扩充，所以出于这个原因就要求gridpanel
                 * 在子组件初始化完成之后去计算（即不必再panel的_init()时候去调用this._height()，让其自扩充）。
                 */
                //1.此状态在this._super();之前设定为false，是为了避免panel在初始化时就计算this._height()
                this.isGridPanelAlreadyInit = false;
                this._super();

                //2.若是items没有数据（即断定为vtype形式创建gridpanel），则在gridpanel未初始化完之前先创建子组件
                // 目的是子组件创建后便与gridpanel数据渲染以及高度等计算
                // 此处类似于在panel的_init()中items处理(即widget形式创建子组件) this._createItemsAndBindCostomEvent(this.content);  
                if (!this.options.items || this.options.items.length == 0) {
                    this._createContent(this.content);
                }

                //3.缓存gridpanel子组件操作对象(注意：无论vtype、widget形式，此时子组件并未创建完成)
                this.gtoolbar = this.getChildrenComponentByVtype("toolbar");
                this.gcolumn = this.getChildrenComponentByVtype("gridcolumn");
                this.gtable = this.getChildrenComponentByVtype("gridtable");
                this.gcard = this.getChildrenComponentByVtype("gridcard");
                this.gpaginator = this.getChildrenComponentByVtype("paginator");

                //4.注入表格扩展特性（这时以后gridpanel扩展功能，暂时考虑在此处注入扩展功能）
                this._extendGridpanelFunctions();

                //5.设置子组件隐藏与显示、布局
                //a.gridpanel继承panel，其宽度和高度初始化或响应window.resize事件时，由panel计算
                //b.gridpanel初始化时内部子组件宽度为100%适用，不必计算；但是pagearea的高度需要计算
                //c.gridpanel响应window.resize事件时，内部子组件的宽度和高度都需要重新计算设置
                this._settingGridpanelComponentView();

                //6.初始化时组件全局缓存的数据，每个gridpanel维护一份数据（不管展现为table还是card，都只维护这一份数据）
                this.paginationInfo = {}; //分页信息
                this.rows = []; //后台解析的分页展示原数据

                //7.girdpenel获取数据，并且循环判断是否需要reload子组件数据渲染
                this._initLoadData();
            },
            /**
             * @desc gridpanel添加新的可扩展功能入口
             * @private
             */
            _extendGridpanelFunctions: function() {
                //1.在表格视图时，添加可编辑表格特性
                if (this.gtable) {
                    var gtable = this.gtable.data("gridtable");
                    if (gtable && gtable._isGridtableEditable()) {
                        $.extend(this, jazz.grid.editorgridpanel);
                    }
                }
            },
            /**
             * @desc 设置gridpanel子组件隐藏与显示、布局
             * @private
             * @example this._settingGridpanelComponentView();
             */
            _settingGridpanelComponentView: function() {
                //1.设置toolbar/paginator隐藏与显示、布局
                if (this.options.isshowtoolbar == false || this.options.isshowtoolbar == "false") {
                    if (this.gtoolbar) {
                        this.gtoolbar.hide();
                    }
                }
                if (this.options.isshowpaginator == false || this.options.isshowpaginator == "false") {
                    if (this.gpaginator) {
                        this.gpaginator.hide();
                    }
                }
                //2.重新计算pagearea的高度
                this._settingPageareaHeight();
                //3.gridpanel表格和卡片视图设定
                if (this.options.defaultview == "card") {
                    if (this.gcolumn) {
                        this.gcolumn.hide();
                    }
                    if (this.gtable) {
                        this.gtable.hide();
                    }
                } else {
                    if (this.gcard) {
                        this.gcard.hide();
                    }
                }
            },
            //gridpanel响应resize事件时，宽度默认利用父级计算方式，不必覆盖
            /*_width: function(){
                
            },*/
            
            /**
             * @desc 覆盖父级_height()方法，gridpanel响应resize事件，进行高度上的调整
             * @private
             */
            _height: function() {
                //对于gridpanel高度有如下情况：
                //1.固定高度 height="500",初始化时候会设定高度，resize时不再响应改变
                //2.百分比高度height="50%"，初始化时会设定高度，resize时也会响应改变
                //3.设置fit布局的时候，初始化时会设定高度，resize时也会响应
                //4.未设置height的值，则初始化时不会设定高度，resize时也不会响应
                this._super();
                if (this.isGridPanelAlreadyInit) {
                    this._settingPageareaHeight();
                } else {
                    this.isGridPanelAlreadyInit = true;
                }
            },

			_overflow: function(flag){
                //3.不让panel的content出现滚动条（即表格外部出现滚动条）
				if(this.options.overflow == "visible"){
					this.content.css('overflow', 'visible');
				}else{
					this.content.css('overflow', 'hidden');
				}
				if(flag){
					this.element.find("div[vtype='gridcolumn']").data("gridcolumn")._overflow();
					this.element.find("div[vtype='gridtable']").data("gridtable")._overflow();
				}
			},

            /**
             * @desc 据this.options.height属性值计算gridpanel内容区高度
             * @private
             */
            _settingPageareaHeight: function() {
                //7.gridpanel组件pagearea高度不使用fitlayout布局，在gridpanel初始化及响应resize事件时，pagearea高度变化分两种情况：            
                //7.1 gridpanel设置layout：fit和height属性值时,pagearea使用外部gridpanel高度计算
                //7.2 gridpanel非fit布局且无height值时，pagearea设置随卡片和表格内容扩充
                if (parseInt(this.options.height) > 0 || this.options.layout == "fit") {
                    var toolbarheight = 0;
                    if (this.gtoolbar && this.gtoolbar.is(':visible')) {
                        toolbarheight = this.gtoolbar.outerHeight(true) || 0;
                    }
                    var gridcolumnheight = 0;
                    if (this.gcolumn && this.gcolumn.is(':visible')) {
                        gridcolumnheight = this.gcolumn.outerHeight(true) || 0;
                    }
                    var paginatorheight = 0;
                    if (this.gpaginator && this.gpaginator.is(':visible')) {
                        paginatorheight = this.gpaginator.outerHeight(true) || 0;
                    }
                    var pagearea = this.element.find(".jazz-pagearea");
                    var h = 0;
                    if (pagearea[0]) {
                        if (this.options.defaultview == "card") {
                            h = this.content.height() - toolbarheight - paginatorheight;
                            pagearea.height(h);
                            //pagearea.css({
                            //	"max-height": h
                            //});
                        } else {
                            h = this.content.height() - toolbarheight - gridcolumnheight - paginatorheight;
                            pagearea.height(h);
                            //pagearea.css({
                            //	"max-height": h
                            //});
                        }
                    }
                } else {
                    //pagearea.css({overflow: 'visible'});
                }
            },
            /**
             * @desc 获取options属性对象, 提供给子类使用
             * @return object 
             * @private 
             */
            _getGridOptions: function() {
                return this.options;
            },
            /**
             * @desc 获取工具条对象
             * @return object  
             * @private  
             */
            getToolbar: function() {
                return this.gtoolbar;
            },
            /**
             * @desc 获取表头对象
             * @return object 
             * @private  
             */
            getGridColumn: function() {
                return this.gcolumn;
            },
            /**
             * @desc 获取表格对象
             * @return object 
             * @private  
             */
            getGridTable: function() {
                return this.gtable;
            },
            /**
             * @desc 获取卡片对象
             * @return object  
             * @private  
             */
            getGridCard: function() {
                return this.gcard;
            },
            /**
             * @desc 获取翻页条对象
             * @return object  
             * @private  
             */
            getPaginator: function() {
                return this.gpaginator;
            },
            /**
             * @desc 重新计算gridpanel表格和卡片区域宽度，
             * 建议该方法在以下情况下调用：
             * 1.gridpanel组件在隐藏元素内创建，并且其表头每列宽度不是绝对值设定时
             * @public
             * @example $('div[name="gridpanel"]').gridpanel('recalculateGridpanelWidth');
             */
            recalculateGridpanelWidth: function() {
                this._width();
                this._refreshLayout();
                this._refreshChildWidth();
            },
            /**
             * @desc 重新计算gridpanel表格和卡片区域宽度，
             * 建议该方法在以下情况下调用：
             * 1.gridpanel组件在隐藏元素内创建，并且其表头每列宽度不是绝对值设定时
             * @public
             * @example $('div[name="gridpanel"]').gridpanel('recalculateGridpanelWidth');
             */
            recalculateGridpanelHeight: function() {
                this._height();
                this._refreshLayout();
                this._refreshChildHeight();
            },
            /**
             * @desc 根据定义列名(name属性值)显示隐藏列
             * @param {columnnanme} 列名name
             * @throws :无法匹配该name表格列
             * @example $('div[name="gridpanel"]').gridpanel('showColumn', 'sex');
             */
            showColumn: function(columnname) {
                this.gcolumn.gridcolumn('showColumn', columnname);
            },
            /**
             * @desc 根据定义列名(name属性值)隐藏表格列
             * @param {columnnanme} 列名name
             * @throws :无法匹配该name表格列
             * @example $('div[name="gridpanel"]').gridpanel('showColumn', 'sex');
             */
            hideColumn: function(columnname) {
                this.gcolumn.gridcolumn('hideColumn', columnname);
            },
            /**
             *@desc 根据视图标识(defaultview属性值)切换视图
             *@param {viewname} 视图标识(card/table)
             *@return undefined
             *@example $('div[name="gridpanel"]').gridpanel('showView', 'card');
             */
            showView: function(viewname) {
                var $this = this;

                //切换表格和卡片的时候，需要注意gridcolumn的hideheader是否显示
                var hideheader = $this.gcolumn.data("gridcolumn").options["hideheader"];
                var gridcolumnheight = 0;
                if (!hideheader || hideheader == "false") {
                    gridcolumnheight = $this.gcolumn.outerHeight(true) || 0;
                }
                var display = "";
                if (viewname == "card") {
                    display = $this.gcard.css("display");
                    if (display == "none") {
                        //gridpanel使用fit布局或设定高度时，pagearea使用fit布局固定高度，
                        //（pagearea而不是根据卡片和表格内容自扩充高度），此时pagearea切换表格和卡片时，需要计算高度
                        if (parseInt($this.options.height) > 0 || $this.options.layout == "fit") {
                            //$this.gcard.parent().height($this.gcard.parent().height()+$this.gcolumn.outerHeight(true));
                            $this.gcard.parent().height($this.gcard.parent().height() + gridcolumnheight);
                        }
                        $this.gcard.parent().css({
                            overflow: 'auto'
                        });
                        if (!hideheader || hideheader == "false") {
                            $this.gcolumn.hide();
                        }
                        $this.gtable.hide();
                        $this.gcard.show();
                    }
                } else {
                    display = $this.gtable.css("display");
                    if (display == "none") {
                        if (parseInt($this.options.height) > 0 || $this.options.layout == "fit") {
                            $this.gcard.parent().height($this.gcard.parent().height() - gridcolumnheight);
                        }
                        $this.gcard.parent().css({
                            overflow: 'hidden'
                        });
                        if (!hideheader || hideheader == "false") {
                            $this.gcolumn.show();
                        }
                        $this.gtable.show();
                        $this.gcard.hide();
                    }
                }
            },
            /**
             * @desc gridpanel组件的销毁
             * @public
             * @example $("#gridpanel").gridpanel("destroyComp");
             */
            destroyComp: function() {
                //销毁gridpanel包含的子组件
                if (this.gtoolbar) {
                    var toolbar = this.gtoolbar.data('toolbar');
                    toolbar.destroy();
                }
                if (this.gcolumn) {
                    var gridcolumn = this.gcolumn.data('gridcolumn');
                    gridcolumn.destroy();
                }
                if (this.gtable) {
                    var gridtable = this.gtable.data('gridtable');
                    gridtable.destroy();
                }
                if (this.gcard) {
                    var gridcard = this.gcard.data('gridcard');
                    gridcard.destroy();
                }
                if (this.gpaginator) {
                    var paginator = this.gpaginator.data('paginator');
                    paginator.destroy();
                }
                //替换为原待渲染html内容
                this.element.replaceWith(this.originHtml);
                this.destroy();
            },
            /**
             * @desc 据行坐标或者列坐标使单元格变为可编辑表格
             * @augments {rowIndex}{colIndex}行坐标，列坐标
             * @public
             * @example $("#gridpanel").gridpanel("setEditorCell",1,2);
             */
            setEditorCell: function(rowIndex, colIndex, editState) {
                var rowIndex = parseInt(rowIndex);
                var colIndex = parseInt(colIndex);
                var editState = editState == true || editState == "true";
                if (rowIndex > 0 || colIndex > 0) {
                    if (this.gtable) {
                        this.gtable.gridtable('setEditorCell', rowIndex, colIndex, editState);
                    }
                }
            },
            /**
             * 新增可编辑行
             */
            /*addEidtorRow: function(insertPosition){
             // 考虑如何维护新添加行的数据
             // 数据中的内容，都有那些数据？
             // rowuuid,各个td
            if(this.gtable){
                // 新增加的数据的数据项如何确定有以下两种情况：
                // 1.当可编辑表格有原始数据的时候，参照原始数据，并将各数据项设置为null,rowuuid赋随机值
                // 2.若无原始数据，则按照定义列name值添加数据项，并设置为null,rowuuid赋随机值
                var data = {};
                if(this.rows.length>0){
                    var copyrow = this.rows[0];
                    for(var key in copyrow ){
                        //初始值都设置为null
                        data[key] = null;
                    }
                }else{
                    if(this.gcolumn){
                        var gridcolumn = this.gcolumn.data("gridcolumn");
                        cols = gridcolumn.cols;
                        var columnname = "";
                        for (var j = 0, len = cols.length; j < len; j++) {
                            columnname = cols[j]['columnname'];
                            data[columnname] = null;
                        }
                    }
                }
                data["eidtorstate"] = "editing";
                data["rowuuid"] = Math.uuid(32);
                this.gtable.gridtable('addEidtorRow',data,insertPosition);
                //将新增的编辑数据放入到原始数据中
                this.rows.push(data);
            }
        },*/
            /**
             * @desc 添加行记录
             * @param {data} 行数据数组 [{key1: value1, key2: value2, ……}]
             * @public
             * @example $("#gridpanel").gridpanel("addRow",data);
             */
            addRow: function(data) {
                //调用gridtable和gridcard各自addRow方法，实现的是追加数据，而不是重新加载
                if (data) {
                    //1.为data添加展示时的逻辑唯一ID
                    this._setRowUUID(data);
                    //2.为this.rows拼接data
                    this.rows = this.rows.concat(data);
                    data = $.extend(true, [], data);
                    //3.分别修改表格和卡片
                    var $this = this;
                    this._code2DataRenderGridpanel(data,
                        function(rowdata) {
                            //4.对待渲染数据进行datarender和数据类型（datatype、dataformat）转换进行处理
                            $this._processGridpanelData(rowdata);
                            if ($this.gtable) {
                                var gridtable = $this.gtable.data('gridtable');
                                gridtable.addRow(rowdata);
                            }
                            if ($this.gcard) {
                                var gridcard = $this.gcard.data('gridcard');
                                gridcard.addCard(rowdata);
                            }
                        }
                    );
                }
            },
            /**
             * @desc 该方法直接使用data数据的rowuuid更新,以解决没有指定key主键及没有行号rowindex的情况
             * @param {data} 待更新数据
             * @public
             * @example $("#gridpanel").gridpanel("updateRow",data);
             */
            updateRow: function(data) {
                var rowuuid = data["rowuuid"];
                if (!rowuuid) {
                    return null;
                }
                this._updateTableAndCardById(data, rowuuid, "rowuuid");
            },
            /**
             * @desc 根据在gridcolumn中定义的主键列的值，更新行数据，（注意：若无定义key主键列，该方法无法使用）
             * @param {id} String 设置key=true列的主键值
             * @param {data} 根据主键待更新的行数据
             * @public
             * @example $("#gridpanel").gridpanel("updateRowById",{name:james,age:18...},"001");
             */
            updateRowById: function(data, id) {
                if (!id) {
                    return null;
                }
                var keyColumn = this._getGridcolumnKeyCode();
                if (!keyColumn) {
                    return null;
                }
                this._updateTableAndCardById(data, id, keyColumn);
            },
            /**
             * @desc gridpanel更新指定的表格行和卡片,提示：该方法在无定义key=true主键列时使用
             * @param {data} 更新数据
             * @param {rowIndex} 表格行或卡片当前页索引顺序
             * @public
             * @example $("#gridpanel").gridpanel("updateRow",{name:james,age:18...},2);
             */
            updateRowByIndex: function(data, rowIndex) {
                var id = this._getRowUUIDByRowIndex(rowIndex);
                if (!id) {
                    return null;
                }

                this._updateTableAndCardById(data, id, "rowuuid");
            },
            _updateTableAndCardById: function(data, id, keyColumn) {
                var row = null;
                for (var i = 0, len = this.rows.length; i < len; i++) {
                    if (this.rows[i][keyColumn] == id) {
                        for (var key in data) {
                            this.rows[i][key] = data[key];
                        }
                        row = $.extend(true, {}, this.rows[i]);
                        break;
                    }
                }
                if (!row) {
                    return null;
                }
                //转化成数组
                var rowarr = [];
                rowarr.push(row);
                var $this = this;
                this._code2DataRenderGridpanel(rowarr,
                    function(rowdata) {
                        //3.对待渲染数据进行datarender和数据类型（datatype、dataformat）转换进行处理
                        $this._processGridpanelData(rowdata);
                        if ($this.gtable) {
                            var gridtable = $this.gtable.data('gridtable');
                            gridtable.updateRowById(rowdata[0], rowdata[0]["rowuuid"]);
                        }
                        if ($this.gcard) {
                            var gridcard = $this.gcard.data('gridcard');
                            gridcard.updateCardById(rowdata[0], rowdata[0]["rowuuid"]);
                        }
                    }
                );
            },
            /**
             * @desc 代码集数据转换及数据渲染
             * @param {rowsdata} 待渲染表格数据集
             * @param {fn} 代码集转换后待执行函数
             */
            _code2DataRenderGridpanel: function(rowsdata, fn) {
                var $this = this;
                var cols = null,
                    toCodeColumn = null;
                if ($this.gcolumn) {
                    var gridcolumn = $this.gcolumn.data("gridcolumn");
                    cols = gridcolumn.cols;
                    toCodeColumn = gridcolumn.toCodeColumn;
                    toCodeColumn = $this._combinedStaticAndUrlValueSet(toCodeColumn);
                }
                if (toCodeColumn && toCodeColumn.length > 0) {
                    //表示需要做代码集转换（代码转换后执行以后步骤）
                    $this._code2DataComplete(100, 5000, rowsdata, toCodeColumn, function(data) {
                        fn(data);
                    });
                } else {
                    //数据都转换完毕后，交由gridtable和gridcard进行创建渲染表格和卡片
                    fn(rowsdata);
                }
            },

            /**
             * @desc 获取全部数据
             * @return {Array}
             * @public
             * @example $("#gridpanel").gridpanel("getAllData");
             */
            getAllData: function() {
                //gridpanel维护的就是卡片和表格统一的数据
                return this.rows || [];
            },

            /**
             * @desc 根据Param获取数据
             * @param {key} param键值
             * @param {value} param值
             * @return object || null
             * @public
             * @example $("#gridpanel").gridpanel("getAllData");
             */
            getRowDataByParam: function(key, value) {
            	
                var rows = this.rows || [];
                
                for(var i = 0, j = rows.length; i < j; i++){
                	if(rows[i][key] === value){
                        return rows[i];
                	}
                }
                
                return null;
                
            },

            /**
             * @deprecated
             * @desc 获取指定索引行的JSON数据,注意该方法被getRowDataByIndex替代，若是想要在加载完gridpanel后获取数据，使用dataloadcomplete属性
             * @param {rowIndex} 获取数据的行号
             * @example $("#gridpanel").gridpanel("getRow",1);
             */
            getRow: function(rowIndex) {
                rowIndex = parseInt(rowIndex) + 1;
                var data = this.getRowDataByIndex(rowIndex);
                return data;
            },

            /**
             * @desc 获得有效的行的长度
             * @return number
             * @example $("#gridpanel").gridpanel("getRowLength");
             */
            getRowLength: function() {
                return this.rows ? this.rows.length : 0;
            },

            /**
             * @desc 根据在gridcolumn中定义的主键列的值，获取行数据，（注意：若无定义key主键列，该方法无法使用）
             * @param {id} String 设置key=true列的主键值
             * @return data 根据主键获取行数据
             * @public
             * @example $("#gridpanel").gridpanel("getRowDataById","001");
             */
            getRowDataById: function(id) {
                if (!id) {
                    return null;
                }
                var keyColumn = this._getGridcolumnKeyCode();
                if (!keyColumn) {
                    return null;
                }
                var data = null;
                var ids = [];
                ids.push(id);
                data = this._getRowdataByKey(ids, keyColumn, "singleobject");
                return data;
            },
            /**
             * @desc 根据"序号列"的行索引获取行数据，（提示：通常若无定义key主键列时使用该方法）
             * @param {index}
             * @return data 根据index获取的行数据
             * @public
             * @example $("#gridpanel").gridpanel("getRowDataByIndex",7);
             */
            getRowDataByIndex: function(index) {
                var id = this._getRowUUIDByRowIndex(index);
                if (!id) {
                    return null;
                }

                var $this = this;
                var data = null;
                if (id) {
                    var ids = [];
                    ids.push(id);
                    data = $this._getRowdataByKey(ids, "rowuuid", "singleobject");
                }
                return data;
            },
            /**
             * @desc 根据rowIndex行号获取rowuuid，以便获取该行显示的rowdata数据
             * （该方法是针对于gridtable而言，由表格行号确认rowuuid；卡片暂不提供此功能）
             * @param {index}
             * @private
             */
            _getRowUUIDByRowIndex: function(index) {
                var $this = this;
                var id = null;
                if ($this.gtable) {
                    var tds = $this.gtable.find("td.jazz-grid-cell-no");
                    for (var i = 0, len = tds.length; i < len; i++) {
                        var lineno = $(tds[i]).html();
                        if (parseInt(lineno) == parseInt(index)) {
                            id = $(tds[i]).parent().attr("id");
                            break;
                        }
                    }
                }
                return id;
            },
            /**
             * @desc 根据gridcolumn中定义的key=true的列获取rowuuid，以便获取该行显示的rowdata数据
             * @param {index}
             * @private
             */
            _getRowUUIDByKeyCode: function(dataId) {
                var keyColumn = this._getGridcolumnKeyCode();
                if (!keyColumn) {
                    return null;
                }
                var ids = [],
                    rowuuid = null;
                ids.push(dataId);
                var data = this._getRowdataByKey(ids, keyColumn, "singleobject");
                if (data) {
                    rowuuid = data["rowuuid"];
                }
                return rowuuid;
            },

            /**
             * @deprecated
             * @desc 该方法直接根据rowuuid删除数据，以解决没有指定key主键及没有行号rowindex的情况
             * @param {data} 待删除的数据
             */
            removeRow: function(data) {
                //this.removeRowByIndex(index);
                var rowuuid = data["rowuuid"];
                if (!rowuuid) {
                    return null;
                }
                var data = this._removeTableAndCardById(rowuuid, "rowuuid");
                return data;
            },

            /**
             * @deprecated
             * @desc 根据param删除row
             * @param {key} param键值
             * @param {value} param值
             * @param {data} 待删除的数据
             */
            removeRowByParam: function(key, value) {
            	
            	var data = this.getRowDataByParam(key, value);
            	if(!data){
            		return;
            	}
                //this.removeRowByIndex(index);
                var rowuuid = data["rowuuid"];
                
                if (!rowuuid) {
                    return null;
                }
                
                var data = this._removeTableAndCardById(rowuuid, "rowuuid");
                
                return data;
            },
            
            /**
             * @desc 根据在gridcolumn中定义的主键列的值，删除行数据，（注意：若无定义key主键列，该方法无法使用）
             * @param {id} String 设置key=true列的主键值
             * @return data 根据主键删除的行数据
             * @public
             * @example $("#gridpanel").gridpanel("removeRowById","001");
             */
            removeRowById: function(id) {
                if (!id) {
                    return null;
                }
                var keyColumn = this._getGridcolumnKeyCode();
                if (!keyColumn) {
                    return null;
                }
                var data = this._removeTableAndCardById(id, keyColumn);
                return data;
            },
            /**
             * @desc 根据"序号列"的行索引删除行数据，（提示：通常若无定义key主键列时使用该方法）
             * @param {index}
             * @return data 根据index删除的行数据
             * @public
             * @example $("#gridpanel").gridpanel("removeRowByIndex",7);
             */
            removeRowByIndex: function(index) {
                var id = this._getRowUUIDByRowIndex(index);
                if (!id) {
                    return null;
                }

                var data = this._removeTableAndCardById(id, "rowuuid");
                return data;
            },
            _removeTableAndCardById: function(id, keyColumn) {
                if (!id) {
                    return null;
                }
                //2.维护共享数据this.rows
                var data = this._removeRowdataByKey(id, keyColumn);
                if (data && data["rowuuid"]) {
                    //1.分别删除表格和卡片
                    if (this.gtable) {
                        var gridtable = this.gtable.data('gridtable');
                        gridtable.removeRowById(data["rowuuid"]);
                    }
                    if (this.gcard) {
                        var gridcard = this.gcard.data('gridcard');
                        gridcard.removeCardById(data["rowuuid"]);
                    }
                }
                return data;
            },
            /**
             * @desc 返回当前可编辑表格已编辑数据
             * @example $("#gridpanel").gridpanel("getUpdatedRowData");
             */
            /*getUpdatedRowData: function(){
                var that = this;
                var rows = that.rows;
                var data = [],state="",temp=null;
                for(var i=0,len=rows.length;i<len;i++){
                    state = rows[i]["eidtorstate"];
                    if(state){
                        temp={};
                        $.extend(true,temp,rows[i]);
                        data.push(temp);
                    }
                }
                return data || [];
            },*/
            /**
             * @deprecated
             * @desc 返回当前选中的所有数据(今后该方法请使用getSelectedRowData代替)
             * @example $("#gridpanel").gridpanel("getSelection");
             */
            getSelection: function() {
                var $this = this;
                var data = null;
                data = $this.getSelectedRowData();
                return data || [];
            },
            /**
             * @desc 返回当前选中的所有数据，替代getSelection方法
             * @return {Array}
             * @public
             * @example $("#gridpanel").gridpanel("getSelectedRowData");
             */
            getSelectedRowData: function() {
                var $this = this;
                var data = null;
                //1.获取rowuuid,要考虑表格和卡片是否同时存在的情况
                var rowuuids = $this._getSelectedRowId();
                data = $this._getRowdataByKey(rowuuids, "rowuuid") || [];
                if (data) {
                    //为data获取lineNo，只考虑表格行号，不考虑卡片的index
                    var trId = "",
                        no = "";
                    for (var i = 0, len = data.length; i < len; i++) {
                        if ($this.gtable) {
                            trId = data[i]["rowuuid"];
                            no = $this.gtable.find("#" + trId + " td.jazz-grid-cell-no").html();
                            data[i]["lineNo"] = no || "";
                        } else {
                            data[i]["lineNo"] = "";
                        }
                    }
                }
                return data;
            },
            /**
             * @desc 获取table表格行或者card卡片id
             * @private
             */
            _getSelectedRowId: function() {
                var $this = this;
                var idArray = [],
                    id = null;
                if ($this.gtable) {
                    var trs = $this.gtable.find("tr[aria-selected=true]");
                    for (var i = 0, len = trs.length; i < len; i++) {
                        id = $(trs[i]).attr("id");
                        if (id) {
                            idArray.push(id);
                        }
                    }
                } else if ($this.gcard) {
                    var cards = $this.gcard.find('div.jazz-grid-cardcell[aria-selected=true]');
                    for (var i = 0, len = cards.length; i < len; i++) {
                        id = $(cards[i]).attr("id");
                        if (id) {
                            idArray.push(id);
                        }
                    }
                }
                return idArray;
            },
            /**
             * @desc 根据ids,key从gridpanel缓存的this.rows中获取数据
             * @param {ids} 主键值数组
             * @param {key} 标识主键的name,(key=true的主键列name或者rowuuid)
             * @param {returnDataType} 返回data数据的类型，是单个json对象或者是json数组
             * @return data 返回匹配的数据
             * @private
             */
            _getRowdataByKey: function(ids, key, returnDataType) {
                var $this = this,
                    data = [];
                if (!ids || ids.length == 0 || !key) {
                    return null;
                }
                var num = ids.length;
                for (var i = 0, len = $this.rows.length; i < len; i++) {
                    if (num == 0) {
                        break;
                    }
                    for (var j = 0; j < ids.length; j++) {
                        if ($this.rows[i][key] == ids[j]) {
                            data.push($this.rows[i]);
                            num = num - 1;
                            break;
                        }
                    }
                }
                return returnDataType == "singleobject" && data.length == 1 ? data[0] : data;
            },
            /**
             * @desc 根据id,key从gridpanel缓存的this.rows中删除数据
             * @param {id} 主键值
             * @param {key} 标识主键的name,(key=true的主键列name或者rowuuid)
             * @return data 返回匹配删除的数据
             * @private
             */
            _removeRowdataByKey: function(id, key) {
                var $this = this,
                    data = null;
                if (!id || !key) {
                    return data;
                }

                for (var i = 0, len = $this.rows.length; i < len; i++) {
                    if ($this.rows[i][key] == id) {
                        data = $this.rows[i];
                        delete $this.rows[i];
                        break;
                    }
                }
                for (var j = 0, ln = $this.rows.length; j < ln; j++) {
                    if (!$this.rows[j]) {
                        $this.rows.splice(j, 1);
                    }
                }
                return data;
            },
            /**
             * @desc 根据表格行或者卡片id属性值获取单行或者卡片被选中的数据
             * @param {id} 被选中表格行或者卡片的id属性值
             * @return data 被选中表格或者卡片对应gridpanel的数据
             * @private
             * @example this.getSelectedRowDataById(id);
             */
            getSelectedRowDataById: function(id) {
                if (!id) {
                    return null;
                }
                var data = null;
                var ids = [];
                ids.push(id);
                data = this._getRowdataByKey(ids, "rowuuid", "singleobject");
                return data;
            },
            /**
             * @deprecated
             * @desc 根据ID选中行，该方法被selectRowById替代
             * @param {id} 代表行数据的id主键
             */
            selectRow: function(id) {
                this.selectRowById(id);
            },
            /**
             * @deprecated
             * @desc 根据ID取消选中行，该方法被selectRowById替代
             * @param {id} 代表行数据的id主键
             */
            unselectRow: function(id) {
                this.unselectRowById(id);
            },
            /**
             * @desc 根据ID选中行，该方法替代原selectRow(id)，注意：在gridcolumn中表头没有表明key=true列时，该方法不能被使用
             * @param {id} 主键（在gridcolumn中表头属性表明key=true列）
             * @public
             * @example $("#gridpanel").gridpanel("selectRowById",id);
             */
            selectRowById: function(id) {
                if (!id) {
                    return;
                }
                var rowuuid = this._getRowUUIDByKeyCode(id) || id;
                if (rowuuid) {
                    //1.分别执行表格和卡片选中
                    if (this.gtable) {
                        var gridtable = this.gtable.data('gridtable');
                        gridtable.selectRow(rowuuid);
                    }
                    if (this.gcard) {
                        var gridcard = this.gcard.data('gridcard');
                        gridcard.selectRow(rowuuid);
                    }
                }
            },
            /**
             * @desc 根据“序号列”序号值选中行，提示：通常在gridcolumn中表头没有表明key=true列时使用该方法
             * @param {index} “序号列”序号值
             * @public
             * @example $("#gridpanel").gridpanel("selectRowByIndex",index);
             */
            selectRowByIndex: function(index) {
            	var row = this.getRow(index);
                var gridtable = this.gtable.data('gridtable');
                gridtable.selectRow(row.rowuuid);
            },
            /**
             * @desc 根据ID取消选中行，该方法替代原unselectRow(id)
             * @param {id} 主键（在gridcolumn中表头属性表明key=true列）
             * @public
             * @example $("#gridpanel").gridpanel("unselectRowById",id);
             */
            unselectRowById: function(id) {
                if (!id) {
                    return;
                }
                var rowuuid = this._getRowUUIDByKeyCode(id) || id;
                if (rowuuid) {
                    //1.分别执行表格和卡片取消选中
                    if (this.gtable) {
                        var gridtable = this.gtable.data('gridtable');
                        gridtable.unselectRow(rowuuid);
                    }
                    if (this.gcard) {
                        var gridcard = this.gcard.data('gridcard');
                        gridcard.unselectRow(rowuuid);
                    }
                }
            },
            /**
             * @desc 根据“序号列”序号值取消选中行，提示：通常在gridcolumn中表头没有表明key=true列时，使用该方法
             * @param {index} “序号列”序号值
             * @public
             * @example $("#gridpanel").gridpanel("unselectRowByIndex",index);
             */
            unselectRowByIndex: function(index) {
            	var row = this.getRow(index);

                var gridtable = this.gtable.data('gridtable');
                gridtable.unselectRow(row.rowuuid);
//            	this.gtable._unselectRow(row, false);
            },
            /**
             * @desc 选中全部行
             * @public
             * @example $("#gridpanel").gridpanel("selectAllRows");
             */
            selectAllRows: function() {
                if (this.gtable) {
                    var gridtable = this.gtable.data('gridtable');
                    gridtable.selectAllRows();
                }
                if (this.gcard) {
                    var gridcard = this.gcard.data('gridcard');
                    gridcard.selectAllRows();
                }
            },
            /**
             * @desc 取消选中全部行
             * @public
             * @example $("#gridpanel").gridpanel("unselectAllRows");
             */
            unselectAllRows: function() {
                if (this.gtable) {
                    var gridtable = this.gtable.data('gridtable');
                    gridtable.unselectAllRows();
                }
                if (this.gcard) {
                    var gridcard = this.gcard.data('gridcard');
                    gridcard.unselectAllRows();
                }
            },

            /**
             * @desc gridpanel组件统一请求渲染卡片和表格的数据
             * @private
             * @example this._initLoadData();
             */
            _initLoadData: function() {
                var $this = this;
                //确定$this.paginationInfo的值
                if ($this.options.isshowpaginator || $this.options.isshowpaginator == "true") {
                    if ($this.gpaginator) {
                        var paginator = $this.gpaginator.data("paginator");
                        var pagerows = 0;
                        if (paginator) {
                            pagerows = paginator.options["pagerows"] || 0;
                        } else {
                            pagerows = $this.gpaginator.attr("pagerows") || 0;
                        }
                        $this.paginationInfo["pagerows"] = parseInt(pagerows);
                    }
                }
                if ($this.options.dataurl) {
                    //添加加载缓冲组件
                    $this.element.find(".jazz-pagearea").loading();

                    var params = {
                        url: $this.options.dataurl,
                        params: $this.options.dataurlparams,
                        pageparams: $this.paginationInfo,
                        showloading: false,
                        callback: function(responseText, $this) {
                            $this._successLoadData("init", responseText, null, null);
                        }
                    };
                    $.DataAdapter.submit(params, $this);
                }
            },
            /**
             * @desc gridpanel初始化创建、查询、排序、翻页等获取数据后渲染表格卡片
             * @param {loadDataType} 获取渲染数据的逻辑情景，如：“init”
             * @param {responseText} ajax获取返回数据
             * @param {requestdatacomplete} 渲染数据回调函数
             * @param {isRebindPaginator} 是否再次绑定分页条（初始化时绑定，翻页时不再绑定）
             * @private
             * @example this._successLoadData("init",responseText,function(data){...},true);
             */
            _successLoadData: function(loadDataType, responseText, requestdatacomplete, isRebindPaginator) {
                var $this = this;
                if (responseText && typeof(responseText) == 'object') {
                    var dataObj = responseText['data'];
                    if (dataObj) {
                        $this.paginationInfo['page'] = dataObj["page"] || 1;
                        $this.paginationInfo['pagerows'] = dataObj["pagerows"] || 10;
                        $this.paginationInfo['totalrows'] = dataObj["totalrows"] || 0;
                        //缓存gridpanel的数据this.rows
                        $this.rows = dataObj["rows"];

                        if ($this.rows) {

                            //处理$this.rows,增加rowuuid值，作为tr或者card元素的id属性值
                            $this._setRowUUID($this.rows);

                            //克隆rowsdata作为代码集和自定义datarender转换使用
                            var rowsdata = $.extend(true, [], $this.rows);
                            //2.进行代码集转换
                            //注意：a.使用this.gridcolumn创建完成后获取toCodeColumn
                            //（但是vtype形式创建gridpanel时，有可能在ajax获取数据后，gridcolumn尚未创建完成）
                            //b.若是不用a中方式获取代码集，则可以通过gridpanel的options[content]或
                            //者vtype=gridcolumn的子元素获取代码集

                            var cols = null,
                                toCodeColumn = null;
                            if ($this.gcolumn) {
                                var gridcolumn = $this.gcolumn.data("gridcolumn");
                                cols = gridcolumn.cols;
                                toCodeColumn = gridcolumn.toCodeColumn;
                                toCodeColumn = $this._combinedStaticAndUrlValueSet(toCodeColumn);
                            }
                            if (toCodeColumn && toCodeColumn.length > 0) {
                                //表示需要做代码集转换（代码转换后执行以后步骤）
                                $this._code2DataComplete(100, 5000, rowsdata, toCodeColumn, function(data) {
                                    if (loadDataType == "init") {
                                        $this._renderGridpanelData(data);
                                    } else {
                                        $this._requestLoadData(data, requestdatacomplete, isRebindPaginator);
                                    }
                                });
                            } else {
                                //数据都转换完毕后，交由gridtable和gridcard进行创建渲染表格和卡片
                                if (loadDataType == "init") {
                                    $this._renderGridpanelData(rowsdata);
                                } else {
                                    $this._requestLoadData(rowsdata, requestdatacomplete, isRebindPaginator);
                                }
                            }
                        }
                    }
                }
                //隐藏loading组件
				var loadObj = $this.element.find(".jazz-pagearea");
				if(loadObj.data("loading")){
					loadObj.loading("hide");
				}
            },
            /**
             * @descr 为获取的表格数据设置uuid标识,作为gridpanel操作数据的唯一展示值（rowindex/id--->rowuuid--->data）
             * @param {data} 待加载的表格数据数组
             * @private
             * @example this._setRowUUID();
             */
            _setRowUUID: function(data) {
                var $this = this;
                if (data) {
                    for (var i = 0, len = data.length; i < len; i++) {
                        data[i]["rowuuid"] = data[i]["rowuuid"] || Math.uuid(32);
                    }
                }
            },
            /**
             * @desc 获取gridcolumn设置的key=true的主键列
             * @return keyColumn 主键列名name
             * @private
             * @example this._getGridcolumnKeyCode();
             */
            _getGridcolumnKeyCode: function() {
                var $this = this;
                var keyColumn = null;
                if ($this.gcolumn) {
                    var gridcolumn = $this.gcolumn.data("gridcolumn");
                    keyColumn = gridcolumn.keyCode;
                }
                return keyColumn;
            },
            /**
             *@desc 对待渲染数据进行datarender和数据类型（datatype、dataformat）转换进行处理
             *@param {rowsdata} 待渲染json数据数组
             *@private
             *@example this._processGridpanelData();
             */
            _processGridpanelData: function(rowsdata) {
                //1.按照datatype、dataformat处理数据类型
                if (this.gcolumn) {
                    var gridcolumn = this.gcolumn.data("gridcolumn");
                    cols = gridcolumn.cols;
                    var data = null,
                        columnname = "",
                        datatype = "",
                        dataformat = "";
                    for (var i = 0, rowslen = rowsdata.length; i < rowslen; i++) {
                        data = rowsdata[i];
                        for (var j = 0, len = cols.length; j < len; j++) {
                            columnname = cols[j]['columnname'];
                            datatype = cols[j]['datatype'];
                            dataformat = cols[j]['dataformat'];
                            if (datatype && data[columnname] != undefined) {
                                data[columnname] = jazz.util.parseDataByDataFormat({
                                    "cellvalue": data[columnname],
                                    "datatype": datatype,
                                    "dataformat": dataformat
                                });
                            }
                        }
                    }
                }
                //2.进行datarender函数，进行rowsdata数据修改、增加
                this._event("datarender", null, {
                    "data": rowsdata
                });
            },

            _renderGridpanelData: function(rowsdata) {
                var $this = this;
                //对待渲染数据进行datarender和数据类型（datatype、dataformat）转换进行处理
                $this._processGridpanelData(rowsdata);

                //一、数据渲染表格和卡片
                //1.判断子组件是否创建完成,带创建完成后渲染
                //2.需要循环执行这个过程，settimeout
                var delay = 100,
                    timeout = 5000;
                if ($this.gtable) {
                    var gridtable = $this.gtable.data('gridtable');
                    if (gridtable) {
                        gridtable.renderGridtableData(rowsdata, true);
                    } else {
                        loopReloadData($this.gtable, 'gridtable', 0);
                    }
                }
                if ($this.gcard) {
                    var gridcard = $this.gcard.data('gridcard');
                    if (gridcard) {
                        gridcard.renderGridcardData(rowsdata, true);
                    } else {
                        loopReloadData($this.gcard, 'gridcard', 0);
                    }
                }

                //二、绑定分页条
                //if($this.options.isshowpaginator||$this.options.isshowpaginator=="true"){
                if ($this.gpaginator) {
                    var paginator = $this.gpaginator.data('paginator');
                    var a = $this.paginationInfo;
                    if (paginator) {
                        paginator.updatePage({
                            "page": a['page'],
                            "pagerows": a['pagerows'],
                            "totalrecords": a['totalrows']
                        });
                    } else {
                        loopReloadData($this.gpaginator, 'paginator', 0);
                    }
                }
                //}

                //表格加载完成后，重新计算gridtable的每列宽度
                //因为，gridtable出现纵向滚动条后，会导致设置出现横向滚动条（是由于clientwidth小于width导致）
                $this.recomputeGridTableWidth();
                //三、是否创建可编辑组件，并显式显示可编辑组件
                /*var isshoweditcell = $this.options.isshoweditcell;
            if(isshoweditcell){
                if($this.gtable){
                    var gridtable = $this.gtable.data('gridtable');
                    gridtable.createEditorCell();
                }
            }*/
                //四、执行回调dataloadcomplete函数
                $this._event("dataloadcomplete", null, {
                    "data": $this.rows,
                    "paginationInfo": $this.paginationInfo
                });

                //loopReloadData循环校验是否需要渲染gridtable或者gridcard数据
                function loopReloadData(obj, dataname, count) {
                    var compObject = obj.data(dataname);
                    //组件创建完成
                    if (compObject) {
                        if (dataname == "gridtable") {
                            compObject.renderGridtableData(rowsdata, true);
                        } else if (dataname == "gridcard") {
                            compObject.renderGridcardData(rowsdata, true);
                        } else if (dataname == "paginator") {
                            compObject.updatePage({
                                "page": $this.paginationInfo['page'],
                                "pagerows": $this.paginationInfo['pagerows'],
                                "totalrecords": $this.paginationInfo['totalrows']
                            });
                        }
                    } else {
                        if (count * delay <= timeout) {
                            count++;
                            setTimeout(function() {
                                loopReloadData(obj, dataname, count);
                            }, delay);
                        }
                    }
                }
            },
            _combinedStaticAndUrlValueSet: function(codeColumn) {
                if (!codeColumn || !codeColumn.length > 0) {
                    return [];
                }
                var columnname = null;
                var valueset = null;
                var datatype = null;
                var tempArray = [];
                for (var i = 0, len = codeColumn.length; i < len; i++) {
                    var temp = codeColumn[i];
                    columnname = temp.columnname;
                    valueset = temp.valueset;
                    datatype = temp.datatype;
                    if (valueset) {
                        if (valueset.indexOf('[') == 0 && valueset.lastIndexOf(']') == valueset.length - 1) {
                            valueset = eval('(' + valueset + ')');
                            tempArray.push({
                                'columnname': columnname,
                                'valueset': '',
                                'resultset': valueset,
                                'datasettype': 'static',
                                'datatype': datatype
                            });
                        } else {
                            if (valueset.indexOf('{') != -1 || valueset.indexOf('{') != -1) {
                                //初步限制url获取数据集数据格式
                            } else {
                                tempArray.push({
                                    'columnname': columnname,
                                    'valueset': valueset,
                                    'resultset': null,
                                    'datasettype': 'url',
                                    'datatype': datatype
                                });
                            }
                        }
                    }
                }
                return tempArray;
            },
            /**
             * @desc gridpanel代码集转换
             * @param {valuesetColumn} 代码集json数组[{columnname:'',resultset:{}}]
             * @param {rowsData} 待转换代码集的数据
             * @private
             * @example this._code2data(valuesetColumn, rowsData);
             */
            _code2data: function(valuesetColumn, rowsData) {
                //var rows = $.extend(true,[],rowsData);
                var row = null;
                var codeColumn = null;
                var columnName = "";
                var resultset = null;
                var datatype = null;
                var oldText = null;
                for (var j = 0, len = rowsData.length; j < len; j++) {
                    row = rowsData[j];
                    for (var i = 0; i < valuesetColumn.length; i++) {
                        codeColumn = valuesetColumn[i];
                        resultset = codeColumn['resultset'];
                        if (resultset) {
                            columnName = codeColumn['columnname'];
                            oldText = row[columnName];
                            //区别处理下拉框和下拉树
                            datatype = codeColumn['datatype'];
                            if (datatype == "comboxfield") {
                                for (var n = 0; n < resultset.length; n++) {
                                    if (oldText === resultset[n].value) {
                                        row[columnName] = resultset[n].text;
                                    }
                                }
                            } else if (datatype == "comboxtreefield") {
                                for (var n = 0; n < resultset.length; n++) {
                                    if (oldText === resultset[n].id) {
                                        row[columnName] = resultset[n].name;
                                    }
                                }
                            } else {
                                for (var n = 0; n < resultset.length; n++) {
                                    if (oldText === resultset[n].value) {
                                        row[columnName] = resultset[n].text;
                                    }
                                }
                            }
                        }
                    }
                }

                return rowsData;
            },
            /**
             * @desc 依据代码集渲染表格数据
             * @param {delay}   延时执行时间
             * @param {timeout} 超时时间
             * @param {rowsData} 待代码转名称的表格数据
             * @param {toCodeColumn} 待获取代码集记录数组
             * @param {callback} 转换代码集执行回调
             * @private
             * @example this._code2DataComplete(delay, timeout, rowsData,toCodeColumn,callback)
             */
            _code2DataComplete: function(delay, timeout, rowsData, toCodeColumn, callback) {
                var count = 0,
                    $this = this,
                    datatranslated; //翻译后的数据
                if (rowsData) {
                    codeToDataComplete(toCodeColumn, 0);
                }

                function codeToDataComplete(valuesetColumn, index) {
                    if (!valuesetColumn || valuesetColumn.length == 0) {
                        return;
                    }
                    if (index == valuesetColumn.length) {
                        datatranslated = $this._code2data(valuesetColumn, rowsData);
                        callback.call($this, datatranslated);
                    } else if (index < valuesetColumn.length) {
                        var datasettype = valuesetColumn[index]['datasettype'];
                        var resultset = valuesetColumn[index]['resultset'];
                        if (datasettype == "static") {
                            count = 0;
                            index = index + 1;
                            codeToDataComplete(valuesetColumn, index);
                        } else if (datasettype == "url" && resultset) {
                            count = 0;
                            index = index + 1;
                            codeToDataComplete(valuesetColumn, index);
                        } else if (datasettype == "url" && !resultset) {
                            var url = valuesetColumn[index]['valueset'];
                            var data = G.getPageDataSetCache(url);
                            if (data && data.status == 'success') {
                                data = data['data'];
                                if (data[0]["vtype"] || false) {
                                    //dataurl="/bjgs_djgz/dictionary/queryData.do?dicId=CD01" 形式定义
                                    var d = data[0]['data'] || false;
                                    if (d) {
                                        data = d;
                                    } else {
                                        data = [];
                                    }
                                }
                                //else{ dataurl="[{},{}]"形式定义  }
                                valuesetColumn[index]['resultset'] = data;
                                count = 0;
                                index = index + 1;
                                codeToDataComplete(valuesetColumn, index);
                            } else {
                                if (count * delay >= timeout) {
                                    count = 0;
                                    index = index + 1;
                                    codeToDataComplete(valuesetColumn, index);
                                } else {
                                    count++;
                                    setTimeout(function() {
                                        codeToDataComplete(valuesetColumn, index);
                                    }, delay);
                                }
                            }
                        }
                    }
                }
            },
            /**
             * @desc 获取gridpanel组件数据查询请求参数
             * @return {} object
             * @public
             * @example this.getqueryparams();
             */
            getqueryparams: function() {
                return this.options.queryparams || {};
            },
            /**
             * @desc 获取gridpanel组件数据分页信息
             * @return {page:1,pagerows:10,totalrows:30} object
             *          page: 当前表格页码
             *          pagerows: 表格当前页可渲染行数
             *          totalrows: 当前表格总数据条数
             * @public
             * @example $('div[name="gridpanel"]').gridpanel('getPaginationInfo');
             */
            getPaginationInfo: function() {
                return this.paginationInfo || {};
            },
            /**
             * @desc gridpanel组件根据表单提交内容查询
             * @params {comps} 组件集合
             * @params {fn} 查询回调函数
             * @public
             * @example $('div[name="gridpanel"]').gridpanel('query', ['xxxformpanel'],function(data,paginationinfo){...});
             */
            query: function(comps, fn) {
                if ($.isArray(comps)) {
                    var a = {};
                    a['url'] = this.options.dataurl;
                    a['components'] = comps;
                    this.options.queryparams = $.DataAdapter.query(a);
                    this._loadGirdpanelData("query", fn);
                }
            },
            /**
             * @desc gridpanel重新加载数据，返回首页
             * @params {fn} 回调函数 
             * @public
             * @example $('div[name="gridpanel"]').gridpanel('reload',function(data,paginationinfo){...});
             */
            reload: function(data, fn) {
                this._loadGirdpanelData("reload", fn, data);
            },
            /**
             * @desc gridpanel重新加载当前页数据
             * @params {fn} 回调函数 
             * @public
             * @example $('div[name="gridpanel"]').gridpanel('reloadCurrentPage',function(data,paginationinfo){...});
             */
            reloadCurrentPage: function(fn) {
                this._loadGirdpanelData("reloadcurrentpage", fn);
            },
            /**
             * @desc gridpanel提供翻页API接口
             * @param {n} 跳转至的页数
             * @example $('div[name="gridpanel"]').gridpanel('goPage',pageIndex);
             */
            goPage: function(n) {
                if (!n) {
                    return false;
                }
                this.paginationInfo['page'] = n;
                this._loadGirdpanelData();
            },
            _loadGirdpanelData: function(t, fn, data) {
                this.rows = null;
                this._resetQueryDataParams(t);
                this.requestPageData(t, fn, data);
            },
            /**
             * @desc gridpanel统一分页请求数据
             * @param {falg} 不同逻辑数据获取（查询、重载、排序）的标记
             * @param {fn} 数据重载后执行回调
             * @private
             * @example this.requestPageData('query',flag,requestdatacomplete);
             */
            requestPageData: function(flag, fn, reloadJsonData) {
                var $this = this;
                var url = $this.options.dataurl,
                    urlparams = $this.options.dataurlparams,
                    qparams = $this.options.queryparams,
                    pginfo = $this.paginationInfo,
                    sparams = $this.options.sortparams;

                //特别处理reload静态数据加载
                if (flag == "reload") {
                    url = reloadJsonData || $this.options.dataurl;
                }

                if (url) {
                    //添加加载缓冲组件
                    $this.element.find(".jazz-pagearea").loading();

                    if (typeof url == "object") {
                        //dataurl为json静态数据
                        $this._successLoadData("", url, fn, true);
                    } else {
                        //dataurl为字符串地址
                        var data = $.extend({}, pginfo, sparams);
                        var params = {
                            url: url,
                            params: urlparams,
                            pageparams: data,
                            queryparams: qparams,
                            showloading: false,
                            callback: function(resopnseData, that) {
                                var t = (flag != 'paginator');
                                that._successLoadData("", resopnseData, fn, t);
                                if(that.options.paginatorcallback && typeof that.options.paginatorcallback === 'function' && !t){
                                	that.options.paginatorcallback(resopnseData.data.rows);
                                }
                            }
                        };
                        $.DataAdapter.submit(params, $this);
                    }
                }
            },

            /**
             * @desc 通过回调函数加载数据，并渲染卡片和表格数据
             * @param {data} 返回数据
             * @param {fn} 重载数据后执行回调
             * @param {flag} 重新更新绑定分页条标识
             * @private
             * @example this._requestLoadData(data,fn,flag);
             */
            _requestLoadData: function(data, fn, flag) {
                var that = this;
                //一、对待渲染数据进行datarender和数据类型（datatype、dataformat）转换进行处理
                that._processGridpanelData(data);
                if (that.gtable) {
                    that.gtable.gridtable("renderGridtableData", data);
                }
                if (that.gcard) {
                    that.gcard.gridcard("renderGridcardData", data);
                }
                //二、是否创建可编辑组件，并显式显示可编辑组件
                /*var isshoweditcell = that.options.isshoweditcell;
            if(isshoweditcell){
                if(that.gtable){
                    var gridtable = that.gtable.data('gridtable');
                    gridtable.createEditorCell();
                }
            }*/
                //reload/query/reloadcurrentpage/重新更新绑定分页条，更新状态
                //paginator 不再重新绑定更新状态
                var a = that.paginationInfo;
                if (flag) {
                    if (that.options.isshowpaginator && that.gpaginator) {
                        that.gpaginator.paginator("updatePage", {
                            "page": a['page'],
                            "pagerows": a['pagerows'],
                            "totalrecords": a['totalrows']
                        });
                    }
                }

                //表格加载完成后，重新计算gridtable的每列宽度
                //因为，gridtable出现纵向滚动条后，会导致设置出现横向滚动条（是由于clientwidth小于width导致）
                //考虑是否需要重新计算gridtable的每列宽度
                //$this.recomputeGridTableWidth();

                if (fn && $.isFunction(fn)) {
                    fn.call(that, that.rows, a);
                }
            },
            /**
             * @desc gridpanel获取数据重新设置（dataurl、dataurlparams、sortparams、queryparams）
             * @private
             */
            _resetQueryDataParams: function(flag) {
                switch (flag) {
                    case 'reload':
                        this.options.sortparams['sortName'] = '';
                        this.options.sortparams['sortFlag'] = '';
                        this.options.queryparams = {};
                        this.paginationInfo['page'] = 1;
                        this.paginationInfo['totalrows'] = 0;
                        if (this.gcolumn) {
                            this.gcolumn.gridcolumn('clearColumnStatus');
                        }
                        break;
                    case 'reloadcurrentpage':
                        this.paginationInfo['totalrows'] = 0;
                        break;
                    case 'query':
                        this.options.sortparams['sortName'] = '';
                        this.options.sortparams['sortFlag'] = '';
                        this.paginationInfo['page'] = 1;
                        this.paginationInfo['totalrows'] = 0;
                        if (this.gcolumn) {
                            this.gcolumn.gridcolumn('clearColumnStatus');
                        }
                        break;
                    case 'paginator':
                        this.options.sortparams['sortName'] = '';
                        this.options.sortparams['sortFlag'] = '';
                        if (this.gcolumn) {
                            this.gcolumn.gridcolumn('clearColumnStatus');
                        }
                        break;
                }
            },
            /**
             * @desc gridpanel绑定paginator分页点击响应事件(该函数在jazz.paginator组件中调用)
             * @param {page} 页码
             * @param {pagerows} 当前页显示条数
             * @private
             * @example this.bindPaginatorClickEvent(page,pagerows);
             */
            bindPaginatorClickEvent: function(page, pagerows) {
                this.paginationInfo['page'] = page;
                this.paginationInfo['pagerows'] = pagerows;
                this._resetQueryDataParams("paginator");
                this.requestPageData("paginator");
            },

            /**
             * @desc 动态修改gridpanel组件options属性
             * @param {key} 对象的属性名称 
             * @param {value} 对象的属性值
             * @private
             */
            _setOption: function(key, value) {
                //1.通过修改options的dataurl/dataurlparams/queryparams/sortparams
                //结合gopage方法就可以实现gridpanel更新数据
                switch (key) {
                    case 'dataurl':
                        this.paginationInfo['totalrows'] = 0;
                        break;
                    case 'dataurlparams':
                        this.paginationInfo['totalrows'] = 0;
                        break;
                    case 'queryparams':
                        this.paginationInfo['totalrows'] = 0;
                        break;
                }
                this._super(key, value);
            },
            /**
             * @desc gridpanel表格（table）视图时，按百分比总和100%设置宽度后，若是出现纵向滚动条，会导致横向滚动条出现。
             * @private
             */
            recomputeGridTableWidth: function() {
                var gridcolumn = this.gcolumn.data("gridcolumn");
                if (gridcolumn) {
                    gridcolumn._width();
                }
                var gridtable = this.gtable.data('gridtable');
                if (gridtable) {
                    gridtable._width();
                }
            }

        });
    })(jQuery);


    (function($) {
        /**
         * @version 1.0
         * @name jazz.gridcolumn
         * @description 表格头类
         * @constructor
         * @extends jazz.boxComponent
         */
        $.widget("jazz.gridcolumn", $.jazz.boxComponent, {

            options: /** @lends jazz.gridcolumn# */ {
                /**
                 * @desc 组件类型
                 * @type 'String'
                 */
                vtype: "gridcolumn",
                /**
                 * @type String
                 * @desc gridcolumn组件标识名称
                 * @default null
                 */
                name: null,
                /**
                 * @type boolean
                 * @desc 表格列是否可以拖动改变宽度
                 * @default false
                 */
                resizecolumn: true,
                /**
                 * @type boolean
                 * @desc 表头是否可以折行
                 * @default false
                 */
                wordbreak: false,
                /**
                 * @type boolean
                 * @desc 是否隐藏girdpanel表头
                 * @default false
                 */
                hideheader: false,
                /**
                 * @type String
                 * @deprecated
                 * @desc gridcolumn组件表格头列定义（该属性已过期，请使用columnheader）
                 * @default null
                 */
                content: null,
                /**
                 * @type String
                 * @desc gridcolumn组件表格头列定义
                 * @default null
                 */
                columnheader: null,
                /**
                 * @type boolean
                 * @desc gridcolumn是否启用默认的点击排序事件
                 * @default true
                 */
                isdefaultclickevent: true,			
            },

            _create: function() {
                //因为this.options.content语义与jazz.component中的content（指panel中的内容区）冲突，改为columnheader，设值为null。
                this.options.columnheader = this.options.content || "";
                this.options.content = null;
                this._super();

                //1.设置gridcolumn样式
                this.compId = this.getCompId();
                var el = this.element;
                el.attr("id", this.compId + '_gridcolumn').addClass("jazz-gridcolumn");
				/*
				el.css({
                    'width': '100%',
                    'overflow': 'hidden'
                });
				*/
                //1.缓存gridcolumn定义options内容
                if (el.children() && el.children().length > 0) {
                    this.tempcolumnheader = el.children();
                    el.children().remove();
                } else {
                    if (this.options["columnheader"]) {
                        this.tempcolumnheader = $(this.options["columnheader"]);
                    }
                }
                //2.生成girdcolumn dom结构
                var tableclass = "jazz-grid-column-table";
                if (this.options.wordbreak || this.options.wordbreak == "true") {
                    tableclass += " jazz-grid-column-table-wordbreak";
                }
                var div = '<div id="' + this.compId + '_columns" class="jazz-grid-columns" style="display: block;">' + '<table id="' + this.compId + '_table" class="' + tableclass + '" cellspacing="0" cellpadding="0" border="0">' + '<thead><tr><th style="width:0px;height:0px;"></th></tr></thead><tbody></tbody></table></div>';
                el.append(div);
                this.columns = $('#' + this.compId + '_columns');
                this.table = $('#' + this.compId + '_table');
                this.tbody = this.table.children('tbody');
                this.thead = this.table.children('thead'); //使用thead控制表格各列宽度
            },

            _init: function() {
                this._super();

                //var contentWidth = this.element.parents(".jazz-panel-content").width();
                //this.columns.width(contentWidth);

                //1.解析生成gridcolumn options
                this._createGridColumnOptions();
                //2.生成gridcolumn dom结构
                this._createColumns();
                //3.绑定全选ckeckbox框全部选中事件
                this._selectAllTableRows();
                //4.绑定可拖动调整表格列宽度事件
                if (this.options.resizecolumn) {
                    this._bindMoveColumnEvent();
                }
                //5.绑定表格列sort排序事件
                if (this.options.isdefaultclickevent) {
                    this._bindColumnSortEvent();
                // } else {
                //     this._initColumnHeadItems();
                //     this._bindColumnHeadItemsEvent();
                }
                //6.解决ie6兼容性bug重新计算splitter的高度
                //注意当拖动改变宽度的时候，需要再次计算赋值
                this._calculateColumnSplitterHeight();
                //7.隐藏表格头
                if (this.options.hideheader == true || this.options.hideheader == "true") {
                    this.element.hide();
                }
				
				this._overflow();
            },
            /**
             * @desc 覆盖基类中的_width，即不计算设置宽度，gridcolumn宽度自适应gridpanel宽度
             */
            _width: function() {
                //gridcolumn宽度设置分为两种情况：
                //a.gridcolumn初始化时候，
                //b.gridcolumn由于gridpanel resize变化而变化时
                //仅继承jazz.boxcomponent的组件在创建初始化时，不会触发_width方法
                this.calculateGridcolumnWidth();
                this.settingGridcolumnWidth();
            },
            /**
             * @desc 覆盖基类中的_height，即不计算设置高度，gridcolumn高度不变
             */
            _height: function() {
                //gridcolumn高度不涉及变化处理
                //仅继承jazz.boxcomponent的组件在创建初始化时，不会触发_height方法
            },
            _createGridColumnOptions: function() {
                //1. 注意：this.getParentComponent()方法获取父组件必须在_init方法中使用
                // 因为，对于复合组件而言，子组件在执行完_create()方法后，才添加到vtypetree中的
                this.options.lineno = true;
                this.options.linenowidth = 30;
                this.options.isshowselecthelper = true;
                this.options.selecttype = 2;

                var vtypeparent = this.getParentComponent();
                if (vtypeparent && (vtypeparent.attr("vtype") == "gridpanel" || vtypeparent.attr("vtype") == "gridtreepanel")) {
                    this.gridpanel = $(vtypeparent).data(vtypeparent.attr("vtype"));
                    var gridoptions = this.gridpanel.options;

                    this.options.lineno = gridoptions.lineno;
                    this.options.linenowidth = gridoptions.linenowidth;
                    this.options.isshowselecthelper = gridoptions.isshowselecthelper;
                    this.options.selecttype = gridoptions.selecttype;
                }
                //2.解析gridcolumn表格头元素headers
                if (this.tempcolumnheader) {
                    var headers = [];
                    $.each(this.tempcolumnheader, function(i, content) {
                        var t = [],
                            str = '';
                        $.each($(content).children(), function(j, objs) {
                            var obj = $(objs);
                            str = {
                                text: obj.attr("text"),
                                textalign: obj.attr("textalign"),
                                name: obj.attr("name"),
                                visible: obj.attr("visible"),
                                width: obj.attr("width"),
                                datatype: obj.attr("datatype"),
                                dataformat: obj.attr("dataformat"),
                                textdisplaytype: obj.attr("textdisplaytype"),
                                rowspan: obj.attr("rowspan"),
                                valueset: obj.attr("dataurl"),
                                key: obj.attr("key"),
                                colspan: obj.attr("colspan"),
                                sort: obj.attr("sort"),
                                iseditable: obj.attr("iseditable"),
                                issummary: obj.attr("issummary"),
                                summarytype: obj.attr("summarytype"),
                                summaryrender: obj.attr("summaryrender")
                                // ,
                                // items: obj.attr("items"),
                                // costomattribute: obj.attr("costomattribute")
                            };
                            t.push(str);
                        });
                        headers.push(t);
                    });
                    this.options.header = headers;
                }
            },
            /**
             * @desc 重新计算设置splitter的高度，解决splitter不同浏览器下height：100%问题
             * @private
             */
            _calculateColumnSplitterHeight: function() {
                var splitterObj = this.tbody.find(".jazz-grid-column-splitter");
                $.each(splitterObj, function(i, obj) {
                    var tdHeight = $(obj).parents('.jazz-grid-headerCell').height() || 24;
                    $(obj).height(tdHeight);
                });
            },

            /**
             * @desc 创建columns
             * @private
             */
            _createColumns: function() {
                var lineno = this.options.lineno;
                var isshowselecthelper = this.options.isshowselecthelper;
                var selecttype = this.options.selecttype;
                var header2 = '',
                    colIndex = 0;

                this.columnWidth = []; //记录每一列的宽度
                this.cols = []; //存储td显示的有效列名称,以后gridtable中使用到的列属性都加到这里面
                this.toCodeColumn = []; //存储代码集列[{columnName:'',valueset:''}]

                var headers = this.options.header,
                    headrows = headers.length; //表头共有几行

                var nums = 0;
                if (this.options.lineno == true || this.options.lineno == 'true') { //序号列
                    nums += 1;
                }
                if ((this.options.isshowselecthelper == true || this.options.isshowselecthelper == 'true') &&
                    (this.options.selecttype != 0 || this.options.selecttype != '0')) {
                    nums += 1;
                }

                var cellColumnIndexArray = this._getCellColumnIndexArray();


                var headcell = null,
                    cover = null,
                    colindex = null,
                    celltype = null,
                    celldata = null;
                for (var i = 0; i < cellColumnIndexArray.length; i++) {
                    header2 += '<tr><th></th>';

                    //遍历cellColumnIndexArray每一个数组元素，即遍历生成每一表头行
                    for (var j = 0, len = cellColumnIndexArray[i].length; j < len; j++) {
                        headcell = cellColumnIndexArray[i][j];
                        cover = headcell['cover'];
                        colindex = headcell['colindex'];
                        celltype = headcell['celltype'];
                        celldata = headcell['celldata'];

                        if (cover == 'combined') {
                            continue;
                        }
                        if (celltype) { //表格头特殊列；序号列、checkbox列或者radio列
                            if (celltype == 'lineno') {
                                header2 += '<td index="' + colindex + '" class="jazz-grid-headerCell" rowspan="' + headrows + '">' + '<div class="jazz-grid-headerCell-inner jazz-grid-headerCell-no">序号</div></td>';

                                /*header2 +='<td index="'+colindex+'" class="jazz-grid-headerCell" rowspan="'+headrows+'">'
                                    + '<div class="jazz-grid-headerCell-outer">'
                                    + '<div class="jazz-grid-headerCell-inner">序号</div><div class="jazz-grid-column-splitter"></div></td>';*/
                            }
                            if (celltype == 'select') {
                                if (selecttype == 2 || selecttype == '2') {
                                    header2 += '<td index="' + colindex + '" class="jazz-grid-headerCell jazz-grid-headerCell-checkbox" rowspan="' + headrows + '">' + '<div class="jazz-grid-headerCell-box">' + '<input type="checkbox" name="' + this.compId + '_box" id="' + this.compId + '_box" />' + '</div>' + '</td>';
                                } else {
                                    header2 += '<td class="jazz-grid-headerCell jazz-grid-headerCell-checkbox">&nbsp;</td>';
                                }
                            }
                        } else {
                            if (!celldata) {
                                continue;
                            }

                            if (celldata.name) {

                                //存储key==true
                                if (celldata.key == true || celldata.key == 'true') {
                                    this.keyCode = celldata.name.replace(/^\s+(\w+)\s+$/g, "$1");
                                }
                                //存储需要显示在td上的列的字段名,并按显示列排序，以便gridtable加载数据使用
                                this.cols[colindex - nums] = {
                                    'columnname': celldata.name,
                                    'sort': celldata.sort,
                                    'index': colindex,
                                    'datatype': celldata.datatype,
                                    'dataformat': celldata.dataformat,
                                    'textalign': celldata.textalign,
                                    'iseditable': celldata.iseditable,
                                    'issummary': celldata.issummary,
                                    'summarytype': celldata.summarytype,
                                    'summaryrender': celldata.summaryrender
                                };
                                //this.cols.push({'columnname':celldata.name,'sort':celldata.sort,'index':colindex,'columnrender':celldata.columnrender});
                                //存储需要代码集列
                                this.toCodeColumn.push({
                                    'columnname': celldata.name,
                                    'valueset': celldata.valueset,
                                    'datatype': celldata.datatype
                                });

                                //进行每列定义的宽度值，此处不进行实际px值转换
                                var width = celldata.width,
                                    visible = celldata.visible;
                                this.columnWidth[colindex - nums] = {
                                    'columnname': celldata.name,
                                    'columnwidth': celldata.width,
                                    'visible': visible
                                };
                            }

                            //if (celldata.visible != false && celldata.visible != "false"){
                            var _colspan = '',
                                _rowspan = '',
                                _align = '',
                                _bottomclass = '',
                                _name = '',
                                _text = '',
                                _items = '';
                            if (celldata.rowspan) {
                                _rowspan = ' rowspan="' + celldata.rowspan + '"';
                            }
                            if (celldata.colspan) {
                                _colspan = ' colspan="' + celldata.colspan + '"';
                            }
                            if (celldata.textalign) {
                                _align = ' style="text-align: ' + celldata.textalign + '"';
                            }
                            if (celldata.text) {
                                _text = celldata.text;
                            }
                            if (celldata.name) {
                                _bottomclass = ' jazz-grid-bottomCell';
                                _name = celldata.name;
                            }
                            if (celldata.items) {
                                _items = celldata.items;
                            }
                            header2 += '<td index="' + colindex + '" name="' + _name + '" items="' + _items + '" class="jazz-grid-headerCell' + _bottomclass + '" ' + _rowspan + _colspan + '>' + '<div class="jazz-grid-headerCell-outer">'
                                // + '<div class="jazz-grid-headerCell-inner" '+_align+'>'+ _text+ '</div><div class="jazz-grid-column-splitter"></div></td>';
                                /**
                                 * 去掉原<td>内部的div
                                 */
                                + '<div class="jazz-grid-headerCell-inner" ' + _align + ' title='+_text.replace(/<br>/g,"/")+'>' + _text + '</div><div class="jazz-grid-column-splitter"></div></td>';
                            //}
                        }
                    }
                    header2 += '</tr>';
                }
                //当gridpanel在隐藏元素中时，headerWidth的宽度为0，这样表格和卡片就不能正常展开计算宽度
                //var headerWidth = this.columns.width();
                //根据预定义的列宽，计算每列宽度。缓存自定义宽度值和实际计算值this.columnWidth
                this.calculateGridcolumnWidth();
                //生成thead DOM结构,只生成dom暂时宽度不赋值
                this._createTheadDom();
                //为表格总宽度和各列宽度赋值
                this.settingGridcolumnWidth();

                this.table.append(header2);
            },
			
            /**
			 * @desc 对overflow的属性的处理
			 * @private
			 */
			_overflow: function(){
				if(this.gridpanel && this.gridpanel.options.overflow == "visible"){
					this.element.find(".jazz-grid-columns").css("overflow", "visible");
				}else{
					this.element.find(".jazz-grid-columns").css("overflow", "hidden");
				}
			},			
			
            /**
             * @desc 根据预定义的列宽，计算每列宽度。缓存自定义宽度值和实际计算值this.columnWidth
             * @private
             * @example this.calculateGridcolumnWidth();
             */
            calculateGridcolumnWidth: function() {
                var width_table = this.columns.width();
                //除去序号和选择框列宽度，再进行分配表格列宽
                if ((this.options.isshowselecthelper == true || this.options.isshowselecthelper == 'true') && (this.options.selecttype != 0 || this.options.selecttype != '0')) {
                    width_table -= 24;
                }
                if (this.options.lineno == true || this.options.lineno == 'true') {
                    var linowidth = this.options.linenowidth ? parseInt(this.options.linenowidth) : 30;
                    width_table -= linowidth;
                }
                var grid = this.getParentComponent();
                if (grid) {
                    var gridtable = $(grid)[grid.attr("vtype")]('getGridTable');
                    if (gridtable) {
                        var contentDiv = gridtable.find(".jazz-grid-tables");
                        if (contentDiv.size() > 0) {
                            var gridTableClientWidth = contentDiv.get(0).clientWidth;
                            var gridTableWidth = contentDiv.width();
                            if (gridTableWidth > gridTableClientWidth) {
                                width_table -= 17;
                            }
                        }

                    }
                }

                var re = /^[0-9]+.?[0-9]*$/;
                var fixedColumnWidth = 0;
                var exceptFixedColumnWidth = 0;
                var percentColumnWidth = 0;
                var hasPercentWidth = false;
                var autoWidthNums = 0;
                //gridcolumn表头宽度计算规则：
                //1.除去序号和选择框列宽度，再进行分配表格列宽
                //2.除去visible=false的列，（若以后要显示隐藏可通过接口方法重新计算列宽，更新girdcolumn和gridtable的宽度）
                //3.首先设置固定宽度，即定义width=300 或 width=300px
                //4.其次设置百分比宽度，即定义width=20%
                //5.最后计算未定义的宽度，即定义width="*"或者未定义width的列
                for (var i = 0, m = this.columnWidth.length; i < m; i++) {
                    var temp = this.columnWidth[i];
                    var colwidth = temp['columnwidth'];
                    var visible = temp["visible"];
                    if (visible === "false" || visible === false) {
                        continue;
                    }
                    if (!colwidth || $.trim(colwidth) == '*') {
                        autoWidthNums++;
                    } else {
                        if (colwidth.indexOf('px') != -1 || (re.test(colwidth) && colwidth.indexOf('%') == -1)) {
                            fixedColumnWidth += parseFloat(colwidth);
                            //记录实际值
                            temp['_columnwidth'] = parseFloat(colwidth);
                        }
                        if (!hasPercentWidth && colwidth.indexOf('%') != -1) {
                            hasPercentWidth = true;
                        }
                    }
                }
                exceptFixedColumnWidth = width_table - fixedColumnWidth;
                if (hasPercentWidth) {
                    //exceptFixedColumnWidth = width_table-fixedColumnWidth;
                    //循环计算百分比定义的列宽
                    for (var i = 0, m = this.columnWidth.length; i < m; i++) {
                        var temp = this.columnWidth[i];
                        var colwidth = temp['columnwidth'];
                        var visible = temp["visible"];
                        if (visible === "false" || visible === false) {
                            continue;
                        }
                        if (colwidth && colwidth.indexOf('%') != -1) {
                            var a = colwidth.substring(0, colwidth.indexOf('%'));
                            var b = Math.floor((a / 100) * exceptFixedColumnWidth);
                            //记录实际值
                            temp['_columnwidth'] = b;
                            //temp['_columnwidth'] = b+"px";//将原%数值改为px数值
                            percentColumnWidth += b;
                        }
                    }
                }

                if (autoWidthNums > 0) {
                    var leftColumnWidth = exceptFixedColumnWidth - percentColumnWidth;
                    for (var i = 0, m = this.columnWidth.length; i < m; i++) {
                        var temp = this.columnWidth[i];
                        var colwidth = temp['columnwidth'];
                        var visible = temp["visible"];
                        if (visible === "false" || visible === false) {
                            continue;
                        }
                        if (!colwidth || $.trim(colwidth) == '*') {
                            //记录实际值
                            temp['_columnwidth'] = Math.floor(leftColumnWidth / autoWidthNums);
                        }
                    }
                }
            },
            /**
             * @desc 生成colgroup DOM结构,只生成dom暂时宽度不赋值
             * @private 
             */
            _createTheadDom: function() {
                //2.生成thead DOM结构，以控制表格列宽度
                var linowidth = "";
                var thead_th = "";
                if ((this.options.isshowselecthelper == true || this.options.isshowselecthelper == 'true') && (this.options.selecttype != 0 || this.options.selecttype != '0')) {
                    thead_th += '<th style="width:24px;height:0px;" name="selecthelper"></th>'; // class="jazz-grid-colgroup-col"
                }
                if (this.options.lineno == true || this.options.lineno == 'true') {
                    linowidth = this.options.linenowidth ? parseInt(this.options.linenowidth) + "px" : "30px";
                    thead_th += '<th style="width:' + linowidth + ';height:0px;" name="rowlineno"></th>'; //class="jazz-grid-colgroup-col" 
                }
                for (var i = 0, len = this.columnWidth.length; i < len; i++) {
                    var temp = this.columnWidth[i];
                    //var visible = temp['visible'];
                    var colname = temp['columnname'];
                    thead_th += '<th style="height:0px;" name="' + colname + '"></th>'; //class="jazz-grid-colgroup-col" 
                }
                this.thead.find('tr').append(thead_th);
            },
            /**
             * @desc 为表格总宽度和各列宽度赋值
             * @private
             */
            settingGridcolumnWidth: function() {
                //3.为表格总宽度和各列宽度赋值
                /*this.tableWidth = 0,linowidth=0;
                var columnAllwidth = this.columns.width() - jazz.scrollWidth;
                if((this.options.isshowselecthelper == true || this.options.isshowselecthelper == 'true') 
                    && (this.options.selecttype != 0 || this.options.selecttype != '0')){
                    this.tableWidth += 24;
                }   
                if(this.options.lineno == true || this.options.lineno == 'true'){
                    linowidth = this.options.linenowidth?parseInt(this.options.linenowidth):30;
                    this.tableWidth += linowidth;
                }*/
                for (var i = 0, len = this.columnWidth.length; i < len; i++) {
                    var temp = this.columnWidth[i];
                    var width = temp['_columnwidth']; //计算后的实际宽度
                    var visible = temp['visible'];
                    var colname = temp['columnname'];
                    if (visible == false || visible == "false") {
                        width = 0;
                    }
                    //表格的宽度是否需要根据visible属性发生变化
                    //this.tableWidth += width;
                    this.thead.find('th[name="' + colname + '"]').css("width", width + "px");
                }

                /**
                 * <table></table>样式类里设置width:0px; 
                 * <thead>中的
                 * <tr><td style="width:0;height:0"></td><td style="border-width: 0px 0px 0px 1px;width:100px"></td>……通过改变td中的宽度，控制表格的宽度。
                 */

                //this.table.width(this.tableWidth);
            },
            _getCellColumnIndexArray: function() {
                var headers = this.options.header,
                    headrows = headers.length; //表头共有几行

                //将表头转化成m*n的一个二维数组，每个二维数组元素中存放着四个值{colindex:0,cover:false，celltype:null,celldata:null};    
                //确定列数
                var columnnums = 0;
                var haslineno = false,
                    hasselectbox = false;
                if (this.options.lineno == true || this.options.lineno == 'true') { //序号列
                    columnnums += 1;
                    haslineno = true;
                }
                if ((this.options.isshowselecthelper == true || this.options.isshowselecthelper == 'true') && (this.options.selecttype != 0 || this.options.selecttype != '0')) {
                    columnnums += 1;
                    hasselectbox = true;
                }
                for (var m = 0; m < headrows; m++) {
                    for (var n = 0, len = headers[m].length; n < len; n++) {
                        if (headers[m][n]['name']) {
                            columnnums = columnnums + 1;
                        }
                    }
                }
                var cellColumnIndexArray = [];
                for (var m = 0; m < headrows; m++) {
                    cellColumnIndexArray[m] = [];
                    for (var n = 0; n < columnnums; n++) {
                        cellColumnIndexArray[m][n] = {
                            colindex: 0,
                            cover: false,
                            celldata: null
                        };
                    }
                }
                //若是有序号列
                if (hasselectbox) {
                    for (var j = 0; j < headrows; j++) {
                        if (j == 0) {
                            cellColumnIndexArray[j][0]['colindex'] = 0;
                            cellColumnIndexArray[j][0]['cover'] = true;
                            cellColumnIndexArray[j][0]['celltype'] = 'select';
                        } else {
                            cellColumnIndexArray[j][0]['cover'] = 'combined';
                        }
                    }
                }
                //若是复选或单选选择列
                if (haslineno && hasselectbox) {
                    for (var j = 0; j < headrows; j++) {
                        if (j == 0) {
                            cellColumnIndexArray[j][1]['colindex'] = 1;
                            cellColumnIndexArray[j][1]['cover'] = true;
                            cellColumnIndexArray[j][1]['celltype'] = 'lineno';
                        } else {
                            cellColumnIndexArray[j][1]['cover'] = 'combined';
                        }
                    }
                } else if (!hasselectbox && haslineno) {
                    for (var j = 0; j < headrows; j++) {
                        if (j == 0) {
                            cellColumnIndexArray[j][0]['colindex'] = 0;
                            cellColumnIndexArray[j][0]['cover'] = true;
                            cellColumnIndexArray[j][0]['celltype'] = 'lineno';
                        } else {
                            cellColumnIndexArray[j][0]['cover'] = 'combined';
                        }
                    }
                }
                //确定单元格最终列坐标
                for (var m = 0; m < headrows; m++) {
                    for (var n = 0, len = headers[m].length; n < len; n++) {
                        var obj = headers[m][n];
                        var rowspan = parseInt(obj['rowspan']) || 1;
                        var colspan = parseInt(obj['colspan']) || 1;

                        //遍历cellColumnIndexArray[m]确定cover：false的格子，即为td的坐标
                        var positionIndex = 0;
                        for (var k = 0; k < cellColumnIndexArray[m].length; k++) {
                            if (cellColumnIndexArray[m][k]['cover'] == false) {
                                positionIndex = k;
                                cellColumnIndexArray[m][k]['cover'] = true;
                                cellColumnIndexArray[m][k]['colindex'] = k + colspan - 1;
                                cellColumnIndexArray[m][k]['celldata'] = obj;
                                break;
                            }
                        }

                        //kaolv当是visible=false的情况，他没有rowspan、colspan的时候

                        if (rowspan > 1) {
                            for (var j = m + 1; j < m + rowspan; j++) {
                                cellColumnIndexArray[j][positionIndex]['cover'] = 'combined';
                            }
                        }

                        if (colspan > 1) {
                            for (var j = positionIndex + 1; j < positionIndex + colspan; j++) {
                                cellColumnIndexArray[m][j]['cover'] = 'combined';
                            }
                        }
                    }
                }
                return cellColumnIndexArray;
            },

            /**
             * @desc 选中表格的全部记录
             */
            _selectAllTableRows: function() {
                var $this = this;
                $('#' + this.compId + '_box').off('click.box').on('click.box', function() {
                    if ($this.gridpanel) {
                        if ($(this).prop('checked')) {
                            var _data = $this.gridpanel.getSelectedRowData();
                            $this.gridpanel.selectAllRows();
                            var data = [], _alldata = $this.gridpanel.getSelectedRowData();
                            for(var i=0, len=_alldata.length; i<len; i++){
                            	var flag = true;
                            	for(var j=0, k=_data.length; j<k; j++){
                            		if(_data[j]["rowuuid"] == _alldata[i]["rowuuid"]){
                            			flag = false;
                            		}
                            	}
                            	if(flag){
                            		data.push(_alldata[i]);
                            	}
                            }
                            $this.gridpanel._event("selectall", event, {data: data, predata: _data});
                        } else {
                        	var _data = $this.gridpanel.getSelectedRowData();
                            $this.gridpanel.unselectAllRows();
                            $this.gridpanel._event("unselectall", event, {data: _data});
                            _data = null;
                        }
                    }
                });
            },

            /**
             * @desc 列头移动事件
             */
            _bindMoveColumnEvent: function() {
                var $this = this,
                    $tbody = this.tbody.find('td');
                $tbody.off('mousedown.splitter').on('mousedown.splitter', function(e) {
                    var target = e.target,
                        $target = $(target);
                    //点击到拖动区域时，出现拖动线
                    if ($target.is('.jazz-grid-column-splitter')) {
                        //当前的td对象
                        $this.spliderTd = $target.closest('td');
                        $this.x1 = e.pageX;

                        //计算拖拽条的高度
                        var splitHeight = $this.columns.height() + $this._getTableObj().element.height();

                        $this.grid_proxy = $('<div class="jazz-grid-proxy" style="display:none"></div>').appendTo(document.body);
                        $this.grid_proxy.css({
                            display: 'block',
                            top: $this.columns.offset().top,
                            left: $this.x1,
                            height: splitHeight
                        });
                        /*if (!$.browser.mozilla) {
                                $(document).on("selectstart", function(){return false; });
                            }else{
                                $("body").css("-moz-user-select", "none");
                            }*/
                        //阻止鼠标按下mousedown时选中元素事件，存在兼容性问题
                        $(document).on("selectstart", function() {
                            return false;
                        });
                        $("body").css({
                            "-moz-user-select": "none",
                            "-khtml-user-select": "none",
                            "user-select": " none"
                        });

                        //document绑定鼠标移动事件，记录移动距离，以便鼠标移动结束后计算宽度
                        $(document).off('mousemove.splitter').on('mousemove.splitter', function(e) {
                            if ($this.grid_proxy) {
                                $this.x2 = e.pageX;
                                $this.grid_proxy.css({
                                    top: $this.columns.offset().top,
                                    left: $this.x2,
                                    height: splitHeight
                                });
                            }
                        });
                        //document绑定mouseup事件，鼠标弹起计算移动距离，重新改变表头列宽度
                        $(document).off('mouseup.splitter').on('mouseup.splitter', function(e) {
                            if ($this.grid_proxy) {
                                $this.grid_proxy.remove();
                                var w = 0;
                                if ($this.x2 != 0) {
                                    w = $this.x2 - $this.x1; //移动距离
                                }

                                $this.x2 = 0; //计算后，将移动距离清零
                                var index = $this.spliderTd.attr('index'); //列索引 
                                var obj = $this.thead.find("th").eq((parseInt(index) + 1)); //列th对象

                                var tableWidth = $this.table.width(); //表宽度
                                var colWidth = obj.width(); //获取索引列宽度
                                var newColWidth = colWidth + w;

                                //新的列跨度不小,如果小于给默认值
                                var dfWidth = 30;
                                if (newColWidth < dfWidth) {
                                    newColWidth = dfWidth;
                                    w = -(colWidth - newColWidth);
                                    $this.grid_proxy.css({
                                        top: $this.columns.offset().top,
                                        left: $this.x1 + w,
                                        height: splitHeight
                                    });
                                }

                                obj.width(newColWidth);
                                var newTableWidth = tableWidth + w;
                                //$this.table.width(newTableWidth);

                                var tableObj = $this._getTableObj();
                                var childrenObj = tableObj.thead.find('th').eq((parseInt(index) + 1));
                                childrenObj.width(newColWidth);
                                //tableObj.table.width(newTableWidth);
                            }
                            /*if (!$.browser.mozilla) {
                                $(document).off("selectstart");
                            }else{
                                $("body").css("-moz-user-select", "auto");
                            }*/
                            //拖动结束改变列宽后，取消绑定的禁止选中元素事件
                            $(document).off("selectstart");
                            $("body").css({
                                "-moz-user-select": "",
                                "-khtml-user-select": "",
                                "user-select": ""
                            });
                            //拖动结束改变列宽后，取消document绑定的mousemove/mouseup事件
                            $(document).off('mousemove.splitter mouseup.splitter');

                            //拖动完毕后，修改splitter的高度
                            $this._calculateColumnSplitterHeight();
                        });

                    }
                });
            },
            _bindColumnSortEvent: function() {
                var $this = this;
                //只为class包含jazz-grid-bottomCell
                var el = this.tbody.find('td.jazz-grid-bottomCell');
                el.off('click.sortcell').on('click.sortcell', function(e) {
                    var colindex = $(this).attr('index');
                    var colname = $(this).attr('name');
                    var sortFlag = 'asc';
                    var sortable = false;
                    if (!colname) {
                        return;
                    }
                    for (var i = 0, len = $this.cols.length; i < len; i++) {
                        if (colname == $this.cols[i]['columnname']) {
                            sortable = $this.cols[i]['sort'] == true || $this.cols[i]['sort'] == 'true';
                            break;
                        }
                    }
                    if (sortable) {
                        el.filter("[name!=" + colname + "]").removeClass('jazz-grid-asc jazz-grid-desc').find('span.jazz-grid-sortIcon').remove();
                        if ($(this).find('span.jazz-grid-sortIcon').length == 0) {
                            $(this).find('div.jazz-grid-headerCell-inner').append('<span class="jazz-grid-sortIcon"></span>');
                        }
                        if ($(this).hasClass('jazz-grid-asc')) {
                            $(this).removeClass('jazz-grid-asc').addClass('jazz-grid-desc');
                            sortFlag = 'desc';
                        } else if ($(this).hasClass('jazz-grid-desc')) {
                            $(this).removeClass('jazz-grid-desc').addClass('jazz-grid-asc');
                        } else {
                            $(this).addClass('jazz-grid-asc');
                        }
                        //3.在绑定函数中调用gridtable的刷新数据的方法
                        if (colname) {
                            //1.同步gridpanel的sortparams
                            $this.gridpanel.options.sortparams["sortName"] = colname;
                            $this.gridpanel.options.sortparams["sortFlag"] = sortFlag;
                            //2.调用gridpanel请求新数据
                            $this.gridpanel.requestPageData();
                        }
                    }
                });
            },
            // _initColumnHeadItems: function() {
            //     var that = this,
            //         items,
            //         dom,
            //         triggertype;
            //     this._columnstep = 0;
            //     this._columnDomPool = $("<div></div>");
            //     this._columnDomPool.appendTo($("body")).hide();
            //     $("td", this.table).each(function() {
            //         items = $(this).attr("items");
            //         if (items == undefined || items == "" || window[items] == undefined) {
            //             return;
            //         }
            //         //直接从window中取变量返回的都是数组
            //         items = window[items][0];
            //         that._createItemsAndBindCostomEvent($(this), items, true);

            //     })
            // },
            // _createItemsAndBindCostomEvent: function(pdom, opt, isRoot) {
            //     var width = opt.width || 100,
            //         height = 0,
            //         items = opt.children || [],
            //         // rootName = pdom.attr("name") || pdom.attr("__root_name"),
            //         id = this.element.attr("name") + (++this._columnstep),
            //         dom,
            //         item,
            //         _height,
            //         _dom,
            //         _type,
            //         _id,
            //         _callback,
            //         _triggertype = opt.triggertype || "click";

            //     //给父级添加属性用来找子集
            //     pdom.attr("__child_id", id);
            //     dom = $("<div __id='" + id + "' class='jazz-grid-column-menu-parent'></div>");

            //     for (var i = 0, j = items.length; i < j; i++) {
            //         item = items[i];
            //         _height = item.height || 30;
            //         _id = item.id;
            //         _type = item.type;
            //         _callback = item.callback;

            //         //创建每个menu中的按钮
            //         _dom = $("<div _id='" + _id + "' class='jazz-grid-column-menu-child'></div>");
            //         _dom.css({
            //             width: width,
            //             height: _height
            //         });

            //         //根据type左对应的处理
            //         if (_type == "checkbox") {
            //             $("<input value='" + _id + "' type='checkbox'/><span>" + item.name + "<span>").appendTo(_dom);
            //         } else if (_type == "date") {

            //         } else if (_type == "text") {
            //             $("<input type='text' value='" + item.name + "'/>").appendTo(_dom);
            //         } else if (_type == "radio") {
            //             $("<input value='" + _id + "' type='radio'/><span>" + item.name + "<span>").appendTo(_dom);
            //         } else {
            //             $("<span>" + item.name + "<span>").appendTo(_dom);
            //         }

            //         //添加子集menu对象
            //         if (item.items && item.items.children && item.items.children.length) {
            //             this._createItemsAndBindCostomEvent(_dom, item.items);
            //         }

            //         //追加到Menu上
            //         _dom.appendTo(dom);

            //         //计算外层menu的高度
            //         height += (parseInt(_height) + 2);
            //     }
            //     dom.css({
            //         width: width,
            //         height: height
            //     }).appendTo(this._columnDomPool);

            //     //最初始的td点击出现menu事件
            //     if (isRoot) {
            //         pdom.on(_triggertype, function() {
            //             dom.appendTo($("body")).show().position({
            //                 my: "left top",
            //                 at: "left bottom",
            //                 of: pdom
            //             });
            //         });
            //     } else {
            //         pdom.on(_triggertype, function() {
            //             dom.appendTo($("body")).show().position({
            //                 my: "left top",
            //                 at: "right top",
            //                 of: pdom
            //             });
            //         });
            //     }

            // },
            // _bindColumnHeadItemsEvent: function() {
            //     var delayHide;
            //     $(".jazz-grid-column-menu-parent").off("mouseleave")
            //         .on("mouseleave", function() {
            //             delayHide = setTimeout(function(){
            //                 $(".jazz-grid-column-menu-parent").hide().appendTo(this._columnDomPool);
            //             },20);
            //         }).off("mouseenter")
            //         .on("mouseenter");
            // },
            _getTableObj: function() {
                if (!this.gridTableObj) {
                    var grid = this.getParentComponent();
                    if (grid) {
                        if (!grid.gridTableObj) {
                            var t = $(grid)[grid.attr("vtype")]('getGridTable');
                            grid.gridTableObj = t.data('gridtable');
                        }
                    }
                    this.gridTableObj = grid.gridTableObj;
                }
                return this.gridTableObj;
            },
            hideColumn: function(columnname) {
                if (!columnname) {
                    return;
                }
                var el = this.thead.find('th[name="' + columnname + '"]');
                if (el.length > 0) {
                    el.css('width', '0px');
                    var gridTableObj = this._getTableObj();
                    if (gridTableObj) {
                        $(gridTableObj['thead']).find('th[name="' + columnname + '"]').css('width', '0px');
                    }
                }
            },
            showColumn: function(columnname) {
                if (!columnname) {
                    return;
                }
                for (var i = 0, len = this.columnWidth.length; i < len; i++) {
                    var temp = this.columnWidth[i];
                    var width = temp['_columnwidth']; //计算后的实际宽度
                    var colname = temp['columnname'];
                    if (colname == columnname) {
                        this.thead.find('th[name="' + colname + '"]').css("width", width + "px");
                        var gridTableObj = this._getTableObj();
                        if (gridTableObj) {
                            $(gridTableObj['thead']).find('th[name="' + colname + '"]').css("width", width + "px");
                        }
                    }
                }
            },
            clearColumnStatus: function() {
                var $this = this;
                //只为class包含jazz-grid-bottomCell
                var el = this.tbody.find('td.jazz-grid-bottomCell');
                if (el.length > 0) {
                    el.removeClass('jazz-grid-asc jazz-grid-desc').find('span.jazz-grid-sortIcon').remove();
                }
                var ckbox = this.tbody.find("input:checkbox");
                if (ckbox.length > 0) {
                    ckbox.attr("checked", false);
                }
            }

        });

    })(jQuery);

    (function($) {
        /**
         * @version 1.0
         * @name jazz.gridtable
         * @description 表格内容类
         * @constructor
         * @extends jazz.boxComponent
         */
        $.widget("jazz.gridtable", $.jazz.boxComponent, {
            options: {
                /**
                 * @type 'String'
                 * @desc 组件类型
                 */
                vtype: "gridtable",
                /**
                 * @type String
                 * @desc gridtable组件标识名称
                 * @default null
                 */
                name: null,
                /**
                 * @type object
                 * @desc 自定义行渲染函数
                 * @param {event} 事件载体
                 * @param {data} 渲染表格数据data和表格行元素，为json格式{"data":rows,"rowEl",trobjs}
                 * @default null
                 */
                rowrender: null,
                /**
                 * @type boolean
                 * @desc 当数据条数小于pagerows时，是否补充空行
                 * @default false
                 */
                isfixrow: false,
                /**
                 * @type string
                 * @desc 新增行插入位置
                 * @default first
                 */
                addrowposition: "first",
                /**
                 * @type object
                 * @desc 行选择事件
                 * @param {event} 事件载体
                 * @param {data} 选中行数据
                 * @default null
                 */
                rowselect: null,
                /**
                 * @type object
                 * @desc 行取消选择事件
                 * @param {event} 事件载体
                 * @param {data} 选中行数据
                 * @default null
                 */
                rowunselect: null,
                /**
                 * @type object
                 * @desc 行双击事件
                 * @param {event} 事件载体
                 * @param {data} 选中行数据
                 * @default null
                 */
                rowdblclick: null
            },

            /**
             * @desc 创建组件
             * @private
             */
            _create: function() {
                this._super();
                //1.创建gridtable基本dom结构
                this.compId = this.getCompId();
                var el = this.element;
                el.attr('id', this.compId + '_gridtable');
                el.addClass('jazz-datatable');
                var div = '<div id="' + this.compId + '_tables" class="jazz-grid-tables" style="display: block;">' + '<table id="' + this.compId + '_table" class="jazz-grid-data-table" cellspacing="0" cellpadding="0" border="0">' + '<thead><tr></tr></thead><tbody></tbody></table></div>';
                el.append(div);
                //2.缓存操作dom对象
                this.columns = $('#' + this.compId + '_tables');
                this.table = $('#' + this.compId + '_table');
                this.thead = this.table.children('thead'); //通过thead控制表格各列宽度
                this.tbody = this.table.children('tbody');
            },

            /**
             * @desc 初始化
             * @private
             */
            _init: function() {
                this._super();

                //1.设置gridtable样式
                this._createGridTableOptions();
                //2.//设置表格线条样式
                if (this.options.linetype && (this.options.linetype != 0 || this.options.linetype != "0")) {
                    this.table.addClass("jazz-grid-table-linetype" + this.options.linetype);
                }
                if (this.options.linestyle && (this.options.linestyle != 1 || this.options.linestyle != "1")) {
                    this.table.addClass("jazz-grid-table-linestyle" + this.options.linestyle);
                }
                //3.设置表格宽度
                this.calculateGridtableWidth();
                //4.表格横向滚动事件
                this._bindTableHorizonScrollEvent();
                //5.绑定表格所需要的事件
                //this._bindGridTableSelectionEvent();
                this._bindGridTableEvent();

				this._overflow();
            },
            /**
             * @desc 覆盖基类中的_width，即不计算设置宽度，gridtable宽度自适应gridpanel宽度
             */
            _width: function() {
                this.calculateGridtableWidth();
            },
            /**
             * @desc 覆盖基类中的_height，即不计算设置高度，gridtable高度随着pagearea高度变化
             */
            _height: function() {
                //gridtable的高度实际由pagearea的高度决定
                //a.所以gridtab高度不设定，仅有gridpanel设定pagearea高度即可；
                //b.覆盖掉父类中响应window.resize 的_height为空方法
            },
            _bindGridTableEvent: function() {
                /***************************分支处理gridtable要被覆盖处理的特性*********start**********/
                //1.扩展jazz.gridtable的可编辑表格特性功能
                if (this._isGridtableEditable()) {
                    //可编辑表格的处理(对相应方法的覆盖)
                    $.extend(this, jazz.grid.editorgridtable);
                }
                //2.扩展jazz.gridtable的分组和合计表格特性功能
                //由于分组中可能会有合计功能，所以在分组时就不再重复绑定合计功能
                if (this.options.groupfield) {
                    $.extend(this, jazz.grid.groupgridtable);
                    this._bindGroupGridTableEvent();
                    this._bindSummaryGridTableEvent();
                } else {
                    if (this.options.isgroupsummary || this.options.ispagesummary) {
                        $.extend(this, jazz.grid.summarygridtable);
                        this._bindSummaryGridTableEvent();
                    }
                }
                /***************************分支处理gridtable要被覆盖处理的特性*********end**********/
                //3.绑定表格响应事件
                this._bindGridTableSelectionEvent();
                //4.绑定gridTree事件
                this._bindGridTreeTableArrowEvent();
            },
            _isGridtableEditable: function() {
                var iseditable = false;
                if (this.options.iseditable) {
                    iseditable = true;
                } else {
                    for (var j = 0, len = this.cols.length; j < len; j++) {
                        if (this.cols[j]['iseditable']) {
                            iseditable = true;
                            break;
                        }
                    }
                }
                return iseditable;
            },
            _createGridTableOptions: function() {
                this.options.lineno = true;
                this.options.isshowselecthelper = true;
                this.options.selecttype = 2;
                this.options.linetype = 0;
                this.options.linestyle = 1;
                this.options.isshowpaginator = true;
                this.options.rowselectable = true;
                this.options.isshoweditcell = false;
                this.options.isshoweditcell = false;
                this.options.editortype = "cell";
                this.options.iseditable = false;
                this.options.isgroupsummary = false;
                this.options.ispagesummary = false;
                this.options.groupfield = null;
                this.options.grouptitlefield = null;
                this.options.isgroupexpand = true;

                var parentobj = this.getParentComponent();
                if (parentobj && parentobj.length > 0) {
                    this.gridpanel = $(parentobj).data($(parentobj).attr("vtype"));
                    var gridoptions = this.gridpanel.options;

                    this.options.lineno = gridoptions.lineno;
                    this.options.isshowselecthelper = gridoptions.isshowselecthelper;
                    this.options.selecttype = gridoptions.selecttype;
                    this.options.linetype = gridoptions.linetype;
                    this.options.linestyle = gridoptions.linestyle;
                    this.options.isshowpaginator = gridoptions.isshowpaginator;
                    this.options.rowselectable = gridoptions.rowselectable;
                    this.options.isshoweditcell = gridoptions.isshoweditcell;
                    this.options.editortype = gridoptions.editortype;
                    this.options.iseditable = gridoptions.iseditable;
                    this.options.isgroupsummary = gridoptions.isgroupsummary;
                    this.options.ispagesummary = gridoptions.ispagesummary;
                    this.options.groupfield = gridoptions.groupfield;
                    this.options.grouptitlefield = gridoptions.grouptitlefield;
                    this.options.isgroupexpand = gridoptions.isgroupexpand;
                    //将gridtable包装到pagearea中，并为pagearea进行fit布局
                    var el = this.element;
                    var pagearea = parentobj.find(".jazz-pagearea");
                    if (pagearea && pagearea.length > 0) {
                        el.appendTo(pagearea);
                        if (parseInt(gridoptions.height) > 0 || gridoptions.layout == "fit") {
                        } else {
                            this.columns.css("height", "auto");
                        }
                    } else {
                        el.wrap('<div class="jazz-pagearea"></div>');
                        pagearea = el.parent();
                        if (parseInt(gridoptions.height) > 0 || gridoptions.layout == "fit") {
                            /* pagearea.css({
                                overflow: 'hidden'
                            }); */
                        } else {
                            this.columns.css("height", "auto");
                        }
                    }
                    //3.获取gridcolumn对象
                    this.gridcolumn = parentobj.find("div[vtype=gridcolumn]").data("gridcolumn");
                    this.cols = this.gridcolumn.cols || []; //保存显示列信息名称
                }
            },
			
            /**
			 * @desc 对overflow的属性的处理
			 * @private
			 */
			_overflow: function(){
				if(this.gridpanel){
					this.element.find(".jazz-grid-tables").css("overflow", this.gridpanel.options.overflow);
				}
			},			
			
            /**
             * @desc 设置gridtable的宽度
             * @private
             */
            calculateGridtableWidth: function() {
                if (this.gridcolumn) {
                    this.thead.children().remove();
                    this.thead.append(this.gridcolumn.thead[0].innerHTML);

                    /**
                     * this.table设置样式css 中width:0px
                     * 只是通过改变thead中th宽度就可以改变列宽
                     */
                    //this.table.width(this.gridcolumn.tableWidth);
                }
            },
            /**
             * @desc 表格横向滚动条事件（表格和表头一致横向滚动）
             * @private
             * @example this._bindTableHorizonScrollEvent();
             */
            _bindTableHorizonScrollEvent: function() {
                var that = this;
                var el = that.element;
                var gridtables = el.find("div.jazz-grid-tables");
                var gridcolumns = that.gridcolumn.columns;
                gridtables.off("scroll.gridtable").on("scroll.gridtable", function() {
                    var scrollwidth = $(this).scrollLeft();
                    gridcolumns.css("margin-left", -scrollwidth);
                });
            },

            /**
             * @desc 获取当前表格显示数据区域
             * @private
             */
            _drawDataLine: function() {
                var $this = this,
                    dataLength = this._trNumber(),
                    rowLength = 0,
                    n = 0; //偶行

                var pageNo = 10; //当前每页显示条数
                if (this.gridpanel && this.gridpanel.paginationInfo) {
                    pageNo = this.gridpanel.paginationInfo["pagerows"] || 10;
                }

                if (dataLength < pageNo) {
                    rowLength = pageNo - dataLength;
                }
                if (dataLength % 2 != 0) { //用于判断最后一条记录是奇偶行
                    n = 1; //奇行
                }
                var trHtml = "",
                    showLine = this.options.lineno;
                for (var i = 0, len = rowLength; i < len; i++) {

                    if ((n + 1 + i) % 2 === 0) {
                        cls = 'jazz-gridtable-even';
                    } else {
                        cls = 'jazz-gridtable-odd';
                    }

                    trHtml += '<tr index="' + (dataLength + i) + '" class="nodata ' + cls + '">';
                    trHtml += '<th style="height:20px;"></th>';
                    if (this._isSelectHelper() && this._isSelectType()) {
                        /**
                         * 去掉原<td>内部的div
                         */
                        //trHtml += "<td class='jazz-grid-cell'><div class='jazz-grid-cell-inner'>&nbsp;</div></td>";
                        trHtml += "<td class='jazz-grid-cell'>&nbsp;</td>";
                    }
                    if (showLine) {
                        //trHtml += "<td class='jazz-grid-cell'><div class='jazz-grid-cell-inner'>&nbsp;</div></td>";
                        trHtml += "<td class='jazz-grid-cell'>&nbsp;</td>";
                    }

                    for (var j = 0, l = this.cols.length; j < l; j++) {
                        //trHtml += "<td class='jazz-grid-cell'><div class='jazz-grid-cell-inner'>&nbsp;</div></td>";
                        trHtml += "<td class='jazz-grid-cell'>&nbsp;</td>";
                    }
                    trHtml += "</tr>";
                }
                if (rowLength > 0) {
                    this.tbody.append(trHtml);
                }
            },
            /**
             * @desc 动态拼接成<tr>……</tr>字符串
             * @param {rowObj}  行对象
             * @param {index}   index从某一整数值递增的值，计算行号
             * @param {lineIndex} 初始行索引
             * @returns HTMl(String)
             */
            _insertRowHtml: function(rowObj, index, lineIndex) {
                var $this = this;
                var data = rowObj;
                var lineno = this.options.lineno; //是否显示行号

                //1.计算行号
                var page = 1; //当前页码
                var pagerows = 0; //当前每页显示条数
                if (this.gridpanel && this.gridpanel.paginationInfo) {
                    page = this.gridpanel.paginationInfo["page"] || 1;
                    pagerows = this.gridpanel.paginationInfo["pagerows"] || 0;
                }
                lineIndex = index + lineIndex + 1 + ((page - 1) * pagerows);

                //2.计算奇偶行
                var cls = '';
                if ((lineIndex) % 2 == 0) {
                    cls = 'jazz-gridtable-even';
                } else {
                    cls = 'jazz-gridtable-odd';
                }
                var rowHtml = '<tr index="' + (lineIndex - 1) + '" class="jazz-grid-row ' + cls + ' " id="' + data["rowuuid"] + '">';
                rowHtml += '<th style="height:20px;"></th>';
                //4.判断是否显示checkbox radio
                var b = '';
                if (this._isSelectHelper() && this._isSelectType()) {
                    if ($this._isMultipleSelection()) {
                        b = 'checkbox';
                    } else if ($this._isSingleSelection()) {
                        b = 'radio';
                    }
                    //rowHtml += '<td class="jazz-grid-cell"><div class="jazz-grid-cell-box"><input type="'+b+'"/></div></td>';
                    rowHtml += '<td class="jazz-grid-cell jazz-grid-cell-box"><input type="' + b + '"/></td>';
                }
                //5.添加行号，根据当前页码数递增
                if (lineno) {
                    rowHtml += '<td class="jazz-grid-cell jazz-grid-cell-no">' + lineIndex + '</td>';
                }
                //6.生成内容td
                var columnname = "",
                    stm = "",
                    textalign = "",
                    title = "";
                for (var j = 0, len = this.cols.length; j < len; j++) {
                    columnname = this.cols[j]['columnname'];
                    textalign = this.cols[j]['textalign'] || "";
                    title = "";
                    stm = "&nbsp;";
                    if (columnname && data[columnname] !== undefined) {
                        if (data[columnname].toString().indexOf('<') != 0) {
                            title = data[columnname] || "";
                        }
                        /**
                         * 去掉原<td>内部的div
                         */
                        //stm = '<div class="jazz-grid-cell-inner" title='+title+'>'+data[columnname]+'</div>';
                        stm = data[columnname];
                    }
                    if (textalign) {
                        textalign = "text-align-" + textalign;
                    }
                    rowHtml += '<td class="jazz-grid-cell ' + textalign + '" title=' + title + '>' + stm + '</td>';
                }
                return rowHtml;
            },

            /**
             * @desc 判断是否显示checkbox/radio选择框
             * @return {boolean}
             * @private
             */
            _isSelectHelper: function() {
                var isshowselecthelper = this.options.isshowselecthelper;
                return (isshowselecthelper == true || isshowselecthelper == 'true');
            },

            /**
             * @desc 判断是否为0
             * @return {boolean}
             * @private
             */
            _isSelectType: function() {
                var selecttype = this.options.selecttype;
                return (selecttype != 0 || selecttype != '0');
            },

            /**
             * @desc 判断是否是单选
             * @return {boolean}
             * @private
             */
            _isSingleSelection: function() {
                var selecttype = this.options.selecttype;
                return (selecttype == 1 || selecttype == '1');
            },

            /**
             * @desc 判断是否是多选
             * @return {boolean}
             * @private
             */
            _isMultipleSelection: function() {
                var selecttype = this.options.selecttype;
                return (selecttype == 2 || selecttype == '2');
            },

            /**
             * @desc 加载table数据
             * @param {rows} 待渲染的表格数据
             * @private
             */
            _renderData: function(rows) {
                if (!rows) {
                    return;
                }
                var lineIndex = 0;
                var rowHtml = '';

				//如果gridpanel没有赋高度值，则gridtable也无高度 此时gridtable应为table预留上次的高度，否则加载数据时将会出现滚动条的波动，反之则不用预留
				var h = this.gridpanel.element.find(".jazz-pagearea");
				if(this.gridpanel.options.height == "auto" 
				&& this.gridpanel.options.layout != "fit"){
					h.height(h.height());
				}
                this._trObject().remove();
                lineIndex = this._trNumber();
                for (var i = 0; i < rows.length; i++) {
                    rowHtml += this._insertRowHtml(rows[i], i, lineIndex);
                }
                this.tbody.append(rowHtml);
				//数据渲染完，还原回原来高度
				if(this.gridpanel.options.height == "auto" 
				&& this.gridpanel.options.layout != "fit"){
					h.height("auto");
				}
				//渲染后，判断是否处理滚动条
				this.gridcolumn._width();
				this._width();

                //渲染数据后，执行rowrender(rowdata,rowElement),提供操作tr回调
                this._event("rowrender", null, {
                    "data": rows,
                    "rowEl": this.tbody.find("tr")
                });
                
                this._isNullData();
                
            },

            /**
             * @desc 检查是否有数据，没有的话表格上要有提示
             * @param {data} 加载的数据
             * @private
             */
            _isNullData:function(){
            	if(this._trObject().length == 0){
            		//y用于可变高度时强制显示无数据logo用
            		//if(this.gridpanel.options.height == "auto"){
            		//	this.element.find(".jazz-grid-tables").css("height", "200px");
            		//}
            		this.element.find(".jazz-grid-tables").addClass("jazz-grid-tables-nulldata");
            	}else{
            		if(this.gridpanel.options.height == "auto" && this.gridpanel.options.layout != "fit"){
            			this.element.find(".jazz-grid-tables").css("height", "auto");
            		}
            		this.element.find(".jazz-grid-tables").removeClass("jazz-grid-tables-nulldata");
            	}
            },
            
            /**
             * @desc gridpanel加载数据后调用渲染表格
             * @param {rowsdata} 加载后的数据
             * @private
             */
            renderGridtableData: function(rowsdata) {
                if (rowsdata) {
//                    this.gridpanel._setRowUUID(rowsdata);
                    this._renderData(rowsdata);
                    this._updateIndex();
                }
            },
            /**
             * @desc 绑定表格选择事件（单击和双击）
             * @private
             * @example this._bindGridTableSelectionEvent();
             */
            _bindGridTableSelectionEvent: function() {
                var that = this;
                this.tbody.on("click.td", "td.jazz-grid-cell", null, function(e) {
                    if ($(this).parent().hasClass("nodata")) {
                        return;
                    }
                    if ($(e.target).is('a')) {
                        return;
                    }
                    if ($(e.target).hasClass("jazz-gridtree-arrow")) {
                        return;
                    }
                    that._onRowClickEvent(e, $(this), false);
                }).on("dblclick.td", "td.jazz-grid-cell", null, function(e) {
                    if ($(this).parent().hasClass("nodata")) {
                        return;
                    }
                    if ($(e.target).is('a')) {
                        return;
                    }
                    if ($(e.target).hasClass("jazz-gridtree-arrow")) {
                        return;
                    }
                    that._onRowClickEvent(e, $(this), true);
                });
            },
            _onRowClickEvent: function(e, tdEl, dbclick) {
                var that = this;
                var targetrow = $(tdEl).parent();
                var rowselectable = that.options.rowselectable || that.options.rowselectable == "true";
                if (rowselectable) {
                    if (dbclick) {
                        that._onRowClick(e, targetrow, true); //双击
                    } else {
                        setTimeout(function() {
                            that._onRowClick(e, targetrow, false);
                        }, 100);
                    }
                } else {
                    if ($(e.target).is('.jazz-grid-cell-box :input')) {
                        that._onRowClick(e, targetrow, false); //选择框勾选都是相当于单击事件
                    }
                }
            },
            /**
             * @desc 表格点击事件处理，并处理与gridcard卡片交互
             * @param {event} 点击事件event对象
             * @param {targetrow} 表格行或卡片所对应的数据
             * @param {flag} 表明点击是单击还是双击事件,true:双击，false:单击
             * @private
             * @example this._onRowClick();
             */
            _onRowClick: function(event, targetRow, flag) {
                var row = $(targetRow);
                var isSelected = row.hasClass('jazz-row-selected');
                if (this._isMultipleSelection()) {
                    if (flag) { //双击
                        this._selectRow(row, true, event, flag);
                    } else { //单击
                        //多选，单击效果与checkbox框一致
                        if (isSelected) {
                            //取消当前选择行、卡片
                            this._unselectRow(row, true, event);
                        } else {
                            //选中当前选择行、卡片
                            this._selectRow(row, true, event, flag);
                        }
                    }
                } else {
                    if (flag) { //双击
                        this._selectRow(row, true, event, flag);
                    } else { //单击
                        //默认处理都是单选，单击效果与radio一致
                        if (isSelected) {
                            this._selectRow(row, true, event, flag);
                        } else {
                            //取消其他已选中的行、卡片；然后选中当前行、卡片
                            this._unselectAllRows();
                            this._selectRow(row, true, event, flag);
                        }
                    }
                }
            },

            /**
             * @desc 选中指定行数据
             * @param {row} 当前选中表格行
             * @param {isCallback} 是否执行点击卡片回调函数
             * @param {event} event对象
             * @param {flag} 单击或双击标识
             * @private
             * @example this._selectRow(row, isCallback, event, flag)
             */
            _selectRow: function(row, isCallback, event, flag) {
                var $this = this;
                var id = row.attr('id');
                //处理选择行的状态
                row.addClass('jazz-row-selected').attr('aria-selected', true);
                //处理单选和多选两种情况
                if ($this._isMultipleSelection()) {
                    if (row.find("input:checkbox")) {
                        row.find("input:checkbox").attr('checked', true);
                    }
                    //全选，所有数据行被选中
                    if ($this.tbody.find("input:checked").length == $this.tbody.find("input:checkbox").length) {
                        var thead = $this.gridcolumn.tbody;
                        thead.find("input:checkbox").attr("checked", true);
                    }
                } else {
                    if (row.find("input:radio")) {
                        row.find("input:radio").attr('checked', true);
                        row.siblings().find("input:radio").attr('checked', false);
                    }
                }

                if ($this.gridpanel.gcard) {
                    var card = $this.gridpanel.gcard.find("#" + id);
                    card.removeClass('jazz-gridtable-hover')
                        .addClass('jazz-gridtable-highlight')
                        .attr('aria-selected', true);
                    if ($this._isMultipleSelection()) {
                        if (card.find("input.jazz-card-checkbox")) {
                            card.find("input.jazz-card-checkbox").attr('checked', true);
                        }
                    } else {
                        if (card.find("input.jazz-card-radio")) {
                            card.find("input.jazz-card-radio").attr('checked', true);
                            card.siblings().find("input.jazz-card-radio").attr('checked', false);
                        }
                    }
                }

                //处理单击和双击回调函数
                if (isCallback) {
                    //由gridpanel统一获取this.rows共享数据
                    var data = {};
                    data = this.gridpanel.getSelectedRowDataById(id);
                    if (flag == true) {
                        this.gridpanel._event("rowdblclick", event, data);
                    } else {
                    	this.gridpanel._event("rowselect", event, data);
                    }
                }
            },
            /**
             * @desc 取消表格行的选中
             * @param {row} 当前选中表格行
             * @param {isCallback} 是否执行点击卡片回调函数
             * @param {event} event对象
             * @private
             * @example this._unselectRow(row, isCallback,event)
             */
            _unselectRow: function(row, isCallback, event) {
                var $this = this;
                var id = row.attr('id');
                row.removeClass('jazz-row-selected').attr('aria-selected', false);
                var thead = $this.gridcolumn.tbody;

                //只有多选的时候才能取消选中
                if ($this._isMultipleSelection()) {
                    if (row.find("input:checkbox")) {
                        row.find("input:checkbox").attr('checked', false);
                    }
                    if ($this.tbody.find("input:checked").length != $this.tbody.find("input:checkbox").length) {
                        thead.find("input:checkbox").attr("checked", false);
                    }
                }
                if ($this.gridpanel.gcard) {
                    var card = $this.gridpanel.gcard.find("#" + id);
                    card.removeClass('jazz-gridtable-highlight')
                        .attr('aria-selected', false);
                    if ($this._isMultipleSelection()) {
                        if (card.find("input.jazz-card-checkbox")) {
                            card.find("input.jazz-card-checkbox").attr('checked', false);
                        }
                    } else {
                        if (card.find("input.jazz-card-radio")) {
                            card.find("input.jazz-card-radio").attr('checked', true);
                            card.siblings().find("input.jazz-card-radio").attr('checked', false);
                        }
                    }
                }

                //处理单击和双击回调函数
                if (isCallback) {
                    //由gridpanel统一获取this.rows共享数据
                    var data = {};
                    data = this.gridpanel.getSelectedRowDataById(id);
                    this.gridpanel._event("rowunselect", event, data);
                }
            },
            _selectAllRows: function() {
                this.tbody.find("tr.jazz-grid-row").addClass('jazz-row-selected').attr('aria-selected', true);
                if (this._isMultipleSelection()) {
                    this.tbody.find("input:checkbox").attr("checked", true);
                    var thead = this.gridcolumn.tbody;
                    thead.find("input:checkbox").attr("checked", true);
                }
                if (this.gridpanel.gcard) {
                    var gridcard = this.gridpanel.gcard.data("gridcard");
                    var cardContent = gridcard["cardContent"];
                    cardContent.find("div.jazz-grid-cardcell").addClass('jazz-gridtable-highlight').attr('aria-selected', true);
                    cardContent.find("input.jazz-card-checkbox").attr('checked', true);
                }
                //由gridpanel统一获取this.rows共享数据
            },
            _unselectAllRows: function() {
                this.tbody.find("tr.jazz-grid-row").removeClass('jazz-row-selected').attr('aria-selected', false);
                if (this._isMultipleSelection()) {
                    this.tbody.find("input:checkbox").attr("checked", false);
                    var thead = this.gridcolumn.tbody;
                    thead.find("input:checkbox").attr("checked", false);
                }

                if (this.gridpanel.gcard) {
                    var gridcard = this.gridpanel.gcard.data("gridcard");
                    var cardContent = gridcard["cardContent"];
                    cardContent.find("div.jazz-grid-cardcell").removeClass('jazz-gridtable-highlight').attr('aria-selected', false);
                    cardContent.find("input.jazz-card-checkbox").attr('checked', false);
                    cardContent.find("input.jazz-card-radio").attr('checked', false);
                }
                //由gridpanel统一获取this.rows共享数据
            },

            /**
             * 返回tr对象
             * @returns
             */
            _trObject: function() {
                var obj = this.tbody.children("tr");
                return obj;
            },

            /**
             * @desc 返回当前tr的个数
             * @returns
             */
            _trNumber: function() {
                var obj = this._trObject();
                if (obj) {
                    return obj.length;
                } else {
                    return 0;
                }
            },

            /**
             * @desc 修改tr索引
             */
            _updateIndex: function() {
                if (this.options.lineno) { //如果当前显示行号时，才对行号进行更新
                    var n = 0;
                    if (this.options.isshowpaginator) {
                        var p = 1; //当前页码
                        var r = 10; //当前每页显示条数
                        if (this.gridpanel && this.gridpanel.paginationInfo) {
                            p = this.gridpanel.paginationInfo["page"] || 1;
                            r = this.gridpanel.paginationInfo["pagerows"] || 10;
                        }
                        n = (p - 1) * r;
                    }
                    var trObjs = this.tbody.children(".jazz-grid-row");
                    $.each(trObjs, function(i, obj) { //this._trObject()
                        $(this).children('td.jazz-grid-cell-no').text(i + 1 + n);
                    });
                }
                //是否补空行
                if (this.options.isfixrow) {
                    this._drawDataLine();
                }
            },
            /**
             * @desc 添加行记录
             * @param {rowObj} 行数据对象 {key1: value1, key2: value2, ……}
             */
            addRow: function(data) {
                //将新增数据代码转换名称后添加到表格中
                if (!data) {
                    return;
                }

                var rowHtml = "";
                var lineIndex = this._trNumber();
                for (var i = 0; i < data.length; i++) {
                    //循环追加tr行数据html
                    rowHtml += this._insertRowHtml(data[i], i, lineIndex);
                }
                var trobj = null;
                if (rowHtml) {
                    //this.tbody.append(rowHtml);
                    trobj = $(rowHtml).appendTo(this.tbody);
                }
                //渲染数据后，执行rowrender(rowdata,rowElement),提供操作tr回调
                this._event("rowrender", null, {
                    "data": data,
                    "rowEl": trobj
                });
            },

            /**
             * @desc 根据行id更新表格行数据
             * @param {data} 待更新行数据{}
             * @param {id} gridtable行id
             * @example  $('#gridtable').gridtable('updateRowById',data, id);
             */
            updateRowById: function(data, id) {
                if (!data || !id) {
                    return;
                }
                //定位要修改表格行，替换掉
                var trobj = this.tbody.find("#" + id);
                var isselected = trobj.hasClass("jazz-row-selected");

                var rowIndex = trobj.find(".jazz-grid-cell-no").html();
                var rowHtml = this._insertRowHtml(data, 0, (parseInt(rowIndex) - 1));
                trobj.replaceWith(rowHtml);
                //若是该修改行，是被勾选的即jazz-row-selected样式类，可以考虑修改后继续保持选中状态
                var newtrobj = this.tbody.find("#" + id);
                if (isselected) {
                    newtrobj.addClass('jazz-row-selected').attr('aria-selected', true);
                    newtrobj.find("input:checkbox").attr('checked', true);
                    var thead = this.gridcolumn.tbody;
                    if (this._isMultipleSelection()) {
                        if (this.tbody.find("input:checked").length == this.tbody.find("input:checkbox").length) {
                            thead.find("input:checkbox").attr("checked", true);
                        }
                    }
                }
                //渲染数据后，执行rowrender(rowdata,rowElement),提供操作tr回调
                this._event("rowrender", null, {
                    "data": data,
                    "rowEl": newtrobj
                });

                //更新行数据时抛出cellvaluechange.summaryrow事件，修改summary 合计行数据
                if (this.options.isgroupsummary || this.options.ispagesummary) {
                    this.tbody.trigger("cellvaluechange.summaryrow", [id]);
                }
            },
            /**
             * @desc 根据表格行ID删除数据行
             * @param {id} 行id值
             * @private 
             * @example  $('#gridtable').gridtable('removeRowById',id);
             */
            removeRowById: function(id) {
                this.tbody.find('#' + id).remove();
                //表格行删除的时候，若是全部数据都已被删除，考虑回显表格选中状态
                //例如：处理全选，以后考虑抽取出公共状态处理方法
                if (this.tbody.children().length == 0 || this.tbody.find("tr[id]").length == 0) {
                    if (this._isMultipleSelection()) {
                        var thead = this.gridcolumn.tbody;
                        thead.find("input:checkbox").attr("checked", false);
                    }
                }
                this._updateIndex();

                //删除行数据时抛出cellvaluechange.summaryrow事件，修改summary 合计行数据
                if (this.options.isgroupsummary || this.options.ispagesummary) {
                    this.tbody.trigger("cellvaluechange.summaryrow", [id]);
                }
            },

            /**
             * @desc 根据ID选中行(暴露接口方式选中行)
             * @private
             * @example 
             */
            selectRow: function(id) {
                var $this = this;
                var row = this.tbody.find("#" + id);
                //处理选择行的状态
                row.addClass('jazz-row-selected').attr('aria-selected', true);
                //处理单选和多选两种情况
                var thead = $this.gridcolumn.tbody;
                if ($this._isMultipleSelection()) {
                    if (row.find("input:checkbox")) {
                        row.find("input:checkbox").attr('checked', true);
                    }
                    if ($this.tbody.find("input:checked").length == $this.tbody.find("input:checkbox").length) {
                        thead.find("input:checkbox").attr("checked", true);
                    }
                } else {
                    if (row.find("input:radio")) {
                        row.find("input:radio").attr('checked', true);
                        row.siblings().find("input:radio").attr('checked', false);
                    }
                }
            },
            /**
             * @desc 根据ID取消行选中(暴露接口方式取消选中行)
             * @private
             * @example
             */
            unselectRow: function(id) {
                var $this = this;
                var row = this.tbody.find("#" + id);
                row.removeClass('jazz-row-selected').attr('aria-selected', false);

                var thead = $this.gridcolumn.tbody;

                //只有多选的时候才能取消选中
                if ($this._isMultipleSelection()) {
                    if (row.find("input:checkbox")) {
                        row.find("input:checkbox").attr('checked', false);
                    }
                    if ($this.tbody.find("input:checked").length != $this.tbody.find("input:checkbox").length) {
                        thead.find("input:checkbox").attr("checked", false);
                    }
                }
            },
            /**
             * @desc 全部选中(暴露接口方式全部选中)
             * @private
             * @example 
             */
            selectAllRows: function() {
                var $this = this;
                $this.tbody.find("tr.jazz-grid-row").addClass('jazz-row-selected').attr('aria-selected', true);
                if ($this._isMultipleSelection()) {
                    $this.tbody.find("input:checkbox").attr("checked", true);
                }
                var thead = $this.gridcolumn.tbody;
                thead.find("input:checkbox").attr("checked", true);
            },
            /**
             * @desc 全部取消选中(暴露接口方式全部取消选中)
             * @private
             * @example
             */
            unselectAllRows: function() {
                var $this = this;
                $this.tbody.find("tr.jazz-grid-row").removeClass('jazz-row-selected').attr('aria-selected', false);
                if ($this._isMultipleSelection()) {
                    $this.tbody.find("input:checkbox").attr("checked", false);
                }
                var thead = $this.gridcolumn.tbody;
                thead.find("input:checkbox").attr("checked", false);
            },

            /**
             * @desc 绑定树形表格中箭头点击事件
             * @private
             * @example this._bindGridTreeTableArrowEvent();
             */
            _bindGridTreeTableArrowEvent: function() {
                var that = this;
                this.tbody.on("click", "span.jazz-gridtree-arrow", null, function(e) {
                    if ($(e.target).hasClass("jazz-gridtree-arrow-open")) {
                        var id = $(e.target).parent().attr("id");
                        //直接用index方法比较保险
                        var index = $(e.target).parents("tr").index();
                        that.gridpanel.rebuildTreeTable(0, {
                            isOpen: true,
                            id: id,
                            lineIndex: index
                        });
                        $(e.target).removeClass("jazz-gridtree-arrow-open").addClass("jazz-gridtree-arrow-close");
                    } else if ($(e.target).hasClass("jazz-gridtree-arrow-close")) {
                        var id = $(e.target).parent().attr("id");
                        //直接用index方法比较保险
                        var index = $(e.target).parents("tr").index();
                        that.gridpanel.rebuildTreeTable(0, {
                            isOpen: false,
                            id: id,
                            lineIndex: index
                        });
                        $(e.target).removeClass("jazz-gridtree-arrow-close").addClass("jazz-gridtree-arrow-open");
                    } else {
                        return;
                    }
                });
            },

            /**
             * @desc 添加行记录
             * @param {rowObj} 行数据对象 {key1: value1, key2: value2, ……}
             * @param {rowIndex} 待添加的位置
             */
            addTreeRow: function(data, rowIndex) {
                //将新增数据代码转换名称后添加到表格中
                if (!data) {
                    return;
                }

                var rowHtml = "";
                var lineIndex = this._trNumber();
                var idkey = this.options.idkey;
                var pidkey = this.options.pidkey;
                for (var i = 0; i < data.length; i++) {
                    //循环追加tr行数据html
                    rowHtml += this._insertTreeRowHtml(data[i], i, lineIndex);
                }
                var trobj = null;
                if (rowHtml) {
                    if (rowIndex !== undefined) {
                        this.tbody.children().eq(rowIndex).before($(rowHtml));
                    } else {
                        trobj = $(rowHtml).appendTo(this.tbody);
                    }
                }
                //修复行列信息
                this.fixTreeRowAttr();

                // //渲染数据后，执行rowrender(rowdata,rowElement),提供操作tr回调
                // this._event("rowrender", null, {
                //     "data": data,
                //     "rowEl": trobj
                // });
            },

            /**
             * @desc 添加行记录
             * @param {info} 删除行对象需要的数据 {start：0，end：9，length：10}
             */
            removeTreeRows: function(info) {
                //将新增数据代码转换名称后添加到表格中
                if (!info) {
                    return;
                }

                var start = info.start,
                    end = info.end,
                    length = info.length,
                    tr_len = this.tbody.children().length;

                if (start !== undefined && end !== undefined) {

                    this.removeTreeRows({
                        start: start,
                        length: end - start + 1
                    })
                    return;

                } else if (start === undefined && end === undefined && length !== undefined) {
                    //只给长度默认从最后一个开始删
                    this.removeTreeRows({
                        start: tr_len - length,
                        length: length
                    });
                    return;
                } else if (start === undefined && end !== undefined && length !== undefined) {
                    //从截止位往前删
                    this.removeTreeRows({
                        start: end - length,
                        length: length
                    });
                    return;
                } else if (start !== undefined && end === undefined && length !== undefined) {
                    if (start == 0) {
                        this.tbody.children(":lt(" + length + ")").remove();
                    } else {
                        this.tbody.children(":gt(" + (start - 1) + "):lt(" + length + ")").remove();
                    }
                }

            },

            /**
             * @desc 动态拼接成<tr>……</tr>字符串
             * @param {rowObj}  行对象
             * @param {index}   index从某一整数值递增的值，计算行号
             * @param {lineIndex} 初始行索引
             * @param {hasChildrenRow}(boolean) 用于标示本行的子节点时候显示出来了，如果显示了就要吧arrow标示设置为open
             * @returns HTMl(String)
             */
            _insertTreeRowHtml: function(rowObj, index, lineIndex) {
                var $this = this;
                var data = rowObj;
                var lineno = this.options.lineno; //是否显示行号
                var treeColumnName = this.options.treecolumnname;
                var id = this.options.idkey;
                var childkey = this.options.childkey;
                var isparentkey = this.options.isparentkey;
                var lv = this.options.levelkey;
                var pId = this.options.pidkey;
                var isopen = this.options.isopenkey;

                //1.计算行号
                var page = 1; //当前页码
                var pagerows = 0; //当前每页显示条数
                if (this.gridpanel && this.gridpanel.paginationInfo) {
                    page = this.gridpanel.paginationInfo["page"] || 1;
                    pagerows = this.gridpanel.paginationInfo["pagerows"] || 0;
                }
                lineIndex = index + lineIndex + 1 + ((page - 1) * pagerows);

                //2.计算奇偶行
                var cls = '';
                if ((lineIndex) % 2 == 0) {
                    cls = 'jazz-gridtable-even';
                } else {
                    cls = 'jazz-gridtable-odd';
                }
                var rowHtml = '<tr index="' + (lineIndex - 1) + '" class="jazz-grid-row ' + cls + ' " id="' + data[id] + '">';
                rowHtml += '<th style="height:20px;"></th>';
                //4.判断是否显示checkbox radio
                var b = '';
                if (this._isSelectHelper() && this._isSelectType()) {
                    if ($this._isMultipleSelection()) {
                        b = 'checkbox';
                    } else if ($this._isSingleSelection()) {
                        b = 'radio';
                    }
                    //rowHtml += '<td class="jazz-grid-cell"><div class="jazz-grid-cell-box"><input type="'+b+'"/></div></td>';
                    rowHtml += '<td class="jazz-grid-cell jazz-grid-cell-box"><input type="' + b + '"/></td>';
                }
                //5.添加行号，根据当前页码数递增
                if (lineno) {
                    rowHtml += '<td class="jazz-grid-cell jazz-grid-cell-no">' + lineIndex + '</td>';
                }
                //6.生成内容td
                var columnname = "",
                    stm = "",
                    textalign = "",
                    title = "";
                for (var j = 0, len = this.cols.length; j < len; j++) {
                    columnname = this.cols[j]['columnname'];
                    textalign = this.cols[j]['textalign'] || "";
                    title = "";
                    stm = "&nbsp;";
                    if (columnname && data[columnname] != undefined) {
                        if (data[columnname].toString().indexOf('<') != 0) {
                            title = data[columnname] || "";
                        }
                        /**
                         * 去掉原<td>内部的div
                         */
                        //stm = '<div class="jazz-grid-cell-inner" title='+title+'>'+data[columnname]+'</div>';
                        stm = data[columnname];
                    }
                    if (textalign) {
                        textalign = "text-align-" + textalign;
                    }
                    //如果是tree列
                    if (columnname == treeColumnName) {
                        rowHtml += '<td id="' + data[id] + '" pid="' + data[pId] + '" treelevel="' + data[lv] + '" class="jazz-grid-cell jazz-grid-tree-cell jazz-gridtree-lv' + data[lv] + ' text-align-left" title=' + title + '>';
                        //有子节点的必须有打开或者关闭的箭头标示
                        if ((data[childkey] && data[childkey].length) || data[isparentkey] == true || data[isparentkey] == "true") {
                            //这里应判断是否箭头是否打开
                            if (data[isopen] == true || data[isopen] == 'true') {
                                rowHtml += '<span class="jazz-gridtree-arrow jazz-gridtree-arrow-open"></span>';
                            } else {
                                rowHtml += '<span class="jazz-gridtree-arrow jazz-gridtree-arrow-close"></span>';
                            }
                        } else {
                            rowHtml += '<span class="jazz-gridtree-arrow"></span>';
                        }
                        rowHtml += (stm + '</td>');
                    } else {
                        rowHtml += '<td class="jazz-grid-cell ' + textalign + '" title=' + title + '>' + stm + '</td>';
                    }
                }
                return rowHtml;
            },
            /**
             * @desc 根据行号找到当前table中属于该行号的子对象行
             * @param {lineindex} String 行号，必须是父级节点的lineIndex
             *
             */
            getChildrenRows: function(lineIndex) {
                var arr = [],
                    flag = false,
                    lv = null;
                // 1.遍历所有tr通过lineIndex找到该行
                // 2.缓存该行的lv的值，往下逐一遍历
                // 3.只要遍历的lv大于缓存的就说明是子对象
                this.tbody.children().each(function(i) {
                    if (flag || $(this).attr("index") == lineIndex) {
                        if (lv === null) {
                            lv = parseInt($(this).find("[treelevel]").attr("treelevel"));
                            flag = true;
                        } else if (lv >= parseInt($(this).find("[treelevel]").attr("treelevel"))) {
                            flag = false;
                        } else {
                            arr.push($(this));
                        }
                    }
                });
                return arr;
            },
            /**
             * @desc 获得当前table的全部行对象
             */
            getAllTreeRows: function() {
                return this.tbody.children("tr");
            },
            fixTreeRowAttr: function() {
                var cls;
                this.tbody.children().each(function(i) {
                    if ((i) % 2 == 0) {
                        cls = 'jazz-gridtable-even';
                    } else {
                        cls = 'jazz-gridtable-odd';
                    }
                    $(this).attr("index", i).removeClass("jazz-gridtable-even")
                        .removeClass("jazz-gridtable-odd").addClass(cls);
                    //如果有行号这列，就可以找到这个td并且改值
                    $(this).find(".jazz-grid-cell-no").html(i + 1);
                });
            }













        });

    })(jQuery);

    (function($) {
        /**
         * @version 1.0
         * @name jazz.gridcard
         * @description 卡片类
         * @constructor
         * @extends jazz.boxComponent
         */
        $.widget("jazz.gridcard", $.jazz.boxComponent, {
            options: /** @lends jazz.gridcard# */ {
                /**
                 * @type 'String'
                 * @desc 组件类型
                 */
                vtype: "gridcard",
                /**
                 * @type String
                 * @desc gridtable组件标识名称
                 * @default null
                 */
                name: null,
                /**
                 * @type number
                 * @desc 卡片宽度
                 * @default null
                 */
                width: null,
                /**
                 * @type number
                 * @desc 卡片高度
                 * @default null
                 */
                height: null,
                /**
                 * @type number
                 * @desc 卡片外边距
                 * @default 10
                 */
                margin: 10,
                /**
                 * @type string
                 * @desc 卡片样式类名
                 * @default jazz-grid-qh-cardcell
                 */
                cardclass: "jazz-grid-qh-cardcell",
                /**
                 * @type object
                 * @desc 自定义卡片渲染函数
                 * @param {data} 行数据rowdata
                 * @default null
                 */
                html: function(data) {
                    var html = '<div style="width:100%;height:100%">' + '<div class="jazz-grid-cardcell-i"><div class="jazz-grid-bblb-img"></div></div>' + '<div class="jazz-grid-qh-c jazz-grid-bblb-c">' + '<div class="jazz-grid-qh-c-h1">' + data.name + '</div>' + '<div class="jazz-grid-qh-c-date">' + data.org + '</div>' + '<div class="jazz-grid-cardcell-title" style="display:none;">' + data.name + '</div>' + '</div></div>';
                    return html;
                },
                /**
                 * @type boolean
                 * @desc 是否显示新增卡片
                 * @default true
                 */
                isaddcard: true,
                /**
                 * @type string
                 * @desc 新增卡片放置位置
                 * @default first
                 */
                addcardposition: "first",
                /**
                 * @type object
                 * @desc 新增卡片渲染事件
                 * @default null
                 */
                addcardrender: null,
                /**
                 * @type object
                 * @desc 新增卡片双击事件
                 * @default null
                 */
                addcardclick: null,
                /**
                 * @type object
                 * @desc 卡片选择事件
                 * @param {event} 事件载体
                 * @param {data} 选中卡片数据
                 * @default null
                 */
                cardselect: null,
                /**
                 * @type object
                 * @desc 卡片取消选择事件
                 * @param {event} 事件载体
                 * @param {data} 选中卡片数据
                 * @default null
                 */
                cardunselect: null,
                /**
                 * @type object
                 * @desc 卡片双击事件
                 * @param {event} 事件载体
                 * @param {data} 选中卡片数据
                 * @default null
                 */
                carddblclick: null
            },
            _create: function() {
                this._super();
                //1.生成gridcard基本dom结构
                this.compId = this.getCompId();
                var el = this.element;
                el.attr('id', this.compId + '_gridcard').addClass('jazz-gridcard');
                this.cardContent = $('<div id="' + this.compId + '_cardcontent" style="height:100%;"></div>').appendTo(el);

                //保存key列的名称
                //this.keyCode = null;
            },
            _init: function() {
                this._super();

                //1.准备卡片初始化创建数据
                this._createGridCardOptions();
                //2.绑定卡片点击事件
                this._bindGridcardSelectionEvent();
                //3.重排卡片视图的卡片布局
                this._calCardStyle();
                this._cardResize();
                //4.是否保留”新增卡片“功能
                if (this._isCardAddBtn()) {
                    this._addCardNewIcon();
                }
            },

            _width: function() {
                this.calculateGridcardWidth();
            },
            _height: function() {
                //gridtable的高度实际由pagearea的高度决定
                //a.所以gridtab高度不设定，仅有gridpanel设定pagearea高度即可；
                //b.覆盖掉父类中响应window.resize 的_height为空方法
            },

            _createGridCardOptions: function() {
                this.options.isshowselecthelper = true;
                this.options.selecttype = 2;
                this.options.isshowpaginator = true;
                this.options.rowselectable = true;

                var parentobj = this.getParentComponent();
                if (parentobj && parentobj.length > 0) {
                    this.gridpanel = parentobj.data(parentobj.attr("vtype"));
                    var gridoptions = this.gridpanel.options;

                    this.options.isshowselecthelper = gridoptions.isshowselecthelper;
                    this.options.selecttype = gridoptions.selecttype;
                    this.options.isshowpaginator = gridoptions.isshowpaginator;
                    this.options.rowselectable = gridoptions.rowselectable;
                    //将gridtable包装到pagearea中
                    var el = this.element;
                    var pagearea = parentobj.find(".jazz-pagearea");
                    if (pagearea && pagearea.length > 0) {
                        el.appendTo(pagearea);
                        if (parseInt(gridoptions.height) > 0 || gridoptions.layout == "fit") {

                        } else {
                            this.cardContent.css("height", "auto");
                        }
                    } else {
                        el.wrap('<div class="jazz-pagearea" ></div>');
                        pagearea = el.parent();
                        if (parseInt(gridoptions.height) > 0 || gridoptions.layout == "fit") {
                            //pagearea.layout({layout: 'fit'});
                            pagearea.css({
                                overflow: 'hidden'
                            });
                        } else {
                            this.cardContent.css("height", "auto");
                        }
                    }
                    if (gridoptions.defaultview == "card") {
                        pagearea.css({
                            overflow: 'auto'
                        });
                    }
                    this.gridcolumn = parentobj.find("div[vtype=gridcolumn]").data("gridcolumn");
                    this.gridtable = parentobj.find("div[vtype=gridtable]").data("gridtable");
                    if (this.gridcolumn) {
                        this.cols = this.gridcolumn.cols;
                    }
                }
            },
            /**
             * @desc 当gridpanel包含在隐藏元素内，无法确定宽度时，显示gridpanel需要重新计算卡片宽度
             * @private
             */
            calculateGridcardWidth: function() {
                this._calCardStyle();
                this._cardResize();
            },
            /**
             * @desc 获取卡片options属性中设置样式
             * @private
             */
            _getcardSizeStyle: function() {
                var style = "";
                var width = this.options.width,
                    height = this.options.height,
                    margin = this.options.margin || "10px";
                if (width && height) {
                    style = " style='width:" + width + ";height:" + height + ";margin:" + margin + ";'";
                }
                return style;
            },
            /**
             * @desc gridpanel加载数据调用渲染卡片
             * @param {rowsdata} 加载的数据
             * @private
             */
            renderGridcardData: function(rowsdata) {
                if (rowsdata) {
                    this._renderData(rowsdata);
                }
            },
            /**
             * @desc  根据rowdata渲染创建卡片
             * @param {rowsData} 渲染卡片数据
             * @private
             * @example this._renderData(rowsData);
             */
            _renderData: function(rowsData) {
                var $this = this,
                    rows = rowsData;

                //1.渲染卡片数据的时候，首先删除之前数据
                $this.cardContent.children().remove();
                //2.添加卡片按钮
                if ($this._isCardAddBtn() && !$this._hasCardAddBtn()) {
                    $this._addCardNewIcon();
                }
                //3.数据渲染
                if (rows) {
                    //渲染卡片，包含3个部分（内容区、选择框区域、卡片tools区）
                    //1.选择框区域
                    var functionHtml = "";
                    if ($this.options.isshowselecthelper == true || $this.options.isshowselecthelper == 'true') {
                        if ($this.options.selecttype == "1") { //单选
                            functionHtml = '<div class="jazz-grid-cardcell-functionarea" ><div class="jazz-grid-cardcell-functionarea-radio"><input class="jazz-card-checkbox" type="radio" style="width:16px;height:16px;" /></div></div>';
                        } else if ($this.options.selecttype == "2") { //复选
                            functionHtml = '<div class="jazz-grid-cardcell-functionarea" ><div class="jazz-grid-cardcell-functionarea-checkbox"><input class="jazz-card-checkbox" type="checkbox" style="width:16px;height:16px;" /></div></div>';
                        }
                    }
                    var cardmodel = $this.options.html;
                    var style = $this._getcardSizeStyle();
                    var cardclass = $this.options.cardclass;
                    var cardHtml = "",
                        cellcontent = "";
                    for (var i = 0, len = rows.length; i < len; i++) {

                        cardHtml = '<div class="jazz-grid-cardcell ' + cardclass + '" ' + style + ' id="' + rows[i]["rowuuid"] + '">';
                        //cardHtml = '<div class="jazz-grid-cardcell jazz-grid-qh-cardcell" id="'+rows[i]["rowuuid"]+'">';
                        cellcontent = $this._customopration(cardmodel, rows[i]) || "";

                        cardHtml = cardHtml + cellcontent;
                        cardHtml = cardHtml + functionHtml;

                        //固定卡片的tools定义区内容row["@toolsopration"]
                        var stm = rows[i]["@toolsopration"];
                        if (stm) {
                            stm = "<div class='jazz-grid-cardcell-tools' >" + stm + "</div>";
                        } else {
                            stm = "";
                        }
                        cardHtml = cardHtml + stm + "</div>";
                        $(cardHtml).appendTo($this.cardContent);
                    }
                }
            },
            _isCardAddBtn: function() {
                return ((this.options.isaddcard == false) || (this.options.isaddcard == "false") ? false : true);
            },

            _hasCardAddBtn: function() {
                return this.cardContent.find('.jazz-card-new').length == 0 ? false : true;
            },

            _addCardNewIcon: function() {
                var $this = this,
                    $cardContent = $this.cardContent,
                    addcardposition = $this.options.addcardposition,
                    addcardrender = $this.options.addcardrender,
                    addcardclick = $this.options.addcardclick;

                var cardHtml = "";
                if (addcardrender) {
                    cardHtml = $this._customopration(addcardrender);
                } else {
                    cardHtml = $this._createCardNewIcon();
                }
                if (addcardposition && addcardposition === "first" && ($cardContent.find('div.jazz-grid-cardcell:first').length > 0)) {
                    $cardContent.find('div.jazz-grid-cardcell:first').before(cardHtml);
                } else {
                    $cardContent.append(cardHtml);
                }
                if (addcardclick) {
                    $cardContent.find('div.jazz-card-new').on('click', function(e) {
                        $this._event("addcardclick", e);
                    });
                }
            },

            _createCardNewIcon: function() {
                var $this = this;
                if (!$this.cardCell) {
                    $this._calCardStyle();
                }
                var cardHeight = $this.cardCell.cardHeight;
                var style = $this._getcardSizeStyle();
                var cardclass = $this.options.cardclass;
                var addcard = '<div class="jazz-grid-cardcell ' + cardclass + '" ' + style + '><div class="jazz-card-new" style="height:' + cardHeight + 'px;"></div></div>';
                return addcard;
            },
            /**
             * @desc 计算卡片的位置
             * @private
             * @example this._calCardStyle();
             */
            _calCardStyle: function() {
                var $this = this,
                    style = $this._getcardSizeStyle(),
                    cardclass = $this.options.cardclass,
                    card = "<div class='jazz-grid-cardcell " + cardclass + "' " + style + "></div>",
                    cardOuterwidth = $(card).outerWidth(true),
                    cardWidth = $(card).width(),
                    cardHeight = $(card).height(),
                    cardMargin = $(card).outerWidth(true) - $(card).width();

                var cardContentWidth = this.element.parent().width();
                var total = Math.floor(cardContentWidth / (cardOuterwidth + 2)),
                    cardContainerWidth = total * (cardOuterwidth + 2);

                //计算后的卡片相关参数
                $this.cardCell = {
                    total: total, //每行卡片数
                    cardWidth: cardWidth, //卡片宽度
                    cardHeight: cardHeight, //卡片高度
                    cardMargin: cardMargin, //卡片横向间距
                    cardContainerWidth: cardContainerWidth
                };
            },

            /**
             * @desc 卡片布局方法
             * @param {flag} 是否已经计算卡片位置参数_calCardStyle
             * @private
             * @example this._cardResize();
             */
            _cardResize: function(flag) {
                if (!this.cardCell) {
                    return;
                }
                var $this = this,
                    cardCell = $this.cardCell,
                    cardContainerWidth = cardCell.cardContainerWidth,
                    total = cardCell.total;
                if (flag) {
                    total = Math.floor($this.element.parent().width() / (cardCell.cardWidth + 22)), //一行放几个卡片
                        cardContainerWidth = total * (cardCell.cardWidth + 22);
                }

                $this.cardContent.css({
                    'width': cardContainerWidth + 'px',
                    'margin': '0 auto'
                });
            },
            /**
             * @desc 判断是否是单选
             * @return {boolean}
             * @private
             */
            _isSingleSelection: function() {
                var selecttype = this.options.selecttype;
                return (selecttype == 1 || selecttype == '1');
            },
            /**
             * @desc 判断是否是多选
             * @return {boolean}
             * @private
             */
            _isMultipleSelection: function() {
                var selecttype = this.options.selecttype;
                return (selecttype == 2 || selecttype == '2');
            },
            /**
             * @desc 绑定gridcard点击选中事件
             * @private
             * @example this._bindGridcardSelectionEvent()
             */
            _bindGridcardSelectionEvent: function() {
                var $this = this;

                //卡片点击选择事件委托绑定给this.cardContent
                //1.处理gridtable与gridcard事件选择交互
                //2.卡片checkbox的处理
                var selector = "div.jazz-grid-cardcell";
                this.cardContent.on('mouseover.gridcard', selector, null, function(e) {
                        var element = $(this);
                        if (!element.hasClass('jazz-gridtable-highlight')) {
                            element.addClass('jazz-gridtable-hover');
                        }
                        //鼠标移入卡片立即绑定tooltip
                        var tipObj = element.find('div.jazz-grid-qh-c-h1');
                        if (tipObj.size() > 0) {
                            var tip = element.find(".jazz-grid-cardcell-title").text();
                            tipObj.tooltip({
                                iconclass: 'jazz-tooltip-default-icon',
                                content: tip
                            });
                        }
                        //element.find(".jazz-grid-cardcell-tools").css("display","block");
                    })
                    .on('mouseout.gridcard', selector, null, function() {
                        var element = $(this);
                        if (!element.hasClass('jazz-gridtable-highlight')) {
                            element.removeClass('jazz-gridtable-hover');
                        }
                        //element.find(".jazz-grid-cardcell-tools").css("display","none");
                    }).on('click.gridcard', selector, null, function(e) {
                        if ($(e.target).is(':input,div.jazz-grid-cardcell-functionarea-checkbox,div.jazz-grid-cardcell-functionarea-radio')) {
                            return;
                        }
                        if ($(e.target).is('a') || $(e.target).parent().is('div.jazz-grid-cardcell-tools')) {
                            return;
                        }
                        if ($(this).hasClass("jazz-card-new")) {
                            return;
                        }
                        if ($(this).children().hasClass("jazz-card-new")) {
                            return;
                        }

                        var that = this;
                        if ($this.options.rowselectable || $this.options.rowselectable == "true") {
                            setTimeout(function() {
                                $this._onCardClick(e, that, false);
                            }, 200);
                        }
                    }).on('dblclick.gridcard', selector, null, function(e) {
                        if ($(e.target).is(':input, div.jazz-grid-cardcell-functionarea-checkbox,div.jazz-grid-cardcell-functionarea-radio')) {
                            return;
                        }
                        if ($(e.target).is('a') || $(e.target).parent().is('div.jazz-grid-cardcell-tools')) {
                            return;
                        }
                        if ($(this).hasClass("jazz-card-new")) {
                            return;
                        }
                        if ($(this).children().hasClass("jazz-card-new")) {
                            return;
                        }
                        $this._onCardClick(e, this, true);
                    }).on("click.cardcheckbox", "input.jazz-card-checkbox", null, function(e) {
                        //多选框事件和 click.grid事件相同
                        //当组件允许多选时才起作用，否则不再起作用，（要求组件使用者在自定义卡片的时候，注意checkbox与rowselecttype搭配）
                        if ($this._isMultipleSelection()) {
                            var row = e.target.parentNode.parentNode.parentNode;
                            if ($(this).attr("onclick")) {

                            } else {
                                if (this.checked) {
                                    $this._selectCard($(row), true, e);
                                } else {
                                    $this._unselectCard($(row), true, e);
                                }
                            }
                        } else {
                            alert("组件选中类型非多选，无法触发复选框事件响应。");
                        }
                    });
            },
            /**
             * @desc 卡片点击事件处理，并处理与gridtable表格交互
             * @param {event} 点击事件event对象
             * @param {targetCard} 表格行或卡片所对应的数据
             * @param {flag} 表明点击是单击还是双击事件,true:双击，false:单击
             * @private
             * @example this._onCardClick(event, targetCard, flag);
             */
            _onCardClick: function(event, targetCard, flag) {
                //不采用ctrl键进行多选操作
                var card = $(targetCard);
                var isSelected = card.hasClass('jazz-gridtable-highlight');

                if (this._isMultipleSelection()) {
                    if (flag) { //双击
                        this._selectCard(card, true, event, flag);
                    } else { //单击
                        //多选，单击效果与checkbox框一致
                        if (isSelected) {
                            //取消当前选择行、卡片
                            this._unselectCard(card, true, event);
                        } else {
                            //选中当前选择行、卡片
                            this._selectCard(card, true, event, flag);
                        }
                    }
                } else {
                    if (flag) { //双击
                        this._selectCard(card, true, event, flag);
                    } else { //单击
                        //默认处理都是单选，单击效果与radio一致
                        if (isSelected) {
                            //已选中，则返回
                            return;
                        } else {
                            //取消其他已选中的行、卡片；然后选中当前行、卡片
                            this._unselectAllCards();
                            this._selectCard(card, true, event, flag);
                        }
                    }
                }
            },
            /**
             * @desc 返回选中卡片的坐标
             * @param {card} 选中卡片数据
             * @return {index} 卡片的坐标
             * @private
             * @example this._getCardIndex(card)
             */
            _getCardIndex: function(card) {
                var index = -1;
                index = this.cardContent.find("div.jazz-grid-cardcell").index(card);
                if (this._isCardAddBtn()) {
                    if (this.options.addcardposition && this.options.addcardposition === "first") {
                        index -= 1;
                    }
                }
                return index;
            },

            /**
             * @desc 选中指定行数据
             * @param {card} 当前选中卡片
             * @param {isCallback} 是否执行点击卡片回调函数
             * @param {event} event对象
             * @param {flag} 单击或双击标识
             * @private
             * @example this._selectCard(row)
             */
            _selectCard: function(row, isCallback, event, flag) {
                var id = row.attr("id");
                //执行卡片和表格选中
                row.removeClass('jazz-gridtable-hover')
                    .addClass('jazz-gridtable-highlight')
                    .attr('aria-selected', true);
                if (row.find("input.jazz-card-checkbox")) {
                    row.find("input.jazz-card-checkbox").attr('checked', true);
                }
                if (row.find("input.jazz-card-radio")) {
                    row.find("input.jazz-card-radio").attr('checked', true);
                }
                if (this.gridtable) {
                    //卡片视图下,同步修改表格中对应数据的选中状态
                    var tbody = this.gridtable.tbody;
                    var thead = this.gridcolumn.tbody;
                    var tablerow = tbody.find("#" + id);
                    tablerow.addClass('jazz-row-selected')
                        .attr('aria-selected', true);
                    if (tablerow.find("input:checkbox")) {
                        tablerow.find("input:checkbox").attr('checked', true);
                    }
                    if (tablerow.find("input:radio")) {
                        tablerow.find("input:radio").attr('checked', true);
                        tablerow.siblings().find("input:radio").attr('checked', false);
                    }
                    if (tbody.find("input:checked").length == tbody.find("input:checkbox").length) {
                        thead.find("input:checkbox").attr("checked", true);
                    }
                }
                //处理单击和双击回调函数
                if (isCallback) {
                    //由gridpanel统一获取this.rows共享数据
                    var data = {};
                    data = this.gridpanel.getSelectedRowDataById(id);

                    if (flag == true) {
                        this._event("carddblclick", event, data);
                    } else {
                        this._event("cardselect", event, data);
                    }
                }
            },
            /**
             * @desc 取消卡片的选中
             * @param {row} 当前选中卡片
             * @param {isCallback} 是否执行点击卡片回调函数
             * @param {event} event对象
             * @private
             * @example this._selectRow(row)
             */
            _unselectCard: function(row, isCallback, event) {
                var id = row.attr("id");
                row.removeClass('jazz-gridtable-highlight').attr('aria-selected', "false");

                if (row.find("input.jazz-card-checkbox")) {
                    row.find("input.jazz-card-checkbox").attr('checked', false);
                }
                if (row.find("input.jazz-card-radio")) {
                    row.find("input.jazz-card-radio").attr('checked', false);
                }
                if (this.gridtable) {
                    //卡片视图下,同步修改表格中对应数据的选中状态
                    var tbody = this.gridtable.tbody;
                    var thead = this.gridcolumn.tbody;
                    var tablerow = tbody.find("#" + id);
                    tablerow.removeClass('jazz-row-selected')
                        .attr('aria-selected', false);
                    if (tablerow.find("input:checkbox")) {
                        tablerow.find("input:checkbox").attr('checked', false);
                    }
                    if (tablerow.find("input:radio")) {
                        tablerow.find("input:radio").attr('checked', false);
                    }
                    if (tbody.find("input:checked").length != tbody.find("input:checkbox").length) {
                        thead.find("input:checkbox").attr("checked", false);
                    }
                }
                //处理单击和双击回调函数
                if (isCallback) {
                    //由gridpanel统一获取this.rows共享数据
                    var data = {};
                    data = this.gridpanel.getSelectedRowDataById(id);
                    this._event("cardunselect", event, data);
                }
            },
            _selectAllCards: function() {
                this.cardContent.find("div.jazz-grid-cardcell").addClass('jazz-gridtable-highlight').attr('aria-selected', true);
                if (this._isMultipleSelection()) {
                    this.cardContent.find("input.jazz-card-checkbox").attr('checked', true);
                }

                if (this.gridtable) {
                    var tbody = this.gridtable.tbody;
                    var thead = this.gridcolumn.tbody;

                    tbody.find("tr").addClass('jazz-row-selected').attr('aria-selected', true);
                    if (this._isMultipleSelection()) {
                        tbody.find("input:checkbox").attr("checked", true);
                        thead.find("input:checkbox").attr("checked", true);
                    }
                }
            },
            _unselectAllCards: function() {
                this.cardContent.find("div.jazz-grid-cardcell").removeClass('jazz-gridtable-highlight').attr('aria-selected', false);
                this.cardContent.find("input.jazz-card-checkbox").attr('checked', false);
                this.cardContent.find("input.jazz-card-radio").attr('checked', false);

                if (this.gridtable) {
                    var tbody = this.gridtable.tbody;
                    var thead = this.gridcolumn.tbody;

                    tbody.find("tr").removeClass('jazz-row-selected').attr('aria-selected', false);
                    if (this._isMultipleSelection()) {
                        tbody.find("input:checkbox").attr("checked", false);
                        thead.find("input:checkbox").attr("checked", false);
                    }
                }
            },

            /**
             * @desc 添加卡片记录(暴露接口方式添加卡片记录)
             * @param {data} 新增卡片数据数组 [{key1: value1, key2: value2, ……}]
             */
            addCard: function(data) {
                //data 数据数组，循环追加card卡片html
                if (!data) {
                    return;
                }
                var cardHtml = this._creatCardHtml(data);
                if (cardHtml) {
                    if (this.options.addcardposition == "last") {
                        this.cardContent.find("div.jazz-grid-cardcell:last").before(cardHtml);
                    } else {
                        this.cardContent.append(cardHtml);
                    }
                }
            },

            _creatCardHtml: function(rows) {
                var $this = this;

                if (rows) {
                    //渲染卡片，包含3个部分（内容区、选择框区域、卡片tools区）
                    //1.选择框区域
                    var functionHtml = "";
                    if ($this.options.isshowselecthelper == true || $this.options.isshowselecthelper == 'true') {
                        if ($this.options.selecttype == "1") { //单选
                            functionHtml = '<div class="jazz-grid-cardcell-functionarea" ><div class="jazz-grid-cardcell-functionarea-radio"><input class="jazz-card-checkbox" type="radio" style="width:16px;height:16px;" /></div></div>';
                        } else if ($this.options.selecttype == "2") { //复选
                            functionHtml = '<div class="jazz-grid-cardcell-functionarea" ><div class="jazz-grid-cardcell-functionarea-checkbox"><input class="jazz-card-checkbox" type="checkbox" style="width:16px;height:16px;" /></div></div>';
                        }
                    }
                    var cardmodel = $this.options.html;
                    var style = $this._getcardSizeStyle();
                    var cardclass = $this.options.cardclass;
                    var cardHtml = "";
                    for (var i = 0, len = rows.length; i < len; i++) {

                        cardHtml += '<div class="jazz-grid-cardcell ' + cardclass + '" ' + style + ' id="' + rows[i]["rowuuid"] + '">';
                        //cardHtml += '<div class="jazz-grid-cardcell jazz-grid-qh-cardcell" id="'+rows[i]["rowuuid"]+'">';
                        cellcontent = $this._customopration(cardmodel, rows[i]) || "";

                        cardHtml = cardHtml + cellcontent;
                        cardHtml = cardHtml + functionHtml;

                        //固定卡片的tools定义区内容row["@toolsopration"]
                        var stm = rows[i]["@toolsopration"];
                        if (stm) {
                            stm = "<div class='jazz-grid-cardcell-tools' >" + stm + "</div>";
                        } else {
                            stm = "";
                        }
                        cardHtml = cardHtml + stm + "</div>";
                    }
                    return cardHtml;
                }
            },
            /**
             * @desc 根据卡片id更新卡片数据(暴露接口方式更新卡片记录)
             * @param {data} 待更新行数据{}
             * @param {id} gridcard卡片id
             * @example  $('#gridcard').gridcard('updateCardById',data, id);
             */
            updateCardById: function(data, id) {

                if (!data || !id) {
                    return;
                }
                //将data包一层数组中
                var carddata = [];
                carddata.push(data);

                var cardobj = this.cardContent.find("#" + id);
                var cardHtml = this._creatCardHtml(carddata);
                if (cardHtml) {
                    cardobj.replaceWith(cardHtml);
                }
            },
            /**
             * @desc 根据卡片id属性值(暴露接口方式删除卡片记录)
             * @param {id} id主键
             * @example 
             */
            removeCardById: function(id) {
                this.cardContent.find("#" + id).remove();
            },
            /**
             * @desc 根据卡片id属性值(暴露接口方式选中卡片)
             * @private
             */
            selectRow: function(id) {
                if (!id) {
                    return false;
                };
                var $this = this;
                var card = this.cardContent.find("#" + id);

                //处理选择行的状态
                //执行卡片和表格选中
                card.removeClass('jazz-gridtable-hover')
                    .addClass('jazz-gridtable-highlight')
                    .attr('aria-selected', true);
                if ($this._isMultipleSelection()) {
                    if (card.find("input.jazz-card-checkbox")) {
                        card.find("input.jazz-card-checkbox").attr('checked', true);
                    }
                } else {
                    if (card.find("input.jazz-card-radio")) {
                        card.find("input.jazz-card-radio").attr('checked', true);
                        card.siblings().find("input.jazz-card-radio").attr('checked', false);
                    }
                }
            },
            /**
             * @desc 根据卡片id属性值(暴露接口方式取消选中卡片)
             * @private
             */
            unselectRow: function(id) {
                if (!id) {
                    return false;
                };
                var $this = this;
                var card = this.cardContent.find("#" + id);
                //只有多选的时候才能取消选中
                card.removeClass('jazz-gridtable-highlight').attr('aria-selected', true);
                if ($this._isMultipleSelection()) {
                    if (card.find("input.jazz-card-checkbox")) {
                        card.find("input.jazz-card-checkbox").attr('checked', false);
                    }
                }
            },
            /**
             * @desc 全部取消选中(暴露接口方式全部取消选中)
             * @private
             */
            unselectAllRows: function() {
                var $this = this;

                this.cardContent.find("div.jazz-grid-cardcell").removeClass('jazz-gridtable-highlight').attr('aria-selected', false);
                if ($this._isMultipleSelection()) {
                    this.cardContent.find("input.jazz-card-checkbox").attr('checked', false);
                }
            },
            /**
             * @desc 全部选中(暴露接口方式全部选中)
             * @private
             */
            selectAllRows: function() {
                var $this = this;

                this.cardContent.find("div.jazz-grid-cardcell").addClass('jazz-gridtable-highlight').attr('aria-selected', true);
                if ($this._isMultipleSelection()) {
                    this.cardContent.find("input.jazz-card-checkbox").attr('checked', true);
                }
            }

        });

    })(jQuery);

    (function($) {

        jazz.grid.editorgridpanel = {
            /**
             * @desc 据行坐标或者列坐标使单元格变为可编辑表格
             * @augments {rowIndex}{colIndex}行坐标，列坐标
             * @public
             * @example $("#gridpanel").gridpanel("setEditorCell",1,2);
             */
            setEditorCell: function(rowIndex, colIndex, editState) {
                var rowIndex = parseInt(rowIndex);
                var colIndex = parseInt(colIndex);
                var editState = editState == true || editState == "true";
                if (rowIndex > 0 || colIndex > 0) {
                    if (this.gtable) {
                        this.gtable.gridtable('setEditorCell', rowIndex, colIndex, editState);
                    }
                }
            },
            /**
             * 新增可编辑行
             */
            addEidtorRow: function(insertPosition) {
                /**
                 * 考虑如何维护新添加行的数据
                 * 数据中的内容，都有那些数据？
                 * rowuuid,各个td
                 */
                if (this.gtable) {
                    /**
                     * 新增加的数据的数据项如何确定有以下两种情况：
                     * 1.当可编辑表格有原始数据的时候，参照原始数据，并将各数据项设置为null,rowuuid赋随机值
                     * 2.若无原始数据，则按照定义列name值添加数据项，并设置为null,rowuuid赋随机值
                     */
                    var data = {};
                    if (this.rows.length > 0) {
                        var copyrow = this.rows[0];
                        for (var key in copyrow) {
                            //初始值都设置为null
                            data[key] = null;
                        }
                    } else {
                        if (this.gcolumn) {
                            var gridcolumn = this.gcolumn.data("gridcolumn");
                            cols = gridcolumn.cols;
                            var columnname = "";
                            for (var j = 0, len = cols.length; j < len; j++) {
                                columnname = cols[j]['columnname'];
                                data[columnname] = null;
                            }
                        }
                    }
                    data["eidtorstate"] = "editing";
                    data["rowuuid"] = Math.uuid(32);
                    this.gtable.gridtable('addEidtorRow', data, insertPosition);
                    //将新增的编辑数据放入到原始数据中
                    this.rows.push(data);
                }
            },
            /**
             * @desc 返回当前可编辑表格已编辑数据
             * @example $("#gridpanel").gridpanel("getUpdatedRowData");
             */
            getUpdatedRowData: function() {
                var that = this;
                var rows = that.rows;
                var data = [],
                    state = "",
                    temp = null;
                for (var i = 0, len = rows.length; i < len; i++) {
                    state = rows[i]["eidtorstate"];
                    if (state) {
                        temp = {};
                        $.extend(true, temp, rows[i]);
                        data.push(temp);
                    }
                }
                return data || [];
            },
            _renderGridpanelData: function(rowsdata) {
                var $this = this;
                //对待渲染数据进行datarender和数据类型（datatype、dataformat）转换进行处理
                $this._processGridpanelData(rowsdata);

                //一、数据渲染表格和卡片
                //1.判断子组件是否创建完成,带创建完成后渲染
                //2.需要循环执行这个过程，settimeout
                var delay = 100,
                    timeout = 5000;
                if ($this.gtable) {
                    var gridtable = $this.gtable.data('gridtable');
                    if (gridtable) {
                        gridtable.renderGridtableData(rowsdata, true);
                    } else {
                        loopReloadData($this.gtable, 'gridtable', 0);
                    }
                }
                if ($this.gcard) {
                    var gridcard = $this.gcard.data('gridcard');
                    if (gridcard) {
                        gridcard.renderGridcardData(rowsdata, true);
                    } else {
                        loopReloadData($this.gcard, 'gridcard', 0);
                    }
                }

                //二、绑定分页条
                //if($this.options.isshowpaginator||$this.options.isshowpaginator=="true"){
                if ($this.gpaginator) {
                    var paginator = $this.gpaginator.data('paginator');
                    var a = $this.paginationInfo;
                    if (paginator) {
                        paginator.updatePage({
                            "page": a['page'],
                            "pagerows": a['pagerows'],
                            "totalrecords": a['totalrows']
                        });
                    } else {
                        loopReloadData($this.gpaginator, 'paginator', 0);
                    }
                }
                //}
                //三、是否创建可编辑组件，并显式显示可编辑组件
                var isshoweditcell = $this.options.isshoweditcell;
                if (isshoweditcell) {
                    if ($this.gtable) {
                        var gridtable = $this.gtable.data('gridtable');
                        gridtable.createEditorCell();
                    }
                }
                //四、执行回调dataloadcomplete函数
                $this._event("dataloadcomplete", null, {
                    "data": $this.rows,
                    "paginationInfo": $this.paginationInfo
                });

                //loopReloadData循环校验是否需要渲染gridtable或者gridcard数据
                function loopReloadData(obj, dataname, count) {
                    var compObject = obj.data(dataname);
                    //组件创建完成
                    if (compObject) {
                        if (dataname == "gridtable") {
                            compObject.renderGridtableData(rowsdata, true);
                        } else if (dataname == "gridcard") {
                            compObject.renderGridcardData(rowsdata, true);
                        } else if (dataname == "paginator") {
                            compObject.updatePage({
                                "page": $this.paginationInfo['page'],
                                "pagerows": $this.paginationInfo['pagerows'],
                                "totalrecords": $this.paginationInfo['totalrows']
                            });
                        }
                    } else {
                        if (count * delay <= timeout) {
                            count++;
                            setTimeout(function() {
                                loopReloadData(obj, dataname, count);
                            }, delay);
                        }
                    }
                }
            },
            /**
             * @desc 通过回调函数加载数据，并渲染卡片和表格数据
             * @param {data} 返回数据
             * @param {fn} 重载数据后执行回调
             * @param {flag} 重新更新绑定分页条标识
             * @private
             * @example this._requestLoadData(data,fn,flag);
             */
            _requestLoadData: function(data, fn, flag) {
                var that = this;
                //一、对待渲染数据进行datarender和数据类型（datatype、dataformat）转换进行处理
                that._processGridpanelData(data);
                if (that.gtable) {
                    that.gtable.gridtable("renderGridtableData", data);
                }
                if (that.gcard) {
                    that.gcard.gridcard("renderGridcardData", data);
                }
                //二、是否创建可编辑组件，并显式显示可编辑组件
                var isshoweditcell = that.options.isshoweditcell;
                if (isshoweditcell) {
                    if (that.gtable) {
                        var gridtable = that.gtable.data('gridtable');
                        gridtable.createEditorCell();
                    }
                }
                //reload/query/reloadcurrentpage/重新更新绑定分页条，更新状态
                //paginator 不再重新绑定更新状态
                var a = that.paginationInfo;
                if (flag) {
                    if (that.options.isshowpaginator && that.gpaginator) {
                        that.gpaginator.paginator("updatePage", {
                            "page": a['page'],
                            "pagerows": a['pagerows'],
                            "totalrecords": a['totalrows']
                        });
                    }
                }
                if (fn && $.isFunction(fn)) {
                    fn.call(that, that.rows, a);
                }
            }
        };
    })(jQuery);

    (function($) {

        jazz.grid.editorgridtable = {

            /**
             * @desc 覆写jazz.gridtable的_insertRowHtml方法，处理生成可编辑表格的dom结构
             * @param {rowObj}  行对象
             * @param {index}   index从某一整数值递增的值，计算行号
             * @param {lineIndex} 初始行索引
             * @private
             */
            _insertRowHtml: function(rowObj, index, lineIndex) {
                var $this = this;
                var data = rowObj;
                var lineno = this.options.lineno; //是否显示行号
                //1.计算行号
                var page = 1; //当前页码
                var pagerows = 0; //当前每页显示条数
                if (this.gridpanel && this.gridpanel.paginationInfo) {
                    page = this.gridpanel.paginationInfo["page"] || 1;
                    pagerows = this.gridpanel.paginationInfo["pagerows"] || 0;
                }
                lineIndex = index + lineIndex + 1 + ((page - 1) * pagerows);

                //2.计算奇偶行
                var cls = '';
                if ((lineIndex) % 2 == 0) {
                    cls = 'jazz-gridtable-even';
                } else {
                    cls = 'jazz-gridtable-odd';
                }
                var rowHtml = '<tr index="' + (lineIndex - 1) + '" class="jazz-grid-row ' + cls + ' " id="' + data["rowuuid"] + '">';
                rowHtml += '<th style="height:20px;"></th>';
                //4.判断是否显示checkbox radio
                var b = '';
                if (this._isSelectHelper() && this._isSelectType()) {
                    if ($this._isMultipleSelection()) {
                        b = 'checkbox';
                    } else if ($this._isSingleSelection()) {
                        b = 'radio';
                    }
                    //rowHtml += '<td class="jazz-grid-cell"><div class="jazz-grid-cell-box"><input type="'+b+'"/></div></td>';
                    rowHtml += '<td class="jazz-grid-cell jazz-grid-cell-box"><input type="' + b + '"/></td>';
                }
                //5.添加行号，根据当前页码数递增
                if (lineno) {
                    rowHtml += '<td class="jazz-grid-cell jazz-grid-cell-no">' + lineIndex + '</td>';
                }
                //6.生成内容td
                var iseditable = false;
                if (this.gridpanel && this.gridpanel.paginationInfo) {
                    iseditable = this.gridpanel.options["iseditable"];
                }

                var columnname = "",
                    stm = "",
                    textalign = "",
                    columneditor = null,
                    title = "";
                for (var j = 0, len = this.cols.length; j < len; j++) {
                    columnname = this.cols[j]['columnname'];
                    textalign = this.cols[j]['textalign'] || "";
                    columneditor = this.cols[j]['iseditable'];

                    title = "";
                    stm = "&nbsp;";
                    if (columnname && data[columnname] != undefined) {
                        if (data[columnname].toString().indexOf('<') != 0) {
                            title = data[columnname] || "";
                        }
                        /**
                         * 去掉原<td>内部的div
                         */
                        //stm = '<div class="jazz-grid-cell-inner" title='+title+'>'+data[columnname]+'</div>';
                        stm = data[columnname];
                    }
                    if (textalign) {
                        textalign = "text-align-" + textalign;
                    }
                    //根据jazz.gridcolumn表头列定义中的iseditable属性，标记每个td是否为可编辑单元格cell
                    if (iseditable) {
                        columneditor = columneditor == false || columneditor == "false" ? "" : "celleditable";
                    } else {
                        columneditor = columneditor == true || columneditor == "true" ? "celleditable" : "";
                    }
                    rowHtml += '<td class="jazz-grid-cell ' + textalign + ' ' + columneditor + '" title=' + title + '>' + stm + '</td>';
                }
                return rowHtml;
            },

            /**
             * @desc 覆盖jazz.gridtable_bindGridTableSelectionEvent方法，
             * 绑定表格选择事件（单击和双击），为document绑定鼠标按下事件处理可编辑单元格赋值和消除
             * @private
             * @example this._bindGridTableSelectionEvent();
             */
            _bindGridTableSelectionEvent: function() {
                var that = this;
                this.tbody.on("click.td", "td.jazz-grid-cell", null, function(e) {
                    if ($(this).parent().hasClass("nodata")) {
                        return;
                    }
                    if ($(e.target).is('a')) {
                        return;
                    }
                    that._onRowClickEvent(e, $(this), false);
                }).on("dblclick.td", "td.jazz-grid-cell", null, function(e) {
                    if ($(this).parent().hasClass("nodata")) {
                        return;
                    }
                    if ($(e.target).is('a')) {
                        return;
                    }
                    that._onRowClickEvent(e, $(this), true);
                });

                $(document).on("mousedown.editorgrid", function(e) {
                    //1.即要排除鼠标点到pretd本身和内部子元素情况
                    var target = $(e.target);
                    if (!that.pretd || !that.pretd[0]) {
                        return;
                    }
                    if (that.pretd[0] == target[0] || that.pretd.find(target)[0]) {
                        return;
                    }
                    //1.若显式显示可编辑单元格，则不销毁可编辑td中的可编辑组件
                    //而只是处理值改变情况
                    var isshoweditcell = that.options.isshoweditcell;
                    if (isshoweditcell) {
                        that._showeditcellChange(e);
                    } else {
                        //3.编辑组件赋值和状态清除
                        that._editorChange(e);
                    }
                });
            },
            /**
             * @desc 覆盖jazz.gridtable的_onRowClickEvent，区别处理普通单元格和可编辑单元格的逻辑
             * @param {event} event事件对象
             * @param {tdEl} 当前点击td对象
             * @param {dbclick} 是否是双击
             */
            _onRowClickEvent: function(e, tdEl, dbclick) {
                var $this = this;
                var targetrow = $(tdEl).parent();
                var editortype = $this.options.editortype;
                var rowselectable = $this.options.rowselectable || $this.options.rowselectable == "true";

                //表格单击事件处理规范：
                //1.点击普通单元格响应选中、取消选中、双击事件
                //2.点击可编辑单元格响应可编辑组件创建事件，但不触发单击选中、取消选中、双击事件
                //3.对于editortype==row时需要特殊处理，因为点击该行单元格都需要初始化可编辑组件
                if (tdEl.hasClass("celleditable")) { //可编辑td
                    //可编辑单元格td，无论单击还是双击都不触发rowselect,rowunselect,rowdbclick事件
                    //只是增加选中行样式，并且再次点击也不会去掉行选中样式
                    if (dbclick) {
                        if (rowselectable) {
                            $this._shiftToRowSelectedStyle(targetrow);
                        }
                        $this._editTdClick(e, targetrow, tdEl);
                    } else {
                        //延迟解决区分鼠标单击和双击
                        setTimeout(function() {
                            if (rowselectable) {
                                $this._shiftToRowSelectedStyle(targetrow);
                            }
                            $this._editTdClick(e, targetrow, tdEl);
                        }, 100);
                    }
                } else { //不可编辑td
                    if (rowselectable) {
                        if (dbclick) {
                            $this._onRowClick(e, targetrow, true); //双击
                        } else {
                            setTimeout(function() {
                                $this._onRowClick(e, targetrow, false);
                            }, 100);
                        }
                    } else {
                        if ($(e.target).is('.jazz-grid-cell-box :input')) {
                            $this._onRowClick(e, targetrow, false); //选择框勾选都是相当于单击事件
                        }
                    }
                    if (editortype == "row") {
                        $this._editTdClick(e, targetrow, tdEl);
                    }
                }
            },
            /**
             * @desc 切换行选中样式
             * @param {row} 鼠标选中行对象
             * @private
             */
            _shiftToRowSelectedStyle: function(row) {
                var $this = this;
                var id = row.attr('id');
                //处理选择行的状态
                row.addClass('jazz-row-selected').attr('aria-selected', true);
                //处理单选和多选两种情况
                if ($this._isMultipleSelection()) {
                    if (row.find("input:checkbox")) {
                        row.find("input:checkbox").attr('checked', true);
                    }
                    //全选，所有数据行被选中
                    if ($this.tbody.find("input:checked").length == $this.tbody.find("input:checkbox").length) {
                        var thead = $this.gridcolumn.tbody;
                        thead.find("input:checkbox").attr("checked", true);
                    }
                } else {
                    if (row.find("input:radio")) {
                        row.find("input:radio").attr('checked', true);
                        row.siblings().find("input:radio").attr('checked', false);
                    }
                }
                //若是gridpanel存在卡片视图，同时也要改变该行数据对用的卡片的样式
                if ($this.gridpanel.gcard) {
                    var card = $this.gridpanel.gcard.find("#" + id);
                    card.removeClass('jazz-gridtable-hover')
                        .addClass('jazz-gridtable-highlight')
                        .attr('aria-selected', true);
                    if ($this._isMultipleSelection()) {
                        if (card.find("input.jazz-card-checkbox")) {
                            card.find("input.jazz-card-checkbox").attr('checked', true);
                        }
                    } else {
                        if (card.find("input.jazz-card-radio")) {
                            card.find("input.jazz-card-radio").attr('checked', true);
                            card.siblings().find("input.jazz-card-radio").attr('checked', false);
                        }
                    }
                }
            },
            /**
             * @desc 重置上一个操作的可编辑单元格缓存对象数据
             * @private
             */
            _resetPretdComponent: function() {
                var that = this;
                that.pretd = null;
                that.pretdoption = null;
                that.prevtype = null;
                that.preheadname = null;
                that.preid = null;
                that.predata = null;
            },
            /**
             * @desc 缓存当前可编辑单元格相关数据
             * @param {event} 事件对象
             * @param {tr} 可编辑单元格所在行对象
             * @param {td} 可编辑单元格对象
             */
            _reValuePretdComponent: function(event, tr, td) {
                var that = this;
                var comp = td.children();
                var vtype = comp.attr("vtype") || "";
                var index = td.index() || -1;
                var headname = that.thead.find("th").eq(index).attr("name");
                var id = tr.attr("id");
                var data = that.gridpanel.getSelectedRowDataById(id);
                var headerCells = that.gridcolumn.options.header;
                var tdoption = that._getDefinedColumn(headerCells, headname);

                that.pretd = td;
                that.pretdoption = tdoption;
                that.compobject = comp.data(vtype);
                that.prevtype = vtype;
                that.preheadname = headname;
                that.preid = id;
                that.predata = data;
            },
            /**
             * @desc 可编辑单元格点击事件处理逻辑
             * @param {event} 事件对象
             * @param {tr} 可编辑单元格所在行对象
             * @param {td} 可编辑单元格对象
             */
            _editTdClick: function(event, tr, td) {
                var that = this;
                var editortype = that.options.editortype;
                if (editortype == "row") {
                    if (that.pretd && that.pretd[0] == td[0]) {
                        return;
                    } else {
                        //1.校验该行是否已经初始化可编辑组件
                        if (tr.find("div[vtype]").length > 0) {
                            if (td.hasClass("celleditable")) {
                                that._reValuePretdComponent(event, tr, td);
                            } else {
                                //that._resetPretdComponent();
                            }
                        } else {
                            //初始化一整行的可编辑组件
                            $(tr).find("td.celleditable").each(function(i) {
                                that._createCellEditorComponent(event, tr, $(this));
                            });
                            var defaultTD = $(tr).find("td.celleditable:first");
                            that._reValuePretdComponent(event, tr, defaultTD);
                        }
                    }
                } else if (editortype == "column") {
                    if (that.pretd && that.pretd[0] == td[0]) {
                        return;
                    } else {
                        if (td.find("div[vtype]").length > 0) {
                            if (td.hasClass("celleditable")) {
                                that._reValuePretdComponent(event, tr, td);
                            } else {
                                that._resetPretdComponent();
                            }
                        } else {
                            var index = td.index();
                            that.tbody.find("tr").each(function(i) {
                                var obj = $(this).children().eq(index);
                                that._createCellEditorComponent(event, $(this), obj);
                            });
                            var defaultTR = that.tbody.find("tr:first");
                            var defaultTD = defaultTR.children().eq(index);
                            that._reValuePretdComponent(event, defaultTR, defaultTD);
                        }
                    }
                } else { //editortype==cell||undefined||null
                    if (that.pretd && that.pretd[0] == td[0]) {
                        return;
                    } else {
                        //创建可编辑单元格中的组件
                        that._createCellEditorComponent(event, tr, td);
                        //缓存可编辑单元格相关数据
                        that._reValuePretdComponent(event, tr, td);

                        //对于editortype=="row/column"时，不设置焦点
                        var inputObj = td.find("input[class='jazz-field-comp-input']");
                        if (inputObj[0]) {
                            inputObj.focus();
                        }
                    }
                }
            },
            /**
             * @desc 创建可编辑单元格相应操作组件
             * @param {event} 事件对象
             * @param {tr} 可编辑单元格所在行对象
             * @param {td} 可编辑单元格对象
             */
            _createCellEditorComponent: function(event, tr, td) {
                var that = this;
                var editortype = that.options.editortype;
                var comp = td.children();
                var vtype = comp.attr("vtype") || "";
                if (!vtype) {
                    //清空td全部内容
                    td.empty();
                    //从thead中找出该列的name值，以便在header中定位到定义列
                    var index = td.index() || -1;
                    var headname = that.thead.find("th").eq(index).attr("name");

                    //对当前<div class="jazz-grid-cell-inner">添加可编辑的样式
                    //利用<div>创建可编辑组件
                    td.addClass("jazz-grid-cell-editing");
                    comp = $("<div style='margin:0px;padding:0px;'>").appendTo(td);

                    //创建组件默认为textfield
                    var vtype = "textfield",
                        options = {
                            width: td.width(),
                            height: td.height()
                        };
                    var headerCells = that.gridcolumn.options.header;
                    if (headerCells) {
                        var tdoption = that._getDefinedColumn(headerCells, headname);
                        if (tdoption) {
                            //1.将列定义的所有属性全部拷贝给可编辑组件options
                            $.extend(true, options, tdoption);
                            options["name"] = "";
                            vtype = tdoption["datatype"] || "textfield";
                            //2.单独处理具有dataurl的组件（暂时规定下拉框和下拉树）
                            if (vtype == "comboxtreefield" || vtype == "comboxfield") {
                                var compdataurl = tdoption["valueset"];
                                if (compdataurl) {
                                    //url分为两种情况，一是请求数据地址，二是直接数据
                                    if (compdataurl.trim().indexOf("[") === 0) {
                                        compdataurl = eval("(" + compdataurl + ")");
                                    }
                                    $.extend(options, {
                                        dataurl: compdataurl
                                    });
                                }
                            }
                        }
                    }
                    //创建组件，获取创建完的组件对象
                    comp[vtype](options);
                    var compobject = comp.data(vtype);

                    //二、创建可编辑组件后，将td中的值赋值给创建的组件
                    //1.从该行对应的数据中，获取该td所对应的原始值（即未进行代码转换的原始值）
                    var id = tr.attr("id");
                    var data = that.gridpanel.getSelectedRowDataById(id);

                    var value = data && data[headname] ? data[headname] : "";
                    compobject.setValue(value);
                }
            },
            /**
             * @desc document相应数遍mousedown时，处理td可编辑组件重新赋值逻辑
             * @param {event} 事件对象
             */
            _editorChange: function(e) {
                var that = this;

                //1.获取组件的最新值
                var headname = that.preheadname || "";
                var newText = that.compobject.getText() || "";
                var newValue = that.compobject.getValue() || "";
                var oldValue = that.predata[headname] || "";

                //2.修改原始数据rowdata
                if ((!oldValue && !newValue) || newValue == oldValue) {
                    //值相同的时候不必修改rowdata原始数据
                } else {
                    //值不同需要修改rowdata原始数据对应的值
                    that.predata[headname] = newValue || "";
                    that.predata["eidtorstate"] = "editing";
                    //标识编辑图标
                    that.pretd.addClass("jazz-editgrid-state");

                    var predataid = "";
                    predataid = that.preid;
                }

                //3.根据可编辑类型不同，销毁已创建可编辑组件的时机也是不同
                var editortype = that.options.editortype;
                var target = $(e.target);
                if (editortype == "row") {
                    //当鼠标点到该行的时候不予销毁，只是赋值
                    //否则销毁可编辑组件，并赋值
                    var prerow = that.pretd.parent();
                    if (prerow.has(target).length > 0) {

                    } else {
                        //该行所有可编辑组件进行销毁
                        $(prerow).find("td.celleditable").each(function(i) {
                            var comp = $(this).find("div[vtype]");
                            var v = "";
                            if (comp[0]) {
                                var vtype = comp.attr("vtype");
                                var compobject = comp.data(vtype);
                                v = compobject.getText() || "";
                            }
                            $(this).empty();

                            //1.按照datatype、dataformat处理数据类型
                            var index = $(this).index() || -1;
                            var headname = that.thead.find("th").eq(index).attr("name");
                            var headerCells = that.gridcolumn.options.header;
                            var tdoption = that._getDefinedColumn(headerCells, headname);
                            var datatype = tdoption["datatype"];
                            var dataformat = tdoption["dataformat"];
                            if (datatype && v != undefined) {
                                v = jazz.util.parseDataByDataFormat({
                                    "cellvalue": v,
                                    "datatype": datatype,
                                    "dataformat": dataformat
                                });
                            }
                            $(this).removeClass("jazz-grid-cell-editing").text(v).attr("title", v);
                            //对于editortype==row/column，不添加jazz-grid-cell-edited样式
                        });
                        //4.重置pretd
                        that._resetPretdComponent();
                    }
                } else if (editortype == "column") {
                    //当鼠标点到该列的时候不予销毁，只是赋值
                    //否则销毁可编辑组件，并赋值
                    var index = that.pretd.index();
                    var td = target.closest("td");
                    if (td[0] && that.tbody.find(td).length > 0 && td.index() == index) {
                        //表明是同列
                    } else {
                        that.tbody.find("tr").each(function(i) {
                            var tdobj = $(this).children().eq(index);
                            var comp = tdobj.find("div[vtype]");
                            var v = "";
                            if (comp[0]) {
                                var vtype = comp.attr("vtype");
                                var compobject = comp.data(vtype);
                                v = compobject.getText() || "";
                            }
                            tdobj.empty();

                            //1.按照datatype、dataformat处理数据类型
                            var headname = that.thead.find("th").eq(index).attr("name");
                            var headerCells = that.gridcolumn.options.header;
                            var tdoption = that._getDefinedColumn(headerCells, headname);
                            var datatype = tdoption["datatype"];
                            var dataformat = tdoption["dataformat"];
                            if (datatype && v != undefined) {
                                v = jazz.util.parseDataByDataFormat({
                                    "cellvalue": v,
                                    "datatype": datatype,
                                    "dataformat": dataformat
                                });
                            }
                            tdobj.removeClass("jazz-grid-cell-editing").text(v).attr("title", v);
                        });
                        //4.重置pretd
                        that._resetPretdComponent();
                    }
                } else {
                    //1.按照datatype、dataformat处理数据类型
                    var datatype = that.pretdoption["datatype"];
                    var dataformat = that.pretdoption["dataformat"];
                    if (datatype && newText != undefined) {
                        newText = jazz.util.parseDataByDataFormat({
                            "cellvalue": newText,
                            "datatype": datatype,
                            "dataformat": dataformat
                        });
                    }
                    that.pretd.empty().removeClass("jazz-grid-cell-editing").text(newText).attr("title", newText);
                    that.tbody.find(".jazz-grid-cell-edited").removeClass("jazz-grid-cell-edited");
                    that.pretd.addClass("jazz-grid-cell-edited");
                    //4.重置pretd
                    that._resetPretdComponent();
                }
                //cell值改变时抛出cellvaluechange.summaryrow事件，修改summary 合计行数据
                if (this.options.isgroupsummary || this.options.ispagesummary) {
                    if (predataid) { //表明td中的值发生改变了
                        that.tbody.trigger("cellvaluechange.summaryrow", [predataid]);
                    }
                }
            },
            /**
             * @desc 处理显式显示可编辑组件的值改变情况
             * @param {event} 事件对象
             * @private
             */
            _showeditcellChange: function(event) {
                var that = this;
                //1.获取组件的最新值
                var headname = that.preheadname || "";
                var newText = that.compobject.getText() || "";
                var newValue = that.compobject.getValue() || "";
                var oldValue = that.predata[headname] || "";

                //2.修改原始数据rowdata
                if ((!oldValue && !newValue) || newValue == oldValue) {
                    //值相同的时候不必修改rowdata原始数据
                } else {
                    //值不同需要修改rowdata原始数据对应的值
                    //1.按照datatype、dataformat处理数据类型
                    var datatype = that.pretdoption["datatype"];
                    var dataformat = that.pretdoption["dataformat"];
                    if (datatype && newValue != undefined) {
                        newValue = jazz.util.parseDataByDataFormat({
                            "cellvalue": newValue,
                            "datatype": datatype,
                            "dataformat": dataformat
                        });
                    }
                    that.predata[headname] = newValue || "";
                    that.predata["eidtorstate"] = "editing";
                    //标识编辑图标
                    //that.pretd.addClass("jazz-editgrid-state");
                }
                that.pretd.attr("title", newText);
                //4.重置pretd
                that._resetPretdComponent();
            },
            /**
             * @desc 根据预定义列名name获取在jazz.gridcolumn定义的属性值
             * @param {cells} 表格头列定义属性值集合gridcolumn.options.heade
             * @param {name} 列名称
             * @private
             */
            _getDefinedColumn: function(cells, name) {
                var $this = this;
                var opt = null;
                if ($.isArray(cells)) {
                    for (var i = 0, len = cells.length; i < len; i++) {
                        var cell = cells[i];
                        if ($.isArray(cell)) {
                            opt = $this._getDefinedColumn(cell, name);
                        } else {
                            if (name == cell["name"]) {
                                opt = cell;
                                break;
                            }
                        }
                    }
                }
                return opt;
            },
            /**
             * @desc 表格点击事件处理，并处理与gridcard卡片交互
             * @param {event} 点击事件event对象
             * @param {targetrow} 表格行或卡片所对应的数据
             * @param {flag} 表明点击是单击还是双击事件,true:双击，false:单击
             * @private
             * @example this._onRowClick();
             */

            //只是为了通过this._onRowClick();调用，并没有被覆写，先注掉

            /*_onRowClick: function(event, targetRow, flag) {
                var row = $(targetRow);
                var isSelected = row.hasClass('jazz-row-selected');
                if(this._isMultipleSelection()){
                    if(flag){//双击
                        this._selectRow(row, true, event, flag);
                    }else{//单击
                        //多选，单击效果与checkbox框一致
                        if(isSelected){
                            //取消当前选择行、卡片
                            this._unselectRow(row, true, event);
                        }else{
                            //选中当前选择行、卡片
                            this._selectRow(row, true, event, flag);
                        }
                    }
                }else {
                    if(flag){//双击
                        this._selectRow(row, true, event, flag);
                    }else{//单击
                        //默认处理都是单选，单击效果与radio一致
                        if(isSelected){
                            this._selectRow(row, true, event, flag);
                        }else{
                            //取消其他已选中的行、卡片；然后选中当前行、卡片
                            this._unselectAllRows();
                            this._selectRow(row, true, event, flag);
                        }
                    }
                }
            },*/

            /**
             * @desc 据行坐标或者列坐标使单元格变为可编辑表格
             * @param {rowIndex}行坐标
             * @param {colIndex}列坐标
             * @param {editState}是否可编辑状态
             */
            setEditorCell: function(rowIndex, colIndex, editState) {
                //其实都是根据行，再找列
                /*var trObj = 
                if(){
                    
                }else{
                    
                }*/

            },
            /**
             * @desc 创建整个可编辑表格中的可编辑组件，
             */
            createEditorCell: function() {
                var that = this;
                $.each(this._trObject(), function(i, obj) {
                    var tr = $(this);
                    tr.find("td.celleditable").each(function(i) {
                        var td = $(this);
                        that._createCellEditorComponent(null, tr, td);
                    });
                });
            },
            /**
             * @desc 新增可编辑行，该方法由gridpanel调用
             * @param {data} 新增编辑行数据
             * @param {insertPosition} 新增编辑行行坐标
             */
            addEidtorRow: function(data, insertPosition) {
                var rowHtml = "";
                var p = parseInt(insertPosition);
                var lineIndex = this._trNumber();
                if (p === 0 || insertPosition == "first") { //首行
                    rowHtml = this._insertRowHtml(data, 0, 0);
                    $(rowHtml).insertBefore(this.tbody.children().first());
                    this._updateIndex();
                } else if (p > 0 && p < lineIndex) { //中间行
                    rowHtml = this._insertRowHtml(data, 0, 0);
                    $(rowHtml).insertBefore(this.tbody.children().eq(p));
                    this._updateIndex();
                } else { //尾行
                    rowHtml = this._insertRowHtml(data, 0, lineIndex);
                    $(rowHtml).appendTo(this.tbody);
                }
            }
        };

    })(jQuery);

    (function($) {
        /**
         * @desc 扩展gridtable分组功能
         */
        jazz.grid.groupgridtable = {
            /**
             * @desc 为表格绑定分组功能相应处理事件
             * @private
             */
            _bindGroupGridTableEvent: function() {
                var that = this;
                this.tbody.on("click.tr", "tr.jazz-grid-group-row", null, function(e) {
                    //是否分组合计还是当前页合计
                    var isgroupsummary = that.options.isgroupsummary;
                    var ispagesummary = that.options.ispagesummary;
                    if ($(this).hasClass('jazz-grid-group-expand')) { //分组行是展开状态
                        $(this).removeClass('jazz-grid-group-expand').addClass('jazz-grid-group-collapse');
                        if (isgroupsummary) {
                            $(this).nextUntil(".jazz-grid-groupsummary-row").show();
                        } else {
                            if (ispagesummary) {
                                //如果当前分组行是最后一个分组行行则
                                if ($(this)[0] == that.tbody.find("tr.jazz-grid-group-row").last()[0]) {
                                    $(this).nextUntil(".jazz-grid-pagesummary-row").show();
                                } else {
                                    $(this).nextUntil(".jazz-grid-group-row").show();
                                }
                            } else {
                                $(this).nextUntil(".jazz-grid-group-row").show();
                            }
                        }
                    } else if ($(this).hasClass('jazz-grid-group-collapse')) { //分组行是收起状态
                        $(this).removeClass('jazz-grid-group-collapse').addClass('jazz-grid-group-expand');
                        if (isgroupsummary) {
                            $(this).nextUntil(".jazz-grid-groupsummary-row").hide();
                        } else {
                            if (ispagesummary) {
                                //如果当前分组行是最后一个分组行行则
                                if ($(this)[0] == that.tbody.find("tr.jazz-grid-group-row").last()[0]) {
                                    $(this).nextUntil(".jazz-grid-pagesummary-row").hide();
                                } else {
                                    $(this).nextUntil(".jazz-grid-group-row").hide();
                                }
                            } else {
                                $(this).nextUntil(".jazz-grid-group-row").hide();
                            }
                        }
                    }
                });
            },
            /**
             * @desc 绑定表格合计行数据变化重新计算合计值逻辑监听事件
             */
            _bindSummaryGridTableEvent: function() {
                //表格进行合计统计时，凡涉及到数据行数据变化的操作，
                //均抛出cellvaluechange event事件，然后this.tbody接收，以此重新计算合计行
                //注意的地方：
                //1.现对引起数据变化的操作都是进行统一处理，即重新对所有分组或当前页数据进行合计计算
                //2.如上统一处理，在只发生单个cell 值改变情况下，都要重新计算所有合计，效率不好
                //3.涉及到数据变化的操作有：行增加，删除，修改；可编辑表格的数据的变化
                var that = this;
                this.tbody.on("cellvaluechange.summaryrow", function(event) {
                    //1.若是有合计行需要计算合计行的数据
                    that._computeGroupAndPageSummartResult();
                });
            },
            /**
             * @desc 覆写jazz.gridtable的_renderData方法，加载分组gridtable数据
             * @param {rows} 待渲染的表格数据
             * @private
             */
            _renderData: function(rows) {
                if (!rows) {
                    return;
                }
                var groupfieldId = this.options.groupfield;
                var groupfieldTitle = this.options.grouptitlefield;
                //是否分组合计还是当前页合计
                var isgroupsummary = this.options.isgroupsummary;
                var ispagesummary = this.options.ispagesummary;
                //1.此时数据都已经按照分组字段排好序了（后台对数据进行处理，前台只是展示处理）
                //以后也可以将排序暴露出去
                rows.sort(function(a, b) {
                    return parseInt(a[groupfieldId]) - parseInt(b[groupfieldId]);
                });
                //2.生成分组tr dom结构html
                var lineIndex = 0;
                var rowHtml = [];			
                this._trObject().remove();
                lineIndex = this._trNumber();
                var groupId, grouptitle;
                for (var i = 0; i < rows.length; i++) {
                    if (i == 0) {
                        groupId = rows[i][groupfieldId];
                        grouptitle = rows[i][groupfieldTitle] || "";
                        rowHtml.push(this._getGroupRowHtml(groupId, grouptitle));
                    }
                    if (groupId == rows[i][groupfieldId]) {

                    } else {
                        //拼接分组合计html dom结构
                        if (isgroupsummary) {
                            rowHtml.push(this._getSummaryRowHtml("groupsummary"));
                        }
                        groupId = rows[i][groupfieldId];
                        grouptitle = rows[i][groupfieldTitle] || "";
                        rowHtml.push(this._getGroupRowHtml(groupId, grouptitle));
                    }
                    rowHtml.push(this._insertRowHtml(rows[i], i, lineIndex));
                }
                //当前页最后一个分组拼接分组合计html dom结构
                if (isgroupsummary) {
                    rowHtml.push(this._getSummaryRowHtml("groupsummary"));
                }
                //拼接当前页合计html dom结构
                if (ispagesummary) {
                    rowHtml.push(this._getSummaryRowHtml("pagesummary"));
                }
                this.tbody.append(rowHtml.join(""));

                //3.初始化时展开还是收起分组数据行
                var isexpand = this.options.isgroupexpand;
                if (!isexpand) {
                    this.tbody.children("tr.jazz-grid-group-row").each(function() {
                        if (isgroupsummary) {
                            $(this).nextUntil(".jazz-grid-groupsummary-row").hide();
                        } else {
                            if (ispagesummary) {
                                //如果当前分组行是最后一个分组行行则
                                if ($(this)[0] == that.tbody.find("tr.jazz-grid-group-row").last()[0]) {
                                    $(this).nextUntil(".jazz-grid-pagesummary-row").hide();
                                } else {
                                    $(this).nextUntil(".jazz-grid-group-row").hide();
                                }
                            } else {
                                $(this).nextUntil(".jazz-grid-group-row").hide();
                            }
                        }
                    });;
                }
                //4.若是有合计行需要计算合计行的数据
                this._computeGroupAndPageSummartResult(rows);
                /*if(isgroupsummary){
                var that = this;
                this.tbody.find("tr.jazz-grid-group-row").each(function(i){
                    var siblings = $(this).nextUntil(".jazz-grid-group-row");
                    //获取组数据groupdata
                    var groupdata = [],data;
                    $.each( siblings, function(j, obj){
                      var id = $(obj).attr("id");
                      if(id){
                        data = that.gridpanel.getSelectedRowDataById(id);
                        groupdata.push(data);
                      }
                    });
                    //根据组数据，计算组合计---groupdata无值的时候，交由_computeSummaryResult处理
                    var summaryrow = siblings.filter("tr.jazz-grid-groupsummary-row");
                    that._computeSummaryResult(groupdata,summaryrow);
                });
            }
            if(ispagesummary){
                var summaryrow = this.tbody.find("tr.jazz-grid-pagesummary-row");
                this._computeSummaryResult(rows,summaryrow);
            }*/
                //4.渲染数据后，执行rowrender(rowdata,rowElement),提供操作tr回调
                var trObjs = this.tbody.children(".jazz-grid-row");
                this._event("rowrender", null, {
                    "data": rows,
                    "rowEl": trObjs
                }); //this.tbody.find("tr")
            },
            /**
             * @desc 根据分组字段和分组标题生成分组行html dom
             * @param {groupId} 分组字段标识
             * @param {grouptitle} 分组行标题
             * @private
             */
            _getGroupRowHtml: function(groupId, grouptitle) {
                var groupId = groupId || "";
                var isexpand = this.options.isgroupexpand;
                var expandclass = isexpand ? "jazz-grid-group-collapse" : "jazz-grid-group-expand";
                var rowHtml = '<tr class="jazz-grid-group-row ' + expandclass + '" groupid="' + groupId + '" >';
                rowHtml += '<th style="height:20px;"></th>';
                var colspan_num = 0;
                if (this._isSelectHelper() && this._isSelectType()) {
                    colspan_num++;
                }
                if (this.options.lineno) {
                    colspan_num++;
                }
                colspan_num += this.cols.length;
                rowHtml += '<td class="jazz-grid-cell" colspan="' + colspan_num + '"><div class="jazz-grid-group-title">' + grouptitle + '</div></td></tr>';
                return rowHtml;
            },
            /**
             * @desc 若是有合计行需要计算分组或者当前页数据合计值
             * @param {rows} 待合计数据行数据
             * @private
             */
            _computeGroupAndPageSummartResult: function(rows) {
                var that = this;
                //是否分组合计还是当前页合计
                var isgroupsummary = this.options.isgroupsummary;
                var ispagesummary = this.options.ispagesummary;
                if (isgroupsummary) {
                    this.tbody.find("tr.jazz-grid-group-row").each(function(i) {
                        var siblings = $(this).nextUntil(".jazz-grid-group-row");
                        //获取组数据groupdata
                        var groupdata = [],
                            data;
                        $.each(siblings, function(j, obj) {
                            var id = $(obj).attr("id");
                            if (id) {
                                data = that.gridpanel.getSelectedRowDataById(id);
                                groupdata.push(data);
                            }
                        });
                        //根据组数据，计算组合计---groupdata无值的时候，交由_computeSummaryResult处理
                        var summaryrow = siblings.filter("tr.jazz-grid-groupsummary-row");
                        that._computeSummaryResult(groupdata, summaryrow);
                    });
                }
                if (ispagesummary) {
                    var summaryrow = this.tbody.find("tr.jazz-grid-pagesummary-row");
                    if (!rows) {
                        rows = this.gridpanel.getAllData();
                    }
                    this._computeSummaryResult(rows, summaryrow);
                }
            },
            /**
             * @desc 计算分组或者当前页数据合计值，提供了count/sum/max/min/average/自定义合计函数方式。
             *       并且，提供summaryrender 设置合计计算结果展示格式
             * @param {rows} 待合计数据行数据
             * @param {summaryrow} 待合计的分组行或者表格总合计jquery dom对象
             * @private
             */
            _computeSummaryResult: function(rows, summaryrow) {

                var columnname = "",
                    issummary = "",
                    result = 0,
                    value;
                for (var j = 0, len = this.cols.length; j < len; j++) {
                    issummary = this.cols[j]['issummary'];
                    if (issummary) {
                        columnname = this.cols[j]['columnname'];
                        summarytype = this.cols[j]['summarytype'];
                        summaryrender = this.cols[j]['summaryrender'];

                        var result = this._getSummaryTypeResult(columnname, rows, summarytype);
                        result = this._getSummaryRenderResult(result, rows, summaryrender);
                        var index = this.thead.find("th[name='" + columnname + "']").index();
                        summaryrow.children().eq(index).text(result);
                    }
                }
            },
            /**
             * @desc 根据合计类型，计算合计值
             * @param {columnname} 数据字段名
             * @param {rows} 表格渲染的数据集合
             * @param {type} 合计计算类型
             */
            _getSummaryTypeResult: function(columnname, rows, type) {
                if (type) {
                    var result;
                    if (type.indexOf("(") != -1) {
                        result = this._customopration(type, rows);
                        return result;
                    }
                    var temp = [],
                        value;
                    for (var i = 0; i < rows.length; i++) {
                        value = rows[i][columnname];
                        temp.push(value);
                    }
                    switch (type) {
                        case 'count':
                            return rows.length;
                        case 'min':
                            var x = Math.min.apply(null, temp)
                            return Math.min.apply(null, temp);
                        case 'max':
                            return Math.max.apply(null, temp);
                        case 'sum':
                            return eval(temp.join('+'));
                        case 'average':
                            var count = temp.length;
                            var sum = eval(temp.join('+'));
                            if (count > 0) {
                                return Math.round(sum / count);
                            } else {
                                return 0;
                            }
                        default:
                            return '';
                    }
                } else {
                    return '';
                }
            },
            /**
             * @desc 对获取的合计数据，进行自定义回调函数格式化
             * @param {result} 合计结果
             * @param {rows} 行数据
             * @param {format} 自定义格式函数
             */
            _getSummaryRenderResult: function(result, rows, format) {
                if (format) {
                    if (format.indexOf("(") != -1) {
                        result = this._customopration(format, result, rows);
                        return result;
                    }
                } else {
                    return result;
                }
            },

            /*_computeSummaryResult: function(rows,summaryrow){
            //暂时简单求和处理，之后再做和EXT那样的合计函数
            var columnname="",issummary="",result=0,value;
            for (var j = 0, len = this.cols.length; j < len; j++) {
                columnname = this.cols[j]['columnname'];
                issummary = this.cols[j]['issummary'];
                if(issummary){
                    result=0,value=null;
                    for (var i = 0; i < rows.length; i++) {
                        value = rows[i][columnname];
                        result = result + parseInt(value);
                    }
                    var index = this.thead.find("th[name='"+columnname+"']").index();
                    summaryrow.children().eq(index).text(result);
                }
            }
        },*/


            /**
             * @desc 拼接合计行html dom结构
             * @param {summary} 值为"groupsummary"或"pagesummary"
             * 表明是分组合计还是当前页全部数据合计
             */
            _getSummaryRowHtml: function(summary) {
                var rowHtml = '<tr class="jazz-grid-' + summary + '-row">';
                rowHtml += '<th style="height:20px;"></th>';

                var isselect = this._isSelectHelper() && this._isSelectType();
                var islineno = this.options.lineno;
                var hj = summary == "groupsummary" ? "合计" : "总合计";
                if (isselect && islineno) {
                    rowHtml += '<td class="jazz-grid-cell jazz-grid-cell-box" colspan="2">' + hj + '</td>';
                    rowHtml += '<td class="jazz-grid-cell jazz-grid-cell-no" style="display:none;"></td>';
                } else {
                    if (isselect) {
                        rowHtml += '<td class="jazz-grid-cell jazz-grid-cell-box" colspan="2">' + hj + '</td>';
                    }
                    if (islineno) {
                        rowHtml += '<td class="jazz-grid-cell jazz-grid-cell-no">' + hj + '</td>';
                    }
                }
                var textalign;
                for (var j = 0, len = this.cols.length; j < len; j++) {
                    textalign = this.cols[j]['textalign'] || "";
                    if (textalign) {
                        textalign = "text-align-" + textalign;
                    }
                    rowHtml += '<td class="jazz-grid-cell ' + textalign + '">&nbsp;</td>';
                }
                return rowHtml;
            },
            /**
             * @desc 覆写jazz.gridtable的addRow方法，添加行记录要考虑分组情况
             * @param {data} 新增行数据
             */
            addRow: function(data) {

                if (!data) {
                    return;
                }

                var rowHtml = "";
                var lineIndex = this._trNumber();
                for (var i = 0; i < data.length; i++) {
                    //循环追加tr行数据html
                    rowHtml += this._insertRowHtml(data[i], i, lineIndex);
                }
                var trobj = null;
                if (rowHtml) {
                    //this.tbody.append(rowHtml);
                    //trobj = $(rowHtml).appendTo(this.tbody);
                    //这个渲染操作暂时如下处理（将新增行添加到首行），待优化
                    trobj = $(rowHtml).prependTo(this.tbody);
                }
                //渲染数据后，执行rowrender(rowdata,rowElement),提供操作tr回调
                this._event("rowrender", null, {
                    "data": data,
                    "rowEl": trobj
                });


                //进行分组与合计处理
                //处理原则：
                //1.通过groupfield进行匹配,将新增数据行添加到相应的组最后一行
                //2.若是没有这个组则新建一个组将之归入组中，测试要注意组为null ""空字符串 情况
                var isgroupsummary = this.options.isgroupsummary;
                var groupfieldId = this.options.groupfield;
                var groupfieldTitle = this.options.grouptitlefield;
                var id = "",
                    groupId = "",
                    trrow, targetgroup, grouprows, groupLastRow;
                for (var i = 0; i < data.length; i++) {
                    id = data[i]["rowuuid"];
                    groupId = data[i][groupfieldId];
                    grouptitle = data[i][groupfieldTitle];

                    trrow = this.tbody.find("#" + id);
                    targetgroup = this.tbody.find("tr[groupid='" + groupId + "']");
                    if (targetgroup[0]) {
                        grouprows = targetgroup.nextUntil("tr.jazz-grid-group-row");
                        groupLastRow = grouprows.filter("tr.jazz-grid-row:last");
                        if(groupLastRow.attr("id") !== trrow.attr("id")){
                        	groupLastRow.after(trrow);
                        }
                    } else {
                        //重新在tbody中新建一个组
                        var groupTrHtml = "";
                        groupTrHtml += this._getGroupRowHtml(groupId, grouptitle);
                        if (isgroupsummary) {
                            groupTrHtml += this._getSummaryRowHtml("groupsummary");
                        }
                        var groupTrs = $(groupTrHtml).prependTo(this.tbody);
                        groupTrs.filter("tr.jazz-grid-group-row").after(trrow);
                    }
                }
                //cell值改变时抛出cellvaluechange.summaryrow事件，修改summary 合计行数据
                if (this.options.isgroupsummary || this.options.ispagesummary) {
                    this.tbody.trigger("cellvaluechange.summaryrow");
                }
            }

        };
    })(jQuery);

    (function($) {
        /**
         * @desc 扩展gridtable分组功能
         */
        jazz.grid.summarygridtable = {

            /*_bindSummaryGridTableEvent:function(){
            //如何响应单元格值发生变化时，合计行对应变化
            //可以让可编辑单元格抛出editorvaluechange event事件，然后
            //由summarygridtable对象接收，以此重新计算合计行
            var that = this;
            this.tbody.off("cellvaluechange.summaryrow").on("cellvaluechange.summaryrow", function(e) {
                
                var value = e.realvalue;
                
                alert(value);
            });
        },*/
            /**
             * @desc 覆写jazz.gridtable的_renderData方法，加载合计gridtable数据
             * @param {rows} 待渲染的表格数据
             * @private
             */
            _renderData: function(rows) {
                if (!rows) {
                    return;
                }
                var lineIndex = 0;
                var rowHtml = [];
                this._trObject().remove();
                lineIndex = this._trNumber();
                for (var i = 0; i < rows.length; i++) {
                    rowHtml.push(this._insertRowHtml(rows[i], i, lineIndex));
                }
                //1.合计行在表格的最后一行，并且只是对当前页数据进行合计
                rowHtml.push(this._getSummaryRowHtml("pagesummary"));
                this.tbody.append(rowHtml.join(""));
                //2.初始化时计算合计行数据
                var summaryrow = this.tbody.find("tr.jazz-grid-pagesummary-row");
                this._computeSummaryResult(rows, summaryrow);
                //3.渲染数据后，执行rowrender(rowdata,rowElement),提供操作tr回调
                var trObjs = this.tbody.children(".jazz-grid-row");
                this._event("rowrender", null, {
                    "data": rows,
                    "rowEl": trObjs
                }); //this.tbody.find("tr")
            },

            /**
             * @desc 计算分组或者当前页数据合计值，提供了count/sum/max/min/average/自定义合计函数方式。
             *       并且，提供summaryrender 设置合计计算结果展示格式
             * @param {rows} 待合计数据行数据
             * @param {summaryrow} 待合计的分组行或者表格总合计jquery dom对象
             */
            _computeSummaryResult: function(rows, summaryrow) {

                var columnname = "",
                    issummary = "",
                    result = 0,
                    value;
                for (var j = 0, len = this.cols.length; j < len; j++) {
                    issummary = this.cols[j]['issummary'];
                    if (issummary) {
                        columnname = this.cols[j]['columnname'];
                        summarytype = this.cols[j]['summarytype'];
                        summaryrender = this.cols[j]['summaryrender'];

                        var result = this._getSummaryTypeResult(columnname, rows, summarytype);
                        result = this._getSummaryRenderResult(result, rows, summaryrender);
                        var index = this.thead.find("th[name='" + columnname + "']").index();
                        summaryrow.children().eq(index).text(result);
                    }
                }
            },
            /**
             * @desc 根据合计类型，计算合计值
             * @param {columnname} 数据字段名
             * @param {rows} 表格渲染的数据集合
             * @param {type} 合计计算类型
             */
            _getSummaryTypeResult: function(columnname, rows, type) {
                if (type) {
                    var result;
                    if (type.indexOf("(") != -1) {
                        result = this._customopration(type, rows);
                        return result;
                    }
                    var temp = [],
                        value;
                    for (var i = 0; i < rows.length; i++) {
                        value = rows[i][columnname];
                        temp.push(value);
                    }
                    switch (type) {
                        case 'count':
                            return rows.length;
                        case 'min':
                            return Math.min.apply(null, temp);
                        case 'max':
                            return Math.max.apply(null, temp);
                        case 'sum':
                            return eval(temp.join('+'));
                        case 'average':
                            var count = temp.length;
                            var sum = eval(temp.join('+'));
                            if (count > 0) {
                                return Math.round(sum / count);
                            } else {
                                return 0;
                            }
                        default:
                            return '';
                    }
                } else {
                    return '';
                }
            },
            /**
             * @desc 对获取的合计数据，进行自定义回调函数格式化
             * @param {result} 合计结果
             * @param {rows} 行数据
             * @param {format} 自定义格式函数
             */
            _getSummaryRenderResult: function(result, rows, format) {
                if (format) {
                    if (format.indexOf("(") != -1) {
                        result = this._customopration(format, result, rows);
                        return result;
                    }
                } else {
                    return result;
                }
            },
            /*_computeSummaryResult: function(rows,summaryrow){
            //暂时简单求和处理，之后再做和EXT那样的合计函数
            var columnname="",issummary="",result=0,value;
            for (var j = 0, len = this.cols.length; j < len; j++) {
                columnname = this.cols[j]['columnname'];
                issummary = this.cols[j]['issummary'];
                if(issummary){
                    result=0,value=null;
                    for (var i = 0; i < rows.length; i++) {
                        value = rows[i][columnname];
                        result = result + parseInt(value);
                    }
                    var index = this.thead.find("th[name='"+columnname+"']").index();
                    summaryrow.children().eq(index).text(result);
                }
            }
        },*/
            /**
             * @desc 拼接合计行html dom结构
             * @param {summary} 值为"groupsummary"或"pagesummary"
             * 表明是分组合计还是当前页全部数据合计
             */
            _getSummaryRowHtml: function(summary) {
                var rowHtml = '<tr class="jazz-grid-' + summary + '-row">';
                rowHtml += '<th style="height:20px;"></th>';

                var isselect = this._isSelectHelper() && this._isSelectType();
                var islineno = this.options.lineno;
                var hj = summary == "groupsummary" ? "合计" : "总合计";
                if (isselect && islineno) {
                    rowHtml += '<td class="jazz-grid-cell jazz-grid-cell-box" colspan="2">' + hj + '</td>';
                    rowHtml += '<td class="jazz-grid-cell jazz-grid-cell-no" style="display:none;"></td>';
                } else {
                    if (isselect) {
                        rowHtml += '<td class="jazz-grid-cell jazz-grid-cell-box" colspan="2">' + hj + '</td>';
                    }
                    if (islineno) {
                        rowHtml += '<td class="jazz-grid-cell jazz-grid-cell-no">' + hj + '</td>';
                    }
                }
                var textalign;
                for (var j = 0, len = this.cols.length; j < len; j++) {
                    textalign = this.cols[j]['textalign'] || "";
                    if (textalign) {
                        textalign = "text-align-" + textalign;
                    }
                    rowHtml += '<td class="jazz-grid-cell ' + textalign + '">&nbsp;</td>';
                }
                return rowHtml;
            },
            /**
             * @desc 覆写jazz.gridtable的addRow方法，添加行记录要考虑合计情况
             * @param {data} 新增行数据
             */
            addRow: function(data) {

                if (!data) {
                    return;
                }

                var rowHtml = "";
                var lineIndex = this._trNumber();
                for (var i = 0; i < data.length; i++) {
                    //循环追加tr行数据html
                    rowHtml += this._insertRowHtml(data[i], i, lineIndex);
                }
                var trobj = null;
                if (rowHtml) {
                    //this.tbody.append(rowHtml);
                    //trobj = $(rowHtml).appendTo(this.tbody);
                    //这个渲染操作暂时如下处理（将新增行添加到首行），待优化
                    trobj = $(rowHtml).prependTo(this.tbody);
                }
                //渲染数据后，执行rowrender(rowdata,rowElement),提供操作tr回调
                this._event("rowrender", null, {
                    "data": data,
                    "rowEl": trobj
                });


                //进行分组与合计处理
                //处理原则：
                //1.通过groupfield进行匹配,将新增数据行添加到相应的组最后一行
                //2.若是没有这个组则新建一个组将之归入组中，测试要注意组为null ""空字符串 情况
                var isgroupsummary = this.options.isgroupsummary;
                var groupfieldId = this.options.groupfield;
                var groupfieldTitle = this.options.grouptitlefield;
                var id = "",
                    groupId = "",
                    trrow, targetgroup, grouprows, groupLastRow;
                for (var i = 0; i < data.length; i++) {
                    id = data[i]["rowuuid"];
                    groupId = data[i][groupfieldId];
                    grouptitle = data[i][groupfieldTitle];

                    trrow = this.tbody.find("#" + id);
                    targetgroup = this.tbody.find("tr[groupid='" + groupId + "']");
                    if (targetgroup[0]) {
                        grouprows = targetgroup.nextUntil("tr.jazz-grid-group-row");
                        groupLastRow = grouprows.filter("tr.jazz-grid-row:last");
                        groupLastRow.after(trrow);
                    } else {
                        //重新在tbody中新建一个组
                        var groupTrHtml = "";
                        groupTrHtml += this._getGroupRowHtml(groupId, grouptitle);
                        if (isgroupsummary) {
                            groupTrHtml += this._getSummaryRowHtml("groupsummary");
                        }
                        var groupTrs = $(groupTrHtml).prependTo(this.tbody);
                        groupTrs.filter("tr.jazz-grid-group-row").after(trrow);
                    }
                }
                //cell值改变时抛出cellvaluechange.summaryrow事件，修改summary 合计行数据
                if (this.options.isgroupsummary || this.options.ispagesummary) {
                    this.tbody.trigger("cellvaluechange.summaryrow");
                }
            }
        };
    })(jQuery);

});
(function ($, factory) {

    if (jazz.config.isUseRequireJS === true) {
        define(['jquery',
            'jazz.BoxComponent' ], factory);
    } else {
        factory($);
    }
})(jQuery, function ($) {
    /**
     * @version 0.5
     * @name jazz.loading
     * @description 加载动画组件
     * @example $('div_id').loading();
     * @example jazz.loading();
     */
    $.widget("jazz.loading", $.jazz.boxComponent, {

        options: /** @lends jazz.loading# */  {

            /**
             *@type String
             *@desc 不显示任何信息， 默认false, 显示加载图片和文字说明， true，不显示任何内容
             *@default false
             *@Deprecated 仅兼容旧版本接口，不再维护
             */
            blank: false,

            /**
             * @desc 图片的路径
             * @default true 使用默认加载图片，用户可自定义图片路径<br>
             *     如果为 ""\undefined\null\false 则不显示加载图片
             */
            imgsrc: true,

            /**
             *@type String
             *@desc 加载显示文字说明
             *@default ''
             */
            text: '正在加载...'
        },

        /**
         * @desc 创建组件
         * @private
         */
        _create: function () {
            this.ele = $("<div class='jazz-loading-wrap'>"
                + "<div class='jazz-loading-overlay'></div>"
                + "<div class='jazz-loading-img'><div class='jazz-loading-text'>"
                + this.options.text + "</div></div></div>")
                .appendTo(this.element);
            //imgsrc为 "",undefined, null, false
            if(!this.options.imgsrc){
                this.ele.children(".jazz-loading-img").css("background", "none");
            }
            //用户自定义了图片路径
            if(this.options.imgsrc !== true && this.options.imgsrc){
                this.ele.children(".jazz-loading-img")
                    .css({
                        'background-image': 'url(' + this.options.imgsrc + ')'
                    });
            }
        },

        /**
         * @desc 初始化组件
         * @private
         */
        _init: function () {
            this.changePosition = false;
            this.oldPosition = "";
            if (this.options.blank === true) {
                this.ele.find(".jazz-loading-img").hide();
            } else {
                this.ele.find(".jazz-loading-img").show();
            }
            this.show();
        },

        /**
         * @desc 检查this.element父元素的position属性
         * @private
         */
        _checkPosition: function () {
            var parent = this.element.parent(),
                position = parent.css("position");
            this.oldPosition = this.element.css("position");
            if (this.element[0].tagName == "BODY"/* || parent.get(0) == $("body").get(0)*/) {
                this.ele.css({
                    position: 'fixed'
                });

                if (jazz.isIE(6)) {
                    this.ele.css({
                        'height': $(window).height(),
                        'width': $(window).width()
                    });
                }
                this.ele.addClass("jazz-ie6-position-fixed");
            } else if (position == 'inherit' || position == 'static' || position == '') {
                if (!this.element.hasClass("jazz-window-modal")) {
                    this.element.css({
                        'position': 'relative'
                    });
                }
                this.ele.children(".jazz-loading-overlay").css("height", "100%");

                this.changePosition = true;
            }
        },

        /**
         * @desc 还原this.element元素的position属性
         * @private
         */
        _reverPostion: function () {
            if (this.changePosition) {
                this.element.css("position", this.oldPosition);
                this.changePosition = false;
            }
        },

        /**
         * @desc 隐藏loading动画
         * @example this.hide();
         */
        hide: function () {
            this._reverPostion();
            this.ele.hide();
        },

        /**
         * @desc 显示loading动画
         * @example this.hide();
         */
        show: function () {
            this._checkPosition();
            this.ele.show();
        },

        /**
         * @desc 组件销毁方法
         */
        destroy: function () {
            this.element.children().remove();
            this.element.remove();
        }
    });
});
(function( $, factory ){

	if ( jazz.config.isUseRequireJS === true ) {
		define( ['jquery', 
		         'jazz.Toolbar', 
		         'jazz.Loading'], factory );
	} else {
		factory($);
	}	 
})(jQuery, function($){

    /**
     * @description 图片查看器，支持缩放、拖动、旋转操作
     * <br>缩放支持鼠标双击和鼠标滚轴缩放两种方式
     * <br>旋转操作支持IE9+、chrome、Firefox浏览器
     * @version 1.0
     * @name jazz.ImageView
     * @constructor
     * @extends jazz.container
     */
    $.widget('jazz.imageviewer', $.jazz.container, {
        options: /** @lends jazz.ImageView# */ {

            /**
             *@type String
             *@desc 图片地址
             *@default null
             */
            imagesrc: null,

            /**
             *@type Number
             *@desc 图片宽度
             *@default 400
             */
            width: 400,

            /**
             *@type Number
             *@desc 图片高度
             *@default 300
             */
            height: 300,

            /**
             * @type Array
             * @desc 用户自定义按钮
             * @default null
             */
            buttons: null,

            /**
             *@type Number
             *@desc 图片显示的最小宽度
             *@default 120
             */
            min_width: 120,

            /**
             *@type Number
             *@desc 图片显示的最小高度
             *@default 90
             */
            min_height: 90,

            /**
             *@type Boolean
             *@desc 是否支持拖拽事件
             *@default true
             */
            iscandrag: true, //rename

            /**
             *@type Boolean
             *@desc 是否支持旋转
             *@default true
             */
            isrotate: false,

            /**
             *@type Boolean
             *@desc 是否显示工具条
             *todo
             *@default true
             */
            isshowtoolbar: true,

            /**
             *@type Boolean
             *@desc 是否显示右键菜单
             *@default false
             */
            isshowcontextmenu: false,

            /**
             *@type Boolean
             *@desc 是否显示水印
             *@default true
             */
            isshowwatermark: true,

            /**
             *@type Number
             *@desc 图片被放大的最大倍率
             *@default 1.5
             */
            maxzoom: 1,

            /**
             * @type String
             * @desc 水印图片的地址
             * @default null
             */
            watermarkurl: null

        },

        /** @lends jazz.ImageView */

        /**
         * @desc 创建组件
         * @private
         */
        '_create': function() {
            //确保传入的宽高是数字
            this._super();
            this.options.width = parseInt(this.options.width);
            this.options.height = parseInt(this.options.height);
            //创建工具条容器
            this.toolbarWrap = $("<div class='jazz-imageview-toolbar'><div name='jazz-imageview-toolbar-" + (jazz.getRandom()) + "'></div></div>")
                .appendTo(this.element);

            if (!this.element.attr('id')) {
                this.element.uniqueId();
            }

            if (!this.element.attr('name')) {
                this.element.attr('name', 'jazz-imageviewer-' + jazz.getRandom());
            }

            this._setupContainer();
            this._initToolbar();
            this._initWatermark();
            this.loadImage(this.options.imagesrc);
            this._setupCSS();
            this._initContextMenu();
        },

        /**
         * @desc 初始化
         * @private
         */
        '_init': function() {
            this._bindEvent();
        },

        /**
         * @desc 初始化工具条
         * @private
         */
        '_initToolbar': function() {
            var $this = this,
                btns;
            if (!$this.options.isshowtoolbar) {
                return;
            }
            //添加放大、缩小按钮
            btns = [{
                'vtype': 'button',
                'align': 'right',
                'iconclass': 'jazz-btn-zoomin',
                'name': 'jazz-imageview-button-zoomin',
                'defaultview': 0,
                'click': function() {
                    $this.zoom('in');
                }
            }, {
                'vtype': 'button',
                'align': 'right',
                'iconclass': 'jazz-btn-zoomout',
                'name': 'jazz-imageview-button-zoomout',
                'defaultview': 0,
                'click': function() {
                    $this.zoom('out');
                }
            }];
            //添加左转、右转按钮
            if ($this.options.isrotate) {
                btns = btns.concat([{
                    'vtype': 'button',
                    'align': 'right',
                    'text': '左转',
                    'iconclass': 'jazz-imageviewer-rotate-left',
                    'defaultview': 1,
                    'click': function() {
                        $this._rotate(90);
                    }
                }, {
                    'vtype': 'button',
                    'align': 'right',
                    'text': '右转',
                    'iconclass': 'jazz-imageviewer-rotate-right',
                    'defaultview': 1,
                    'click': function() {
                        $this._rotate(270);
                    }
                }]);
            }
            if (jazz.isArray(this.options.buttons)) {
                btns = btns.concat(this.options.buttons);
            }

            //初始化工具条
            $this.toolbarWrap.find('>div').toolbar({
                'items': btns
            });
        },

        /**
         * @desc 获取工具条对象
         * @returns
         */
        'getToolbar': function() {
            if (this.options.isshowtoolbar) {
                return this.toolbarWrap.find('>div');
            }
        },

        '_initWatermark': function() {
            if (this.options.isshowwatermark) {
                this.watermark = $("<div class='jazz-imageview-watermark'></div>")
                    .appendTo(this.element);
                this.addWatermark();
            }
        },

        /**
         * @desc 图片旋转
         * 〈br> 旋转使用两种方式实现，优先考虑css3的旋转，其次兼容ie的滤镜方式
         * @param degree 旋转角度
         * @private
         */
        '_rotate': function(degree) {
        	
            var transform,
                styles = document.createElement('div').style,
                img = this.imgWrap[0],
                cosa, sina, matrix;
            $.each(['transform', 'MozTransform',
                'webkitTransform', 'OTransform',
                'msTransform'
            ], function(i, t) {
                if (t in styles) {
                    transform = t;
                    return false;
                }
            });
            this.imgWrap.data('degree') && (degree += this.imgWrap.data('degree'));
            degree = degree % 360;
            this.imgWrap.data('degree', degree);

            cosa = Math.cos(degree * Math.PI / 180);
            sina = Math.sin(degree * Math.PI / 180);
            (degree == 90 || degree == 270) && (cosa = 0);
            (degree == 180) && (sina = 0);

            matrix = {
                M11: cosa,
                M12: (-1 * sina),
                M21: sina,
                M22: cosa
            };
            //for IE6 IE7 IE8 但是不支持IE10仿真出来的低版本IE
            if (!transform) {
            	//for IE6 IE7 IE8
                img.style.filter = "progid:DXImageTransform.Microsoft.Matrix(M11=" + matrix.M11 + ",M12=" + (-1 * matrix.M12) + ",M21=" + (-1 * matrix.M21) + ",M22=" + matrix.M22 + ",SizingMethod='auto expand')";
            } else {
                //for IE9+ standard, firefox, chrome
                img.style[transform] = "matrix(" + matrix.M11 + ", " + matrix.M12 + ", " + matrix.M21 + ", " + matrix.M22 + ", 0, 0)";
            }
            //图片被旋转90度后，设置宽高互换标志方便 _getImgSize() 方法调用
            if (degree / 90 % 2 == 1) {
                this.trans = true;
            } else {
                this.trans = false;
            }
            //当图片旋转后不在画布内部区域时，进行调整
            this._checkRectCross();
            
            //this._checkPosition();
            // jazz-helper-draged
        },
        '_computeCenterPoint': function(){
        	var img_width = this.imgWrap.width();
        	var img_height = this.imgWrap.height();
        	var ox = this.imgWrap.offset().left;
        	var oy = this.imgWrap.offset().top;
        	this.centerpoint_x = ox+img_width/2;
        	this.centerpoint_y = oy+img_height/2;
        },
        '_checkRectCross': function(){
        	var w = this.imgWrap.width();
        	var h = this.imgWrap.height();
        	var x = this.imgWrap.offset().left;
        	var y = this.imgWrap.offset().top;
        	
        	var canvas_width = this.element.width();
        	var canvas_height = this.element.height();
        	
        	var rect1 = {"minx1":0,"miny1":0,"maxx1":canvas_width,"maxy1":canvas_height};
        	var rect2 = {"minx2":x,"miny2":y,"maxx2":x+w,"maxy2":y+h};
        	//若是出现负数就做平移
        	var minx = Math.max(rect1.minx1, rect2.minx2);
			var miny = Math.max(rect1.miny1, rect2.miny2);
			var maxx = Math.min(rect1.maxx1, rect2.maxx2);
			var maxy = Math.min(rect1.maxy1, rect2.maxy2);
        	if((minx===0)||((minx > maxx)||(miny > maxy))){
        		var w2 = canvas_width/2;
        		var h2 = canvas_width/2;
        		this.imgWrap.css({"left":w2-w/2,"top":h2-h/2});
        	}
        },

        /**
         * @desc 设置容器的大小
         * @private
         */
        '_setupContainer': function() {
            this.element.addClass('jazz-imageview-wrap');
            this.element.css({
                width: (this.options.width + 'px'),
                height: (this.options.height + 'px')
            });
            this.toolbarWrap.css({
                width: (this.options.width + 'px')
            });
        },

        /**
         * @desc 加载图片
         * @param imgSrc 图片地址
         */
        'loadImage': function(imgSrc) {
            var loading = this.element.loading({
                'text': '正在加载图片...'
            });
            //创建图片容器
			if(this.imgWrap){
            	this.imgWrap.removeClass();
                this.imgWrap.addClass("jazz-imageview-image jazz-imageview-minsize");
                this.imgWrap.find("img").attr("src",imgSrc);
            }else{
            	this.imgWrap = $("<image src='" + imgSrc + "' alt='' class='jazz-imageview-image jazz-imageview-minsize' />")
            	    .appendTo(this.element)
            	    .wrap("<a class='jazz-helper-link' href='javascript:;'></a>");
            }
			
            /* 记录原始尺寸,记录图片初始化显示尺寸 */
            this.imgWrap.load(function() {
                var width = $(this).width(),
                    height = $(this).height(),
                    $wrap = $(this).parents(".jazz-imageview-wrap"),
                    wrapWidth = $wrap.width(),
                    wrapHeight = $wrap.height(),
                    minWidth = wrapWidth,
                    minHeight = wrapHeight;

                $(this).data('size', {
                    'width': width,
                    'height': height
                });
                //计算图片显示的初始化尺寸
                if (width >= height) {
                    minHeight = Math.floor(wrapWidth * height / width);
                } else {
                    minWidth = Math.floor(wrapHeight * width / height);
                }
                if (width <= wrapWidth && height <= wrapHeight) {
                    minWidth = width;
                    minHeight = height;
                    //缓存最大缩放倍率
                    $wrap.data('maxZoom', (wrapWidth / width).toFixed(1));
                }
                //设置图片初始化尺寸显示
                $(this).data('minSize', {
                    'width': minWidth,
                    'height': minHeight
                });
                $(this).css({
                    'width': minWidth,
                    'height': minHeight
                });
                //缓存最小缩放倍率
                $wrap.data('minZoom', (minWidth / width).toFixed(1));

                //保证小图片水平居中显示
                if (minWidth < wrapWidth) {
                    $(this).css({
                        'left': (wrapWidth - minWidth) / 2 + 'px'
                    });
                }
                //保证小图片垂直居中显示
                if (minHeight < wrapHeight) {
                    $(this).css({
                        'top': (wrapHeight - minHeight) / 2 + 'px'
                    });
                }
                $wrap.data("minPos", {
                    'left': (wrapWidth - minWidth) / 2 + 'px',
                    'top': (wrapHeight - minHeight) / 2 + 'px'
                });
                //隐藏加载动画
                $wrap.loading('hide');
            });
        },

        /**
         * @desc 图片装配样式
         * @private
         */
        '_setupCSS': function() {
            this.imgWrap.css({
                'position': 'absolute',
                'top': 0,
                'left': 0
            });
            if (this.options.iscandrag) {
                this.imgWrap.css({
                    'cursor': 'move'
                });
            }
        },

        /**
         * @desc 绑定事件
         * @private
         */
        '_bindEvent': function() {
            var $this = this,
                recoupLeft = 0,
                recoupTop = 0;
            //绑定拖动事件
            if (this.options.iscandrag) {
                this.imgWrap.draggable({
                    'start': function(e, ui) {
                        var left = parseInt($(this).css('left'), 10),
                            top = parseInt($(this).css('top'), 10);
                        left = isNaN(left) ? 0 : left;
                        top = isNaN(top) ? 0 : top;
                        recoupLeft = left - ui.position.left;
                        recoupTop = top - ui.position.top;

                        $this._hideContextMenu();
                        $this.imgWrap.data('beforeOffset', $this.imgWrap.offset()).addClass("jazz-helper-draging");
                    },
                    'drag': function(e, ui) {
                        //修复旋转90度之后拖动时位置偏移的问题
                        ui.position.left += recoupLeft;
                        ui.position.top += recoupTop;
                    },
                    'stop': function() {
                        /**
                         * 拖动释放的时候需要判断
                         * 图片是否被拖动到容器外面
                         */
                        $this._checkPosition();
                        $this.imgWrap.removeClass("jazz-helper-draging").addClass("jazz-helper-draged");
                    }
                });
                if (this.options.isshowwatermark) {
                    //          && (jazz.isIE(6) || jazz.isIE(7) || jazz.isIE(8))){
                    /*this.watermark.draggable({
                     'cursor': 'pointer',
                     'start': function(e, ui){
                     $this._hideContextMenu();
                     $this.imgWrap.data('beforeOffset', $this.imgWrap.offset());
                     $this.watermark.data('beforeOffset', $this.watermark.offset());
                     },
                     'drag': function(e, ui){

                     },
                     'stop': function() {
                     */
                    /**
                     * 拖动释放的时候需要判断
                     * 图片是否被拖动到容器外面
                     */
                    /*
                     $this.watermark.offset($this.watermark.data('beforeOffset'));
                     $this._checkPosition();
                     }
                     });
                     */
                    /*this.watermark.on('mousedown', function(e){
                     this.imageOffset = this.imgWrap.offset();
                     if(!$this._isInRange(e.pageX, e.pageY, 'image')){
                     return;
                     }

                     });*/
                }
            }
            //绑定鼠标双击放大事件
            this.element.off('dblclick.viewer')
                .on('dblclick.viewer', function(e) {
                    var zoomSize = $this._calZoomSize();
                    if ($this.imgWrap.hasClass("jazz-helper-draging")) {
                        return;
                    }
                    if ($this._isInRange(e.pageX, e.pageY, 'toolbar')) {
                        return;
                    }
                    if ($this.imgWrap.hasClass('jazz-imageview-minsize')) {
                        $this._setImgSize(zoomSize['max'], $this.imgWrap.data('trans'));
                        $this.imgWrap.removeClass('jazz-imageview-minsize');
                    } else {
                        $this._setImgSize(zoomSize['min'], $this.imgWrap.data('trans'));
                        $this.imgWrap.addClass('jazz-imageview-minsize');
                        $this.imgWrap.offset($this.element.data('minPos'));
                    }

                    $this._checkPosition();
                    $this._adjustImgPos();
                    //$this._updatePosition(e.pageX, e.pageY);
                    $this._hideContextMenu();
                });
            //DOMMouseScroll 兼容Firefox
            this.imgWrap.off('mousewheel.viewer DOMMouseScroll.viewer')
                .on('mousewheel.viewer DOMMouseScroll.viewer', function(e) {
                    $this._onMouseWheel(e);
                });

            //绑定右键菜单事件
            this._bindContextMenuEvent();

            //绑定工具条事件
            if (!$this.options.isshowtoolbar) {
                return;
            }
            //使用hover事件，确保工具条能够正确显示和隐藏
            this.element.find('.jazz-helper-link').hover(function() {
                $this.toolbarWrap.show();
            }, function() {});
            this.element.hover(function() {
                    $this.toolbarWrap.show();
                }
                /*, function() {
                 //如果当前鼠标右键被点击，则离开容器区域，工具条不隐藏
                 if ($this.element.hasClass("jazz-imageview-dblclicked")) {
                 return;
                 }
                 $this.toolbarWrap.hide();
                 }*/
            );
            this.toolbarWrap.hover(function() {
                $this.toolbarWrap.show();
            });
        },

        /**
         * @desc 不允许容器留有空白
         * @param imgPos
         * @private
         */
        '_checkPosition': function() {
        	 /**
        	  * Internet Explorer 10、Firefox 以及 Opera 支持 transform 属性。
			  *	Chrome 和 Safari 需要前缀 -webkit-
			  *注释：Internet Explorer 9 需要前缀 -ms-
        	  */
        	var transform,
                styles = document.createElement('div').style;
            $.each(['transform', 'MozTransform',
                'webkitTransform', 'OTransform',
                'msTransform'
            ], function(i, t) {
                if (t in styles) {
                    transform = t;
                    return false;
                }
            });
            var wrapOffset = this.wrapPos || (this.wrapPos = this.element.offset()), //容器的相对位置
                imgOffset = this.imgWrap.offset(), //图片的相对位置
                imgSize = this._getImgSize(), //图片的当前尺寸
                wrapWidth = this.options.width, //容器宽度
                wrapHeight = this.options.height, //容器高度
                vwidth = this.trans ? 'height' : 'width',
                vheight = this.trans ? 'width' : 'height';

            //1. 左边拖出去
            if (wrapWidth >= imgSize[vwidth]) {
            	if (wrapOffset['left'] > imgOffset['left']) {
                    this.imgWrap.offset({
                        'left': this.imgWrap.data('beforeOffset')['left']
                    });
                    //return;
                }
            } else {
            	if (!transform) {
	            	//for IE6 IE7 IE8
	            	vwidth = 'width',
                	vheight = 'height';
	            }
            	if (imgSize[vwidth] + imgOffset['left'] < wrapOffset['left'] + wrapWidth) {
                    this.imgWrap.offset({
                        'left': (wrapWidth - imgSize[vwidth] + wrapOffset['left'])
                    });
                }
            }
            //2. 右侧拖出去
            if (wrapWidth >= imgSize[vwidth]) {
                if (imgOffset['left'] + imgSize[vwidth] > wrapOffset['left'] + wrapWidth) {
                    this.imgWrap.offset({
                        'left': this.imgWrap.data('beforeOffset')['left']
                    });
                    //return;
                }
            } else {
                if (imgOffset['left'] > wrapOffset['left']) {
                    this.imgWrap.offset({
                        'left': wrapOffset['left']
                    });
                }
            }
            //3. 上方拖出去
            if (wrapHeight >= imgSize[vheight]) {
                if (wrapOffset['top'] > imgOffset['top']) {
                    this.imgWrap.offset({
                        'top': this.imgWrap.data('beforeOffset')['top']
                    });
                    //return;
                }
            } else {
            	//for IE6 IE7 IE8 但是不支持IE10仿真出来的低版本IE
	            if (!transform) {
	            	//for IE6 IE7 IE8
	            	vwidth = 'width',
                	vheight = 'height';
	            }
	            if (imgSize[vheight] + imgOffset['top'] < wrapHeight + wrapOffset['top']) {
                    this.imgWrap.offset({
                        'top': (wrapHeight + wrapOffset['top'] - imgSize[vheight])
                    });
                }
            }

            //4. 下面拖出去
            if (wrapHeight >= imgSize[vheight]) {
                if (imgOffset['top'] + imgSize[vheight] > wrapOffset['top'] + wrapHeight) {
                    this.imgWrap.offset({
                        'top': this.imgWrap.data('beforeOffset')['top']
                    });
                    //return;
                }
            } else {
                if (imgOffset['top'] > wrapOffset['top']) {
                    this.imgWrap.offset({
                        'top': wrapOffset['top']
                    });
                }
            }
        },

        /**
         * @desc 双击之后, 将焦点移动到容器中心
         * @private
         */
        '_updatePosition': function(x, y) {
            return;
            var wrapOffset, imgOffset, imgSize, oldImgSize,
                wrapWidth = this.options.width,
                wrapHeight = this.options.height,
                offsetX, offsetY,
                wrapCenter;

            //恢复图片最小显示
            if (this.imgWrap.hasClass('jazz-imageview-minsize')) {
                this.imgWrap.css(this.element.data('minPos'));
                return;
            }
            imgOffset = this.imgWrap.offset(); //图片原始位移
            wrapOffset = this.element.offset(); //容器的位移
            imgSize = this._getImgSize(), //图片当前的尺寸
                oldImgSize = this.element.data('oldImgSize'); //图片的旧尺寸
            wrapCenter = this.wrapCenter || (this.wrapCenter = {
                x: (wrapOffset['left'] + wrapWidth / 2),
                y: (wrapOffset['top'] + wrapHeight / 2)
            });
            //1. 找到(x, y)在图片上的位置
            var rX = Math.floor((x - imgOffset['left']) / oldImgSize['width'] * imgSize['width'] + imgOffset['left']),
                rY = Math.floor((y - imgOffset['top']) / oldImgSize['height'] * imgSize['height'] + imgOffset['top']);
            offsetX = imgOffset['left'] + wrapCenter['x'] - rX;
            offsetY = imgOffset['top'] + wrapCenter['y'] - rX;

            //设置新的
            this.imgWrap.offset({
                'top': offsetX,
                'left': offsetY
            });
            /*if(this.imgWrap.data('trans')){
             this.imgWrap.offset({
             'top': offsetX,
             'left': offsetY
             });
             }else{
             this.imgWrap.offset({
             'top': offsetX,
             'left': offsetY
             });
             }*/

        },

        /**
         * @desc 缩放方法
         * @param type 放大|缩小 ==> in|out
         */
        'zoom': function(type) {
            type = type || 'in';
            var zoomStep = 1,
                zoom_step = this.zoom_step ? this.zoom_step : (this.zoom_step = jazz.config.zoomStep),
                oldImgSize;

            if (!this._isZoom(type)) {
                return false;
            }
            this.imgWrap.data('beforeOffset', this.imgWrap.offset());
            //计算本次缩放倍率
            type == 'in' ? (zoomStep += zoom_step) : (zoomStep -= zoom_step);
            oldImgSize = this._getImgSize();
            this.element.data('oldImgSize', oldImgSize);
            //设置缩放后的尺寸
            var imgSize = {
                width: Math.ceil(oldImgSize['width'] * zoomStep),
                height: Math.ceil(oldImgSize['height'] * zoomStep)
            };

            this._setImgSize(imgSize);
            this._checkPosition();
            this._adjustImgPos();

            //return true;
        },

        /**
         * @desc 根据设置的放大缩小倍率<br>
         *   计算图片可以被放大和缩小的极值尺寸
         * @returns {{max: {width: number, height: number}, min: {width: number, height: number}}|*}
         */
        '_calZoomSize': function() {
            var imgSize,
                maxZoom = this.element.data('maxZoom') || jazz.config.maxZoom || 1,
                minSize = this.imgWrap.data('minSize');

            if (this.zoomSize) {
                return this.zoomSize;
            }
            imgSize = this.originalSize || (this.originalSize = this.imgWrap.data('size'));
            this.zoomSize = {
                'max': {
                    'width': Math.ceil(imgSize['width'] * maxZoom),
                    'height': Math.ceil(imgSize['height'] * maxZoom)
                },
                'min': {
                    'width': minSize['width'],
                    'height': minSize['height']
                }
            };
            return this.zoomSize;
        },

        /**
         * @desc 检测是否符合缩放条件<br>
         *   当前图片尺寸宽或高任意大于设定的最大尺寸,则不缩放<br>
         *   当前图片尺寸宽或高任意小于设定的做小尺寸,则不缩放
         * @param vtype
         * @returns {boolean}
         */
        '_isZoom': function(vtype) {
            var zoomSize, imgSize,
                vwidth = 'width',
                vheight = 'height',
                trans = this.trans;

            zoomSize = this._calZoomSize();
            imgSize = this._getImgSize();
            if (trans) {
                vwidth = 'height';
                vheight = 'width';
            }
            //从这里开始比较当前缩放的尺寸和原始尺寸
            if (vtype === 'in' && (imgSize[vwidth] >= zoomSize['max']['width'] || imgSize[vheight] >= zoomSize['max']['height'])) {
                return false;
            }
            if (vtype === 'out' &&
                (imgSize[vwidth] <= zoomSize['min']['width'] || imgSize[vheight] <= zoomSize['min']['height'])) {
                this.imgWrap.addClass('jazz-imageview-minsize');
                this.imgWrap.css(this.element.data('minPos'));
                return false;
            }
            this.imgWrap.removeClass('jazz-imageview-minsize');
            return true;
        },

        '_isInRange': function(x, y, who) {
            var $el, startPoint, endPointX, endPointY;
            try {
                $el = this['get' + who.replace(/^\w/, function(m) {
                    return m.toUpperCase();
                })]();
            } catch (e) {
                jazz.log(e);
                return false;
            }

            startPoint = this[who + 'Offset'] || (this[who + 'Offset'] = $el.offset());
            endPointX = startPoint['left'] + $el.width();
            endPointY = startPoint['top'] + $el.height();

            if (x >= startPoint['left'] && y >= startPoint['top'] && x <= endPointX && y <= endPointY) {
                return true;
            }

            return false;
        },

        'getImage': function() {
            return this.imgWrap;
        },

        /**
         * @desc 获取图片大小
         * @returns {{width: *, height: *}|*}
         */
        '_getImgSize': function() {
            /**
             * 图片被旋转90度或-90度
             */
            /*if (this.imgWrap.data('trans')) {
             return {
             'height': this.imgWrap.outerWidth(),
             'width': this.imgWrap.outerHeight()
             };
             }*/
            return {
                'width': this.imgWrap.outerWidth(),
                'height': this.imgWrap.outerHeight()
            };
        },

        /**
         * @设置图片大小
         * @param imgSize 图片尺寸
         */
        '_setImgSize': function(imgSize, trans) {
            var minSize = this.imgWrap.data('minSize');
            imgSize = imgSize || this.originalSize || (this.originalSize = this.imgWrap.data('size'));

            /*if (imgSize['width'] < minSize['width'] || imgSize['height'] < minSize['height']) {
             imgSize = minSize;
             }
             if (imgSize['width'] < minSize['width'] || imgSize['height'] < minSize['height']) {
             imgSize = minSize;
             }*/
            this.imgWrap
                .height(imgSize['height'])
                .width(imgSize['width']);
        },

        '_adjustImgPos': function() {
            var imgSize = this._getImgSize(),
                wrapWidth = this.options.width,
                wrapHeight = this.options.height,
                trans = this.trans,
                vheight = trans ? 'width' : 'height',
                vwidth = trans ? 'height' : 'width';

            //保证小图片水平居中显示
            if (imgSize[vwidth] <= wrapWidth) {
                this.imgWrap.css({
                    'left': (wrapWidth - imgSize[vwidth]) / 2 + 'px'
                });
            }
            //保证小图片垂直居中显示
            if (imgSize[vheight] <= wrapHeight) {
                this.imgWrap.css({
                    'top': (wrapHeight - imgSize[vheight]) / 2 + 'px'
                });
            }
        },

        /**
         * @desc 鼠标滚轮滚动响应事件
         * <br> 实现图片缩放功能
         * @param e
         * @private
         */
        '_onMouseWheel': function(e) {
            var $this = this,
                imgOffset = $this.imgWrap.offset(),
                delta, zoomFlag;
            e = e || window.event;
            //阻止冒泡
            e.cancelBubble = true;
            if (e.stopPropagation) {
                e.stopPropagation();
            }
            //组织默认事件
            if (e.preventDefault) {
                e.preventDefault();
            }
            if (e['originalEvent']) {
                //这里要注意兼容浏览器
                delta = e['originalEvent'].detail || e['originalEvent']['wheelDelta'];
                if (delta > 0) {
                    zoomFlag = $this.zoom('in');
                } else {
                    zoomFlag = $this.zoom('out');
                }
                /*$this._checkPosition();
                 $this._adjustImgPos();*/
                $this._hideContextMenu();
                /*        if (zoomFlag) {
                 //$this._updatePosition(e['originalEvent']['pageX'], e['originalEvent']['pageY'], imgOffset);
                 $this._checkPosition();
                 $this._adjustImgPos();
                 }*/
            }
        },

        /**
         * @desc 初始化右键菜单
         * @private
         */
        '_initContextMenu': function() {
            var $menu, items = [];
            if (!this.options.isshowcontextmenu) {
                return;
            }
            if ($('div.jazz-imageview-contextmenu').length > 0) {
                this.contextMenu = $('div.jazz-imageview-contextmenu');
                return;
            }
            /**
             * 这里的右键菜单项应该和tollbar的一致
             * 这里的做法太机械,不够好
             */
            $menu = $("<div class='jazz-imageview-contextmenu jazz-helper-hidden'><ul></ul></div>")
                .appendTo($('body'))
                .children('ul');

            items.push("<li><a href='javascript:;' class='jazz-imageview-zoomin'>放大</a></li>");
            items.push("<li><a href='javascript:;' class='jazz-imageview-zoomout'>缩小</a></li>");

            //添加左转、右转菜单
            if (this.options.isrotate) {
                items.push("<li><a href='javascript:;' class='jazz-imageview-rotateleft'>左转</a></li>");
                items.push("<li><a href='javascript:;' class='jazz-imageview-rotateright'>右转</a></li>");
            }
            items.push("<li><a href='javascript:;' class='jazz-imageview-cancelMenu'>取消</a></li>");
            $menu.append(items.join(""));

            this.contextMenu = $menu.parent();
        },

        /**
         * @desc 显示右键菜单
         * @param x 右键点击位置横坐标
         * @param y 右键点击位置纵坐标
         * @private
         */
        '_showContextMenu': function(x, y) {
            this.contextMenu.offset({
                'left': x,
                'top': y
            }).show();
        },

        /**
         * @desc 隐藏右键菜单
         * @private
         */
        '_hideContextMenu': function() {
            $('div.jazz-imageview-dblclicked')
                .removeClass("jazz-imageview-dblclicked");
            this.options.isshowcontextmenu && this.contextMenu
                .offset({
                    'left': 0,
                    'top': 0
                })
                .hide();
        },

        /**
         * @desc 绑定右键菜单事件
         * @private
         */
        '_bindContextMenuEvent': function() {
            var $this = this;

            if (!this.options.isshowcontextmenu) {
                return;
            }

            this.imgWrap[0].oncontextmenu = function(e) {
                e = e || window.event;
                //阻止冒泡
                e.cancelBubble = true;
                e.stopPropagation && e.stopPropagation();
                //阻止默认事件
                event.preventDefault ? event.preventDefault() : event.returnValue = false;
                //查找当前鼠标右击的组件，添加右键点击样式标记
                $('.jazz-imageview-dblclicked')
                    .removeClass('jazz-imageview-dblclicked');
                $this.element.addClass('jazz-imageview-dblclicked');
                //隐藏当前点击之外的组件的工具条
                $('.jazz-imageview-wrap')
                    .not('.jazz-imageview-dblclicked')
                    .find('.jazz-imageview-toolbar')
                    .hide();
                //显示右键菜单
                $this._showContextMenu(e.clientX, e.clientY);
            };
            //确保一个页面只维护一份右键菜单
            if ($._data(this.contextMenu[0], 'events')) {
                return;
            }
            //绑定右键菜单关闭显示事件
            $('a.jazz-imageview-cancelMenu').off('click.viewer')
                .on('click.viewer', function() {
                    $this._hideContextMenu();
                });
            //绑定右键菜单图片放大事件
            $('a.jazz-imageview-zoomin').off('click.viewer')
                .on('click.viewer', function() {
                    $('.jazz-imageview-dblclicked:first')
                        .imageviewer('zoom', 'in');
                });
            //绑定右键菜单图片缩小事件
            $('a.jazz-imageview-zoomout').off('click.viewer')
                .on('click.viewer', function() {
                    $('.jazz-imageview-dblclicked:first')
                        .imageviewer('zoom', 'out');
                });
        },

        /**
         * @desc 恢复图片原始状态,包括尺寸\位置
         */
        'reset': function(imgSrc) {
            var imgSize,
                left = 0,
                top = 0;

            //重新请求图片
            //this.loadImage(imgSrc || this.options.imagesrc);
            //设置图片大小为原始尺寸
            this._setImgSize();
            imgSize = this._getImgSize();

            //保证小图片水平居中显示
            if (imgSize['width'] < this.element.width()) {
                left = (this.element.width() - imgSize['width']) / 2 + 'px';
            }
            //保证小图片垂直居中显示
            if (imgSize['height'] < this.element.height()) {
                top = (this.element.height() - imgSize['height']) / 2 + 'px';
            }
            this.imgWrap.css({
                'top': top,
                'left': left
            });
            //this._hideContextMenu();
        },

        /**
         * @desc 添加按钮
         * @param button
         */
        'addButton': function(button) {
            var btns = [];
            if (!jazz.isArray(button)) {
                btns = [button];
            } else {
                btns = btns.concat(button);
            }
            this.toolbarWrap.find('> div').toolbar('addElement', btns);
        },

        'addWatermark': function(src) {
            src = src || this.options.watermarkurl || jazz.config.watermarkurl;
            if (!src) {
                return;
            }
            this.watermark.css({
                'background': 'url(' + src + ') right bottom no-repeat transparent'
            });
        },

        /**
         * @desc 动态改变属性
         * @param {key} 对象的属性名称
         * @param {value} 对象的属性值
         * @private
         */
        '_setOption': function(key, value) {
            switch (key) {
                case 'width':
                    this.options.width = parseInt((value + "").replace(/px/ig, ""));
                    this._setupContainer();
                    break;
                case 'height':
                    this.options.height = parseInt((value + "").replace(/px/ig, ""));
                    this._setupContainer();
                    break;
                case 'watermarkurl':
                    this.options.watermarkurl = value;
                    this.addWatermark(value);
                    break;
                case 'imagesrc':
                    this.options.imagesrc = value;
                    this.loadImage(value);
            }

            this._super(key, value);
        },

        /**
         * @desc 组件销毁方法
         */
        'destroy': function() {
            //this.toolbarWrap.toolbar('destroy');
            this.element.children().remove();
            this.element.remove();
            if ($('div.jazz-imageview-wrap').length <= 1) {
                this.contextMenu.children().remove();
                this.contextMenu.remove();
            }

            this._super();
        }
    });

});
(function( $, factory ){

	if ( jazz.config.isUseRequireJS === true ) {
		define( ['jquery', 'jazz.Button'], factory );
	} else {
		factory($);
	}	 
})(jQuery, function($){
/**
 * @version 0.5
 * @name jazz.toolbar
 * @description 工具条组件
 * @constructor
 * @extends jazz.boxComponent
 * @requires
 * @example $('#div_id').toolbar();
 */
$.widget("jazz.toolbar", $.jazz.boxComponent, {

		options :/** @lends jazz.toolbar# */ {
        	/**
        	 *@desc 组件类型
        	 */
        	vtype: 'toolbar',
			/**
			 *@type Object
			 *@desc toolbar组件元素数据，数组格式可放置按钮，form表单元素组件等。
			 *@default null
			 */
			items: null,
			/**
			 *@type int
			 *@desc toolbar折行样式（wrap,换行;scroll,滚动）
			 *		建议使用toolbar换行时，将toolbar中元素同侧对齐布局，例如都靠左；
			 *@default 0
			 */
			overflowtype: "scroll",
			/**
			 * @type string 
			 * @desc toolbar排列方向（横向或纵向）,(horizontal/vertical)
			 * @default "horizontal"
			 */
			orientation: "horizontal" 
		},

		/** @lends jazz.toolbar */
		/**
         * @desc 创建组件
         * @private
         */ 
		_create : function() {
			this._super();
			
			//1.生成toolbar基本dom结构，横向和纵向布局都是这个结构
			var toolbardoms = "<div class='jazz-toolbar-scroll-first'></div>" +
								"<div class='jazz-toolbar-content'><div class='jazz-toolbar-content-wrap'>" +
								"<div class='jazz-toolbar-contentarea-second'></div><div class='jazz-toolbar-contentarea-first'></div>"+
								"</div></div>" +
							"<div class='jazz-toolbar-scroll-second'></div>";
			var toolbarclass = 'jazz-toolbar jazz-toolbar-orientation-horizontal';
			if(this.options.orientation=="vertical"){
				toolbarclass = 'jazz-toolbar jazz-toolbar-orientation-vertical';
			}
			this.element.addClass(toolbarclass).append(toolbardoms);
			
			//2.缓存toolbar基本dom结构
			this.scollFirst = this.element.find(".jazz-toolbar-scroll-first");
			this.toolbarContent = this.element.find(".jazz-toolbar-content");
			this.toolbarContentWrap = this.element.find(".jazz-toolbar-content-wrap");
			this.toolbarFirst= this.element.find(".jazz-toolbar-contentarea-first");
			this.toolbarSecond= this.element.find(".jazz-toolbar-contentarea-second");
			this.scollSecond = this.element.find(".jazz-toolbar-scroll-second");
			
			//3.toolbar纵向排列时，需要根据width或者height预设值定义样式
			if(this.options.orientation=="vertical"){
				if(this.options.height=="auto"){
					this.toolbarContent.addClass("toolbar-content-default-height");
				}
				if(this.options.width=="auto"){
					this.toolbarContent.addClass("toolbar-content-default-width");
					this.element.addClass("toolbar-default-width");
				}
			}
		},
		/**
         * @desc 初始化组件
         * @private
         */ 
		_init: function(){
			this._super();
			
			//1.初始化设置toolbar宽度和高度
        	this._setToolbarWith();
        	this._setToolbarHeight();
        	//2.根据items==null确定toolbar组件子元素创建方式
        	if(this.options.items==null){
        		this._vtypeCreateElements();
        	}else{
        		this._widgetCreateElements();
        	}
        	if(this.options.overflowtype=="wrap"){
        		if(this.options.orientation == "horizontal"){
        			this.toolbarContentWrap.css("width","100%");
        			this.toolbarFirst.addClass("white-space-normal");
					this.toolbarSecond.addClass("white-space-normal");
        		}
        	}else {
        		//绑定滚动事件
        		this._bindScrollEvent();
				//jazz.widget方式创建toolbar时，确认toolbar工具条内部子组件都创建完成后，执行宽度滚动条计算；
				if($.isArray(this.options.items) && this.options.items.length>0){
	        		var that = this;
	        		setTimeout(function(){that._computeToolbarWidth()},150);
	        	}
        	}
		},
		/**
		 * @desc 覆盖jazz.component finish方法，由父类调用(只是适用vtype创建组件时调用)；
		 * 		 确认待toolbar工具条内部子组件都创建完成后，执行宽度滚动条计算；
		 * @private
		 */
		finish: function(){
			var that = this;
			if(this.options.overflowtype!="wrap"){
				//this._computeToolbarWidth();
				//toolbar创建时，内部子组件存在图片加载情况，会有image加载延迟。
				//暂时使用setTimeout延时解决
				setTimeout(function(){that._computeToolbarWidth()},150);
			}
		},
		/**
		 * @desc 利用vtype形式创建toolbar组件
		 * @private
		 */
		_vtypeCreateElements: function(){
			var orientation = this.options.orientation;
			var childrens = this.element.children();
			var child=null,wrapHtml = "<div class='jazz-toolbar-element'></div>";
			if(orientation=="vertical"){
    			//现在纵向对齐，只支持顶部对齐自上往下排列，不支持上中下对齐
    			//1.顶部对齐，将所有子元素都放到this.toolbarFirst中
        		for(var i=0,m=childrens.length;i<m-3;i++){
        			child = $(childrens[i]);
        			child.wrap(wrapHtml);
    				this.toolbarFirst.append(child.parent());
        		}
        		//2.纵向对齐，子元素在this.toolbarFirst中，隐藏this.toolbarSecond
        		this.toolbarSecond.hide();
    		}else{
    			//现在横向toolbar布局分为左中右对齐，需要分别处理
    			//1.居中与（靠左，靠右对齐）不可同时存在，若同时存在，则居中按靠左对齐处理
    			if(this.element.children("[align=center]").length==(childrens.length-3)){
    				this.toolbarContent.css("text-align","center");
    			}
    			for(var i=0,m=childrens.length;i<m-3;i++){
        			child = $(childrens[i]);
        			child.wrap(wrapHtml);
        			if(child.attr("align")=="right"){
        				this.toolbarSecond.append(child.parent());
        			}else{
        				this.toolbarFirst.append(child.parent());
        			}
        		}
    		}
		},
		/**
		 * @desc 利用$()/$.widget形式创建toolbar组件
		 * @private
		 */
		_widgetCreateElements: function(){
			var items = this.options.items;
			if(!$.isArray(items)){
				return;
			}
			var orientation = this.options.orientation;
			var child=null,wrapHtml = "<div class='jazz-toolbar-element'></div>";
			if(orientation=="vertical"){
    			//现在纵向对齐，只支持顶部对齐自上往下排列，不支持上中下对齐
    			//1.顶部对齐，将所有子元素都放到this.toolbarFirst中
				for(var i=0, len=items.length; i<len; i++){
					if(items[i]["class"]=="separator"){
						child = $("<div class='separator'></div>");
					}else{
	    				child = jazz.widget(items[i],this.toolbarFirst);
					}
					if(items[i]["vtype"]=="button"){
    					child = child.data("button")["container"];
    				}
    				child.wrap(wrapHtml);
    				this.toolbarFirst.append(child.parent());
				}
				//2.纵向对齐，子元素在this.toolbarFirst中，隐藏this.toolbarSecond
        		this.toolbarSecond.hide();
    		}else{
    			//现在横向toolbar布局分为左中右对齐，需要分别处理
    			//1.居中与（靠左，靠右对齐）不可同时存在，若同时存在，则居中按靠左对齐处理
    			var isAllAlignCenter = true;
				for(var i=0, len=items.length; i<len; i++){
					if(items[i]["align"]!="center"){
						isAllAlignCenter = false;
					}
				}
				if(isAllAlignCenter){
    				this.toolbarContent.css("text-align","center");
    			}
				for(var i=0, len=items.length; i<len; i++){
        			if(items[i]["align"]=="right"){
        				if(items[i]["class"]=="separator"){
							child = $("<div class='separator'></div>");
						}else{
		    				child = jazz.widget(items[i],this.toolbarSecond);
						}
						if(items[i]["vtype"]=="button"){
        					child = child.data("button")["container"];
        				}
        				child.wrap(wrapHtml);
    					this.toolbarSecond.append(child.parent());
        			}else{
        				if(items[i]["class"]=="separator"){
							child = $("<div class='separator'></div>");
						}else{
	        				child = jazz.widget(items[i],this.toolbarFirst);
						}
        				if(items[i]["vtype"]=="button"){
        					child = child.data("button")["container"];
        				}
        				child.wrap(wrapHtml);
        				this.toolbarFirst.append(child.parent());
        			}
				}
    		}
		},
		/**
         * @desc 绑定toolbar组件横向或纵向滚动事件
         * @return undefined
         * @private
         * @example  this._bindScrollEvent();
         */
		_bindScrollEvent: function(){
			var that = this;
			this.element.on('contextmenu.jazz-toolbar-contextmenu' , function(e){
				//屏蔽右键
				return false;
            });
			//绑定滚动箭头滚动事件
			var orientation = this.options.orientation;
        	var scrollwidth = 50;//默认滚动距离，暂时处理方式（可一次滚动一个子元素的距离方式）
        	that.scollSecond.off("click").on("click",function(){
        		if(orientation=="horizontal"){
        			var scrollleft = that.toolbarContent.scrollLeft()+scrollwidth;
		       		var scrollTotalWidth = that.toolbarContentWrap.width() - that.toolbarContent.width();
		       		if(scrollleft>scrollTotalWidth){
	        			scrollleft = scrollTotalWidth;
	        		}
	        		that.toolbarContent.scrollLeft(scrollleft);
        		}else if(orientation=="vertical"){
        			var scrollheight = that.toolbarContent.scrollTop()+scrollwidth;
		       		var scrollTotalHeight = that.toolbarContentWrap.height() - that.toolbarContent.height();
		       		if(scrollheight>scrollTotalHeight){
	        			scrollheight = scrollTotalHeight;
	        		}
	        		that.toolbarContent.scrollTop(scrollheight);
        		}
        	});
        	that.scollFirst.off("click").on("click",function(){
        		if(orientation=="horizontal"){
        			var scrollleft = that.toolbarContent.scrollLeft()-scrollwidth;
	       			that.toolbarContent.scrollLeft(scrollleft);
        		}else if(orientation=="vertical"){
        			var scrollheight = that.toolbarContent.scrollTop()-scrollwidth;
	       			that.toolbarContent.scrollTop(scrollheight);
        		}
        	});
		},
		/**
		 * @desc 计算toolbar的宽度或者高度，以显示滚动箭头
		 * @private
		 */
		_computeToolbarWidth: function(){
			var that = this;
			var orientation = this.options.orientation;
			if(orientation=="horizontal"){
				//一、横向布局
				//1.当this.toolbarContentWrap宽度大于this.toolbarContent显示滚动箭头
				//var tbw1 = that.toolbarFirst.width();
				//var tbw2 = that.toolbarSecond.width();
				var tbw1 = 0;//累计每个非隐藏子元素宽度
				$.each(that.toolbarFirst.children(),function(index,obj){
					if($(obj).is(":visible")){
						tbw1 += $(obj).width();
					}
				});
				var tbw2 = 0;//累计每个非隐藏子元素宽度
				$.each(that.toolbarSecond.children(),function(index,obj){
					if($(obj).is(":visible")){
						//console.log("toolbar button width ......");
						//console.log($(obj).width());
						tbw2 += $(obj).width();
					}
				});
				if(tbw1>0){
					/*if(jazz.isIE(6)||jazz.isIE(7)){
						tbw1+=1;
					}*/
					//解决ie6、7低版本内核及怪异模式兼容问题，1像素bug
					tbw1+=1;
					
					//that.toolbarFirst.show();
					that.toolbarFirst.width(tbw1);
				}else{
					//that.toolbarFirst.hide();					
				}
				if(tbw2>0){
					/*if(jazz.isIE(6)||jazz.isIE(7)){
						tbw2+=1;
					}*/
					//解决ie6、7低版本内核及怪异模式兼容问题，1像素bug
					tbw2+=1;
					
					//that.toolbarSecond.show();
					that.toolbarSecond.width(tbw2);
				}else{
					//that.toolbarSecond.hide();					
				}
				var wrapWidth = 0;
				var contentWidth = that.toolbarContent.width();
				var toolbarWidth = that.element.width();
				//if(contentWidth<(tbw1+tbw2)){
				if(toolbarWidth<(tbw1+tbw2)){
					that.toolbarContent.width(that.element.width()-36);//36为左右两个滚动箭头的宽度和
					that.toolbarContent.css({"position":"relative","left":"18px"});
					
					/*if(jazz.isIE(6)){
						wrapWidth = tbw1+tbw2+4;
					}else{
						wrapWidth = tbw1+tbw2;
					}*/
					//解决ie6、7低版本内核及怪异模式兼容问题
					wrapWidth = tbw1+tbw2+3;
					
					that.toolbarContentWrap.width(wrapWidth);
					that.scollFirst.show();
					that.scollSecond.show();
				}else{
					that.toolbarContent.css({"width":"100%","position":"static","left":"0px"});
					
					that.toolbarContentWrap.css({"width":"100%"});
					that.scollFirst.hide();
					that.scollSecond.hide();
				}
			}else if(orientation=="vertical"){
				//二、纵向布局
				//1.当this.toolbarContentWrap高度大于this.toolbarContent显示滚动箭头
				var toolbarHeight = that.element.height();
				var contentHeight = that.toolbarContent.height();
				var	contentWrapHeight = that.toolbarContentWrap.height();
				
				if(jazz.isNormalSize(that.options.height)){
					//if(contentHeight<contentWrapHeight){
					if(toolbarHeight<contentWrapHeight){
						that.toolbarContent.height(toolbarHeight-36);//36为上下两个滚动箭头的高度和
						that.toolbarContent.css({"position":"relative","top":"18px"});
						
						that.scollFirst.show();
						that.scollSecond.show();
					}else{
						that.toolbarContent.css({"height":"100%","position":"static","top":"0px"});
						
						that.scollFirst.hide();
						that.scollSecond.hide();
					}
				}
			}
		},
		/**
		 * @desc 覆盖父级_width()方法，toolbar响应resize事件，进行宽度上的调整
		 * @private
		 */
		_width:function(){
			var orientation = this.options.orientation;
			var width = this.options.width;
			if(orientation=="vertical" && width == "auto"){
				//1.toolbar纵向时，若未设置宽度，则toolbar宽度随内部子元素扩充
				return false;
			}
			if(jazz.isNumber(width)){
				return false;
			}
			this._super();
			if(this.iscalculatewidth){
				if(this.options.overflowtype=="wrap"){
					if(this.options.orientation == "horizontal"){
						var tbw1 = this.toolbarFirst.width();
						var tbw2 = this.toolbarSecond.width();
						var toolbarWidth = this.element.width();
						var leftchildsize = this.toolbarFirst.children().size();
						var rightchildsize = this.toolbarSecond.children().size();
						if(leftchildsize>0&&leftchildsize>0){
							if(toolbarWidth<(tbw1+tbw2)){
								this.toolbarFirst.css("width","70%");
								this.toolbarSecond.css("width","auto");
							}
						}else{
							if(leftchildsize===0){
								this.toolbarSecond.css("width","100%");
							}
							if(rightchildsize===0){
								this.toolbarFirst.css("width","100%");
							}
						}
					}
				}else{
					this._computeToolbarWidth();						
				}
        	}
		},
		/**
		 * @desc 覆盖父级_height()方法，toolbar响应resize事件，进行高度上的调整
		 * @private
		 */
		_height:function(){
			this._super();
        	if(this.iscalculatewidth){
        		if(this.options.overflowtype=="wrap"){
        			
        		}else{
					this._computeToolbarWidth();
				}
        	}
		},
		/**
		 * @desc 初始化时设置toolbar的宽度
		 * @private
		 */
		_setToolbarWith:function(){
			//初始化时设置toolbar的宽度
			//若是window resize引起的toolbar宽度变化，则是由_width()方法调节
			//不设宽度时默认this.element width:auto
			//若是设定宽度则设置this.element.width(value)
			var orientation = this.options.orientation;
			var width = this.options.width;
			if(orientation=="vertical" && width == "auto"){
				//1.toolbar纵向时，若未设置宽度，则toolbar宽度随内部子元素扩充
				return false;
			}
			if(jazz.isNormalSize(width)){
				if(jazz.isNumber(width)){
					this.element.outerWidth(width);
				}else if(/^\d+(\.\d+)?%$/.test(width)){
					var n = this._getCalculatePercentWidth(width, this.element.parent());
					this.element.outerWidth(n);
				}
			}
		},
		/**
		 * @desc 初始化时设置toolbar的高度
		 * @private
		 */
        _setToolbarHeight:function(){
        	//初始化时设置toolbar的高度
			//若是window resize引起的toolbar高度变化，则是由_height()方法调节
			var height = this.options.height;
			if(jazz.isNormalSize(height)){
				if(jazz.isNumber(height)&& parseFloat(height)>=0){
					this.element.outerHeight(height);
				}else if(/^\d+(\.\d+)?%$/.test(height)){
					var n = this._getCalculatePercentHeight(height, this.element.parent());
					this.element.outerHeight(n);
				}
			}
        },
		/**
         * @desc 增加toolbar子元素数据项,相当于调用$('#div_id').toolbar('appendElement',items);
         * 建议使用appendElement接口方法
         * @param {items} 工具条子组件数据项items，格式为数组
         * @example  $('#div_id').toolbar('addElement',items);
         */
		addElement: function(items){
			this._insertSubElement(items);
			if(this.options.overflowtype!="wrap"){
        		this._computeToolbarWidth();
        	}
		},
		/**
		 * @desc 在对应的子组件后部插入toolbar子元素，无相应子元素时，插入到工具条最后面。
		 * @param {items} 工具条子组件数据项items，格式为数组
		 * @param {name} 匹配toolbar子元素名称name值，可选参数
		 * @example  $('#div_id').toolbar('appendElement',items,[name]);
		 */
		appendElement: function(items,name){
			this._insertSubElement(items,name,"after");
			if(this.options.overflowtype!="wrap"){
        		this._computeToolbarWidth();
        	}
		},
		/**
		 * @desc 在对应的子组件前部插入toolbar子元素，无相应子元素时，插入到工具条最前面。
		 * @param {items} 工具条子组件数据项items，格式为数组
		 * @param {name} 匹配toolbar子元素名称name值，可选参数
		 * @example  $('#div_id').toolbar('preappendElement',items,[name]);
		 */
		prependElement: function(items,name){
			this._insertSubElement(items,name,"before");
			if(this.options.overflowtype!="wrap"){
        		this._computeToolbarWidth();
        	}
		},
		/**
		 * @desc toolbar插入子元素逻辑处理
		 * @param {items} 工具条子组件数据项items，格式为数组
		 * @param {name} 插入toolbar子元素名称name值
		 * @param {position} 子元素插入位置before/after
		 * @private
		 */
		_insertSubElement: function(items,name,position){
			if(!$.isArray(items)){
				return;
			}
			var orientation = this.options.orientation;
			var child=null,wrapHtml = "<div class='jazz-toolbar-element'></div>";
			if(orientation=="vertical"){
    			//现在纵向对齐，只支持顶部对齐自上往下排列，不支持上中下对齐
    			//1.顶部对齐，将所有子元素都放到this.toolbarFirst中
				for(var i=0, len=items.length; i<len; i++){
					if(items[i]["class"]=="separator"){
						child = $("<div class='separator'></div>");
					}else{
	    				child = jazz.widget(items[i],this.toolbarFirst);
					}
					if(items[i]["vtype"]=="button"){
    					child = child.data("button")["container"];
    				}
    				child.wrap(wrapHtml);
    				//this.toolbarFirst.append(child.parent());
    				this._insertSubElementByCondition(name,position,child.parent(),this.toolbarFirst);
				}
    		}else{
    			//现在横向toolbar布局分为左中右对齐，需要分别处理
    			//1.居中与（靠左，靠右对齐）不可同时存在，若同时存在，则居中按靠左对齐处理
    			var isAllAlignCenter = false;
    			var textAlign = this.toolbarContent.css("text-align");
				if(textAlign =="center"){
					isAllAlignCenter = true;
				}else{
					var temp = true;
					for(var i=0, len=items.length; i<len; i++){
						if(items[i]["align"]!="center"){
							temp = false;
						}
					}
					var leftnums = this.toolbarFirst.children().length;
					var rightnums = this.toolbarSecond.children().length;
					if(leftnums==0&&rightnums==0&&temp){
						isAllAlignCenter = true;
					}
					if(isAllAlignCenter){
	    				this.toolbarContent.css("text-align","center");
	    			}
				}
				for(var i=0, len=items.length; i<len; i++){
        			if(items[i]["align"]=="right"){
        				if(items[i]["class"]=="separator"){
							child = $("<div class='separator'></div>");
						}else{
		    				child = jazz.widget(items[i],this.toolbarSecond);
						}
						if(items[i]["vtype"]=="button"){
	    					child = child.data("button")["container"];
	    				}
        				child.wrap(wrapHtml);
    					//this.toolbarSecond.append(child.parent());
    					this._insertSubElementByCondition(name,position,child.parent(),this.toolbarSecond);
        			}else{
        				if(items[i]["class"]=="separator"){
							child = $("<div class='separator'></div>");
						}else{
		    				child = jazz.widget(items[i],this.toolbarFirst);
						}
						if(items[i]["vtype"]=="button"){
	    					child = child.data("button")["container"];
	    				}
        				child.wrap(wrapHtml);
        				//this.toolbarFirst.append(child.parent());
        				this._insertSubElementByCondition(name,position,child.parent(),this.toolbarFirst);
        			}
				}
    		}
		},
		_insertSubElementByCondition: function(name,position,newEl,tbar){
			if(name){
				var target = this.element.find('div[name="'+name+'"]');
				if(target.length>0){
					if(position=="before"){
						$(target).parent().before(newEl);
					}else{
						$(target).parent().after(newEl);
					}
				}else{
					if(position=="before"){
						tbar.prepend(newEl);
					}else{
	    				tbar.append(newEl);
					}	
				}
			}else{
				if(position=="before"){
					tbar.prepend(newEl);
				}else{
    				tbar.append(newEl);
				}
			}
		},
		/**
		 * @desc 据子组件name属性值移除toolbar子元素
		 * @param {name} 工具条子组件name名称值
		 * @example  $('#div_id').toolbar('removeElement','name');
		 */
		removeElement: function(name){
			if(!name){
        		return;
        	}
        	var $this = this;
        	$this.element.find('div[name="'+name+'"]').each(function(i){
    			$(this).parents(".jazz-toolbar-element").remove();
    			//$(this).parent().remove();
        	});
        	if(this.options.overflowtype!="wrap"){
        		this._computeToolbarWidth();
        	}
		},
		/**
		 * @desc 据子组件name属性值隐藏toolbar子元素
		 * @param {name} 工具条子组件name名称值
		 * @example  $('#div_id').toolbar('hideElement','name');
		 */
		hideElement: function(name){
			if(!name){
        		return;
        	}
        	var $this = this;
        	$this.element.find('div[name="'+name+'"]').each(function(i){
    			$(this).parents(".jazz-toolbar-element").hide();
    			//$(this).parent().hide();
        	});
        	if(this.options.overflowtype!="wrap"){
        		this._computeToolbarWidth();
        	}
		},
		/**
		 * @desc 据子组件name属性值显示toolbar子元素
		 * @param {name} 工具条子组件name名称值
		 * @example  $('#div_id').toolbar('showElement','name');
		 */
		showElement: function(name){
			if(!name){
        		return;
        	}
        	var $this = this;
        	$this.element.find('div[name="'+name+'"]').each(function(i){
    			$(this).parents(".jazz-toolbar-element").show();
    			//$(this).parent().show();
        	});
        	if(this.options.overflowtype!="wrap"){
        		this._computeToolbarWidth();
        	}
		},
		/**
		 * @desc 据子组件name属性值移除toolbar按钮
		 * @param {name} 工具条按钮name名称值
		 * @deprecated 该接口为JAZZ向下版本兼容，请使用removeElement(name);
		 * @example  $('#div_id').toolbar('removeButton','name');
		 */
		removeButton: function(name){
			this.removeElement(name);
		},
		/**
		 * @desc 隐藏toolbar按钮
		 * @param {name} 工具条按钮name名称值
		 * @deprecated 该接口为JAZZ向下版本兼容，请使用hideElement(name);
		 * @example  $('#div_id').toolbar('hideButton','name');
		 */
		hideButton: function(name){
			this.hideElement(name);
		},
		/**
		 * @desc 显示toolbar按钮
		 * @param {name} 工具条按钮name名称值
		 * @deprecated 该接口为JAZZ向下版本兼容，请使用showElement(name);
		 * @example  $('#div_id').toolbar('showButton','name');
		 */
		showButton: function(name){
			this.showElement(name);
		},
		/**
         * @desc toolbar按钮不可用（此接口和jazz.button组件接口重复，建议直接查找到对应button组件，使用button API）
         * @param {name} 工具条按钮name名称值
         * @example  $('#div_id').toolbar('disableButton','name');
         */
        disableButton: function(name) {
        	if(!name){
        		return;
        	}
        	var $this = this;
        	$this.element.find('div[name="'+name+'"]').each(function(i){
    			$(this).button("disable");
        	});
        },
        /**
         * @desc toolbar按钮使可用 （此接口和jazz.button组件接口重复，建议直接查找到对应button组件，使用button API）
         * @param {name} 工具条按钮name名称值
         * @example  $('#div_id').toolbar('enableButton','name');
         */
        enableButton: function(name) {
        	if(!name){
        		return;
        	}
        	var $this = this;
        	$this.element.find('div[name="'+name+'"]').each(function(i){
    			$(this).button("enable");
        	});
        },
		/**
         * @desc toolbar组件高亮按钮选中样式 （此接口和jazz.button组件接口重复，建议直接查找到对应button组件，使用button API）
         * @param {name} 工具条按钮name名称值
         * @public
         * @example  $('#div_id').toolbar('highlightButton',name);
         */
		highlightButton: function(name){
        	if(!name){
        		return;
        	}
        	this.element.find('div[name="'+name+'"]').button("highlight");
		},
		/**
         * @desc toolbar组件取消高亮按钮选中样式 （此接口和jazz.button组件接口重复，建议直接查找到对应button组件，使用button API）
         * @param {name} 工具条按钮name名称值
         * @public
         * @example  $('#div_id').toolbar('unhighlightButton',name);
         */
		unhighlightButton: function(name){
        	if(!name){
        		return;
        	}
        	this.element.find('div[name="'+name+'"]').button("unhighlight");
		},
		/**
		 * @desc 隐藏toolbar组件
		 * @public
		 */
		hide: function(){
			var $this = this;
			$this.element.hide();
		},
		/**
		 * @desc 显示toolbar组件
		 * @public
		 */
		show:function(){
			var $this = this;
			$this.element.show();
		}

	});

});
(function( $, factory ){

	if ( jazz.config.isUseRequireJS === true ) {
		define( ['jquery', 'jazz.BoxComponent'], factory );
	} else {
		factory($);
	}	 
})(jQuery, function($){
/** 
 * @version 1.0
 * @name jazz.tooltip
 * @description 提示信息组件。
 * @constructor
 * @extends jazz.BoxContainer
 * @requires
 */	
    $.widget("jazz.tooltip", $.jazz.boxComponent, {
       
        options:  /** @lends jazz.tooltip# */{ 

        	/**
        	 *@type String
        	 *@desc 提示内容
        	 *@default ''
        	 */            
        	content: '',
        	
        	/**
        	 *@type String
        	 *@desc 隐藏提示内容要由哪种事件触发
        	 *@default 'mouseout'
        	 */             
        	hideevent: 'mouseout',
			
        	/**
			 *@type String
			 *@desc 提示信息前边所要添加的图片的样式类, 默认无图片
			 *@default null
			 */        	
        	iconclass: null, 
        	
        	/**
			 *@type Boolean
			 *@desc 内部绑定事件
			 *@default true
			 */        	        	
        	isbindevent: true,

        	/**
			 *@type Object
			 *@desc 显示位置
			 *@default null
			 *@example
			 *{
             *   my: 定义被定位元素上对准目标元素的位置, 例： "left, top"
             *   at: 目录元素, "right top",
             *   collision: 当被定位元素在某些方向上溢出窗口，则移动它到另一个位置   例如： 'flipfit none',
             *   of: 要定位的元素， 例如： this.element 或  #id  或  .class,
             *   using: function(pos) { } 描述：当指定了该选项，实际属性设置则委托给该回调
             *   within（默认值：window）类型：Selector 或 Element 或 jQuery 描述：元素定位为 within，会影响 collision 检测。如果您提供了一个选择器（Selector）或 jQuery 对象，则使用第一个匹配的元素。 
             *}
			 */
        	position: null,
        	
        	/**
			 *@type String
			 *@desc 显示提示内容要由哪种事件触发
			 *@default 'mouseover'
			 */        	
            showevent: 'mouseover'
        },
        
    	/** @lends jazz.tooltip */
  
		/**
         *@desc 创建组件
         */	        
        _create: function() {
            this.container = $('<div class="jazz-tooltip" />').appendTo(document.body);

            var styleClass = "", _iconclass = this.options.iconclass;
            if(_iconclass){
            	//styleClass = '<span class="jazz-tooltip-img" style="background: url('+this.options.icon+') no-repeat"></span>';
            	styleClass = '<span class="jazz-tooltip-img '+_iconclass+'"></span>';
            }else{
            	this.arrow = $('<div class="jazz-tooltip-arrow"></div>').appendTo(this.container);
            	this.container.css({"padding-left": "10px"});
            }
            
            var content = '<div class="jazz-tooltip-div"> ' + styleClass + '<span class="jazz-tooltip-label"></span></div>';
            this.container.append(content);
            
            this.contentobj = this.container.children(".jazz-tooltip-div");
        },      

        /**
         *@desc 初始化组件
         *@private
         */
        _init: function(){
        	 if(this.options.isbindevent){
        		 this._bindEvent();
        	 }
        	 if(this.options.width != -1){
        		 this.contentobj.outerWidth(this.options.width);
        	 }else{
        		 this.contentobj.outerWidth(200);
        	 }
        	 if(this.options.content){
        		 var obj = this.contentobj.children(".jazz-tooltip-label");
        		 obj.html(this.options.content);
        	 }
        },
        
        _setOption: function(key, value){
        	switch(key){
    			case 'content':
    				this.options.content = value;
           		 	var obj = this.contentobj.children(".jazz-tooltip-label");
           		 		obj.html(value);    				
    				break; 
    			case 'position':
    				this._align();
    				break;
        	}
        	this._super(key, value);
        },        
        
		/**
         * @desc 显示位置
		 * @private
         */	         
        _align: function() {
        	var $this = this;
        	var pos = {
                my: 'left top',
                at: 'right top',
                collision: 'flipfit none',
                of: $this.element,
                using: function(pos) {
                	var lp = 0;
                	if(!$this.options.iconclass){
	                	//根据tooltip高度, 确定tooltip的显示位置
	                	var tipHeight = $this.container.outerHeight();
	                	var eleHeight = $this.element.height();
	                	if(eleHeight > 50){
		                	if(tipHeight <= 50){  
		                		lp=0; 
		                		$this.arrow.css({"top": "7px"});
		                	}else {
		                		if(eleHeight - tipHeight > 20) {
			                		lp = 20; 
			                		$this.arrow.css({"top": "35px"});
		                		}else{
			                		lp = 0; 
			                		$this.arrow.css({"top": "25px"});		                			
		                		}
		                	}	                		
	                	}else{
		                	if(tipHeight <= 50){  
		                		lp=0; 
		                		$this.arrow.css({"top": "7px"});
		                	}else {
		                		lp = 18; 
		                		$this.arrow.css({"top": "25px"});
		                	}
	                	}
                	}
                	
                	var n = 0;
                	if($this.options.position == 1){
                		n = $this.element.height();
                	}
                    var l = pos.left < 0 ? 0 : pos.left + 5,
                    t = pos.top < 0 ? 0 : pos.top - lp + n;

                    $(this).css({
                        left: l,
                        top: t
                    });
                }
            };
        	
            this.container.css({
                left:'', 
                top:'',
                'z-index': ++jazz.zindex
            }).position(pos);
        },        
        
		/**
         * @desc 目标范围内
		 * @private
         */	        
        _bindEvent: function() {
            var $this = this;
            var hideevent = this.options.hideevent, showevent = this.options.showevent;
            
            if(hideevent == "mouseout"){
            	//处理gridpanel卡片调用
            	this.globalSelector = null;
            }else{
            	this.globalSelector = 'a,:input,:button,img';
            }
            
            //处理多事件绑定
            var _sevent = "", _hevent = "";
            if(hideevent){
            	var _h = hideevent.split(";");
            	for(var i=0, len=_h.length; i<len; i++){
                	if(_h[i]){
                		_hevent = _h[i]+".tooltip " + _hevent;
                	}
                }
            }
            if(showevent){
            	var _s = showevent.split(";");
            	for(var i=0, len=_s.length; i<len; i++){
                	if(_s[i]){
                		_sevent = _s[i]+".tooltip " + _sevent;
                	}
                }            	
            }

            this.element.off(_sevent + " " + _hevent)
				             .on(_sevent, this.globalSelector, function() {
				                $this.show();
				             }).on(_hevent, this.globalSelector, function() {
				                $this.hide();
				             });
            this.element.removeAttr('title');
        },
        
        /**
         * @desc 隐藏提示信息
         * @example $("XXX").tooltip("hide");
         */          
        hide: function() {
        	this.container.hide();
        	this.container.css('z-index', '');
        },

        /**
         * @desc 显示提示信息
		 * @example $("XXX").tooltip("show");
         */           
        show: function() {
            this._align();
            this.container.show();
        }

    });
});(function( $, factory ){
	if ( jazz.config.isUseRequireJS === true ) {
		define( ['jquery', 'jazz.Window'], factory );
	} else {
		factory($);
	}	 
})(jQuery, function($){
	/**
	 * @version 1.0
	 * @name jazz.message
	 * @description 一种弹出页面。
	 * @constructor
	 * @extends jazz.window
	 */
    $.widget("jazz.message", $.jazz.window, {
    		options: /** @lends jazz.message#  */ {
                /**
    			 *@type string
    			 *@desc 详细信息
    			 *@default ''
    			 */
   	   		    detail: '',    			
                
   	   		    /**
    			 *@type Number
    			 *@desc 窗口宽度
    			 *@default 340
    			 */
    			width: 340, 
                
                /**
    			 *@type Number
    			 *@desc 窗口高度
    			 *@default -1
    			 */
    			height: -1,
   		   		
   		   	    /**
    			 *@type number
    			 *@desc 显现提示信息的类型
    			 *@default 0
    			 */
   		   		showtype: 0,

   		   		/**
   				 *@type Boolean
   				 *@desc 确认按钮的点击事件
   				 *@event
   				 *@default true
   				 */
   		   		sure: null,
   	             
   	            /**
   				 *@type Boolean
   				 *@desc 取消按钮的点击事件
   				 *@event
   				 *@default true
   				 */
   		   		cancel: null   		   		
        },
          
        /** @lends jazz.message */
		
		/**
         * @desc 创建组件
		 * @private
         */
        _create: function() {
            this._super();
            this.element.addClass("jazz-message");
        },
        
        /** @lends jazz.message */
        /**
         * @desc 初始化组件
		 * @private
         */
        _init: function() {
        	this.options.modal = true;   //模态窗口
        	this.options.visible = true; //可见 
        	
        	this._super();

        	this.content.empty();
        	
        	var div = '<div class="jazz-message-content"><div class="jazz-message-img"></div><div class="jazz-message-text">&nbsp;</div><div class="jazz-message-button"></div></div>';
            this.content.append(div);
            
            jazz.config.errorMessageNumber++;
            
   		    var img = this.element.find(".jazz-message-img");
   		    var btn = this.element.find(".jazz-message-button");
   		    
   		    var $this = this;
   		    var qd = $('<div class="jazz-message-button-style jazz-message-img-queding"></div>').appendTo(btn);
   		    qd.off("click.message").on("click.message", function(){
			      $this.close(true);
			      jazz.config.errorMessageNumber=0;
				  var a = $this.options.sure;
				  if ($.isFunction(a)) {
				     a.call($this);
				  } 		    	
   		    });
   		    
		    var type = this.options.showtype;
   		    if(type==0){
		    	img.addClass("jazz-message-img-info");		    	
		    }else if(type==1){
		    	img.addClass("jazz-message-img-error");
		    }else if(type==2){
		    	img.addClass("jazz-message-img-warn");
		    }else if(type==3){
		    	img.addClass("jazz-message-img-confirm");
		    	var qx = $('<div class="jazz-message-button-style jazz-message-img-cancel"></div>').appendTo(btn);
		    	qx.off("click.message").on("click.message", function(){
				      $this.close(true);
				      jazz.config.errorMessageNumber=0;
					  var a = $this.options.cancel;
					  if ($.isFunction(a)) {
					     a.call($this);
					  }		    		
		    	});
		    }
		 
		    if(this.options.detail){
		       var text = this.element.find(".jazz-message-text");
	  	       text.html(this.options.detail); 
		    }
		    
            //是否可见
            if(this.options.visible){
                this.open();
            }   		    
        },
        
        /**
         * @desc 覆盖父类方法
		 * @private
         */
        _open: function(){}
    });
});(function( $, factory ){

	if ( jazz.config.isUseRequireJS === true ) {
		define( ['jquery'], factory );
	} else {
		factory($);
	}	 
})(jQuery, function($){
	
	/**
	 * @version 0.5
	 * @name jazz_validator
	 * @description 校验类。
	 */    
    jazz_validator = {
		/**
		 *@type Object
		 *@desc 正则参数
		 */		    		
	    reg: {
	        number:/^[-]?\d+(\.\d+)?([Ee][-+]?[1-9]+)?$/i,
	        numberInt:/^[-]?\d+$/i,
	        numberFloat:/^[-]?\d+\.\d+$/i,
	        numberPlusInt: /^\d+$/i,
	        //numberScience:/^[+|-]?\d+\.?\d*[E|e]{1}[+]{1}\d+$/, 
	        character:/^[\u4e00-\u9fa5A-Za-z]+$/i,
	        chinese:/^[\u4e00-\u9fa5]+$/i,
	        twoBytes:/^[^\x00-\xff]+$/i,
	        english:/^[A-Za-z]+$/i,
	        number$character:/^[\u4e00-\u9fa5A-Za-z0-9]+$/i,
	        number$english:/^[\w]+$/i,
	        qq:/^[1-9]\d{5,11}$/i,
	        telephone:/^((\(0\d{2,3}\))|(0\d{2,3}-))?[1-9]\d{6,7}(-\d{1,4})?$/i,
	        cellphone:/^0?1\d{10}$/i,
	        postal:/^\d{6}$/i,
	        currency:/^\$[-+]?\d+(\.\d+)?([Ee][-+]?[1-9]+)?$/i,
	        email:/^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/i,
	        url:/^(http|https|ftp):\/\/[A-Za-z0-9]+\.[A-Za-z0-9]+[\/=\?%\-&_~`@[\]\':+!]*([^<>\"\"])*$/i
	    },
	    
		/**
		 *@type Object
		 *@desc 提示信息
		 */		    
	    msg:{
	        't':'',
	        'number':jazz.config.i18n.num,
	        'numberInt':jazz.config.i18n.numInt,
	        'numberFloat':jazz.config.i18n.numFloat,
	        'numberPlusInt':jazz.config.i18n.numberPlusInt,
	        'numberScience':jazz.config.i18n.numScience,
	        'character':jazz.config.i18n.character,
	        'chinese':jazz.config.i18n.chinese,
	        'twoBytes':jazz.config.i18n.twoBytes,
	        'english':jazz.config.i18n.english,
	        'date':jazz.config.i18n.date,
	        'number$character':jazz.config.i18n.numChar,
	        'number$english':jazz.config.i18n.numEnglish,
	        'qq':jazz.config.i18n.qq,
	        'telephone':jazz.config.i18n.telephone,
	        'cellphone':jazz.config.i18n.cellphone,
	        'idcard':jazz.config.i18n.idcard,
	        'postal':jazz.config.i18n.postal,
	        'currency':jazz.config.i18n.currency,
	        'email':jazz.config.i18n.email,
	        'url':jazz.config.i18n.url,
	        'and':jazz.config.i18n.and1,
	        'or':jazz.config.i18n.or,
	        'solo':'',
	        'must':jazz.config.i18n.must,
	        'contrast':jazz.config.i18n.contrast,
	        'range':jazz.config.i18n.range,
	        'customCheckStyle':jazz.config.i18n.customCheckStyle,
	        'length':jazz.config.i18n.length1,
	        'customFunction':jazz.config.i18n.customFunction
	    },
	    
		/**
         * @desc 身份证信息
         * @param {idcard} 需要验证的字符串
         * @return boolean
		 * @example this.checkIdcard(idcard)
         */
        checkIdcard: function(idcard){
        	var area={11:"北京",12:"天津",13:"河北",14:"山西",15:"内蒙古",21:"辽宁",22:"吉林",23:"黑龙江",31:"上海",32:"江苏",33:"浙江",34:"安徽",35:"福建",36:"江西",37:"山东",41:"河南",42:"湖北",43:"湖南",44:"广东",45:"广西",46:"海南",50:"重庆",51:"四川",52:"贵州",53:"云南",54:"西藏",61:"陕西",62:"甘肃",63:"青海",64:"宁夏",65:"新疆",71:"台湾",81:"香港",82:"澳门",91:"国外"}; 
        	var idcard,Y,JYM; 
        	var S,M; 
        	var idcard_array = new Array(); 
        	idcard_array = idcard.split(""); 

        	//地区检验 
        	if(area[parseInt(idcard.substr(0,2))]==null) return false; 

        	//身份号码位数及格式检验 
        	switch(idcard.length){ 
//	        	case 15: 
//		        	if ( (parseInt(idcard.substr(6,2))+1900) % 4 == 0 || ((parseInt(idcard.substr(6,2))+1900) % 100 == 0 && (parseInt(idcard.substr(6,2))+1900) % 4 == 0 )){ 
//		        	ereg=/^[1-9][0-9]{5}[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]{3}$/;//测试出生日期的合法性 
//		        	} else { 
//		        	ereg=/^[1-9][0-9]{5}[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]{3}$/;//测试出生日期的合法性 
//		        	} 
//
//		        	if(ereg.test(idcard)) return true;
//		        	else return false; 
//		        	break;
        	
	        	case 18: 
	        	//18位身份号码检测 
	        	//出生日期的合法性检查 
	        	//闰年月日:((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9])) 
	        	//平年月日:((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8])) 
	        		if ( parseInt(idcard.substr(6,4)) % 4 == 0 || (parseInt(idcard.substr(6,4)) % 100 == 0 && parseInt(idcard.substr(6,4))%4 == 0 )){ 
	        			ereg=/^[1-9][0-9]{5}19[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]{3}[0-9Xx]$/;//闰年出生日期的合法性正则表达式 
	        		} else { 
	        			ereg=/^[1-9][0-9]{5}19[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]{3}[0-9Xx]$/;//平年出生日期的合法性正则表达式 
	        		} 
	        		if(ereg.test(idcard)){//测试出生日期的合法性 
			        	//计算校验位 
			        	S = (parseInt(idcard_array[0]) + parseInt(idcard_array[10])) * 7 
			        	+ (parseInt(idcard_array[1]) + parseInt(idcard_array[11])) * 9 
			        	+ (parseInt(idcard_array[2]) + parseInt(idcard_array[12])) * 10 
			        	+ (parseInt(idcard_array[3]) + parseInt(idcard_array[13])) * 5 
			        	+ (parseInt(idcard_array[4]) + parseInt(idcard_array[14])) * 8 
			        	+ (parseInt(idcard_array[5]) + parseInt(idcard_array[15])) * 4 
			        	+ (parseInt(idcard_array[6]) + parseInt(idcard_array[16])) * 2 
			        	+ parseInt(idcard_array[7]) * 1 
			        	+ parseInt(idcard_array[8]) * 6 
			        	+ parseInt(idcard_array[9]) * 3 ; 
			        	Y = S % 11; 
			        	M = "F"; 
			        	JYM = "10X98765432"; 
			        	M = JYM.substr(Y,1);//判断校验位 
			        	if(M == idcard_array[17]) return true; //检测ID的校验位 
			        	else return false; 
	        		} 
	        		else return false; 
	        		break;
	        	
	        	default:
	        		return false; 
	        		break; 
        	} 
        },
	 
		/**
         * @desc 效验身份证信息
         * @param {val} 需要验证的字符串
         * @return boolean
		 * @example this.idcard(val)
         */        
        idcard: function(val) {
            var value = val;
            if (value == "") return true;
            return this.checkIdcard(value);
        },

		/**
         * @desc 数字定义
         * @param {val} 输入需要验证的数值
         * @param {zl}  区间范围第一个参数值
         * @param {xl}  区间范围第二个参数值
         * @return boolean
		 * @example this.numberDefine(val, zl, xl)
         */         
        numberDefine: function(val, zl, xl){
        	var value = val;
        	if(value=="")return true;
            if(!this.reg.number.test(value))return false;
            var valueStrArray=value.split(".");
            var zlength= zl;
            if(valueStrArray.length==2)
            	 return valueStrArray[0].length<=zlength && valueStrArray[1].length<=xl;
            else return valueStrArray[0].length <= zlength;
        },

		/**
         * @desc 排除字符
         * @param {val}  输入需要排除的字符
         * @param {value}  可以排除的字符
         * @return boolean
		 * @example this.customCheckStyle(val, value)
         */        
        customCheckStyle: function(val, value) {
        	//var text = this.getElValue(e);
        	var text = val;
        	var reList=value;
        	for(var i=0;i<text.length;i++){
        		var c=text.charAt(i);
        		if(reList.indexOf(c)>=0){
                   return false;
        		}
        	}
        	  return true;
        },

		/**
         * @desc 执行自定义函数时使用
         * @param {str} 函数名称
         * @return array
		 * @example this.getFunc(str)
         */         
        getFunc: function(str) {
            if (!str) {
                str = '';
            }
            var res = [];
//            if (str != "") {
//                var method = str.substring(0, str.indexOf("(")) || undefined;
//                var arg = str.substring(str.indexOf("(") + 1, str.indexOf(")")) || undefined;
//                if ((arg && arg.trim() == "") || arg == undefined) {
//                    arg = "";
//                } else {
//                    arg = "," + arg;
//                }
//
//          }
            res.push(eval(str));
            return res;
        },   

		/**
         * @desc 数字值比较
         * @param {val}  输入需要比较的数字
         * @param {v1}   比较范围第一个参数
         * @param {v2}   比较范围第二个参数
         * @return boolean
         */        
        contrast: function(val, v1, v2) {
        	var value = val;
            if (value == "")
                return true;
            if (this.reg.number.test(value)) {
                var flag = eval(value + v1);
                if (v2!='')
                    flag = flag ? eval(value + v2) : false;
                return flag;
            } else {
                return false;
            }
        },

		/**
         * @desc 字符长度
         * @param {item} 设定的参数
         * @param {val}  输入需要效验长度的字符
         * @param {begin} 开始位置
         * @param {end}  结束位置
         * @return boolean
         */        
        length: function(item, val, begin, end) {
            var value = val;
            if (value == "")
                return true;
            var len = this.getLen(value);
            if(item.indexOf(",")>=0){
            	return (len >= begin && len <= end);
            }else{
                if(end!="")
                return (len > begin && len < end);
                else return len == begin;
            }
        },

		/**
         * @desc 判定中文、字符长度
         * @param {str} 需要效验的字符
         * @return number
         */         
        getLen: function(str) {
            var len = 0;
            for (var i = 0; i < str.length; i++) {
                var strCode = str.charCodeAt(i);
                var strChar = str.charAt(i);
                if ((strCode > 65248) || (strCode == 12288) || this.reg.chinese.test(strChar))
                    len = len + 2;
                else
                    len = len + 1;
            }
            return len;
        },

		/**
         * @desc 测试正则表达式
         * @param {val} 输入需要效验的字符
         * @param {value} 效验的正则表达式
         * @return boolean
         */          
        testRegexp: function(val, rule) {
            if(typeof(rule)!='regexp'){
        		//转成RegExp对象
        		if(this.testRegex('\\/\\^', rule)){
                    rule = rule.substring(1, rule.length);
        		}
                if(this.testRegex('\\/\\i', rule)){
        			rule = rule.substring(0, rule.length-2);
                }
        	    rule = new RegExp(rule); 
        	}
            var value = val;
            if (value == "")
                return true;
            return rule.test(value);
        },
        
		/**
         * @desc 测试正则是否匹配
         * @param {regex} 效验的正则表达式
         * @param {rule} 效验的正则表达式
         * @return boolean
         */          
        testRegex: function(regex, rule) {
            return ((typeof regex == 'string') ? new RegExp(regex) : regex).test(rule);
        },
        
		/**
         * @desc 外部调用的效验方法
         * @param {val} 输入需要验证的字符串
         * @param {rule} 效验的正则表达式
         * @param {regMsg} 自定义函数时的提示消息
         * @return boolean
		 * @example jazz_validator.doValidator(val, rule, regMsg);
         */
		doValidator: function(val, rule, regMsg, compThis){
			var msg = [];
		    var customFunctionReturnObj = null; //自定义函数使用
			var ruleArray = [], type='solo';
			if(!!rule){
				if(rule.indexOf('_')>=0){             //与关系
					ruleArray = rule.split('_');
					type='and';
				}else if(rule.indexOf('||')>=0){      //或关系
					ruleArray = rule.split('||');
					type='or';
				}else{                                //单个校验
					ruleArray[0] = rule;
				}
				var flag=(type!='or')?true:false;
	            var state=flag, stateArray = [];

	            $.each(ruleArray, function(index, item) {
	            	var tempMSG = "";
	                if(item.indexOf('must') >= 0){
	                	if($.trim(val)=='') state = false;
	                	else state = true;
	                	if(typeof(regMsg) == 'undefined' || $.trim(regMsg)==''){
	                		tempMSG = jazz_validator.msg.t + jazz_validator.msg.must;
	                	}else{
	                		tempMSG = regMsg+'';
	                	}
	                }else if(/^(\w+_)?date;.+/.test(item)){
	                	var items = item.split(';');
	                	var d = items[1] || "yyyy-MM-dd"; 
	                	//var f = jazz.util.parseDataByDataFormat({"cellvalue": $.trim(val), "datatype": "date", "dataformat": d});
	                	var c = jazz.dateformat.isDate($.trim(val), d);
	                	if(c==false){
	                		if(typeof(regMsg) == 'undefined' || $.trim(regMsg)==''){
		                		tempMSG = jazz_validator.msg.t + "时间格式输入有误，请输入（"+d+"）格式！";
		                	}else{
		                		tempMSG = regMsg+'';
		                	}
	                		state = false;
	                	}else{
	                		state = true;
	                	}
	                }else if(item.indexOf("number") >=0 && item.indexOf(",") >=0){
	                	var defineArray = item.substring(item.indexOf("(")+1,item.indexOf(")")).split(",");
	                	var zl = defineArray[0]-defineArray[1];
	                	var xl = defineArray[1];
	                	state = jazz_validator.numberDefine(val, zl, xl);
	                	if(typeof(regMsg) == 'undefined' || $.trim(regMsg)==''){
	                		tempMSG = jazz_validator.msg.t + "数字,且整数部分最多"+ zl +"位,且小数部分最多" + xl + "位";
	                	}else{
	                		tempMSG = regMsg+'';
	                	}
	                	item = 'numberDefine';
	            	
	            	}else if (jazz_validator.reg[item]) {  
	            		//postal url telephone number$character数字汉字加英文字母    qq  email cellphone currency
	            		//numberInt numberFloat numberScience
	            		//chinese english
	                	state = (state == flag) ? jazz_validator.testRegexp(val, jazz_validator.reg[item]+"") : state;
	                	if(typeof(regMsg) == 'undefined' || $.trim(regMsg)==''){
	                		tempMSG = jazz_validator.msg.t + (jazz_validator.msg[item] || '');
	                	}else{
	                		tempMSG = regMsg+'';
	                	}
	                }else if(item.indexOf('regexp')>=0){ //正则
		            	//自定义正则表达式。例如：rule="regexp;^\d{1}$" 第一个参数为regexp是固定的，第二个参数为自定义的正则表达式，中间使用;分割
                    	state = (state == flag) ? jazz_validator.testRegexp(val, item.split(";")[1]) : state;
                    	tempMSG = jazz_validator.msg.t + ((!!regMsg)? regMsg: '');
                    	item = 'regexp';

	                }else if(item.indexOf('customCheckStyle')>=0){
	            	    //校验特殊字符的，例如，rule="customCheckStyle;*,"不允许出现*和,
	                	state = jazz_validator.customCheckStyle(val, item.split(";")[1]);
	                	if(typeof(regMsg) == 'undefined' || $.trim(regMsg)==''){
	                		tempMSG = jazz_validator.msg.t + jazz_validator.msg.customCheckStyle + item.split(";")[1];
	                	}else{
	                		tempMSG = regMsg+'';
	                	}
	                }else if(item.indexOf('customFunction')>=0){   //自定义
	            		var items = item.split(';');
	            		customFunctionReturnObj = jazz_validator.getFunc(items[1]);
	            		state = customFunctionReturnObj[0].state;
	            		tempMSG = jazz_validator.msg.t + customFunctionReturnObj[0].msg;
	            		item = 'customFunction';
	            		if(state == undefined || state == "undefined" || state == true){ state = true; tempMSG = ""; }
	            		
	            	}else if(item.indexOf('contrast')>=0){   //数字值比较
	            		//用户输入的数字值比较。
	            		//支持单范围比较 例如：rule="contrast;>=5" 第一个参数为contrast是固定的，第二个参数为比较范围及比较值，中间使用;分割
                        //支持双范围比较 例如：rule="contrast;>=5;<=6" 第一个参数为contrast是固定的，第二、三个参数为比较范围及比较值，中间使用;分割
                        //比较范围支持常用的所有类型 例如：> >= == < <= !=
	                    var contrastValue1 = item.split(";")[1], contrastValue2 = "";
	                    if (item.split(";").length == 3) {
	                    	contrastValue2 = item.split(";")[2];
	                    }
	                    state = jazz_validator.contrast(val, contrastValue1, contrastValue2);
	                    if(typeof(regMsg) == 'undefined' || $.trim(regMsg)==''){
	                    	tempMSG = jazz_validator.msg.t + jazz_validator.msg.contrast + contrastValue1 +",  "+ contrastValue2;
	                    }else{
	                    	tempMSG = regMsg+'';
	                    }
	                    item = 'contrast';
	                    
		            }else if(item.indexOf('length')>=0){//输入长度比较
		            	//用户输入的字符串长度必须在某个范围之内。
		            	//例如1：rule="length;2;4" 第一个参数为length是固定的，第二个参数为最小值，第三个参数为最大值，中间使用;分割相当于"用户输入的字符串长度在2,4之间，不包括边界值"
		            	//例如2：rule="length;2,4" 第一个参数为length是固定的，第二个参数为最小值，第三个参数为最大值，中间使用;分割相当于"用户输入的字符串长度在2,4之间，包括边界值"
		            	//例如3：rule="length;5" 第一个参数为length是固定的，第二个参数为长度值，相当于"用户输入的字符串长度只能为5"
		            	//汉字算两个字符
	                	var tempItemArray=item.split(";"), begin="", end="";
	                	if(tempItemArray.length==3){
		                    begin = item.split(";")[1];
		                    end = item.split(";")[2];
	                	}else{
	                		if(tempItemArray[1].indexOf(",")>=0){
	                			begin = tempItemArray[1].split(",")[0];
	    	                    end = tempItemArray[1].split(",")[1];
	                		}else{
	                			begin = tempItemArray[1];
	                		}
	                	}
	                    state = jazz_validator.length(tempItemArray[1], val, begin, end);
	                    if(typeof(regMsg) == 'undefined' || $.trim(regMsg)==''){
	                    	tempMSG = jazz_validator.msg.t + jazz_validator.msg['length'] + begin + (!!end ? ("和" + end  + "之间"):"");
	                    }else{
	                    	tempMSG = regMsg+'';
	                    }
	                    item = 'length';
	                    
		            }else if(item.indexOf('idcard')>=0){
		            	state = jazz_validator.idcard(val);
		            	if(typeof(regMsg) == 'undefined' || $.trim(regMsg)==''){
		            		tempMSG = jazz_validator.msg.t + jazz_validator.msg.idcard;
		            	}else{
	                    	tempMSG = regMsg+'';
		            	}
		            	item = 'idcard';
		            }
	                
	                if(!state && tempMSG){
	                	msg.push(tempMSG);
	                }
	                
//	                if (index == 0) {
//	                    msg += tempMSG;
//	                } else {
//	                    msg += (!!tempMSG)?(jazz_validator.msg[type] + tempMSG):"";
//	                }
	                
	                stateArray[index] = state;
	            });
	            
	            var rs = true;
	            if(type=='and') {
	            	rs = this._rAndState(stateArray, type);
	            } else if(type=='or') {
	            	rs = this._rOrState(stateArray, type);
	            } else {
	            	rs = state;
	            }
	            
	            if(!!compThis){
	            	compThis.options.isverify = rs;
	            }
	            return {'state':rs, 'msg':msg.join(";")};
			}else{
				if(!!compThis){
					compThis.options.isverify = true;
				}
				return {'state': true, 'msg':msg.join()};
			}			
			
		},
		
		/**
         * @desc 确定返回状态
         * @param {stateArray} 状态数组
         * @param {type}  
         * @return boolean
         */   		
        _rAndState: function(stateArray, type){
        	var r = true;
        	$.each(stateArray, function(i, state){
               	if(state==false)
               		r = false;
			});
        	return r;
		},
		
		/**
         * @desc 确定返回状态
         * @param {stateArray} 状态数组
         * @param {type}  
         * @return boolean
         */
		_rOrState: function(stateArray, type){
			var r = false;
        	$.each(stateArray, function(i, state){
               	if(state==true)
               		r = true;
			});
        	return r;
		}
    };
});
 
(function($){
/** 
 * @version 0.5
 * @name jazz.icon
 * @description 图标式展现组件。
 * @constructor
 * @extends jazz.panel
 * @requires
 * @example $('XXX').icon();
 */
	$.widget('jazz.icon', $.jazz.panel, {
	    options: /** @lends jazz.icon# */ {
	    	
	    	/**
        	 *@desc 组件类型
	    	 */
	    	vtype: "icon",
	    	
			/**
			 *@desc 翻页所需要时间
			 *@default 500
			 */  	    	
	    	scrolltime: 500,
	    	
    		/**
			 *@type Number
			 *@desc 当前活动的页面
			 *@default 0
			 */
            activeindex: 0,
            
            /**
			 *@type Boolean
			 *@desc 是否启用控制按钮, true 启动  false 不启动
			 *@default 0
			 */
            iscontroller: true,

    		/**
			 *@type boolean
			 *@desc 是否显示分页条
			 *@default true
			 */            
            isshowpaginator: true,
            
    		/**
			 *@type Number
			 *@desc 显示主题
			 *@default 0
			 */            
            theme: 0,
            
            /**
			 *@type String
			 *@desc 链接
			 *@default null
			 */      
            dataurl: null,
            
            /**
			 *@type Object
			 *@desc dataurl需要的参数 {a: '123', b: '345'}
			 *@default null
			 */            
            dataurlparams: null,  
            
            //paramicons: {width: 120, height: 120},
            /**
			 *@desc 参数 适用于模式2
			 *@default {width: 140, height: 145}
			 *@private
             */
            paramicons: {width: 140, height: 145},
            
            /**
			 *@type Number
			 *@desc 显示行数量
			 *@default 2
			 */             
            rows: 2,
            
            /**
			 *@type Number
			 *@desc 显示列数量
			 *@default null
			 */                         
            cols: -1,
            
            /**
			 *@type Number
			 *@desc 
			 *@default null
             */
            iconrender: null,
	    	
			// callbacks
			/**
			 *@desc 点击图标后触发
			 *@param {event} 事件
			 *@param {ui} 
			 *@event
			 *@example
			 *<br/>$("XXX").icon("option", "click", function( event, ui ){  <br/><br/>});
			 */
	    	click: null
		},
		
		/** @lends jazz.icon */
		
		/**
         * @desc 创建组件
		 * @private
         */
		_create: function(){
			this._super();

			this.innerPanel = $('<div style="width: 100%; height: 100%"></div>').appendTo(this.content);
			this.paginator = $('<div></div>');
		},
		
		_init: function(){
			this._super();

			this.content.css("overflow", "hidden");  
			
			this.paramIconData = [];
			this.contentWidth = this.content.width();
			this.contentHeight = this.content.height();

			this._build(this.innerPanel);
			
			this._bindDrag(this.innerPanel);
			if(this.options.iscontroller && this.options.isshowpaginator){
				this._bindPaginator(this.innerPanel); //绑定翻页组件
			}			
		},
		
	   /**
        * @desc ajax请求
        */
        _ajax: function(){
            var params = {
       		   url: this.options.dataurl,
       		   params: this.options.dataurlparams,
	           callback: this._callback  //回调函数
            };
       	    $.DataAdapter.submit(params, this);        	
        },
       
		/**
         * @desc 创建组件元素
         * @param {innerPanel} 内层div容器对象
		 * @private
         */		
		_build: function(innerPanel){
			this.options.activeindex = 0;
			this.options.icontotal = 0;
			this.options.iconpages = 0;
			if(this.options.data){
				this._callback("1");
			}else if(this.options.dataurl){
            	this._ajax();
            }
		},
		
		/**
         * @desc 创建页面元素
         * @param {innerPanel} 内层div容器对象
         * @param {k} 图片总数
		 * @private
         */			
		_buildPage: function(innerPanel, k){
			//每个页面摆放多少个图标
			var navBarHeight = 0;
			var gH = this.options.paramicons.height;  //一个图标总高度，包括上下margin
			var gW = this.options.paramicons.width;   //图标总宽度,包括左右margin
			
			var rows = Math.floor((this.contentHeight-navBarHeight)/gH);     //页面图标行数
			var cols = Math.floor(this.contentWidth/gW);                     //页面图标列数
			
			rows = this.options.rows;
			gH = parseInt(innerPanel.height()/parseInt(rows))-1;
			
			//计算出有多少个页面
			var perIconNum = rows*cols;
			if(perIconNum==0) perIconNum = 1;
			var pageNumber = Math.ceil(k / perIconNum);
			
			$.extend(this.options.paramicons, {rows: rows, cols: rows, pageNumber: pageNumber});
			for(var n=0; n<pageNumber; n++){
				var ul = $('<ul class="jazz-iconUl currDesktop"></ul>').appendTo(innerPanel);
				for(var j=n*perIconNum; j<(n+1)*perIconNum; j++){
					ul.append(this.options.paramicons.iconLiObject[j]);
				}
			}
			if(this.options.iscontroller && this.options.isshowpaginator){
				this._paginator(k, perIconNum);
			}
		},
		
		/**
         * @desc 绑定元素的拖拽事件
         * @param {innerPanel} 内层div容器对象
		 * @private
         */			
		_bindDrag: function(innerPanel){
			//var $ul = this.ul;
			var $this = this;
			
			//桌面可使用鼠标拖动切换
			var dxStart, dxEnd;  //, beginTime, endTime;
			innerPanel.draggable({
				axis: 'x',
				start: function(event,ui) {
					$(this).css("cursor", "move");
					beginTime = new Date().getTime();
					dxStart = event.pageX;
				},
				stop: function(event,ui) {
					var $ul = $this.ul;
					$(this).css("cursor", "inherit");
					//endTime = new Date().getTime();
					dxEnd = event.pageX;
					//var timeCha = endTime - beginTime
					var dxCha = dxEnd - dxStart  //鼠标的拖动距离，根据拖动距离判断是否翻页
						,currDesktop = $(this).find("ul.currDesktop")
						,deskIndex = $ul.index(currDesktop);
					var moveWidth = $this.contentWidth;

					//左移
					if(dxCha < -150 && deskIndex < ($ul.size()-1)) {
						$this._panelMove($(this), $ul, moveWidth, deskIndex+1);
					//右移
					}else if(dxCha > 150 && deskIndex > 0) {
						$this._panelMove($(this), $ul, moveWidth, deskIndex-1);
					}else{
						$(this).animate({
							left: - (deskIndex) * moveWidth
						}, $this.options.scrolltime);
					}
				}	
			});			 
		},
		
		/**
         * @desc 绑定图标事件 
         * @param {ul} ul对象
		 * @private
         */			
		_bindIconEvent: function(ul){
			var $this = this;
			this.ul.children('li').on('click', function(e, i){
				$this._trigger('click', e, $this.paramIconData[$(this).attr('index')]);
			});
		},
		
		/**
         * @desc 绑定翻页组件 
         * @param {innerPanel} 内层div容器对象
		 * @private 
         */			
		_bindPaginator: function(innerPanel){
			var $this = this;
//			$this.paginator.paginator({
//				click: function(e, ui){
//					$this._panelMove(innerPanel, $this.ul, $this.contentWidth, ui.page);
//				}
//			});
			
			 $.each($this.paginator.find(".jazz-icon-item"), function(i){
				 $(this).off("click.paicon").on("click.paicon", function(){
					  $this._panelMove(innerPanel, $this.ul, $this.contentWidth, i);
				 });
			 });
			
		},		
		
		/**
         * @desc 添加左右按钮滚动
         * @param {innerPanel} 内层div容器对象
         * @param {number}     窗体数量
         */	
		_buildButton: function(innerPanel, number){
			var $this = this;
	        this.leftButton = $('<a href="javascript:void(0);" target="_self"></a>').appendTo(innerPanel.parent());
	        this.rightButton = $('<a href="javascript:void(0);" target="_self"></a>').appendTo(innerPanel.parent());	
	        this.leftButton.on('click.icon', function(){
	        	if($this.options.activeindex > 0){
	        		$this._panelMove(innerPanel, $this.ul, $this.contentWidth, $this.options.activeindex-1);
	        	}
	       	});
	       	this.rightButton.on('click.icon', function(){
	       		if($this.options.activeindex < $this.ul.size()-1){
	       			$this._panelMove(innerPanel, $this.ul, $this.contentWidth, $this.options.activeindex+1);
	       		}
//2014-3-19
//加入else @desc最后页时移动到首页
	       		else{
	       			$this._panelMove(innerPanel, $this.ul, $this.contentWidth, 0);
	       		}
//2014-3-19	       		
	       	});
	       	
	       	innerPanel.parent().hover(function(){
	         	 if($this.options.activeindex > 0){
		        	 $this.leftButton.addClass('jazz-iconpanel-leftbtn');
	        	 }
//2014-3-19 @ 注释掉了if 当鼠标放到面板上时，显示按键	         	 
//	         	 if($this.options.activeindex < $this.ul.size()-1){
	         		$this.rightButton.addClass('jazz-iconpanel-rightbtn');	         		 
//	         	 }
//2014-3-19
           },function(){
           	     $this.leftButton.removeClass('jazz-iconpanel-leftbtn');
           	     $this.rightButton.removeClass('jazz-iconpanel-rightbtn');
           }); 
		},		
		
        _callbackCount: function (data, sourceThis){
        	var jsonData = data;
			
			if(!!jsonData && !!jsonData.data){
				 for(var i = 0; i < jsonData.data.length; i++) {
					 var obj = jsonData.data[i];
					 if(obj.count=='0'){
						 $('#img_'+obj.id).hide();
					 }else{
						 $('#img_'+obj.id).show();
						 $('#img_'+obj.id).html(obj.count);
					 }
				 }
			}
        },
      	
        _callback: function (data, sourceThis){
	       	var jsonData = null;
	       	var $this = null;
           if(data == '1'){
	            jsonData = this.options.data;
	            $this = this;
           }else{
	           	jsonData = data;
	           	$this = sourceThis;
           }
           if(jsonData == null || !jsonData){ return; }
           var icondata = jsonData["data"];
           if(icondata && jazz.isArray(icondata)){
        		   var theme = $this.options.theme;
        		   var k = 0;

        		   $this.options.icontotal = icondata.length;
        		   
					if(theme == "2"){  //给青海项目做的
						var gHeight = 0, rows = $this.options.rows;

						var innerHeight = $this.innerPanel.height();
						var all = $this.options.paramicons.width * icondata.length;  
						if(all > $this.innerPanel.width() && innerHeight > 190 && rows==1){
							$this.options.rows = 2;  rows = 2;
						}
						gHeight = parseInt(innerHeight/parseInt($this.options.rows))-1;					
						var paramicons = $this.options.paramicons;
						var iconLiObject = paramicons["iconLiObject"] = []; 
						$.each(icondata, function(i, obj){
							var li = $('<li class="jazz-iconLi2" index="'+k+'"></li>');
								li.css({height: gHeight});						
							var imgClass = '';
							if(obj.count == '0' || obj.count == undefined){
								imgClass = '';
								obj.count = '';
							}else{
								imgClass = 's-icon-img';
							}
							li.append('<span id="img_'+obj.id+'" class="'+imgClass+'">'+obj.count+'</span>');
							li.append('<div><span class="icon2" style="background: url('+obj.imageurl+')"></span><div class="text">'+obj.label+'</div></div>');
							
							var c = li.children('div');
							c.css('top', parseInt((li.height()-100)/2) + 5);
							li.hover(function(){
								c.children('span').css('background', 'url("'+obj.imageurl3+'")');
								c.children('div').addClass('jazz-icon-text2');
							},function(){
								c.children('span').css('background', 'url("'+obj.imageurl+'")');
								c.children('div').removeClass('jazz-icon-text2');
							});
							
							if(i===0){
								paramicons["height"] = li.height();
							}
							iconLiObject.push(li);
							$this.paramIconData[i] = obj; 
							k += 1;
						});
					}else{
						var gHeight = 0, gWidth = 0;
						var rows = $this.options.rows, cols = $this.options.cols;
						var innerHeight = $this.innerPanel.height();
						gHeight = parseInt(innerHeight/parseInt(rows))-2;
						if(cols != -1){
							var innerWidth = $this.innerPanel.width();
							gWidth = parseInt(innerWidth/parseInt(cols))-0;
						}
						var paramicons = $this.options.paramicons;
						var iconLiObject = paramicons["iconLiObject"] = [];
						$.each(icondata, function(i, obj){
							var li = $('<li class="jazz-iconLi2" index="'+k+'"></li>');
								li.css({height: gHeight});
								if(cols != -1){
									li.css({width: gWidth});
								}
							var imgClass = '';
							if(obj.count == '0' || obj.count == undefined){
								imgClass = '';
								obj.count = '';
							}else{
								imgClass = 's-icon-img';
							}
							
							li.append('<span id="img_'+obj.id+'" class="'+imgClass+'">'+obj.count+'</span>');
							
							var iconrender = $this.options.iconrender;
							var flag = true;
							if($.isFunction(iconrender)){
								var str = iconrender.call(this, li, obj);
								li.append(str);
								flag = false;
							}else{
								li.append('<div><span class="icon2" style="background: url('+obj.imageurl+')"></span><div class="text">'+obj.label+'</div></div>');								
							}
							if(flag){
								var c = li.children('div');
								c.css('top', parseInt((li.height()-100)/2) + 5);
								li.hover(function(){
									c.children('span').css('background', 'url("'+obj.imageurl3+'")');
									c.children('div').addClass('jazz-icon-text2');
								},function(){
									c.children('span').css('background', 'url("'+obj.imageurl+'")');
									c.children('div').removeClass('jazz-icon-text2');
								});
							}
							if(i===0){
								paramicons["width"] = li.width();
								paramicons["height"] = li.height();
							}
							iconLiObject.push(li);
							
							$this.paramIconData[i] = obj; 
							k += 1;
						});
					}
					
					var innerPanel = $this.innerPanel;
				
					$this._buildPage(innerPanel, k);
					
					$this.ul = innerPanel.children('ul');
					
					$this.options.iconpages = $this.ul.size();
					
					//绑定图标点击事件
					$this._bindIconEvent($this.ul);
					
					//添加左右按钮
					if($this.options.iscontroller){
						$this._buildButton(innerPanel, $this.options.iconpages);
					}
					
			        $this._updatePosition(innerPanel);   //修改各元素位置
					
		            if($.isFunction($this.callbackfunction)){
		            	$this.callbackfunction.call($this, $this.options);
		            }     
			        
   	       }
       },       
        
		/**
         * @desc 图标的排列
         * @param {ul} ul元素对象
		 * @private
         */			
		_iconsArrange: function(ul) {
			 var $ul = ul;
			
			 var navBarHeight = 0
			     //计算一共有多少图标
			     ,iconNum = $ul.find("li").size();
				
			 	 //存储当前总共有多少桌面图标
			 	 $ul.data('iconNum', iconNum);
			 
			 var gH = this.options.paramicons.height;  //一个图标总高度，包括上下margin
			 var gW = this.options.paramicons.width;   //图标总宽度,包括左右margin
			 
			 gH = parseInt(this.innerPanel.height()/parseInt(this.options.rows))-1;
			 
			 var rows=Math.floor((this.contentHeight-navBarHeight)/gH);     //页面图标行数
			 var cols=Math.floor(this.contentWidth/gW);                    //页面图标列数
			 var curcol=0, currow=0;
			 var mW = 0; mH = 0;
			 if(this.options.theme === 1){
				 mW = 30; mH = 20;
			 }
			 
			 $ul.find("li").css({
			     "position":"absolute",
			     "margin": 0,
			     "left": function(index, value){
				             /* 行排列  */
				   		     var v = (index - cols*currow)*gW + mW;
				   		     if((index+1)%cols == 0){
				   			    currow = currow + 1;                                                
				   		     }
				   		     return v;
//	                         /* 列排列 */				   
//					           var v = curcol*gW + 30;
//					           if((index+1)%rows==0){
//							       curcol=curcol+1;
//					           }
//						       return v;	 
					    },
				 "top": function(index, value){
					         /* 行排列  */
							 var v = curcol*gH + mH;
							 if((index+1)%cols == 0){
								curcol = curcol + 1;
							 }
						     return v;
//	                         /* 行排列 */					       
//							   var v=(index-rows*currow)*gH+20;
//							   if((index+1)%rows==0){
//									currow=currow+1;
//							   }
//						       return v;
				        }
			});
		},       
       
		/**
         * @desc 分页
         * @param {total} 总记录数量
         * @param {rows} 每页显示记录数量
		 * @private
         */			
		_paginator: function(total, rows){
//			this.paginator.paginator({
//				template: ' {PageLinks} ',
//				pagerows: rows,
//				totalrecords: total,
//				pagelinks: 20,
//				theme: '1',
//				name: 'icon_paginator' + Math.random()
//			});

			var width = this.contentWidth;
			//页面数
			var pagenum = Math.ceil(total/rows);

			var p = $('<div style="height: 20px;"></div>').appendTo(this.paginator);
			for(var i=0, len=pagenum; i<len; i++){
				p.append('<span class="jazz-icon-item" index="'+i+'"></span>');
			}
			
			//定位按钮所在位置
			var w = (width - pagenum*20)/2 - 5;
			
			p.css({"padding-left": w});
			p.outerWidth(width);
		},
		
		/**
         * @desc 控制面板的移动
         * @param {innerPanel} 内层div容器对象
         * @param {ul} ul元素对象
         * @param {moveWidth} 翻页时页面的宽度
         * @param {nextIndex} 页面的所引值
		 * @private
         */			
		_panelMove: function(innerPanel, ul, moveWidth, nextIndex) {
			var $this = this;
			innerPanel.stop().animate({
				 left: -(nextIndex) * moveWidth
			}, $this.options.scrolltime, function() {
				 ul.removeClass("currDesktop").eq(nextIndex).addClass("currDesktop");
				 if($this.options.isshowpaginator){
					 //$this.paginator.paginator('option', 'page', nextIndex);
					 $.each($this.paginator.find(".jazz-icon-item"), function(i){
						 if(nextIndex == i){
							 $(this).addClass("jazz-icon-item-current");
						 }else{
							 $(this).removeClass("jazz-icon-item-current");
						 }
					 });
				 }
				 if($this.options.iscontroller){
		         	 if(nextIndex > 0){
			        	 $this.leftButton.addClass('jazz-iconpanel-leftbtn');
		        	 }else{
		        		 $this.leftButton.removeClass('jazz-iconpanel-leftbtn');
		        	 }
	
		        	 if(nextIndex < ul.size()-1){
		        		 $this.rightButton.addClass('jazz-iconpanel-rightbtn');
		        	 }else{
		        		 $this.rightButton.removeClass('jazz-iconpanel-rightbtn');
		        	 }			 
				 }	 
	 		});
			this.options.activeindex = nextIndex;
	
		},		
		
		/**
         * @desc 修改各元素的位置
         * @param {innerPanel} 内层div容器对象
		 * @private
         */			
		_updatePosition: function(innerPanel) {   
			var w = this.contentWidth
			    ,h = this.content.height()
			    ,$this=this
				,ulNumber = this.ul.size();
			    this.moveWidth = w;

				//设置桌面图标容器元素区域大小
				innerPanel.css({width:((w) * ulNumber), height: h});
				innerPanel.children('ul').css({width: w, height: h, 'margin-right':0});
				 
				//添加翻页
				if(this.options.isshowpaginator){
					 this.paginator.appendTo(this.content).css({
						 'position': 'absolute',
						 'left': '0',
						 'bottom': '0',
						 'padding': '0'
					 });
				}
				this.ul.each(function(){
					  $this._iconsArrange($(this));
				});
				 
				//设置面板的偏移
				$this._panelMove(innerPanel, $this.ul, w, $this.options.activeindex);				 
		},		
		
		/**
		 * @desc 外部调用组件的翻页按钮，向左
		 * @example $('XXX').icon('leftside');
		 */
		leftside: function(){
			  var innerPanel = this.innerPanel;
			  if(this.options.activeindex > 0){
				  this._panelMove(innerPanel, this.ul, this.contentWidth, this.options.activeindex-1);
		  	  }			  
			  if(this.options.activeindex == 0){
				  return false;
			  }else{
				  return true;
			  }
		},		
		
	   /**
        * @desc 重新加载数据
        * @param {url} 数据URL
        * @param {params} URL所要带的参数
        * @param {flag} 标记
		* @example $('XXX').icon('loadData', url, params, flag);
        */
        loadData: function(url, params, flag){
       	   this.innerPanel.empty();
       	   this.innerPanel.outerWidth(this.content.width());
	       if(!url){
	       		if(this.options.dataurl != null){
	       			if(!!params){
	       				this.options.dataurlparams = params;
	       			}
	       			if(this.options.isshowpaginator){
	       				this.paginator.remove();
	       				this.paginator = $('<div></div>');
	       			}
	    			this._build(this.innerPanel);
	    			this._bindDrag(this.innerPanel);
	    			if(this.options.isshowpaginator){
	    				this._bindPaginator(this.innerPanel); //绑定翻页组件
	    			}
	       		}
	        }else{
	        	if(this.options.isshowpaginator){
	        		this.paginator.remove();
	        		this.paginator = $('<div></div>');	        	
	        	}
       			if(flag == 'static'){   //static  目的是为了加载SwordPageData数据
            		this.options.data = url;          		
            	}else{
            		if(!!url){
            			this.options.dataurl = url;
            			this.options.data = null;
            		}
            		if(!!params){
            			this.options.dataurlparams = params;
            		}
            	}	
            	
    			this._build(this.innerPanel);
    			this._bindDrag(this.innerPanel);
    			if(this.options.isshowpaginator){
    				this._bindPaginator(this.innerPanel); //绑定翻页组件            	
    			}
	       	}
        },	
        
        getCount: function(id){
        	var img = $('#img_'+id);
	    		img.addClass('s-icon-img');
	    		
	    		if($.trim(img.html())){
	    			return img.html();
	    		}else{
	        		return 0;
	        	}
        },

		/**
		 * @desc 获取总的记录数
		 * @example $('XXX').icon('getTotal');
		 */           
        getTotal: function(){
        	return this.options.icontotal || 0;
        },
        
		/**
		 * @desc 获取总的页面数
		 * @example $('XXX').icon('getPages');
		 */        
        getPages: function(){
        	return this.options.iconpages || 0;
        },
        
        updateCount: function(url, params){
            var param = {
    		   url: url,
    		   params: params,
    		   async: false,
     	       callback: this._callbackCount  //回调函数
           };
           $.DataAdapter.submit(param, this);          	
        },
		  
		/**
		 * @desc 外部调用组件的翻页按钮，向右
		 * @example $('XXX').icon('rightside');
		 */          
		rightside: function(){
			  var innerPanel = this.innerPanel, num = this.ul.size();
		   	  if(this.options.activeindex < this.ul.size()-1){
		   		  this._panelMove(innerPanel, this.ul, this.contentWidth, this.options.activeindex+1);
		   	  }  
		   	  if(this.options.activeindex == this.ul.size()-1){
		   		  return false;
		   	  }else{
		   		  return true;
		   	  }
		 },
		  
       /**
        * @desc 动态添加组件下拉框中的内容
        * @param {data} 静态数据
        * @param {callbackfunction} 回调函数
		* @example $('XXX').icon('reload', data, function(){ });
        */		  
		reload: function(data, callbackfunction) {
			  this.callbackfunction = callbackfunction;
			  this.loadData(data);
		}

	});
	
})(jQuery);
(function( $, factory ){

	if ( jazz.config.isUseRequireJS === true ) {
		define( 'jazz.Tree', ['jquery', 'jazz.BoxComponent'], factory );
	} else {
		factory($);
	}	 
})(jQuery, function($){
(function($){
	var settings = {}, roots = {}, caches = {},
	//default consts of core 
	_consts = {
		className: {
			BUTTON: "button",
			LEVEL: "level",
			ICO_LOADING: "ico_loading",
			SWITCH: "switch"
		},
		event: {
			NODECREATED: "ztree_nodeCreated",
			CLICK: "ztree_click",
			EXPAND: "ztree_expand",
			COLLAPSE: "ztree_collapse",
			ASYNC_SUCCESS: "ztree_async_success",
			ASYNC_ERROR: "ztree_async_error"
		},
		id: {
			A: "_a",
			ICON: "_ico",
			SPAN: "_span",
			SWITCH: "_switch",
			UL: "_ul"
		},
		line: {
			ROOT: "root",
			ROOTS: "roots",
			CENTER: "center",
			BOTTOM: "bottom",
			NOLINE: "noline",
			LINE: "line"
		},
		folder: {
			OPEN: "open",
			CLOSE: "close",
			DOCU: "docu"
		},
		node: {
			CURSELECTED: "curSelectedNode"
		}
	},

	_setting = {
		treeId: "",
		treeObj: null,
		view: {
			addDiyDom: null,
			autoCancelSelected: true,
			dblClickExpand: true,
			expandSpeed: "fast",
			fontCss: {},
			nameIsHTML: false,
			selectedMulti: true,
			showIcon: true,
			showLine: true,
			showTitle: true,
			txtSelectedEnable: false
		},
		data: {
			key: {
				children: "children",
				name: "text",
				title: "",
				url: "url"
			},
			simpleData: {
				enable: false,
				idKey: "id",
				pIdKey: "pId",
				rootPId: null
			},
			keep: {
				parent: false,
				leaf: false
			}
		},
		async: {
			enable: false,
			contentType: "application/x-www-form-urlencoded",
			type: "post",
			dataType: "text",
			url: "",
			autoParam: [],
			otherParam: [],
			dataFilter: null
		},
		callback: {
			beforeAsync:null,
			beforeClick:null,
			beforeDblClick:null,
			beforeRightClick:null,
			beforeMouseDown:null,
			beforeMouseUp:null,
			beforeExpand:null,
			beforeCollapse:null,
			beforeRemove:null,

			onAsyncError:null,
			onAsyncSuccess:null,
			onNodeCreated:null,
			onClick:null,
			onDblClick:null,
			onRightClick:null,
			onMouseDown:null,
			onMouseUp:null,
			onExpand:null,
			onCollapse:null,
			onRemove:null
		}
	},

	_initRoot = function (setting) {                                             
		var r = data.getRoot(setting);
		if (!r) {
			r = {};
			data.setRoot(setting, r);
		}
		r[setting.data.key.children] = [];
		r.expandTriggerFlag = false;
		r.curSelectedList = [];
		r.noSelection = true;
		r.createdNodes = [];
		r.zId = 0;
		r._ver = (new Date()).getTime();
	},
	//default cache of core
	_initCache = function(setting) {
		var c = data.getCache(setting);
		if (!c) {
			c = {};
			data.setCache(setting, c);
		}
		c.nodes = [];
		c.doms = [];
	},
	//default bindEvent of core
	_bindEvent = function(setting) {
		var o = setting.treeObj,
		c = consts.event;
		o.bind(c.NODECREATED, function (event, treeId, node) {
			tools.apply(setting.callback.onNodeCreated, [event, treeId, node]);
		});

		o.bind(c.CLICK, function (event, srcEvent, treeId, node, clickFlag) {
			tools.apply(setting.callback.onClick, [srcEvent, treeId, node, clickFlag]);
		});

		o.bind(c.EXPAND, function (event, treeId, node) {
			tools.apply(setting.callback.onExpand, [event, treeId, node]);
		});

		o.bind(c.COLLAPSE, function (event, treeId, node) {
			tools.apply(setting.callback.onCollapse, [event, treeId, node]);
		});

		o.bind(c.ASYNC_SUCCESS, function (event, treeId, node, msg) {
			tools.apply(setting.callback.onAsyncSuccess, [event, treeId, node, msg]);
		});

		o.bind(c.ASYNC_ERROR, function (event, treeId, node, XMLHttpRequest, textStatus, errorThrown) {
			tools.apply(setting.callback.onAsyncError, [event, treeId, node, XMLHttpRequest, textStatus, errorThrown]);
		});
	},
	_unbindEvent = function(setting) {
		var o = setting.treeObj,
		c = consts.event;
		o.unbind(c.NODECREATED)
		.unbind(c.CLICK)
		.unbind(c.EXPAND)
		.unbind(c.COLLAPSE)
		.unbind(c.ASYNC_SUCCESS)
		.unbind(c.ASYNC_ERROR);                              
	},
	//default event proxy of core
	_eventProxy = function(event) {
		var target = event.target,
		setting = data.getSetting(event.data.treeId),
		tId = "", node = null,
		nodeEventType = "", treeEventType = "",
		nodeEventCallback = null, treeEventCallback = null,
		tmp = null;

		if (tools.eqs(event.type, "mousedown")) {
			treeEventType = "mousedown";
		} else if (tools.eqs(event.type, "mouseup")) {
			treeEventType = "mouseup";
		} else if (tools.eqs(event.type, "contextmenu")) {
			treeEventType = "contextmenu";
		} else if (tools.eqs(event.type, "click")) {
			if (tools.eqs(target.tagName, "span") && target.getAttribute("treeNode"+ consts.id.SWITCH) !== null) {
				tId = tools.getNodeMainDom(target).id;
				nodeEventType = "switchNode";
			} else {
				tmp = tools.getMDom(setting, target, [{tagName:"a", attrName:"treeNode"+consts.id.A}]);
				if (tmp) {
					tId = tools.getNodeMainDom(tmp).id;
					nodeEventType = "clickNode";
				}
			}
		} else if (tools.eqs(event.type, "dblclick")) {
			treeEventType = "dblclick";
			tmp = tools.getMDom(setting, target, [{tagName:"a", attrName:"treeNode"+consts.id.A}]);
			if (tmp) {
				tId = tools.getNodeMainDom(tmp).id;
				nodeEventType = "switchNode";
			}
		}
		if (treeEventType.length > 0 && tId.length == 0) {
			tmp = tools.getMDom(setting, target, [{tagName:"a", attrName:"treeNode"+consts.id.A}]);
			if (tmp) {tId = tools.getNodeMainDom(tmp).id;}
		}
		// event to node
		if (tId.length>0) {
			node = data.getNodeCache(setting, tId);
			switch (nodeEventType) {
				case "switchNode" :
					if (!node.isparent) {
						nodeEventType = "";
					} else if (tools.eqs(event.type, "click")
						|| (tools.eqs(event.type, "dblclick") && tools.apply(setting.view.dblClickExpand, [setting.treeId, node], setting.view.dblClickExpand))) {
						nodeEventCallback = handler.onSwitchNode;
					} else {
						nodeEventType = "";
					}
					break;
				case "clickNode" :
					nodeEventCallback = handler.onClickNode;
					break;
			}
		}
		// event to zTree
		switch (treeEventType) {
			case "mousedown" :
				treeEventCallback = handler.onZTreeMousedown;
				break;
			case "mouseup" :
				treeEventCallback = handler.onZTreeMouseup;
				break;
			case "dblclick" :
				treeEventCallback = handler.onZTreeDblclick;
				break;
			case "contextmenu" :
				treeEventCallback = handler.onZTreeContextmenu;
				break;
		}
		var proxyResult = {
			stop: false,
			node: node,
			nodeEventType: nodeEventType,
			nodeEventCallback: nodeEventCallback,
			treeEventType: treeEventType,
			treeEventCallback: treeEventCallback
		};
		return proxyResult;
	},
	//default init node of core
	_initNode = function(setting, level, n, parentNode, isFirstNode, isLastNode, openFlag) {
		if (!n) return;
		var r = data.getRoot(setting),
		childKey = setting.data.key.children;
		n.level = level;
		n.tId = setting.treeId + "_" + (++r.zId);
		n.parentTId = parentNode ? parentNode.tId : null;
		n.open = (typeof n.open == "string") ? tools.eqs(n.open, "true") : !!n.open;
		if (n[childKey] && n[childKey].length > 0) {
			n.isparent = true;
			n.zAsync = true;
		} else {
			n.isparent = (typeof n.isparent == "string") ? tools.eqs(n.isparent, "true") : !!n.isparent;
			n.open = (n.isparent && !setting.async.enable) ? n.open : false;
			n.zAsync = !n.isparent;
		}
		n.isFirstNode = isFirstNode;
		n.isLastNode = isLastNode;
		n.getParentNode = function() {return data.getNodeCache(setting, n.parentTId);};
		n.getPreNode = function() {return data.getPreNode(setting, n);};
		n.getNextNode = function() {return data.getNextNode(setting, n);};
		n.isAjaxing = false;
		data.fixPIdKeyValue(setting, n);
	},
	_init = {
		bind: [_bindEvent],
		unbind: [_unbindEvent],
		caches: [_initCache],
		nodes: [_initNode],
		proxys: [_eventProxy],
		roots: [_initRoot],
		beforeA: [],
		afterA: [],
		innerBeforeA: [],
		innerAfterA: [],
		zTreeTools: []
	},
	//method of operate data
	data = {
		addNodeCache: function(setting, node) {
			data.getCache(setting).nodes[data.getNodeCacheId(node.tId)] = node;
		},
		getNodeCacheId: function(tId) {
			return tId.substring(tId.lastIndexOf("_")+1);
		},
		addAfterA: function(afterA) {
			_init.afterA.push(afterA);
		},
		addBeforeA: function(beforeA) {
			_init.beforeA.push(beforeA);
		},
		addInnerAfterA: function(innerAfterA) {
			_init.innerAfterA.push(innerAfterA);
		},
		addInnerBeforeA: function(innerBeforeA) {
			_init.innerBeforeA.push(innerBeforeA);
		},
		addInitBind: function(bindEvent) {
			_init.bind.push(bindEvent);
		},
		addInitUnBind: function(unbindEvent) {
			_init.unbind.push(unbindEvent);
		},
		addInitCache: function(initCache) {
			_init.caches.push(initCache);
		},
		addInitNode: function(initNode) {
			_init.nodes.push(initNode);
		},
		addInitProxy: function(initProxy, isFirst) {
			if (!!isFirst) {
				_init.proxys.splice(0,0,initProxy);
			} else {
				_init.proxys.push(initProxy);
			}
		},
		addInitRoot: function(initRoot) {
			_init.roots.push(initRoot);
		},
		addNodesData: function(setting, parentNode, nodes) {
			var childKey = setting.data.key.children;
			if (!parentNode[childKey]) parentNode[childKey] = [];
			if (parentNode[childKey].length > 0) {
				parentNode[childKey][parentNode[childKey].length - 1].isLastNode = false;
				view.setNodeLineIcos(setting, parentNode[childKey][parentNode[childKey].length - 1]);
			}
			parentNode.isparent = true;
			parentNode[childKey] = parentNode[childKey].concat(nodes);
		},
		addSelectedNode: function(setting, node) {
			var root = data.getRoot(setting);
			if (!data.isSelectedNode(setting, node)) {
				root.curSelectedList.push(node);
			}
		},
		addCreatedNode: function(setting, node) {
			if (!!setting.callback.onNodeCreated || !!setting.view.addDiyDom) {
				var root = data.getRoot(setting);
				root.createdNodes.push(node);
			}
		},
		addZTreeTools: function(zTreeTools) {
			_init.zTreeTools.push(zTreeTools);
		},
		exSetting: function(s) {
			$.extend(true, _setting, s);
		},
		fixPIdKeyValue: function(setting, node) {
			if (setting.data.simpleData.enable) {
				node[setting.data.simpleData.pIdKey] = node.parentTId ? node.getParentNode()[setting.data.simpleData.idKey] : setting.data.simpleData.rootPId;
			}
		},
		getAfterA: function(setting, node, array) {
			for (var i=0, j=_init.afterA.length; i<j; i++) {
				_init.afterA[i].apply(this, arguments);
			}
		},
		getBeforeA: function(setting, node, array) {
			for (var i=0, j=_init.beforeA.length; i<j; i++) {
				_init.beforeA[i].apply(this, arguments);
			}
		},
		getInnerAfterA: function(setting, node, array) {
			for (var i=0, j=_init.innerAfterA.length; i<j; i++) {
				_init.innerAfterA[i].apply(this, arguments);
			}
		},
		getInnerBeforeA: function(setting, node, array) {
			for (var i=0, j=_init.innerBeforeA.length; i<j; i++) {
				_init.innerBeforeA[i].apply(this, arguments);
			}
		},
		getCache: function(setting) {
			return caches[setting.treeId];
		},
		getNextNode: function(setting, node) {
			if (!node) return null;
			var childKey = setting.data.key.children,
			p = node.parentTId ? node.getParentNode() : data.getRoot(setting);
			for (var i=0, l=p[childKey].length-1; i<=l; i++) {
				if (p[childKey][i] === node) {
					return (i==l ? null : p[childKey][i+1]);
				}
			}
			return null;
		},
		getNodeByParam: function(setting, nodes, key, value) {
			if (!nodes || !key) return null;
			var childKey = setting.data.key.children;
			for (var i = 0, l = nodes.length; i < l; i++) {
				if (nodes[i][key] == value) {
					return nodes[i];
				}
				var tmp = data.getNodeByParam(setting, nodes[i][childKey], key, value);
				if (tmp) return tmp;
			}
			return null;
		},
		getNodeCache: function(setting, tId) {
			if (!tId) return null;
			var n = caches[setting.treeId].nodes[data.getNodeCacheId(tId)];
			return n ? n : null;
		},
		getNodeName: function(setting, node) {
			var nameKey = setting.data.key.name;
			return "" + node[nameKey];
		},
		getNodeTitle: function(setting, node) {
			var t = setting.data.key.title === "" ? setting.data.key.name : setting.data.key.title;
			return "" + node[t];
		},
		getNodes: function(setting) {
			return data.getRoot(setting)[setting.data.key.children];
		},
		getNodesByParam: function(setting, nodes, key, value) {
			if (!nodes || !key) return [];
			var childKey = setting.data.key.children,
			result = [];
			for (var i = 0, l = nodes.length; i < l; i++) {
				if (nodes[i][key] == value) {
					result.push(nodes[i]);
				}
				result = result.concat(data.getNodesByParam(setting, nodes[i][childKey], key, value));
			}
			return result;
		},
		getNodesByParamFuzzy: function(setting, nodes, key, value) {
			if (!nodes || !key) return [];
			var childKey = setting.data.key.children,
			result = [];
			value = value.toLowerCase();
			for (var i = 0, l = nodes.length; i < l; i++) {
				if (typeof nodes[i][key] == "string" && nodes[i][key].toLowerCase().indexOf(value)>-1) {
					result.push(nodes[i]);
				}
				result = result.concat(data.getNodesByParamFuzzy(setting, nodes[i][childKey], key, value));
			}
			return result;
		},
		getNodesByFilter: function(setting, nodes, filter, isSingle, invokeParam) {
			if (!nodes) return (isSingle ? null : []);
			var childKey = setting.data.key.children,
			result = isSingle ? null : [];
			for (var i = 0, l = nodes.length; i < l; i++) {
				if (tools.apply(filter, [nodes[i], invokeParam], false)) {
					if (isSingle) {return nodes[i];}
					result.push(nodes[i]);
				}
				var tmpResult = data.getNodesByFilter(setting, nodes[i][childKey], filter, isSingle, invokeParam);
				if (isSingle && !!tmpResult) {return tmpResult;}
				result = isSingle ? tmpResult : result.concat(tmpResult);
			}
			return result;
		},
		getPreNode: function(setting, node) {
			if (!node) return null;
			var childKey = setting.data.key.children,
			p = node.parentTId ? node.getParentNode() : data.getRoot(setting);
			for (var i=0, l=p[childKey].length; i<l; i++) {
				if (p[childKey][i] === node) {
					return (i==0 ? null : p[childKey][i-1]);
				}
			}
			return null;
		}, 
		getRoot: function(setting) {
			return setting ? roots[setting.treeId] : null;
		},
		getRoots: function() {
			return roots;
		},
		getSetting: function(treeId) {
			return settings[treeId];
		},
		getSettings: function() {
			return settings;
		},
		getZTreeTools: function(treeId) {
			var r = this.getRoot(this.getSetting(treeId));
			return r ? r.treeTools : null;
		},
		initCache: function(setting) {
			for (var i=0, j=_init.caches.length; i<j; i++) {
				_init.caches[i].apply(this, arguments);
			}
		},
		initNode: function(setting, level, node, parentNode, preNode, nextNode) {
			for (var i=0, j=_init.nodes.length; i<j; i++) {
				_init.nodes[i].apply(this, arguments);
			}
		},
		initRoot: function(setting) {
			for (var i=0, j=_init.roots.length; i<j; i++) {
				_init.roots[i].apply(this, arguments);
			}
		},
		isSelectedNode: function(setting, node) {
			var root = data.getRoot(setting);
			for (var i=0, j=root.curSelectedList.length; i<j; i++) {
				if(node === root.curSelectedList[i]) return true;
			}
			return false;
		},
		removeNodeCache: function(setting, node) {
			var childKey = setting.data.key.children;
			if (node[childKey]) {
				for (var i=0, l=node[childKey].length; i<l; i++) {
					arguments.callee(setting, node[childKey][i]);
				}
			}
			data.getCache(setting).nodes[data.getNodeCacheId(node.tId)] = null;
		},
		removeSelectedNode: function(setting, node) {
			var root = data.getRoot(setting);
			for (var i=0, j=root.curSelectedList.length; i<j; i++) {
				if(node === root.curSelectedList[i] || !data.getNodeCache(setting, root.curSelectedList[i].tId)) {
					root.curSelectedList.splice(i, 1);
					i--;j--;
				}
			}
		},
		setCache: function(setting, cache) {
			caches[setting.treeId] = cache;
		},
		setRoot: function(setting, root) {
			roots[setting.treeId] = root;
		},
		setZTreeTools: function(setting, zTreeTools) {
			for (var i=0, j=_init.zTreeTools.length; i<j; i++) {
				_init.zTreeTools[i].apply(this, arguments);
			}
		},
		transformToArrayFormat: function (setting, nodes) {
			if (!nodes) return [];
			var childKey = setting.data.key.children,
			r = [];
			if (tools.isArray(nodes)) {
				for (var i=0, l=nodes.length; i<l; i++) {
					r.push(nodes[i]);
					if (nodes[i][childKey])
						r = r.concat(data.transformToArrayFormat(setting, nodes[i][childKey]));
				}
			} else {
				r.push(nodes);
				if (nodes[childKey])
					r = r.concat(data.transformToArrayFormat(setting, nodes[childKey]));
			}
			return r;
		},
		transformTozTreeFormat: function(setting, sNodes) {
			var i,l,
			key = setting.data.simpleData.idKey,
			parentKey = setting.data.simpleData.pIdKey,
			childKey = setting.data.key.children;
			if (!key || key=="" || !sNodes) return [];

			if (tools.isArray(sNodes)) {
				var r = [];
				var tmpMap = [];
				for (i=0, l=sNodes.length; i<l; i++) {
					tmpMap[sNodes[i][key]] = sNodes[i];
				}
				for (i=0, l=sNodes.length; i<l; i++) {
					if (tmpMap[sNodes[i][parentKey]] && sNodes[i][key] != sNodes[i][parentKey]) {
						if (!tmpMap[sNodes[i][parentKey]][childKey])
							tmpMap[sNodes[i][parentKey]][childKey] = [];
						tmpMap[sNodes[i][parentKey]][childKey].push(sNodes[i]);
					} else {
						r.push(sNodes[i]);
					}
				}
				return r;
			}else {
				return [sNodes];
			}
		}
	},
	//method of event proxy
	event = {
		bindEvent: function(setting) {
			for (var i=0, j=_init.bind.length; i<j; i++) {
				_init.bind[i].apply(this, arguments);
			}
		},
		unbindEvent: function(setting) {
			for (var i=0, j=_init.unbind.length; i<j; i++) {
				_init.unbind[i].apply(this, arguments);
			}
		},
		bindTree: function(setting) {
			var eventParam = {
				treeId: setting.treeId
			},
			o = setting.treeObj;
			if (!setting.view.txtSelectedEnable) {
				// for can't select text
				o.bind('selectstart', function(e){
					var node;
					var n = e.originalEvent.srcElement.nodeName.toLowerCase();
					return (n === "input" || n === "textarea" );
				}).css({
					"-moz-user-select":"-moz-none"
				});
			}
			o.bind('click', eventParam, event.proxy);
			o.bind('dblclick', eventParam, event.proxy);
			o.bind('mouseover', eventParam, event.proxy);
			o.bind('mouseout', eventParam, event.proxy);
			o.bind('mousedown', eventParam, event.proxy);
			o.bind('mouseup', eventParam, event.proxy);
			o.bind('contextmenu', eventParam, event.proxy);
		},
		unbindTree: function(setting) {
			var o = setting.treeObj;
			o.unbind('click', event.proxy)
			.unbind('dblclick', event.proxy)
			.unbind('mouseover', event.proxy)
			.unbind('mouseout', event.proxy)
			.unbind('mousedown', event.proxy)
			.unbind('mouseup', event.proxy)
			.unbind('contextmenu', event.proxy);
		},
		doProxy: function(e) {
			var results = [];
			for (var i=0, j=_init.proxys.length; i<j; i++) {
				var proxyResult = _init.proxys[i].apply(this, arguments);
				results.push(proxyResult);
				if (proxyResult.stop) {
					break;
				}
			}
			return results;
		},
		proxy: function(e) {
			var setting = data.getSetting(e.data.treeId);
			if (!tools.uCanDo(setting, e)) return true;
			var results = event.doProxy(e),
			r = true, x = false;
			for (var i=0, l=results.length; i<l; i++) {
				var proxyResult = results[i];
				if (proxyResult.nodeEventCallback) {
					x = true;
					r = proxyResult.nodeEventCallback.apply(proxyResult, [e, proxyResult.node]) && r;
				}
				if (proxyResult.treeEventCallback) {
					x = true;
					r = proxyResult.treeEventCallback.apply(proxyResult, [e, proxyResult.node]) && r;
				}
			}
			return r;
		}
	},
	//method of event handler
	handler = {
		onSwitchNode: function (event, node) {
			var setting = data.getSetting(event.data.treeId);
			if (node.open) {
				if (tools.apply(setting.callback.beforeCollapse, [setting.treeId, node], true) == false) return true;
				data.getRoot(setting).expandTriggerFlag = true;
				view.switchNode(setting, node);
			} else {
				if (tools.apply(setting.callback.beforeExpand, [setting.treeId, node], true) == false) return true;
				data.getRoot(setting).expandTriggerFlag = true;
				view.switchNode(setting, node);
			}
			return true;
		},
		onClickNode: function (event, node) {
			var setting = data.getSetting(event.data.treeId),
			clickFlag = ( (setting.view.autoCancelSelected && event.ctrlKey) && data.isSelectedNode(setting, node)) ? 0 : (setting.view.autoCancelSelected && event.ctrlKey && setting.view.selectedMulti) ? 2 : 1;
			if (tools.apply(setting.callback.beforeClick, [setting.treeId, node, clickFlag], true) == false) return true;
			if (clickFlag === 0) {
				view.cancelPreSelectedNode(setting, node);
			} else {
				view.selectNode(setting, node, clickFlag === 2);
			}
			setting.treeObj.trigger(consts.event.CLICK, [event, setting.treeId, node, clickFlag]); 
			//2014-11-14 editorgrid 添加  event.stopPropagation();
			//event.stopPropagation();
			return true;
		},
		onZTreeMousedown: function(event, node) {
			var setting = data.getSetting(event.data.treeId);
			if (tools.apply(setting.callback.beforeMouseDown, [setting.treeId, node], true)) {
				tools.apply(setting.callback.onMouseDown, [event, setting.treeId, node]); 
				//2014-11-14 editorgrid 添加  event.stopPropagation();
				//event.stopPropagation();
			}
			return true;
		},
		onZTreeMouseup: function(event, node) {
			var setting = data.getSetting(event.data.treeId);
			if (tools.apply(setting.callback.beforeMouseUp, [setting.treeId, node], true)) {
				tools.apply(setting.callback.onMouseUp, [event, setting.treeId, node]); 
				//2014-11-14 editorgrid 添加  event.stopPropagation();
				//2014-12-30    影响节点的拖拽
				//event.stopPropagation();
			}
			return true;
		},
		onZTreeDblclick: function(event, node) {
			var setting = data.getSetting(event.data.treeId);
			if (tools.apply(setting.callback.beforeDblClick, [setting.treeId, node], true)) {
				tools.apply(setting.callback.onDblClick, [event, setting.treeId, node]); 
				//2014-11-14 editorgrid 添加  event.stopPropagation();
				//event.stopPropagation();
			}
			return true;
		},
		onZTreeContextmenu: function(event, node) {
			var setting = data.getSetting(event.data.treeId);
			if (tools.apply(setting.callback.beforeRightClick, [setting.treeId, node], true)) {
				tools.apply(setting.callback.onRightClick, [event, setting.treeId, node]); 
				//2014-11-14 editorgrid 添加  event.stopPropagation();
				//event.stopPropagation();
			}
			return (typeof setting.callback.onRightClick) != "function";
		}
	},
	//method of tools for zTree
	tools = {
		apply: function(fun, param, defaultValue) {
			if ((typeof fun) == "function") {
				return fun.apply(zt, param?param:[]);
			}
			return defaultValue;
		},
		canAsync: function(setting, node) {
			var childKey = setting.data.key.children;
			return (setting.async.enable && node && node.isparent && !(node.zAsync || (node[childKey] && node[childKey].length > 0)));
		},
		clone: function (obj){
			if (obj === null) return null;
			var o = tools.isArray(obj) ? [] : {};
			for(var i in obj){
				o[i] = (obj[i] instanceof Date) ? new Date(obj[i].getTime()) : (typeof obj[i] === "object" ? arguments.callee(obj[i]) : obj[i]);
			}
			return o;
		},
		eqs: function(str1, str2) {
			return str1.toLowerCase() === str2.toLowerCase();
		},
		isArray: function(arr) {
			return Object.prototype.toString.apply(arr) === "[object Array]";
		},
		$: function(node, exp, setting) {
			if (!!exp && typeof exp != "string") {
				setting = exp;
				exp = "";
			}
			if (typeof node == "string") {
				return $(node, setting ? setting.treeObj.get(0).ownerDocument : null);
			} else {
				return $("#" + node.tId + exp, setting ? setting.treeObj : null);
			}
		},
		getMDom: function (setting, curDom, targetExpr) {
			if (!curDom) return null;
			while (curDom && curDom.id !== setting.treeId) {
				for (var i=0, l=targetExpr.length; curDom.tagName && i<l; i++) {
					if (tools.eqs(curDom.tagName, targetExpr[i].tagName) && curDom.getAttribute(targetExpr[i].attrName) !== null) {
						return curDom;
					}
				}
				curDom = curDom.parentNode;
			}
			return null;
		},
		getNodeMainDom:function(target) {
			return ($(target).parent("li").get(0) || $(target).parentsUntil("li").parent().get(0));
		},
		isChildOrSelf: function(dom, parentId) {
			return ( $(dom).closest("#" + parentId).length> 0 );
		},
		uCanDo: function(setting, e) {
			return true;
		}
	},
	//method of operate ztree dom
	view = {
		addNodes: function(setting, parentNode, newNodes, isSilent) {
			if (setting.data.keep.leaf && parentNode && !parentNode.isparent) {
				return;
			}
			if (!tools.isArray(newNodes)) {
				newNodes = [newNodes];
			}
			if (setting.data.simpleData.enable) {
				newNodes = data.transformTozTreeFormat(setting, newNodes);
			}
			if (parentNode) {
				var target_switchObj = $$(parentNode, consts.id.SWITCH, setting),
				target_icoObj = $$(parentNode, consts.id.ICON, setting),
				target_ulObj = $$(parentNode, consts.id.UL, setting);

				if (!parentNode.open) {
					view.replaceSwitchClass(parentNode, target_switchObj, consts.folder.CLOSE);
					view.replaceIcoClass(parentNode, target_icoObj, consts.folder.CLOSE);
					parentNode.open = false;
					target_ulObj.css({
						"display": "none"
					});
				}

				data.addNodesData(setting, parentNode, newNodes);
				view.createNodes(setting, parentNode.level + 1, newNodes, parentNode);
				if (!isSilent) {
					view.expandCollapseParentNode(setting, parentNode, true);
				}
			} else {
				data.addNodesData(setting, data.getRoot(setting), newNodes);
				view.createNodes(setting, 0, newNodes, null);
			}
		},
		appendNodes: function(setting, level, nodes, parentNode, initFlag, openFlag) {
			if (!nodes) return [];
			var html = [],
			childKey = setting.data.key.children;
			for (var i = 0, l = nodes.length; i < l; i++) {
				var node = nodes[i];
				node.id = $.trim(node.id);
				if (initFlag) {
					var tmpPNode = (parentNode) ? parentNode: data.getRoot(setting),
					tmpPChild = tmpPNode[childKey],
					isFirstNode = ((tmpPChild.length == nodes.length) && (i == 0)),
					isLastNode = (i == (nodes.length - 1));
					data.initNode(setting, level, node, parentNode, isFirstNode, isLastNode, openFlag);
					data.addNodeCache(setting, node);
				}

				var childHtml = [];
				if (node[childKey] && node[childKey].length > 0) {
					//make child html first, because checkType
					childHtml = view.appendNodes(setting, level + 1, node[childKey], node, initFlag, openFlag && node.open);
				}
				if (openFlag) {

					view.makeDOMNodeMainBefore(html, setting, node);
					view.makeDOMNodeLine(html, setting, node);
					data.getBeforeA(setting, node, html);
					view.makeDOMNodeNameBefore(html, setting, node);
					data.getInnerBeforeA(setting, node, html);
					view.makeDOMNodeIcon(html, setting, node);
					data.getInnerAfterA(setting, node, html);
					view.makeDOMNodeNameAfter(html, setting, node);
					data.getAfterA(setting, node, html);
					if (node.isparent && node.open) {
						view.makeUlHtml(setting, node, html, childHtml.join(''));
					}
					view.makeDOMNodeMainAfter(html, setting, node);
					data.addCreatedNode(setting, node);
				}
			}
			return html;
		},
		appendParentULDom: function(setting, node) {
			var html = [],
			nObj = $$(node, setting);
			if (!nObj.get(0) && !!node.parentTId) {
				view.appendParentULDom(setting, node.getParentNode());
				nObj = $$(node, setting);
			}
			var ulObj = $$(node, consts.id.UL, setting);
			if (ulObj.get(0)) {
				ulObj.remove();
			}
			var childKey = setting.data.key.children,
			childHtml = view.appendNodes(setting, node.level+1, node[childKey], node, false, true);
			view.makeUlHtml(setting, node, html, childHtml.join(''));
			nObj.append(html.join(''));
		},
		asyncNode: function(setting, node, isSilent, callback) {
			var i, l;
			if (node && !node.isparent) {
				tools.apply(callback);
				return false;
			} else if (node && node.isAjaxing) {
				return false;
			} else if (tools.apply(setting.callback.beforeAsync, [setting.treeId, node], true) == false) {
				tools.apply(callback);
				return false;
			}
			if (node) {
				node.isAjaxing = true;
				var icoObj = $$(node, consts.id.ICON, setting);
				icoObj.attr({"style":"", "class":consts.className.BUTTON + " " + consts.className.ICO_LOADING});
			}

			var tmpParam = {};
			for (i = 0, l = setting.async.autoParam.length; node && i < l; i++) {
				var pKey = setting.async.autoParam[i].split("="), spKey = pKey;
				if (pKey.length>1) {
					spKey = pKey[1];
					pKey = pKey[0];
				}
				tmpParam[spKey] = node[pKey];
			}
			if (tools.isArray(setting.async.otherParam)) {
				for (i = 0, l = setting.async.otherParam.length; i < l; i += 2) {
					tmpParam[setting.async.otherParam[i]] = setting.async.otherParam[i + 1];
				}
			} else {
				for (var p in setting.async.otherParam) {
					tmpParam[p] = setting.async.otherParam[p];
				}
			}

			var _tmpV = data.getRoot(setting)._ver;
			
			/**
			 *@desc 重新封装zTree中的ajax提交方法中的data参数，符合sword的参数格式
			 *@author hanzhiwei
			 */
			//--开始--
			var postData = new Object();
			var dataArray = new Array();
			var obj = new Object();
			if(jazz.config.platForm=='sword'){
				if(!!tmpParam){
					$.each(tmpParam, function(k, v){
						var str = {'name': k, 'value': v +'', 'sword': 'attr'};
						dataArray.push(eval(str));
					});
					postData["data"] = dataArray;
				}
				var treeurl = tools.apply(setting.async.url, [setting.treeId, node], setting.async.url);
				if(!!treeurl){
					postData["tid"] = treeurl;
				}
				obj["postData"] = JSON.stringify(postData);
			}else{
				if(!!tmpParam){
					$.each(tmpParam, function(k, v){
						var str = {'name': k, 'data': v +'', 'vtype': 'attr'};
						dataArray.push(eval(str));
					});
					postData["data"] = dataArray;
				}
				obj["postData"] = JSON.stringify(postData);
			}
	 		tmpParam = obj;
	 		//--结束--
			$.ajax({
				contentType: setting.async.contentType,
				type: setting.async.type,
				url: tools.apply(setting.async.url, [setting.treeId, node], setting.async.url),
				data: tmpParam,
				dataType: setting.async.dataType,
				success: function(msg) {
					 /**
					 *@desc 重新封装zTree中的ajax提交方法中返回回调函数的msg参数，符合sword的参数格式
					 *@author hanzhiwei
					 */
					//--开始--
					if(msg.data.length>0){
						msg = msg.data[0].data;
					}
					//--结束--
					if (_tmpV != data.getRoot(setting)._ver) {
						return;
					}
					var newNodes = [];
					try {
						if (!msg || msg.length == 0) {
							newNodes = [];
						} else if (typeof msg == "string") {
							newNodes = eval("(" + msg + ")");
						} else {
							newNodes = msg;
						}
					} catch(err) {
						newNodes = msg;
					}

					if (node) {
						node.isAjaxing = null;
						node.zAsync = true;
					}
					view.setNodeLineIcos(setting, node);
					if (newNodes && newNodes !== "") {
						newNodes = tools.apply(setting.async.dataFilter, [setting.treeId, node, newNodes], newNodes);
						view.addNodes(setting, node, !!newNodes ? tools.clone(newNodes) : [], !!isSilent);
					} else {
						view.addNodes(setting, node, [], !!isSilent);
					}
					setting.treeObj.trigger(consts.event.ASYNC_SUCCESS, [setting.treeId, node, msg]);
					tools.apply(callback);
				},
				error: function(XMLHttpRequest, textStatus, errorThrown) {
					if (_tmpV != data.getRoot(setting)._ver) {
						return;
					}
					if (node) node.isAjaxing = null;
					view.setNodeLineIcos(setting, node);
					setting.treeObj.trigger(consts.event.ASYNC_ERROR, [setting.treeId, node, XMLHttpRequest, textStatus, errorThrown]);
				}
			});
			return true;
		},
		cancelPreSelectedNode: function (setting, node) {
			var list = data.getRoot(setting).curSelectedList;
			for (var i=0, j=list.length-1; j>=i; j--) {
				if (!node || node === list[j]) {
					$$(list[j], consts.id.A, setting).removeClass(consts.node.CURSELECTED);
					if (node) {
						data.removeSelectedNode(setting, node);
						break;
					}
				}
			}
			if (!node) data.getRoot(setting).curSelectedList = [];
		},
		createNodeCallback: function(setting) {
			if (!!setting.callback.onNodeCreated || !!setting.view.addDiyDom) {
				var root = data.getRoot(setting);
				while (root.createdNodes.length>0) {
					var node = root.createdNodes.shift();
					tools.apply(setting.view.addDiyDom, [setting.treeId, node]);
					if (!!setting.callback.onNodeCreated) {
						setting.treeObj.trigger(consts.event.NODECREATED, [setting.treeId, node]);
					}
				}
			}
		},
		createNodes: function(setting, level, nodes, parentNode) {
			if (!nodes || nodes.length == 0) return;
			var root = data.getRoot(setting),
			childKey = setting.data.key.children,
			openFlag = !parentNode || parentNode.open || !!$$(parentNode[childKey][0], setting).get(0);
			root.createdNodes = [];
			var zTreeHtml = view.appendNodes(setting, level, nodes, parentNode, true, openFlag);
			if (!parentNode) {
				setting.treeObj.append(zTreeHtml.join(''));
			} else {
				var ulObj = $$(parentNode, consts.id.UL, setting);
				if (ulObj.get(0)) {
					ulObj.append(zTreeHtml.join(''));
				}
			}
			view.createNodeCallback(setting);
		},
		destroy: function(setting) {
			if (!setting) return;
			data.initCache(setting);
			data.initRoot(setting);
			event.unbindTree(setting);
			event.unbindEvent(setting);
			setting.treeObj.empty();
		},
		expandCollapseNode: function(setting, node, expandFlag, animateFlag, callback) {
			var root = data.getRoot(setting),
			childKey = setting.data.key.children;
			if (!node) {
				tools.apply(callback, []);
				return;
			}
			if (root.expandTriggerFlag) {
				var _callback = callback;
				callback = function(){
					if (_callback) _callback();
					if (node.open) {
						setting.treeObj.trigger(consts.event.EXPAND, [setting.treeId, node]);
					} else {
						setting.treeObj.trigger(consts.event.COLLAPSE, [setting.treeId, node]);
					}
				};
				root.expandTriggerFlag = false;
			}
			if (!node.open && node.isparent && ((!$$(node, consts.id.UL, setting).get(0)) || (node[childKey] && node[childKey].length>0 && !$$(node[childKey][0], setting).get(0)))) {
				view.appendParentULDom(setting, node);
				view.createNodeCallback(setting);
			}
			if (node.open == expandFlag) {
				tools.apply(callback, []);
				return;
			}
			var ulObj = $$(node, consts.id.UL, setting),
			switchObj = $$(node, consts.id.SWITCH, setting),
			icoObj = $$(node, consts.id.ICON, setting);

			if (node.isparent) {
				node.open = !node.open;
				if (node.iconOpen && node.iconClose) {
					icoObj.attr("style", view.makeNodeIcoStyle(setting, node));
				}

				if (node.open) {
					view.replaceSwitchClass(node, switchObj, consts.folder.OPEN);
					view.replaceIcoClass(node, icoObj, consts.folder.OPEN);
					if (animateFlag == false || setting.view.expandSpeed == "") {
						ulObj.show();
						tools.apply(callback, []);
					} else {
						if (node[childKey] && node[childKey].length > 0) {
							ulObj.slideDown(setting.view.expandSpeed, callback);
						} else {
							ulObj.show();
							tools.apply(callback, []);
						}
					}
				} else {
					view.replaceSwitchClass(node, switchObj, consts.folder.CLOSE);
					view.replaceIcoClass(node, icoObj, consts.folder.CLOSE);
					if (animateFlag == false || setting.view.expandSpeed == "" || !(node[childKey] && node[childKey].length > 0)) {
						ulObj.hide();
						tools.apply(callback, []);
					} else {
						ulObj.slideUp(setting.view.expandSpeed, callback);
					}
				}
			} else {
				tools.apply(callback, []);
			}
		},
		expandCollapseParentNode: function(setting, node, expandFlag, animateFlag, callback) {
			if (!node) return;
			if (!node.parentTId) {
				view.expandCollapseNode(setting, node, expandFlag, animateFlag, callback);
				return;
			} else {
				view.expandCollapseNode(setting, node, expandFlag, animateFlag);
			}
			if (node.parentTId) {
				view.expandCollapseParentNode(setting, node.getParentNode(), expandFlag, animateFlag, callback);
			}
		},
		expandCollapseSonNode: function(setting, node, expandFlag, animateFlag, callback) {
			var root = data.getRoot(setting),
			childKey = setting.data.key.children,
			treeNodes = (node) ? node[childKey]: root[childKey],
			selfAnimateSign = (node) ? false : animateFlag,
			expandTriggerFlag = data.getRoot(setting).expandTriggerFlag;
			data.getRoot(setting).expandTriggerFlag = false;
			if (treeNodes) {
				for (var i = 0, l = treeNodes.length; i < l; i++) {
					if (treeNodes[i]) view.expandCollapseSonNode(setting, treeNodes[i], expandFlag, selfAnimateSign);
				}
			}
			data.getRoot(setting).expandTriggerFlag = expandTriggerFlag;
			view.expandCollapseNode(setting, node, expandFlag, animateFlag, callback );
		},
		makeDOMNodeIcon: function(html, setting, node) {
			var nameStr = data.getNodeName(setting, node),
			name = setting.view.nameIsHTML ? nameStr : nameStr.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
			html.push("<span id='", node.tId, consts.id.ICON,
				"' title='' treeNode", consts.id.ICON," class='", view.makeNodeIcoClass(setting, node),
				"' style='", view.makeNodeIcoStyle(setting, node), "'></span><span id='", node.tId, consts.id.SPAN,
				"'>",name,"</span>");
		},
		makeDOMNodeLine: function(html, setting, node) {
			html.push("<span id='", node.tId, consts.id.SWITCH,	"' title='' class='", view.makeNodeLineClass(setting, node), "' treeNode", consts.id.SWITCH,"></span>");
		},
		makeDOMNodeMainAfter: function(html, setting, node) {
			html.push("</li>");
		},
		makeDOMNodeMainBefore: function(html, setting, node) {
			html.push("<li id='", node.tId, "' class='", consts.className.LEVEL, node.level,"' tabindex='0' hidefocus='true' treenode>");
		},
		makeDOMNodeNameAfter: function(html, setting, node) {
			html.push("</a>");
		},
		makeDOMNodeNameBefore: function(html, setting, node) {
			var title = data.getNodeTitle(setting, node),
			url = view.makeNodeUrl(setting, node),
			fontcss = view.makeNodeFontCss(setting, node),
			fontStyle = [];
			for (var f in fontcss) {
				fontStyle.push(f, ":", fontcss[f], ";");
			}
			html.push("<a id='", node.tId, consts.id.A, "' class='", consts.className.LEVEL, node.level,"' treeNode", consts.id.A," onclick=\"", (node.click || ''),
				"\" ", ((url != null && url.length > 0) ? "href='" + url + "'" : ""), " target='",view.makeNodeTarget(node),"' style='", fontStyle.join(''),
				"'");
			if (tools.apply(setting.view.showTitle, [setting.treeId, node], setting.view.showTitle) && title) {html.push("title='", title.replace(/'/g,"&#39;").replace(/</g,'&lt;').replace(/>/g,'&gt;'),"'");}
			html.push(">");
		},
		makeNodeFontCss: function(setting, node) {
			var fontCss = tools.apply(setting.view.fontCss, [setting.treeId, node], setting.view.fontCss);
			return (fontCss && ((typeof fontCss) != "function")) ? fontCss : {};
		},
		makeNodeIcoClass: function(setting, node) {
			var icoCss = ["ico"];
			if (!node.isAjaxing) {
				icoCss[0] = (node.iconskin ? node.iconskin + "_" : "") + icoCss[0];
				if (node.isparent) {
					icoCss.push(node.open ? consts.folder.OPEN : consts.folder.CLOSE);
				} else {
					icoCss.push(consts.folder.DOCU);
				}
			}
			return consts.className.BUTTON + " " + icoCss.join('_');
		},
		makeNodeIcoStyle: function(setting, node) {
			var icoStyle = [];
			if (!node.isAjaxing) {
				var icon = (node.isparent && node.iconOpen && node.iconClose) ? (node.open ? node.iconOpen : node.iconClose) : node.icon;
				if (icon) icoStyle.push("background:url(", icon, ") 0 0 no-repeat;");
				if (setting.view.showIcon == false || !tools.apply(setting.view.showIcon, [setting.treeId, node], true)) {
					icoStyle.push("width:0px;height:0px;");
				}
			}
			return icoStyle.join('');
		},
		makeNodeLineClass: function(setting, node) {
			var lineClass = [];
			if (setting.view.showLine) {
				if (node.level == 0 && node.isFirstNode && node.isLastNode) {
					lineClass.push(consts.line.ROOT);
				} else if (node.level == 0 && node.isFirstNode) {
					lineClass.push(consts.line.ROOTS);
				} else if (node.isLastNode) {
					lineClass.push(consts.line.BOTTOM);
				} else {
					lineClass.push(consts.line.CENTER);
				}
			} else {
				lineClass.push(consts.line.NOLINE);
			}
			if (node.isparent) {
				lineClass.push(node.open ? consts.folder.OPEN : consts.folder.CLOSE);
			} else {
				lineClass.push(consts.folder.DOCU);
			}
			return view.makeNodeLineClassEx(node) + lineClass.join('_');
		},
		makeNodeLineClassEx: function(node) {
			return consts.className.BUTTON + " " + consts.className.LEVEL + node.level + " " + consts.className.SWITCH + " ";
		},
		makeNodeTarget: function(node) {
			return (node.target || "_blank");
		},
		makeNodeUrl: function(setting, node) {
			var urlKey = setting.data.key.url;
			return node[urlKey] ? node[urlKey] : null;
		},
		makeUlHtml: function(setting, node, html, content) {
			html.push("<ul id='", node.tId, consts.id.UL, "' class='", consts.className.LEVEL, node.level, " ", view.makeUlLineClass(setting, node), "' style='display:", (node.open ? "block": "none"),"'>");
			html.push(content);
			html.push("</ul>");
		},
		makeUlLineClass: function(setting, node) {
			return ((setting.view.showLine && !node.isLastNode) ? consts.line.LINE : "");
		},
		removeChildNodes: function(setting, node) {
			if (!node) return;
			var childKey = setting.data.key.children,
			nodes = node[childKey];
			if (!nodes) return;

			for (var i = 0, l = nodes.length; i < l; i++) {
				data.removeNodeCache(setting, nodes[i]);
			}
			data.removeSelectedNode(setting);
			delete node[childKey];

			if (!setting.data.keep.parent) {
				node.isparent = false;
				node.open = false;
				var tmp_switchObj = $$(node, consts.id.SWITCH, setting),
				tmp_icoObj = $$(node, consts.id.ICON, setting);
				view.replaceSwitchClass(node, tmp_switchObj, consts.folder.DOCU);
				view.replaceIcoClass(node, tmp_icoObj, consts.folder.DOCU);
				$$(node, consts.id.UL, setting).remove();
			} else {
				$$(node, consts.id.UL, setting).empty();
			}
		},
		setFirstNode: function(setting, parentNode) {
			var childKey = setting.data.key.children, childLength = parentNode[childKey].length;
			if ( childLength > 0) {
				parentNode[childKey][0].isFirstNode = true;
			}
		},
		setLastNode: function(setting, parentNode) {
			var childKey = setting.data.key.children, childLength = parentNode[childKey].length;
			if ( childLength > 0) {
				parentNode[childKey][childLength - 1].isLastNode = true;
			}
		},
		removeNode: function(setting, node) {
			var root = data.getRoot(setting),
			childKey = setting.data.key.children,
			parentNode = (node.parentTId) ? node.getParentNode() : root;

			node.isFirstNode = false;
			node.isLastNode = false;
			node.getPreNode = function() {return null;};
			node.getNextNode = function() {return null;};

			if (!data.getNodeCache(setting, node.tId)) {
				return;
			}

			$$(node, setting).remove();
			data.removeNodeCache(setting, node);
			data.removeSelectedNode(setting, node);

			for (var i = 0, l = parentNode[childKey].length; i < l; i++) {
				if (parentNode[childKey][i].tId == node.tId) {
					parentNode[childKey].splice(i, 1);
					break;
				}
			}
			view.setFirstNode(setting, parentNode);
			view.setLastNode(setting, parentNode);

			var tmp_ulObj,tmp_switchObj,tmp_icoObj,
			childLength = parentNode[childKey].length;

			//repair nodes old parent
			if (!setting.data.keep.parent && childLength == 0) {
				//old parentNode has no child nodes
				parentNode.isparent = false;
				parentNode.open = false;
				tmp_ulObj = $$(parentNode, consts.id.UL, setting);
				tmp_switchObj = $$(parentNode, consts.id.SWITCH, setting);
				tmp_icoObj = $$(parentNode, consts.id.ICON, setting);
				view.replaceSwitchClass(parentNode, tmp_switchObj, consts.folder.DOCU);
				view.replaceIcoClass(parentNode, tmp_icoObj, consts.folder.DOCU);
				tmp_ulObj.css("display", "none");

			} else if (setting.view.showLine && childLength > 0) {
				//old parentNode has child nodes
				var newLast = parentNode[childKey][childLength - 1];
				tmp_ulObj = $$(newLast, consts.id.UL, setting);
				tmp_switchObj = $$(newLast, consts.id.SWITCH, setting);
				tmp_icoObj = $$(newLast, consts.id.ICON, setting);
				if (parentNode == root) {
					if (parentNode[childKey].length == 1) {
						//node was root, and ztree has only one root after move node
						view.replaceSwitchClass(newLast, tmp_switchObj, consts.line.ROOT);
					} else {
						var tmp_first_switchObj = $$(parentNode[childKey][0], consts.id.SWITCH, setting);
						view.replaceSwitchClass(parentNode[childKey][0], tmp_first_switchObj, consts.line.ROOTS);
						view.replaceSwitchClass(newLast, tmp_switchObj, consts.line.BOTTOM);
					}
				} else {
					view.replaceSwitchClass(newLast, tmp_switchObj, consts.line.BOTTOM);
				}
				tmp_ulObj.removeClass(consts.line.LINE);
			}
		},
		replaceIcoClass: function(node, obj, newName) {
			if (!obj || node.isAjaxing) return;
			var tmpName = obj.attr("class");
			if (tmpName == undefined) return;
			var tmpList = tmpName.split("_");
			switch (newName) {
				case consts.folder.OPEN:
				case consts.folder.CLOSE:
				case consts.folder.DOCU:
					tmpList[tmpList.length-1] = newName;
					break;
			}
			obj.attr("class", tmpList.join("_"));
		},
		replaceSwitchClass: function(node, obj, newName) {
			if (!obj) return;
			var tmpName = obj.attr("class");
			if (tmpName == undefined) return;
			var tmpList = tmpName.split("_");
			switch (newName) {
				case consts.line.ROOT:
				case consts.line.ROOTS:
				case consts.line.CENTER:
				case consts.line.BOTTOM:
				case consts.line.NOLINE:
					tmpList[0] = view.makeNodeLineClassEx(node) + newName;
					break;
				case consts.folder.OPEN:
				case consts.folder.CLOSE:
				case consts.folder.DOCU:
					tmpList[1] = newName;
					break;
			}
			obj.attr("class", tmpList.join("_"));
			if (newName !== consts.folder.DOCU) {
				obj.removeAttr("disabled");
			} else {
				obj.attr("disabled", "disabled");
			}
		},
		selectNode: function(setting, node, addFlag) {
			if (!addFlag) {
				view.cancelPreSelectedNode(setting);
			}
			$$(node, consts.id.A, setting).addClass(consts.node.CURSELECTED);
			data.addSelectedNode(setting, node);
		},
		setNodeFontCss: function(setting, treeNode) {
			var aObj = $$(treeNode, consts.id.A, setting),
			fontCss = view.makeNodeFontCss(setting, treeNode);
			if (fontCss) {
				aObj.css(fontCss);
			}
		},
		setNodeLineIcos: function(setting, node) {
			if (!node) return;
			var switchObj = $$(node, consts.id.SWITCH, setting),
			ulObj = $$(node, consts.id.UL, setting),
			icoObj = $$(node, consts.id.ICON, setting),
			ulLine = view.makeUlLineClass(setting, node);
			if (ulLine.length==0) {
				ulObj.removeClass(consts.line.LINE);
			} else {
				ulObj.addClass(ulLine);
			}
			switchObj.attr("class", view.makeNodeLineClass(setting, node));
			if (node.isparent) {
				switchObj.removeAttr("disabled");
			} else {
				switchObj.attr("disabled", "disabled");
			}
			icoObj.removeAttr("style");
			icoObj.attr("style", view.makeNodeIcoStyle(setting, node));
			icoObj.attr("class", view.makeNodeIcoClass(setting, node));
		},
		setNodeName: function(setting, node) {
			var title = data.getNodeTitle(setting, node),
			nObj = $$(node, consts.id.SPAN, setting);
			nObj.empty();
			if (setting.view.nameIsHTML) {
				nObj.html(data.getNodeName(setting, node));
			} else {
				nObj.text(data.getNodeName(setting, node));
			}
			if (tools.apply(setting.view.showTitle, [setting.treeId, node], setting.view.showTitle)) {
				var aObj = $$(node, consts.id.A, setting);
				aObj.attr("title", !title ? "" : title);
			}
		},
		setNodeTarget: function(setting, node) {
			var aObj = $$(node, consts.id.A, setting);
			aObj.attr("target", view.makeNodeTarget(node));
		},
		setNodeUrl: function(setting, node) {
			var aObj = $$(node, consts.id.A, setting),
			url = view.makeNodeUrl(setting, node);
			if (url == null || url.length == 0) {
				aObj.removeAttr("href");
			} else {
				aObj.attr("href", url);
			}
		},
		switchNode: function(setting, node) {
			if (node.open || !tools.canAsync(setting, node)) {
				view.expandCollapseNode(setting, node, !node.open);
			} else if (setting.async.enable) {
				if (!view.asyncNode(setting, node)) {
					view.expandCollapseNode(setting, node, !node.open);
					return;
				}
			} else if (node) {
				view.expandCollapseNode(setting, node, !node.open);
			}
		}
	};
	// zTree defind
	$.fn.zTree = {
		consts : _consts,
		_z : {
			tools: tools,
			view: view,
			event: event,
			data: data
		},
		getZTreeObj: function(treeId) {
			var o = data.getZTreeTools(treeId);
			return o ? o : null;
		},
		destroy: function(treeId) {
			if (!!treeId && treeId.length > 0) {
				view.destroy(data.getSetting(treeId));
			} else {
				for(var s in settings) {
					view.destroy(settings[s]);
				}
			}
		},
		init: function(obj, zSetting, zNodes) {
			var setting = tools.clone(_setting);
			$.extend(true, setting, zSetting);
			setting.treeId = obj.attr("id");
			setting.treeObj = obj;
			setting.treeObj.empty();
			settings[setting.treeId] = setting;
			//For some older browser,(e.g., ie6)
			if(typeof document.body.style.maxHeight === "undefined") {
				setting.view.expandSpeed = "";
			}
			data.initRoot(setting);
			var root = data.getRoot(setting),
			childKey = setting.data.key.children;
			zNodes = zNodes ? tools.clone(tools.isArray(zNodes)? zNodes : [zNodes]) : [];
			if (setting.data.simpleData.enable) {
				root[childKey] = data.transformTozTreeFormat(setting, zNodes);
			} else {
				root[childKey] = zNodes;
			}

			data.initCache(setting);
			event.unbindTree(setting);
			event.bindTree(setting);
			event.unbindEvent(setting);
			event.bindEvent(setting);

			var zTreeTools = {
				setting : setting,
				addNodes : function(parentNode, newNodes, isSilent) {
					if (!newNodes) return null;
					if (!parentNode) parentNode = null;
					if (parentNode && !parentNode.isparent && setting.data.keep.leaf) return null;
					var xNewNodes = tools.clone(tools.isArray(newNodes)? newNodes: [newNodes]);
					function addCallback() {
						view.addNodes(setting, parentNode, xNewNodes, (isSilent==true));
					}

					if (tools.canAsync(setting, parentNode)) {
						view.asyncNode(setting, parentNode, isSilent, addCallback);
					} else {
						addCallback();
					}
					return xNewNodes;
				},
				cancelSelectedNode : function(node) {
					view.cancelPreSelectedNode(setting, node);
				},
				destroy : function() {
					view.destroy(setting);
				},
				expandAll : function(expandFlag) {
					expandFlag = !!expandFlag;
					view.expandCollapseSonNode(setting, null, expandFlag, true);
					return expandFlag;
				},
				expandNode : function(node, expandFlag, sonSign, focus, callbackFlag) {
					if (!node || !node.isparent) return null;
					if (expandFlag !== true && expandFlag !== false) {
						expandFlag = !node.open;
					}
					callbackFlag = !!callbackFlag;

					if (callbackFlag && expandFlag && (tools.apply(setting.callback.beforeExpand, [setting.treeId, node], true) == false)) {
						return null;
					} else if (callbackFlag && !expandFlag && (tools.apply(setting.callback.beforeCollapse, [setting.treeId, node], true) == false)) {
						return null;
					}
					if (expandFlag && node.parentTId) {
						view.expandCollapseParentNode(setting, node.getParentNode(), expandFlag, false);
					}
					if (expandFlag === node.open && !sonSign) {
						return null;
					}

					data.getRoot(setting).expandTriggerFlag = callbackFlag;
					if (!tools.canAsync(setting, node) && sonSign) {
						view.expandCollapseSonNode(setting, node, expandFlag, true, function() {
							if (focus !== false) {try{$$(node, setting).focus().blur();}catch(e){}}
						});
					} else {
						node.open = !expandFlag;
						view.switchNode(this.setting, node);
						if (focus !== false) {try{$$(node, setting).focus().blur();}catch(e){}}
					}
					return expandFlag;
				},
				getNodes : function() {
					return data.getNodes(setting);
				},
				getNodeByParam : function(key, value, parentNode) {
					if (!key) return null;
					return data.getNodeByParam(setting, parentNode?parentNode[setting.data.key.children]:data.getNodes(setting), key, value);
				},
				getNodeByTId : function(tId) {
					return data.getNodeCache(setting, tId);
				},
				getNodesByParam : function(key, value, parentNode) {
					if (!key) return null;
					return data.getNodesByParam(setting, parentNode?parentNode[setting.data.key.children]:data.getNodes(setting), key, value);
				},
				getNodesByParamFuzzy : function(key, value, parentNode) {
					if (!key) return null;
					return data.getNodesByParamFuzzy(setting, parentNode?parentNode[setting.data.key.children]:data.getNodes(setting), key, value);
				},
				getNodesByFilter: function(filter, isSingle, parentNode, invokeParam) {
					isSingle = !!isSingle;
					if (!filter || (typeof filter != "function")) return (isSingle ? null : []);
					return data.getNodesByFilter(setting, parentNode?parentNode[setting.data.key.children]:data.getNodes(setting), filter, isSingle, invokeParam);
				},
				getNodeIndex : function(node) {
					if (!node) return null;
					var childKey = setting.data.key.children,
					parentNode = (node.parentTId) ? node.getParentNode() : data.getRoot(setting);
					for (var i=0, l = parentNode[childKey].length; i < l; i++) {
						if (parentNode[childKey][i] == node) return i;
					}
					return -1;
				},
				getSelectedNodes : function() {
					var r = [], list = data.getRoot(setting).curSelectedList;
					for (var i=0, l=list.length; i<l; i++) {
						r.push(list[i]);
					}
					return r;
				},
				isSelectedNode : function(node) {
					return data.isSelectedNode(setting, node);
				},
				reAsyncChildNodes : function(parentNode, reloadType, isSilent) {
					if (!this.setting.async.enable) return;
					var isRoot = !parentNode;
					if (isRoot) {
						parentNode = data.getRoot(setting);
					}
					if (reloadType=="refresh") {
						var childKey = this.setting.data.key.children;
						for (var i = 0, l = parentNode[childKey] ? parentNode[childKey].length : 0; i < l; i++) {
							data.removeNodeCache(setting, parentNode[childKey][i]);
						}
						data.removeSelectedNode(setting);
						parentNode[childKey] = [];
						if (isRoot) {
							this.setting.treeObj.empty();
						} else {
							var ulObj = $$(parentNode, consts.id.UL, setting);
							ulObj.empty();
						}
					}
					view.asyncNode(this.setting, isRoot? null:parentNode, !!isSilent);
				},
				refresh : function() {
					this.setting.treeObj.empty();
					var root = data.getRoot(setting),
					nodes = root[setting.data.key.children]
					data.initRoot(setting);
					root[setting.data.key.children] = nodes
					data.initCache(setting);
					view.createNodes(setting, 0, root[setting.data.key.children]);
				},
				removeChildNodes : function(node) {
					if (!node) return null;
					var childKey = setting.data.key.children,
					nodes = node[childKey];
					view.removeChildNodes(setting, node);
					return nodes ? nodes : null;
				},
				removeNode : function(node, callbackFlag) {
					if (!node) return;
					callbackFlag = !!callbackFlag;
					if (callbackFlag && tools.apply(setting.callback.beforeRemove, [setting.treeId, node], true) == false) return;
					view.removeNode(setting, node);
					if (callbackFlag) {
						this.setting.treeObj.trigger(consts.event.REMOVE, [setting.treeId, node]);
					}
				},
				selectNode : function(node, addFlag) {
					if (!node) return;
					if (tools.uCanDo(setting)) {
						addFlag = setting.view.selectedMulti && addFlag;
						if (node.parentTId) {
							view.expandCollapseParentNode(setting, node.getParentNode(), true, false, function() {
								try{$$(node, setting).focus().blur();}catch(e){}
							});
						} else {
							try{$$(node, setting).focus().blur();}catch(e){}
						}
						view.selectNode(setting, node, addFlag);
					}
				},
				transformTozTreeNodes : function(simpleNodes) {
					return data.transformTozTreeFormat(setting, simpleNodes);
				},
				transformToArray : function(nodes) {
					return data.transformToArrayFormat(setting, nodes);
				},
				updateNode : function(node, checkTypeFlag) {
					if (!node) return;
					var nObj = $$(node, setting);
					if (nObj.get(0) && tools.uCanDo(setting)) {
						view.setNodeName(setting, node);
						view.setNodeTarget(setting, node);
						view.setNodeUrl(setting, node);
						view.setNodeLineIcos(setting, node);
						view.setNodeFontCss(setting, node);
					}
				}
			}
			root.treeTools = zTreeTools;
			data.setZTreeTools(setting, zTreeTools);

			if (root[childKey] && root[childKey].length > 0) {
				view.createNodes(setting, 0, root[childKey]);
			} else if (setting.async.enable && setting.async.url && setting.async.url !== '') {
				view.asyncNode(setting);
			}
			return zTreeTools;
		}
	};

	var zt = $.fn.zTree,
	$$ = tools.$,
	consts = zt.consts;
})(jQuery);
/*
 * JQuery zTree excheck v3.5.15
 * http://zTree.me/
 *
 * Copyright (c) 2010 Hunter.z
 *
 * Licensed same as jquery - MIT License
 * http://www.opensource.org/licenses/mit-license.php
 *
 * email: hunter.z@263.net
 * Date: 2013-10-15
 */
(function($){
	//default consts of excheck
	var _consts = {
		event: {
			CHECK: "ztree_check"
		},
		id: {
			CHECK: "_check"
		},
		checkbox: {
			STYLE: "checkbox",
			DEFAULT: "chk",
			DISABLED: "disable",
			FALSE: "false",
			TRUE: "true",
			FULL: "full",
			PART: "part",
			FOCUS: "focus"
		},
		radio: {
			STYLE: "radio",
			TYPE_ALL: "all",
			TYPE_LEVEL: "level"
		}
	},
	//default setting of excheck
	_setting = {
		check: {
			enable: false,
			autoCheckTrigger: false,
			chkStyle: _consts.checkbox.STYLE,
			nocheckInherit: false,
			chkDisabledInherit: false,
			radioType: _consts.radio.TYPE_LEVEL,
			chkboxType: {
				"Y": "ps",
				"N": "ps"
			}
		},
		data: {
			key: {
				checked: "checked"
			}
		},
		callback: {
			beforeCheck:null,
			onCheck:null
		}
	},
	//default root of excheck
	_initRoot = function (setting) {
		var r = data.getRoot(setting);
		r.radioCheckedList = [];
	},
	//default cache of excheck
	_initCache = function(treeId) {},
	//default bind event of excheck
	_bindEvent = function(setting) {
		var o = setting.treeObj,
		c = consts.event;
		o.bind(c.CHECK, function (event, srcEvent, treeId, node) {
			tools.apply(setting.callback.onCheck, [!!srcEvent?srcEvent : event, treeId, node]);
		});
	},
	_unbindEvent = function(setting) {
		var o = setting.treeObj,
		c = consts.event;
		o.unbind(c.CHECK);
	},
	//default event proxy of excheck
	_eventProxy = function(e) {
		var target = e.target,
		setting = data.getSetting(e.data.treeId),
		tId = "", node = null,
		nodeEventType = "", treeEventType = "",
		nodeEventCallback = null, treeEventCallback = null;

		if (tools.eqs(e.type, "mouseover")) {
			if (setting.check.enable && tools.eqs(target.tagName, "span") && target.getAttribute("treeNode"+ consts.id.CHECK) !== null) {
				tId = tools.getNodeMainDom(target).id;
				nodeEventType = "mouseoverCheck";
			}
		} else if (tools.eqs(e.type, "mouseout")) {
			if (setting.check.enable && tools.eqs(target.tagName, "span") && target.getAttribute("treeNode"+ consts.id.CHECK) !== null) {
				tId = tools.getNodeMainDom(target).id;
				nodeEventType = "mouseoutCheck";
			}
		} else if (tools.eqs(e.type, "click")) {
			if (setting.check.enable && tools.eqs(target.tagName, "span") && target.getAttribute("treeNode"+ consts.id.CHECK) !== null) {
				tId = tools.getNodeMainDom(target).id;
				nodeEventType = "checkNode";
			}
		}
		if (tId.length>0) {
			node = data.getNodeCache(setting, tId);
			switch (nodeEventType) {
				case "checkNode" :
					nodeEventCallback = _handler.onCheckNode;
					break;
				case "mouseoverCheck" :
					nodeEventCallback = _handler.onMouseoverCheck;
					break;
				case "mouseoutCheck" :
					nodeEventCallback = _handler.onMouseoutCheck;
					break;
			}
		}
		var proxyResult = {
			stop: nodeEventType === "checkNode",
			node: node,
			nodeEventType: nodeEventType,
			nodeEventCallback: nodeEventCallback,
			treeEventType: treeEventType,
			treeEventCallback: treeEventCallback
		};
		return proxyResult
	},
	//default init node of excheck
	_initNode = function(setting, level, n, parentNode, isFirstNode, isLastNode, openFlag) {
		if (!n) return;
		var checkedKey = setting.data.key.checked;
		if (typeof n[checkedKey] == "string") n[checkedKey] = tools.eqs(n[checkedKey], "true");
		n[checkedKey] = !!n[checkedKey];
		n.checkedOld = n[checkedKey];
		if (typeof n.nocheck == "string") n.nocheck = tools.eqs(n.nocheck, "true");
		n.nocheck = !!n.nocheck || (setting.check.nocheckInherit && parentNode && !!parentNode.nocheck);
		if (typeof n.chkDisabled == "string") n.chkDisabled = tools.eqs(n.chkDisabled, "true");
		n.chkDisabled = !!n.chkDisabled || (setting.check.chkDisabledInherit && parentNode && !!parentNode.chkDisabled);
		if (typeof n.halfCheck == "string") n.halfCheck = tools.eqs(n.halfCheck, "true");
		n.halfCheck = !!n.halfCheck;
		n.check_Child_State = -1;
		n.check_Focus = false;
		n.getCheckStatus = function() {return data.getCheckStatus(setting, n);};

		if (setting.check.chkStyle == consts.radio.STYLE && setting.check.radioType == consts.radio.TYPE_ALL && n[checkedKey] ) {
			var r = data.getRoot(setting);
			r.radioCheckedList.push(n);
		}
	},
	//add dom for check
	_beforeA = function(setting, node, html) {
		var checkedKey = setting.data.key.checked;
		if (setting.check.enable) {
			data.makeChkFlag(setting, node);
			html.push("<span ID='", node.tId, consts.id.CHECK, "' class='", view.makeChkClass(setting, node), "' treeNode", consts.id.CHECK, (node.nocheck === true?" style='display:none;'":""),"></span>");
		}
	},
	//update zTreeObj, add method of check
	_zTreeTools = function(setting, zTreeTools) {
		zTreeTools.checkNode = function(node, checked, checkTypeFlag, callbackFlag) {
			var checkedKey = setting.data.key.checked;
			if (!node) return;
			if (node.chkDisabled === true) return;
			if (checked !== true && checked !== false) {
				checked = !node[checkedKey];
			}
			callbackFlag = !!callbackFlag;

			if (node[checkedKey] === checked && !checkTypeFlag) {
				return;
			} else if (callbackFlag && tools.apply(this.setting.callback.beforeCheck, [setting.treeId, node], true) == false) {
				return;
			}
			if (tools.uCanDo(this.setting) && setting.check.enable && node.nocheck !== true) {
				node[checkedKey] = checked;
				var checkObj = $$(node, consts.id.CHECK, setting);
				if (checkTypeFlag || setting.check.chkStyle === consts.radio.STYLE) view.checkNodeRelation(setting, node);
				view.setChkClass(setting, checkObj, node);
				view.repairParentChkClassWithSelf(setting, node);
				if (callbackFlag) {
					setting.treeObj.trigger(consts.event.CHECK, [null, setting.treeId, node]);
				}
			}
		}

		zTreeTools.checkAllNodes = function(checked) {
			view.repairAllChk(setting, !!checked);
		}

		zTreeTools.getCheckedNodes = function(checked) {
			var childKey = setting.data.key.children;
			checked = (checked !== false);
			return data.getTreeCheckedNodes(setting, data.getRoot(setting)[childKey], checked);
		}

		zTreeTools.getChangeCheckedNodes = function() {
			var childKey = setting.data.key.children;
			return data.getTreeChangeCheckedNodes(setting, data.getRoot(setting)[childKey]);
		}

		zTreeTools.setChkDisabled = function(node, disabled, inheritParent, inheritChildren) {
			disabled = !!disabled;
			inheritParent = !!inheritParent;
			inheritChildren = !!inheritChildren;
			view.repairSonChkDisabled(setting, node, disabled, inheritChildren);
			view.repairParentChkDisabled(setting, node.getParentNode(), disabled, inheritParent);
		}

		var _updateNode = zTreeTools.updateNode;
		zTreeTools.updateNode = function(node, checkTypeFlag) {
			if (_updateNode) _updateNode.apply(zTreeTools, arguments);
			if (!node || !setting.check.enable) return;
			var nObj = $$(node, setting);
			if (nObj.get(0) && tools.uCanDo(setting)) {
				var checkObj = $$(node, consts.id.CHECK, setting);
				if (checkTypeFlag == true || setting.check.chkStyle === consts.radio.STYLE) view.checkNodeRelation(setting, node);
				view.setChkClass(setting, checkObj, node);
				view.repairParentChkClassWithSelf(setting, node);
			}
		}
	},
	//method of operate data
	_data = {
		getRadioCheckedList: function(setting) {
			var checkedList = data.getRoot(setting).radioCheckedList;
			for (var i=0, j=checkedList.length; i<j; i++) {
				if(!data.getNodeCache(setting, checkedList[i].tId)) {
					checkedList.splice(i, 1);
					i--; j--;
				}
			}
			return checkedList;
		},
		getCheckStatus: function(setting, node) {
			if (!setting.check.enable || node.nocheck || node.chkDisabled) return null;
			var checkedKey = setting.data.key.checked,
			r = {
				checked: node[checkedKey],
				half: node.halfCheck ? node.halfCheck : (setting.check.chkStyle == consts.radio.STYLE ? (node.check_Child_State === 2) : (node[checkedKey] ? (node.check_Child_State > -1 && node.check_Child_State < 2) : (node.check_Child_State > 0)))
			};
			return r;
		},
		getTreeCheckedNodes: function(setting, nodes, checked, results) {
			if (!nodes) return [];
			var childKey = setting.data.key.children,
			checkedKey = setting.data.key.checked,
			onlyOne = (checked && setting.check.chkStyle == consts.radio.STYLE && setting.check.radioType == consts.radio.TYPE_ALL);
			results = !results ? [] : results;
			for (var i = 0, l = nodes.length; i < l; i++) {
				if (nodes[i].nocheck !== true && nodes[i].chkDisabled !== true && nodes[i][checkedKey] == checked) {
					results.push(nodes[i]);
					if(onlyOne) {
						break;
					}
				}
				data.getTreeCheckedNodes(setting, nodes[i][childKey], checked, results);
				if(onlyOne && results.length > 0) {
					break;
				}
			}
			return results;
		},
		getTreeChangeCheckedNodes: function(setting, nodes, results) {
			if (!nodes) return [];
			var childKey = setting.data.key.children,
			checkedKey = setting.data.key.checked;
			results = !results ? [] : results;
			for (var i = 0, l = nodes.length; i < l; i++) {
				if (nodes[i].nocheck !== true && nodes[i].chkDisabled !== true && nodes[i][checkedKey] != nodes[i].checkedOld) {
					results.push(nodes[i]);
				}
				data.getTreeChangeCheckedNodes(setting, nodes[i][childKey], results);
			}
			return results;
		},
		makeChkFlag: function(setting, node) {
			if (!node) return;
			var childKey = setting.data.key.children,
			checkedKey = setting.data.key.checked,
			chkFlag = -1;
			if (node[childKey]) {
				for (var i = 0, l = node[childKey].length; i < l; i++) {
					var cNode = node[childKey][i];
					var tmp = -1;
					if (setting.check.chkStyle == consts.radio.STYLE) {
						if (cNode.nocheck === true || cNode.chkDisabled === true) {
							tmp = cNode.check_Child_State;
						} else if (cNode.halfCheck === true) {
							tmp = 2;
						} else if (cNode[checkedKey]) {
							tmp = 2;
						} else {
							tmp = cNode.check_Child_State > 0 ? 2:0;
						}
						if (tmp == 2) {
							chkFlag = 2; break;
						} else if (tmp == 0){
							chkFlag = 0;
						}
					} else if (setting.check.chkStyle == consts.checkbox.STYLE) {
						if (cNode.nocheck === true || cNode.chkDisabled === true) {
							tmp = cNode.check_Child_State;
						} else if (cNode.halfCheck === true) {
							tmp = 1;
						} else if (cNode[checkedKey] ) {
							tmp = (cNode.check_Child_State === -1 || cNode.check_Child_State === 2) ? 2 : 1;
						} else {
							tmp = (cNode.check_Child_State > 0) ? 1 : 0;
						}
						if (tmp === 1) {
							chkFlag = 1; break;
						} else if (tmp === 2 && chkFlag > -1 && i > 0 && tmp !== chkFlag) {
							chkFlag = 1; break;
						} else if (chkFlag === 2 && tmp > -1 && tmp < 2) {
							chkFlag = 1; break;
						} else if (tmp > -1) {
							chkFlag = tmp;
						}
					}
				}
			}
			node.check_Child_State = chkFlag;
		}
	},
	//method of event proxy
	_event = {

	},
	//method of event handler
	_handler = {
		onCheckNode: function (event, node) {
			if (node.chkDisabled === true) return false;
			var setting = data.getSetting(event.data.treeId),
			checkedKey = setting.data.key.checked;
			if (tools.apply(setting.callback.beforeCheck, [setting.treeId, node], true) == false) return true;
			node[checkedKey] = !node[checkedKey];
			view.checkNodeRelation(setting, node);
			var checkObj = $$(node, consts.id.CHECK, setting);
			view.setChkClass(setting, checkObj, node);
			view.repairParentChkClassWithSelf(setting, node);
			setting.treeObj.trigger(consts.event.CHECK, [event, setting.treeId, node]);
			return true;
		},
		onMouseoverCheck: function(event, node) {
			if (node.chkDisabled === true) return false;
			var setting = data.getSetting(event.data.treeId),
			checkObj = $$(node, consts.id.CHECK, setting);
			node.check_Focus = true;
			view.setChkClass(setting, checkObj, node);
			return true;
		},
		onMouseoutCheck: function(event, node) {
			if (node.chkDisabled === true) return false;
			var setting = data.getSetting(event.data.treeId),
			checkObj = $$(node, consts.id.CHECK, setting);
			node.check_Focus = false;
			view.setChkClass(setting, checkObj, node);
			return true;
		}
	},
	//method of tools for zTree
	_tools = {

	},
	//method of operate ztree dom
	_view = {
		checkNodeRelation: function(setting, node) {
			var pNode, i, l,
			childKey = setting.data.key.children,
			checkedKey = setting.data.key.checked,
			r = consts.radio;
			if (setting.check.chkStyle == r.STYLE) {
				var checkedList = data.getRadioCheckedList(setting);
				if (node[checkedKey]) {
					if (setting.check.radioType == r.TYPE_ALL) {
						for (i = checkedList.length-1; i >= 0; i--) {
							pNode = checkedList[i];
							pNode[checkedKey] = false;
							checkedList.splice(i, 1);

							view.setChkClass(setting, $$(pNode, consts.id.CHECK, setting), pNode);
							if (pNode.parentTId != node.parentTId) {
								view.repairParentChkClassWithSelf(setting, pNode);
							}
						}
						checkedList.push(node);
					} else {
						var parentNode = (node.parentTId) ? node.getParentNode() : data.getRoot(setting);
						for (i = 0, l = parentNode[childKey].length; i < l; i++) {
							pNode = parentNode[childKey][i];
							if (pNode[checkedKey] && pNode != node) {
								pNode[checkedKey] = false;
								view.setChkClass(setting, $$(pNode, consts.id.CHECK, setting), pNode);
							}
						}
					}
				} else if (setting.check.radioType == r.TYPE_ALL) {
					for (i = 0, l = checkedList.length; i < l; i++) {
						if (node == checkedList[i]) {
							checkedList.splice(i, 1);
							break;
						}
					}
				}

			} else {
				if (node[checkedKey] && (!node[childKey] || node[childKey].length==0 || setting.check.chkboxType.Y.indexOf("s") > -1)) {
					view.setSonNodeCheckBox(setting, node, true);
				}
				if (!node[checkedKey] && (!node[childKey] || node[childKey].length==0 || setting.check.chkboxType.N.indexOf("s") > -1)) {
					view.setSonNodeCheckBox(setting, node, false);
				}
				if (node[checkedKey] && setting.check.chkboxType.Y.indexOf("p") > -1) {
					view.setParentNodeCheckBox(setting, node, true);
				}
				if (!node[checkedKey] && setting.check.chkboxType.N.indexOf("p") > -1) {
					view.setParentNodeCheckBox(setting, node, false);
				}
			}
		},
		makeChkClass: function(setting, node) {
			var checkedKey = setting.data.key.checked,
			c = consts.checkbox, r = consts.radio,
			fullStyle = "";
			if (node.chkDisabled === true) {
				fullStyle = c.DISABLED;
			} else if (node.halfCheck) {
				fullStyle = c.PART;
			} else if (setting.check.chkStyle == r.STYLE) {
				fullStyle = (node.check_Child_State < 1)? c.FULL:c.PART;
			} else {
				fullStyle = node[checkedKey] ? ((node.check_Child_State === 2 || node.check_Child_State === -1) ? c.FULL:c.PART) : ((node.check_Child_State < 1)? c.FULL:c.PART);
			}
			var chkName = setting.check.chkStyle + "_" + (node[checkedKey] ? c.TRUE : c.FALSE) + "_" + fullStyle;
			chkName = (node.check_Focus && node.chkDisabled !== true) ? chkName + "_" + c.FOCUS : chkName;
			return consts.className.BUTTON + " " + c.DEFAULT + " " + chkName;
		},
		repairAllChk: function(setting, checked) {
			if (setting.check.enable && setting.check.chkStyle === consts.checkbox.STYLE) {
				var checkedKey = setting.data.key.checked,
				childKey = setting.data.key.children,
				root = data.getRoot(setting);
				for (var i = 0, l = root[childKey].length; i<l ; i++) {
					var node = root[childKey][i];
					if (node.nocheck !== true && node.chkDisabled !== true) {
						node[checkedKey] = checked;
					}
					view.setSonNodeCheckBox(setting, node, checked);
				}
			}
		},
		repairChkClass: function(setting, node) {
			if (!node) return;
			data.makeChkFlag(setting, node);
			if (node.nocheck !== true) {
				var checkObj = $$(node, consts.id.CHECK, setting);
				view.setChkClass(setting, checkObj, node);
			}
		},
		repairParentChkClass: function(setting, node) {
			if (!node || !node.parentTId) return;
			var pNode = node.getParentNode();
			view.repairChkClass(setting, pNode);
			view.repairParentChkClass(setting, pNode);
		},
		repairParentChkClassWithSelf: function(setting, node) {
			if (!node) return;
			var childKey = setting.data.key.children;
			if (node[childKey] && node[childKey].length > 0) {
				view.repairParentChkClass(setting, node[childKey][0]);
			} else {
				view.repairParentChkClass(setting, node);
			}
		},
		repairSonChkDisabled: function(setting, node, chkDisabled, inherit) {
			if (!node) return;
			var childKey = setting.data.key.children;
			if (node.chkDisabled != chkDisabled) {
				node.chkDisabled = chkDisabled;
			}
			view.repairChkClass(setting, node);
			if (node[childKey] && inherit) {
				for (var i = 0, l = node[childKey].length; i < l; i++) {
					var sNode = node[childKey][i];
					view.repairSonChkDisabled(setting, sNode, chkDisabled, inherit);
				}
			}
		},
		repairParentChkDisabled: function(setting, node, chkDisabled, inherit) {
			if (!node) return;
			if (node.chkDisabled != chkDisabled && inherit) {
				node.chkDisabled = chkDisabled;
			}
			view.repairChkClass(setting, node);
			view.repairParentChkDisabled(setting, node.getParentNode(), chkDisabled, inherit);
		},
		setChkClass: function(setting, obj, node) {
			if (!obj) return;
			if (node.nocheck === true) {
				obj.hide();
			} else {
				obj.show();
			}
			obj.removeClass();
			obj.addClass(view.makeChkClass(setting, node));
		},
		setParentNodeCheckBox: function(setting, node, value, srcNode) {
			var childKey = setting.data.key.children,
			checkedKey = setting.data.key.checked,
			checkObj = $$(node, consts.id.CHECK, setting);
			if (!srcNode) srcNode = node;
			data.makeChkFlag(setting, node);
			if (node.nocheck !== true && node.chkDisabled !== true) {
				node[checkedKey] = value;
				view.setChkClass(setting, checkObj, node);
				if (setting.check.autoCheckTrigger && node != srcNode) {
					setting.treeObj.trigger(consts.event.CHECK, [null, setting.treeId, node]);
				}
			}
			if (node.parentTId) {
				var pSign = true;
				if (!value) {
					var pNodes = node.getParentNode()[childKey];
					for (var i = 0, l = pNodes.length; i < l; i++) {
						if ((pNodes[i].nocheck !== true && pNodes[i].chkDisabled !== true && pNodes[i][checkedKey])
						|| ((pNodes[i].nocheck === true || pNodes[i].chkDisabled === true) && pNodes[i].check_Child_State > 0)) {
							pSign = false;
							break;
						}
					}
				}
				if (pSign) {
					view.setParentNodeCheckBox(setting, node.getParentNode(), value, srcNode);
				}
			}
		},
		setSonNodeCheckBox: function(setting, node, value, srcNode) {
			if (!node) return;
			var childKey = setting.data.key.children,
			checkedKey = setting.data.key.checked,
			checkObj = $$(node, consts.id.CHECK, setting);
			if (!srcNode) srcNode = node;

			var hasDisable = false;
			if (node[childKey]) {
				for (var i = 0, l = node[childKey].length; i < l && node.chkDisabled !== true; i++) {
					var sNode = node[childKey][i];
					view.setSonNodeCheckBox(setting, sNode, value, srcNode);
					if (sNode.chkDisabled === true) hasDisable = true;
				}
			}

			if (node != data.getRoot(setting) && node.chkDisabled !== true) {
				if (hasDisable && node.nocheck !== true) {
					data.makeChkFlag(setting, node);
				}
				if (node.nocheck !== true && node.chkDisabled !== true) {
					node[checkedKey] = value;
					if (!hasDisable) node.check_Child_State = (node[childKey] && node[childKey].length > 0) ? (value ? 2 : 0) : -1;
				} else {
					node.check_Child_State = -1;
				}
				view.setChkClass(setting, checkObj, node);
				if (setting.check.autoCheckTrigger && node != srcNode && node.nocheck !== true && node.chkDisabled !== true) {
					setting.treeObj.trigger(consts.event.CHECK, [null, setting.treeId, node]);
				}
			}

		}
	},

	_z = {
		tools: _tools,
		view: _view,
		event: _event,
		data: _data
	};
	$.extend(true, $.fn.zTree.consts, _consts);
	$.extend(true, $.fn.zTree._z, _z);

	var zt = $.fn.zTree,
	tools = zt._z.tools,
	consts = zt.consts,
	view = zt._z.view,
	data = zt._z.data,
	event = zt._z.event,
	$$ = tools.$;

	data.exSetting(_setting);
	data.addInitBind(_bindEvent);
	data.addInitUnBind(_unbindEvent);
	data.addInitCache(_initCache);
	data.addInitNode(_initNode);
	data.addInitProxy(_eventProxy, true);
	data.addInitRoot(_initRoot);
	data.addBeforeA(_beforeA);
	data.addZTreeTools(_zTreeTools);

	var _createNodes = view.createNodes;
	view.createNodes = function(setting, level, nodes, parentNode) {
		if (_createNodes) _createNodes.apply(view, arguments);
		if (!nodes) return;
		view.repairParentChkClassWithSelf(setting, parentNode);
	}
	var _removeNode = view.removeNode;
	view.removeNode = function(setting, node) {
		var parentNode = node.getParentNode();
		if (_removeNode) _removeNode.apply(view, arguments);
		if (!node || !parentNode) return;
		view.repairChkClass(setting, parentNode);
		view.repairParentChkClass(setting, parentNode);
	}

	var _appendNodes = view.appendNodes;
	view.appendNodes = function(setting, level, nodes, parentNode, initFlag, openFlag) {
		var html = "";
		if (_appendNodes) {
			html = _appendNodes.apply(view, arguments);
		}
		if (parentNode) {
			data.makeChkFlag(setting, parentNode);
		}
		return html;
	}
})(jQuery);
/*
 * JQuery zTree exedit v3.5.15
 * http://zTree.me/
 *
 * Copyright (c) 2010 Hunter.z
 *
 * Licensed same as jquery - MIT License
 * http://www.opensource.org/licenses/mit-license.php
 *
 * email: hunter.z@263.net
 * Date: 2013-10-15
 */
(function($){
	//default consts of exedit
	var _consts = {
		event: {
			DRAG: "ztree_drag",
			DROP: "ztree_drop",
			REMOVE: "ztree_remove",
			RENAME: "ztree_rename"
		},
		id: {
			EDIT: "_edit",
			INPUT: "_input",
			REMOVE: "_remove"
		},
		move: {
			TYPE_INNER: "inner",
			TYPE_PREV: "prev",
			TYPE_NEXT: "next"
		},
		node: {
			CURSELECTED_EDIT: "curSelectedNode_Edit",
			TMPTARGET_TREE: "tmpTargetzTree",
			TMPTARGET_NODE: "tmpTargetNode"
		}
	},
	//default setting of exedit
	_setting = {
		edit: {
			enable: false,
			editNameSelectAll: false,
			showRemoveBtn: true,
			showRenameBtn: true,
			removeTitle: "remove",
			renameTitle: "rename",
			drag: {
				autoExpandTrigger: false,
				isCopy: true,
				isMove: true,
				prev: true,
				next: true,
				inner: true,
				minMoveSize: 5,
				borderMax: 10,
				borderMin: -5,
				maxShowNodeNum: 5,
				autoOpenTime: 500
			}
		},
		view: {
			addHoverDom: null,
			removeHoverDom: null
		},
		callback: {
			beforeDrag:null,
			beforeDragOpen:null,
			beforeDrop:null,
			beforeEditName:null,
			beforeRename:null,
			onDrag:null,
			onDrop:null,
			onRename:null
		}
	},
	//default root of exedit
	_initRoot = function (setting) {
		var r = data.getRoot(setting), rs = data.getRoots();
		r.curEditNode = null;
		r.curEditInput = null;
		r.curHoverNode = null;
		r.dragFlag = 0;
		r.dragNodeShowBefore = [];
		r.dragMaskList = new Array();
		rs.showHoverDom = true;
	},
	//default cache of exedit
	_initCache = function(treeId) {},
	//default bind event of exedit
	_bindEvent = function(setting) {
		var o = setting.treeObj;
		var c = consts.event;
		o.bind(c.RENAME, function (event, treeId, treeNode, isCancel) {
			tools.apply(setting.callback.onRename, [event, treeId, treeNode, isCancel]);
		});

		o.bind(c.REMOVE, function (event, treeId, treeNode) {
			tools.apply(setting.callback.onRemove, [event, treeId, treeNode]);
		});

		o.bind(c.DRAG, function (event, srcEvent, treeId, treeNodes) {
			tools.apply(setting.callback.onDrag, [srcEvent, treeId, treeNodes]);
		});

		o.bind(c.DROP, function (event, srcEvent, treeId, treeNodes, targetNode, moveType, isCopy) {
			tools.apply(setting.callback.onDrop, [srcEvent, treeId, treeNodes, targetNode, moveType, isCopy]);
		});
	},
	_unbindEvent = function(setting) {
		var o = setting.treeObj;
		var c = consts.event;
		o.unbind(c.RENAME);
		o.unbind(c.REMOVE);
		o.unbind(c.DRAG);
		o.unbind(c.DROP);
	},
	//default event proxy of exedit
	_eventProxy = function(e) {
		var target = e.target,
		setting = data.getSetting(e.data.treeId),
		relatedTarget = e.relatedTarget,
		tId = "", node = null,
		nodeEventType = "", treeEventType = "",
		nodeEventCallback = null, treeEventCallback = null,
		tmp = null;

		if (tools.eqs(e.type, "mouseover")) {
			tmp = tools.getMDom(setting, target, [{tagName:"a", attrName:"treeNode"+consts.id.A}]);
			if (tmp) {
				tId = tools.getNodeMainDom(tmp).id;
				nodeEventType = "hoverOverNode";
			}
		} else if (tools.eqs(e.type, "mouseout")) {
			tmp = tools.getMDom(setting, relatedTarget, [{tagName:"a", attrName:"treeNode"+consts.id.A}]);
			if (!tmp) {
				tId = "remove";
				nodeEventType = "hoverOutNode";
			}
		} else if (tools.eqs(e.type, "mousedown")) {
			tmp = tools.getMDom(setting, target, [{tagName:"a", attrName:"treeNode"+consts.id.A}]);
			if (tmp) {
				tId = tools.getNodeMainDom(tmp).id;
				nodeEventType = "mousedownNode";
			}
		}
		if (tId.length>0) {
			node = data.getNodeCache(setting, tId);
			switch (nodeEventType) {
				case "mousedownNode" :
					nodeEventCallback = _handler.onMousedownNode;
					break;
				case "hoverOverNode" :
					nodeEventCallback = _handler.onHoverOverNode;
					break;
				case "hoverOutNode" :
					nodeEventCallback = _handler.onHoverOutNode;
					break;
			}
		}
		var proxyResult = {
			stop: false,
			node: node,
			nodeEventType: nodeEventType,
			nodeEventCallback: nodeEventCallback,
			treeEventType: treeEventType,
			treeEventCallback: treeEventCallback
		};
		return proxyResult
	},
	//default init node of exedit
	_initNode = function(setting, level, n, parentNode, isFirstNode, isLastNode, openFlag) {
		if (!n) return;
		n.isHover = false;
		n.editNameFlag = false;
	},
	//update zTreeObj, add method of edit
	_zTreeTools = function(setting, zTreeTools) {
		zTreeTools.cancelEditName = function(newName) {
			var root = data.getRoot(setting);
			if (!root.curEditNode) return;
			view.cancelCurEditNode(setting, newName?newName:null, true);
		}
		zTreeTools.copyNode = function(targetNode, node, moveType, isSilent) {
			if (!node) return null;
			if (targetNode && !targetNode.isparent && setting.data.keep.leaf && moveType === consts.move.TYPE_INNER) return null;
			var newNode = tools.clone(node);
			if (!targetNode) {
				targetNode = null;
				moveType = consts.move.TYPE_INNER;
			}
			if (moveType == consts.move.TYPE_INNER) {
				function copyCallback() {
					view.addNodes(setting, targetNode, [newNode], isSilent);
				}

				if (tools.canAsync(setting, targetNode)) {
					view.asyncNode(setting, targetNode, isSilent, copyCallback);
				} else {
					copyCallback();
				}
			} else {
				view.addNodes(setting, targetNode.parentNode, [newNode], isSilent);
				view.moveNode(setting, targetNode, newNode, moveType, false, isSilent);
			}
			return newNode;
		}
		zTreeTools.editName = function(node) {
			if (!node || !node.tId || node !== data.getNodeCache(setting, node.tId)) return;
			if (node.parentTId) view.expandCollapseParentNode(setting, node.getParentNode(), true);
			view.editNode(setting, node)
		}
		zTreeTools.moveNode = function(targetNode, node, moveType, isSilent) {
			if (!node) return node;
			if (targetNode && !targetNode.isparent && setting.data.keep.leaf && moveType === consts.move.TYPE_INNER) {
				return null;
			} else if (targetNode && ((node.parentTId == targetNode.tId && moveType == consts.move.TYPE_INNER) || $$(node, setting).find("#" + targetNode.tId).length > 0)) {
				return null;
			} else if (!targetNode) {
				targetNode = null;
			}
			function moveCallback() {
				view.moveNode(setting, targetNode, node, moveType, false, isSilent);
			}
			if (tools.canAsync(setting, targetNode) && moveType === consts.move.TYPE_INNER) {
				view.asyncNode(setting, targetNode, isSilent, moveCallback);
			} else {
				moveCallback();
			}
			return node;
		}
		zTreeTools.setEditable = function(editable) {
			setting.edit.enable = editable;
			return this.refresh();
		}
	},
	//method of operate data
	_data = {
		setSonNodeLevel: function(setting, parentNode, node) {
			if (!node) return;
			var childKey = setting.data.key.children;
			node.level = (parentNode)? parentNode.level + 1 : 0;
			if (!node[childKey]) return;
			for (var i = 0, l = node[childKey].length; i < l; i++) {
				if (node[childKey][i]) data.setSonNodeLevel(setting, node, node[childKey][i]);
			}
		}
	},
	//method of event proxy
	_event = {

	},
	//method of event handler
	_handler = {
		onHoverOverNode: function(event, node) {
			var setting = data.getSetting(event.data.treeId),
			root = data.getRoot(setting);
			if (root.curHoverNode != node) {
				_handler.onHoverOutNode(event);
			}
			root.curHoverNode = node;
			view.addHoverDom(setting, node);
		},
		onHoverOutNode: function(event, node) {
			var setting = data.getSetting(event.data.treeId),
			root = data.getRoot(setting);
			if (root.curHoverNode && !data.isSelectedNode(setting, root.curHoverNode)) {
				view.removeTreeDom(setting, root.curHoverNode);
				root.curHoverNode = null;
			}
		},
		onMousedownNode: function(eventMouseDown, _node) {
			var i,l,
			setting = data.getSetting(eventMouseDown.data.treeId),
			root = data.getRoot(setting), roots = data.getRoots();
			//right click can't drag & drop
			if (eventMouseDown.button == 2 || !setting.edit.enable || (!setting.edit.drag.isCopy && !setting.edit.drag.isMove)) return true;

			//input of edit node name can't drag & drop
			var target = eventMouseDown.target,
			_nodes = data.getRoot(setting).curSelectedList,
			nodes = [];
			if (!data.isSelectedNode(setting, _node)) {
				nodes = [_node];
			} else {
				for (i=0, l=_nodes.length; i<l; i++) {
					if (_nodes[i].editNameFlag && tools.eqs(target.tagName, "input") && target.getAttribute("treeNode"+consts.id.INPUT) !== null) {
						return true;
					}
					nodes.push(_nodes[i]);
					if (nodes[0].parentTId !== _nodes[i].parentTId) {
						nodes = [_node];
						break;
					}
				}
			}

			view.editNodeBlur = true;
			view.cancelCurEditNode(setting);

			var doc = $(setting.treeObj.get(0).ownerDocument),
			body = $(setting.treeObj.get(0).ownerDocument.body), curNode, tmpArrow, tmpTarget,
			isOtherTree = false,
			targetSetting = setting,
			sourceSetting = setting,
			preNode, nextNode,
			preTmpTargetNodeId = null,
			preTmpMoveType = null,
			tmpTargetNodeId = null,
			moveType = consts.move.TYPE_INNER,
			mouseDownX = eventMouseDown.clientX,
			mouseDownY = eventMouseDown.clientY,
			startTime = (new Date()).getTime();

			if (tools.uCanDo(setting)) {
				doc.bind("mousemove", _docMouseMove);
			}
			function _docMouseMove(event) {
				//avoid start drag after click node
				if (root.dragFlag == 0 && Math.abs(mouseDownX - event.clientX) < setting.edit.drag.minMoveSize
					&& Math.abs(mouseDownY - event.clientY) < setting.edit.drag.minMoveSize) {
					return true;
				}
				var i, l, tmpNode, tmpDom, tmpNodes,
				childKey = setting.data.key.children;
				body.css("cursor", "pointer");

				if (root.dragFlag == 0) {
					if (tools.apply(setting.callback.beforeDrag, [setting.treeId, nodes], true) == false) {
						_docMouseUp(event);
						return true;
					}

					for (i=0, l=nodes.length; i<l; i++) {
						if (i==0) {
							root.dragNodeShowBefore = [];
						}
						tmpNode = nodes[i];
						if (tmpNode.isparent && tmpNode.open) {
							view.expandCollapseNode(setting, tmpNode, !tmpNode.open);
							root.dragNodeShowBefore[tmpNode.tId] = true;
						} else {
							root.dragNodeShowBefore[tmpNode.tId] = false;
						}
					}

					root.dragFlag = 1;
					roots.showHoverDom = false;
					tools.showIfameMask(setting, true);

					//sort
					var isOrder = true, lastIndex = -1;
					if (nodes.length>1) {
						var pNodes = nodes[0].parentTId ? nodes[0].getParentNode()[childKey] : data.getNodes(setting);
						tmpNodes = [];
						for (i=0, l=pNodes.length; i<l; i++) {
							if (root.dragNodeShowBefore[pNodes[i].tId] !== undefined) {
								if (isOrder && lastIndex > -1 && (lastIndex+1) !== i) {
									isOrder = false;
								}
								tmpNodes.push(pNodes[i]);
								lastIndex = i;
							}
							if (nodes.length === tmpNodes.length) {
								nodes = tmpNodes;
								break;
							}
						}
					}
					if (isOrder) {
						preNode = nodes[0].getPreNode();
						nextNode = nodes[nodes.length-1].getNextNode();
					}

					//set node in selected
					curNode = $$("<ul class='zTreeDragUL'></ul>", setting);
					for (i=0, l=nodes.length; i<l; i++) {
						tmpNode = nodes[i];
						tmpNode.editNameFlag = false;
						view.selectNode(setting, tmpNode, i>0);
						view.removeTreeDom(setting, tmpNode);

						tmpDom = $$("<li id='"+ tmpNode.tId +"_tmp'></li>", setting);
						tmpDom.append($$(tmpNode, consts.id.A, setting).clone());
						tmpDom.css("padding", "0");
						tmpDom.children("#" + tmpNode.tId + consts.id.A).removeClass(consts.node.CURSELECTED);
						curNode.append(tmpDom);
						if (i == setting.edit.drag.maxShowNodeNum-1) {
							tmpDom = $$("<li id='"+ tmpNode.tId +"_moretmp'><a>  ...  </a></li>", setting);
							curNode.append(tmpDom);
							break;
						}
					}
					curNode.attr("id", nodes[0].tId + consts.id.UL + "_tmp");
					curNode.addClass(setting.treeObj.attr("class"));
					curNode.appendTo(body);

					tmpArrow = $$("<span class='tmpzTreeMove_arrow'></span>", setting);
					tmpArrow.attr("id", "zTreeMove_arrow_tmp");
					tmpArrow.appendTo(body);

					setting.treeObj.trigger(consts.event.DRAG, [event, setting.treeId, nodes]);
				}

				if (root.dragFlag == 1) {
					if (tmpTarget && tmpArrow.attr("id") == event.target.id && tmpTargetNodeId && (event.clientX + doc.scrollLeft()+2) > ($("#" + tmpTargetNodeId + consts.id.A, tmpTarget).offset().left)) {
						var xT = $("#" + tmpTargetNodeId + consts.id.A, tmpTarget);
						event.target = (xT.length > 0) ? xT.get(0) : event.target;
					} else if (tmpTarget) {
						tmpTarget.removeClass(consts.node.TMPTARGET_TREE);
						if (tmpTargetNodeId) $("#" + tmpTargetNodeId + consts.id.A, tmpTarget).removeClass(consts.node.TMPTARGET_NODE + "_" + consts.move.TYPE_PREV)
							.removeClass(consts.node.TMPTARGET_NODE + "_" + _consts.move.TYPE_NEXT).removeClass(consts.node.TMPTARGET_NODE + "_" + _consts.move.TYPE_INNER);
					}
					tmpTarget = null;
					tmpTargetNodeId = null;

					//judge drag & drop in multi ztree
					isOtherTree = false;
					targetSetting = setting;
					var settings = data.getSettings();
					for (var s in settings) {
						if (settings[s].treeId && settings[s].edit.enable && settings[s].treeId != setting.treeId
							&& (event.target.id == settings[s].treeId || $(event.target).parents("#" + settings[s].treeId).length>0)) {
							isOtherTree = true;
							targetSetting = settings[s];
						}
					}

					var docScrollTop = doc.scrollTop(),
					docScrollLeft = doc.scrollLeft(),
					treeOffset = targetSetting.treeObj.offset(),
					scrollHeight = targetSetting.treeObj.get(0).scrollHeight,
					scrollWidth = targetSetting.treeObj.get(0).scrollWidth,
					dTop = (event.clientY + docScrollTop - treeOffset.top),
					dBottom = (targetSetting.treeObj.height() + treeOffset.top - event.clientY - docScrollTop),
					dLeft = (event.clientX + docScrollLeft - treeOffset.left),
					dRight = (targetSetting.treeObj.width() + treeOffset.left - event.clientX - docScrollLeft),
					isTop = (dTop < setting.edit.drag.borderMax && dTop > setting.edit.drag.borderMin),
					isBottom = (dBottom < setting.edit.drag.borderMax && dBottom > setting.edit.drag.borderMin),
					isLeft = (dLeft < setting.edit.drag.borderMax && dLeft > setting.edit.drag.borderMin),
					isRight = (dRight < setting.edit.drag.borderMax && dRight > setting.edit.drag.borderMin),
					isTreeInner = dTop > setting.edit.drag.borderMin && dBottom > setting.edit.drag.borderMin && dLeft > setting.edit.drag.borderMin && dRight > setting.edit.drag.borderMin,
					isTreeTop = (isTop && targetSetting.treeObj.scrollTop() <= 0),
					isTreeBottom = (isBottom && (targetSetting.treeObj.scrollTop() + targetSetting.treeObj.height()+10) >= scrollHeight),
					isTreeLeft = (isLeft && targetSetting.treeObj.scrollLeft() <= 0),
					isTreeRight = (isRight && (targetSetting.treeObj.scrollLeft() + targetSetting.treeObj.width()+10) >= scrollWidth);

					if (event.target && tools.isChildOrSelf(event.target, targetSetting.treeId)) {
						//get node <li> dom
						var targetObj = event.target;
						while (targetObj && targetObj.tagName && !tools.eqs(targetObj.tagName, "li") && targetObj.id != targetSetting.treeId) {
							targetObj = targetObj.parentNode;
						}

						var canMove = true;
						//don't move to self or children of self
						for (i=0, l=nodes.length; i<l; i++) {
							tmpNode = nodes[i];
							if (targetObj.id === tmpNode.tId) {
								canMove = false;
								break;
							} else if ($$(tmpNode, setting).find("#" + targetObj.id).length > 0) {
								canMove = false;
								break;
							}
						}
						if (canMove && event.target && tools.isChildOrSelf(event.target, targetObj.id + consts.id.A)) {
							tmpTarget = $(targetObj);
							tmpTargetNodeId = targetObj.id;
						}
					}

					//the mouse must be in zTree
					tmpNode = nodes[0];
					if (isTreeInner && tools.isChildOrSelf(event.target, targetSetting.treeId)) {
						//judge mouse move in root of ztree
						if (!tmpTarget && (event.target.id == targetSetting.treeId || isTreeTop || isTreeBottom || isTreeLeft || isTreeRight) && (isOtherTree || (!isOtherTree && tmpNode.parentTId))) {
							tmpTarget = targetSetting.treeObj;
						}
						//auto scroll top
						if (isTop) {
							targetSetting.treeObj.scrollTop(targetSetting.treeObj.scrollTop()-10);
						} else if (isBottom)  {
							targetSetting.treeObj.scrollTop(targetSetting.treeObj.scrollTop()+10);
						}
						if (isLeft) {
							targetSetting.treeObj.scrollLeft(targetSetting.treeObj.scrollLeft()-10);
						} else if (isRight) {
							targetSetting.treeObj.scrollLeft(targetSetting.treeObj.scrollLeft()+10);
						}
						//auto scroll left
						if (tmpTarget && tmpTarget != targetSetting.treeObj && tmpTarget.offset().left < targetSetting.treeObj.offset().left) {
							targetSetting.treeObj.scrollLeft(targetSetting.treeObj.scrollLeft()+ tmpTarget.offset().left - targetSetting.treeObj.offset().left);
						}
					}

					curNode.css({
						"top": (event.clientY + docScrollTop + 3) + "px",
						"left": (event.clientX + docScrollLeft + 3) + "px"
					});

					var dX = 0;
					var dY = 0;
					if (tmpTarget && tmpTarget.attr("id")!=targetSetting.treeId) {
						var tmpTargetNode = tmpTargetNodeId == null ? null: data.getNodeCache(targetSetting, tmpTargetNodeId),
						isCopy = (event.ctrlKey && setting.edit.drag.isMove && setting.edit.drag.isCopy) || (!setting.edit.drag.isMove && setting.edit.drag.isCopy),
						isPrev = !!(preNode && tmpTargetNodeId === preNode.tId),
						isNext = !!(nextNode && tmpTargetNodeId === nextNode.tId),
						isInner = (tmpNode.parentTId && tmpNode.parentTId == tmpTargetNodeId),
						canPrev = (isCopy || !isNext) && tools.apply(targetSetting.edit.drag.prev, [targetSetting.treeId, nodes, tmpTargetNode], !!targetSetting.edit.drag.prev),
						canNext = (isCopy || !isPrev) && tools.apply(targetSetting.edit.drag.next, [targetSetting.treeId, nodes, tmpTargetNode], !!targetSetting.edit.drag.next),
						canInner = (isCopy || !isInner) && !(targetSetting.data.keep.leaf && !tmpTargetNode.isparent) && tools.apply(targetSetting.edit.drag.inner, [targetSetting.treeId, nodes, tmpTargetNode], !!targetSetting.edit.drag.inner);
						if (!canPrev && !canNext && !canInner) {
							tmpTarget = null;
							tmpTargetNodeId = "";
							moveType = consts.move.TYPE_INNER;
							tmpArrow.css({
								"display":"none"
							});
							if (window.zTreeMoveTimer) {
								clearTimeout(window.zTreeMoveTimer);
								window.zTreeMoveTargetNodeTId = null
							}
						} else {
							var tmpTargetA = $("#" + tmpTargetNodeId + consts.id.A, tmpTarget),
							tmpNextA = tmpTargetNode.isLastNode ? null : $("#" + tmpTargetNode.getNextNode().tId + consts.id.A, tmpTarget.next()),
							tmpTop = tmpTargetA.offset().top,
							tmpLeft = tmpTargetA.offset().left,
							prevPercent = canPrev ? (canInner ? 0.25 : (canNext ? 0.5 : 1) ) : -1,
							nextPercent = canNext ? (canInner ? 0.75 : (canPrev ? 0.5 : 0) ) : -1,
							dY_percent = (event.clientY + docScrollTop - tmpTop)/tmpTargetA.height();
							if ((prevPercent==1 ||dY_percent<=prevPercent && dY_percent>=-.2) && canPrev) {
								dX = 1 - tmpArrow.width();
								dY = tmpTop - tmpArrow.height()/2;
								moveType = consts.move.TYPE_PREV;
							} else if ((nextPercent==0 || dY_percent>=nextPercent && dY_percent<=1.2) && canNext) {
								dX = 1 - tmpArrow.width();
								dY = (tmpNextA == null || (tmpTargetNode.isparent && tmpTargetNode.open)) ? (tmpTop + tmpTargetA.height() - tmpArrow.height()/2) : (tmpNextA.offset().top - tmpArrow.height()/2);
								moveType = consts.move.TYPE_NEXT;
							}else {
								dX = 5 - tmpArrow.width();
								dY = tmpTop;
								moveType = consts.move.TYPE_INNER;
							}
							tmpArrow.css({
								"display":"block",
								"top": dY + "px",
								"left": (tmpLeft + dX) + "px"
							});
							tmpTargetA.addClass(consts.node.TMPTARGET_NODE + "_" + moveType);

							if (preTmpTargetNodeId != tmpTargetNodeId || preTmpMoveType != moveType) {
								startTime = (new Date()).getTime();
							}
							if (tmpTargetNode && tmpTargetNode.isparent && moveType == consts.move.TYPE_INNER) {
								var startTimer = true;
								if (window.zTreeMoveTimer && window.zTreeMoveTargetNodeTId !== tmpTargetNode.tId) {
									clearTimeout(window.zTreeMoveTimer);
									window.zTreeMoveTargetNodeTId = null;
								}else if (window.zTreeMoveTimer && window.zTreeMoveTargetNodeTId === tmpTargetNode.tId) {
									startTimer = false;
								}
								if (startTimer) {
									window.zTreeMoveTimer = setTimeout(function() {
										if (moveType != consts.move.TYPE_INNER) return;
										if (tmpTargetNode && tmpTargetNode.isparent && !tmpTargetNode.open && (new Date()).getTime() - startTime > targetSetting.edit.drag.autoOpenTime
											&& tools.apply(targetSetting.callback.beforeDragOpen, [targetSetting.treeId, tmpTargetNode], true)) {
											view.switchNode(targetSetting, tmpTargetNode);
											if (targetSetting.edit.drag.autoExpandTrigger) {
												targetSetting.treeObj.trigger(consts.event.EXPAND, [targetSetting.treeId, tmpTargetNode]);
											}
										}
									}, targetSetting.edit.drag.autoOpenTime+50);
									window.zTreeMoveTargetNodeTId = tmpTargetNode.tId;
								}
							}
						}
					} else {
						moveType = consts.move.TYPE_INNER;
						if (tmpTarget && tools.apply(targetSetting.edit.drag.inner, [targetSetting.treeId, nodes, null], !!targetSetting.edit.drag.inner)) {
							tmpTarget.addClass(consts.node.TMPTARGET_TREE);
						} else {
							tmpTarget = null;
						}
						tmpArrow.css({
							"display":"none"
						});
						if (window.zTreeMoveTimer) {
							clearTimeout(window.zTreeMoveTimer);
							window.zTreeMoveTargetNodeTId = null;
						}
					}
					preTmpTargetNodeId = tmpTargetNodeId;
					preTmpMoveType = moveType;
				}
				return false;
			}

			doc.bind("mouseup", _docMouseUp);
			function _docMouseUp(event) {
				if (window.zTreeMoveTimer) {
					clearTimeout(window.zTreeMoveTimer);
					window.zTreeMoveTargetNodeTId = null;
				}
				preTmpTargetNodeId = null;
				preTmpMoveType = null;
				doc.unbind("mousemove", _docMouseMove);
				doc.unbind("mouseup", _docMouseUp);
				doc.unbind("selectstart", _docSelect);
				body.css("cursor", "auto");
				if (tmpTarget) {
					tmpTarget.removeClass(consts.node.TMPTARGET_TREE);
					if (tmpTargetNodeId) $("#" + tmpTargetNodeId + consts.id.A, tmpTarget).removeClass(consts.node.TMPTARGET_NODE + "_" + consts.move.TYPE_PREV)
							.removeClass(consts.node.TMPTARGET_NODE + "_" + _consts.move.TYPE_NEXT).removeClass(consts.node.TMPTARGET_NODE + "_" + _consts.move.TYPE_INNER);
				}
				tools.showIfameMask(setting, false);

				roots.showHoverDom = true;
				if (root.dragFlag == 0) return;
				root.dragFlag = 0;

				var i, l, tmpNode;
				for (i=0, l=nodes.length; i<l; i++) {
					tmpNode = nodes[i];
					if (tmpNode.isparent && root.dragNodeShowBefore[tmpNode.tId] && !tmpNode.open) {
						view.expandCollapseNode(setting, tmpNode, !tmpNode.open);
						delete root.dragNodeShowBefore[tmpNode.tId];
					}
				}

				if (curNode) curNode.remove();
				if (tmpArrow) tmpArrow.remove();

				var isCopy = (event.ctrlKey && setting.edit.drag.isMove && setting.edit.drag.isCopy) || (!setting.edit.drag.isMove && setting.edit.drag.isCopy);
				if (!isCopy && tmpTarget && tmpTargetNodeId && nodes[0].parentTId && tmpTargetNodeId==nodes[0].parentTId && moveType == consts.move.TYPE_INNER) {
					tmpTarget = null;
				}
				if (tmpTarget) {
					var dragTargetNode = tmpTargetNodeId == null ? null: data.getNodeCache(targetSetting, tmpTargetNodeId);
					if (tools.apply(setting.callback.beforeDrop, [targetSetting.treeId, nodes, dragTargetNode, moveType, isCopy], true) == false) {
						view.selectNodes(sourceSetting, nodes);
						return;
					}
					var newNodes = isCopy ? tools.clone(nodes) : nodes;

					function dropCallback() {
						if (isOtherTree) {
							if (!isCopy) {
								for(var i=0, l=nodes.length; i<l; i++) {
									view.removeNode(setting, nodes[i]);
								}
							}
							if (moveType == consts.move.TYPE_INNER) {
								view.addNodes(targetSetting, dragTargetNode, newNodes);
							} else {
								view.addNodes(targetSetting, dragTargetNode.getParentNode(), newNodes);
								if (moveType == consts.move.TYPE_PREV) {
									for (i=0, l=newNodes.length; i<l; i++) {
										view.moveNode(targetSetting, dragTargetNode, newNodes[i], moveType, false);
									}
								} else {
									for (i=-1, l=newNodes.length-1; i<l; l--) {
										view.moveNode(targetSetting, dragTargetNode, newNodes[l], moveType, false);
									}
								}
							}
						} else {
							if (isCopy && moveType == consts.move.TYPE_INNER) {
								view.addNodes(targetSetting, dragTargetNode, newNodes);
							} else {
								if (isCopy) {
									view.addNodes(targetSetting, dragTargetNode.getParentNode(), newNodes);
								}
								if (moveType != consts.move.TYPE_NEXT) {
									for (i=0, l=newNodes.length; i<l; i++) {
										view.moveNode(targetSetting, dragTargetNode, newNodes[i], moveType, false);
									}
								} else {
									for (i=-1, l=newNodes.length-1; i<l; l--) {
										view.moveNode(targetSetting, dragTargetNode, newNodes[l], moveType, false);
									}
								}
							}
						}
						view.selectNodes(targetSetting, newNodes);
						$$(newNodes[0], setting).focus().blur();

						setting.treeObj.trigger(consts.event.DROP, [event, targetSetting.treeId, newNodes, dragTargetNode, moveType, isCopy]);
					}

					if (moveType == consts.move.TYPE_INNER && tools.canAsync(targetSetting, dragTargetNode)) {
						view.asyncNode(targetSetting, dragTargetNode, false, dropCallback);
					} else {
						dropCallback();
					}

				} else {
					view.selectNodes(sourceSetting, nodes);
					setting.treeObj.trigger(consts.event.DROP, [event, setting.treeId, nodes, null, null, null]);
				}
			}

			doc.bind("selectstart", _docSelect);
			function _docSelect() {
				return false;
			}

			//Avoid FireFox's Bug
			//If zTree Div CSS set 'overflow', so drag node outside of zTree, and event.target is error.
			if(eventMouseDown.preventDefault) {
				eventMouseDown.preventDefault();
			}
			return true;
		}
	},
	//method of tools for zTree
	_tools = {
		getAbs: function (obj) {
			var oRect = obj.getBoundingClientRect(),
			scrollTop = document.body.scrollTop+document.documentElement.scrollTop,
			scrollLeft = document.body.scrollLeft+document.documentElement.scrollLeft;
			return [oRect.left+scrollLeft,oRect.top+scrollTop];
		},
		inputFocus: function(inputObj) {
			if (inputObj.get(0)) {
				inputObj.focus();
				tools.setCursorPosition(inputObj.get(0), inputObj.val().length);
			}
		},
		inputSelect: function(inputObj) {
			if (inputObj.get(0)) {
				inputObj.focus();
				inputObj.select();
			}
		},
		setCursorPosition: function(obj, pos){
			if(obj.setSelectionRange) {
				obj.focus();
				obj.setSelectionRange(pos,pos);
			} else if (obj.createTextRange) {
				var range = obj.createTextRange();
				range.collapse(true);
				range.moveEnd('character', pos);
				range.moveStart('character', pos);
				range.select();
			}
		},
		showIfameMask: function(setting, showSign) {
			var root = data.getRoot(setting);
			//clear full mask
			while (root.dragMaskList.length > 0) {
				root.dragMaskList[0].remove();
				root.dragMaskList.shift();
			}
			if (showSign) {
				//show mask
				var iframeList = $$("iframe", setting);
				for (var i = 0, l = iframeList.length; i < l; i++) {
					var obj = iframeList.get(i),
					r = tools.getAbs(obj),
					dragMask = $$("<div id='zTreeMask_" + i + "' class='zTreeMask' style='top:" + r[1] + "px; left:" + r[0] + "px; width:" + obj.offsetWidth + "px; height:" + obj.offsetHeight + "px;'></div>", setting);
					dragMask.appendTo($$("body", setting));
					root.dragMaskList.push(dragMask);
				}
			}
		}
	},
	//method of operate ztree dom
	_view = {
		addEditBtn: function(setting, node) {
			if (node.editNameFlag || $$(node, consts.id.EDIT, setting).length > 0) {
				return;
			}
			if (!tools.apply(setting.edit.showRenameBtn, [setting.treeId, node], setting.edit.showRenameBtn)) {
				return;
			}
			var aObj = $$(node, consts.id.A, setting),
			editStr = "<span class='" + consts.className.BUTTON + " edit' id='" + node.tId + consts.id.EDIT + "' title='"+tools.apply(setting.edit.renameTitle, [setting.treeId, node], setting.edit.renameTitle)+"' treeNode"+consts.id.EDIT+" style='display:none;'></span>";
			aObj.append(editStr);

			$$(node, consts.id.EDIT, setting).bind('click',
				function() {
					if (!tools.uCanDo(setting) || tools.apply(setting.callback.beforeEditName, [setting.treeId, node], true) == false) return false;
					view.editNode(setting, node);
					return false;
				}
				).show();
		},
		addRemoveBtn: function(setting, node) {
			if (node.editNameFlag || $$(node, consts.id.REMOVE, setting).length > 0) {
				return;
			}
			if (!tools.apply(setting.edit.showRemoveBtn, [setting.treeId, node], setting.edit.showRemoveBtn)) {
				return;
			}
			var aObj = $$(node, consts.id.A, setting),
			removeStr = "<span class='" + consts.className.BUTTON + " remove' id='" + node.tId + consts.id.REMOVE + "' title='"+tools.apply(setting.edit.removeTitle, [setting.treeId, node], setting.edit.removeTitle)+"' treeNode"+consts.id.REMOVE+" style='display:none;'></span>";
			aObj.append(removeStr);

			$$(node, consts.id.REMOVE, setting).bind('click',
				function() {
					if (!tools.uCanDo(setting) || tools.apply(setting.callback.beforeRemove, [setting.treeId, node], true) == false) return false;
					view.removeNode(setting, node);
					setting.treeObj.trigger(consts.event.REMOVE, [setting.treeId, node]);
					return false;
				}
				).bind('mousedown',
				function(eventMouseDown) {
					return true;
				}
				).show();
		},
		addHoverDom: function(setting, node) {
			if (data.getRoots().showHoverDom) {
				node.isHover = true;
				if (setting.edit.enable) {
					view.addEditBtn(setting, node);
					view.addRemoveBtn(setting, node);
				}
				tools.apply(setting.view.addHoverDom, [setting.treeId, node]);
			}
		},
		cancelCurEditNode: function (setting, forceName, isCancel) {
			var root = data.getRoot(setting),
			nameKey = setting.data.key.name,
			node = root.curEditNode;

			if (node) {
				var inputObj = root.curEditInput,
				newName = forceName ? forceName:(isCancel ? node[nameKey]: inputObj.val());
				if (tools.apply(setting.callback.beforeRename, [setting.treeId, node, newName, isCancel], true) === false) {
					return false;
				} else {
					node[nameKey] = newName;
					setting.treeObj.trigger(consts.event.RENAME, [setting.treeId, node, isCancel]);
				}
				var aObj = $$(node, consts.id.A, setting);
				aObj.removeClass(consts.node.CURSELECTED_EDIT);
				inputObj.unbind();
				view.setNodeName(setting, node);
				node.editNameFlag = false;
				root.curEditNode = null;
				root.curEditInput = null;
				view.selectNode(setting, node, false);
			}
			root.noSelection = true;
			return true;
		},
		editNode: function(setting, node) {
			var root = data.getRoot(setting);
			view.editNodeBlur = false;
			if (data.isSelectedNode(setting, node) && root.curEditNode == node && node.editNameFlag) {
				setTimeout(function() {tools.inputFocus(root.curEditInput);}, 0);
				return;
			}
			var nameKey = setting.data.key.name;
			node.editNameFlag = true;
			view.removeTreeDom(setting, node);
			view.cancelCurEditNode(setting);
			view.selectNode(setting, node, false);
			$$(node, consts.id.SPAN, setting).html("<input type=text class='rename' id='" + node.tId + consts.id.INPUT + "' treeNode" + consts.id.INPUT + " >");
			var inputObj = $$(node, consts.id.INPUT, setting);
			inputObj.attr("value", node[nameKey]);
			if (setting.edit.editNameSelectAll) {
				tools.inputSelect(inputObj);
			} else {
				tools.inputFocus(inputObj);
			}

			inputObj.bind('blur', function(event) {
				if (!view.editNodeBlur) {
					view.cancelCurEditNode(setting);
				}
			}).bind('keydown', function(event) {
				if (event.keyCode=="13") {
					view.editNodeBlur = true;
					view.cancelCurEditNode(setting);
				} else if (event.keyCode=="27") {
					view.cancelCurEditNode(setting, null, true);
				}
			}).bind('click', function(event) {
				return false;
			}).bind('dblclick', function(event) {
				return false;
			});

			$$(node, consts.id.A, setting).addClass(consts.node.CURSELECTED_EDIT);
			root.curEditInput = inputObj;
			root.noSelection = false;
			root.curEditNode = node;
		},
		moveNode: function(setting, targetNode, node, moveType, animateFlag, isSilent) {
			var root = data.getRoot(setting),
			childKey = setting.data.key.children;
			if (targetNode == node) return;
			if (setting.data.keep.leaf && targetNode && !targetNode.isparent && moveType == consts.move.TYPE_INNER) return;
			var oldParentNode = (node.parentTId ? node.getParentNode(): root),
			targetNodeIsRoot = (targetNode === null || targetNode == root);
			if (targetNodeIsRoot && targetNode === null) targetNode = root;
			if (targetNodeIsRoot) moveType = consts.move.TYPE_INNER;
			var targetParentNode = (targetNode.parentTId ? targetNode.getParentNode() : root);

			if (moveType != consts.move.TYPE_PREV && moveType != consts.move.TYPE_NEXT) {
				moveType = consts.move.TYPE_INNER;
			}

			if (moveType == consts.move.TYPE_INNER) {
				if (targetNodeIsRoot) {
					//parentTId of root node is null
					node.parentTId = null;
				} else {
					if (!targetNode.isparent) {
						targetNode.isparent = true;
						targetNode.open = !!targetNode.open;
						view.setNodeLineIcos(setting, targetNode);
					}
					node.parentTId = targetNode.tId;
				}
			}

			//move node Dom
			var targetObj, target_ulObj;
			if (targetNodeIsRoot) {
				targetObj = setting.treeObj;
				target_ulObj = targetObj;
			} else {
				if (!isSilent && moveType == consts.move.TYPE_INNER) {
					view.expandCollapseNode(setting, targetNode, true, false);
				} else if (!isSilent) {
					view.expandCollapseNode(setting, targetNode.getParentNode(), true, false);
				}
				targetObj = $$(targetNode, setting);
				target_ulObj = $$(targetNode, consts.id.UL, setting);
				if (!!targetObj.get(0) && !target_ulObj.get(0)) {
					var ulstr = [];
					view.makeUlHtml(setting, targetNode, ulstr, '');
					targetObj.append(ulstr.join(''));
				}
				target_ulObj = $$(targetNode, consts.id.UL, setting);
			}
			var nodeDom = $$(node, setting);
			if (!nodeDom.get(0)) {
				nodeDom = view.appendNodes(setting, node.level, [node], null, false, true).join('');
			} else if (!targetObj.get(0)) {
				nodeDom.remove();
			}
			if (target_ulObj.get(0) && moveType == consts.move.TYPE_INNER) {
				target_ulObj.append(nodeDom);
			} else if (targetObj.get(0) && moveType == consts.move.TYPE_PREV) {
				targetObj.before(nodeDom);
			} else if (targetObj.get(0) && moveType == consts.move.TYPE_NEXT) {
				targetObj.after(nodeDom);
			}

			//repair the data after move
			var i,l,
			tmpSrcIndex = -1,
			tmpTargetIndex = 0,
			oldNeighbor = null,
			newNeighbor = null,
			oldLevel = node.level;
			if (node.isFirstNode) {
				tmpSrcIndex = 0;
				if (oldParentNode[childKey].length > 1 ) {
					oldNeighbor = oldParentNode[childKey][1];
					oldNeighbor.isFirstNode = true;
				}
			} else if (node.isLastNode) {
				tmpSrcIndex = oldParentNode[childKey].length -1;
				oldNeighbor = oldParentNode[childKey][tmpSrcIndex - 1];
				oldNeighbor.isLastNode = true;
			} else {
				for (i = 0, l = oldParentNode[childKey].length; i < l; i++) {
					if (oldParentNode[childKey][i].tId == node.tId) {
						tmpSrcIndex = i;
						break;
					}
				}
			}
			if (tmpSrcIndex >= 0) {
				oldParentNode[childKey].splice(tmpSrcIndex, 1);
			}
			if (moveType != consts.move.TYPE_INNER) {
				for (i = 0, l = targetParentNode[childKey].length; i < l; i++) {
					if (targetParentNode[childKey][i].tId == targetNode.tId) tmpTargetIndex = i;
				}
			}
			if (moveType == consts.move.TYPE_INNER) {
				if (!targetNode[childKey]) targetNode[childKey] = new Array();
				if (targetNode[childKey].length > 0) {
					newNeighbor = targetNode[childKey][targetNode[childKey].length - 1];
					newNeighbor.isLastNode = false;
				}
				targetNode[childKey].splice(targetNode[childKey].length, 0, node);
				node.isLastNode = true;
				node.isFirstNode = (targetNode[childKey].length == 1);
			} else if (targetNode.isFirstNode && moveType == consts.move.TYPE_PREV) {
				targetParentNode[childKey].splice(tmpTargetIndex, 0, node);
				newNeighbor = targetNode;
				newNeighbor.isFirstNode = false;
				node.parentTId = targetNode.parentTId;
				node.isFirstNode = true;
				node.isLastNode = false;

			} else if (targetNode.isLastNode && moveType == consts.move.TYPE_NEXT) {
				targetParentNode[childKey].splice(tmpTargetIndex + 1, 0, node);
				newNeighbor = targetNode;
				newNeighbor.isLastNode = false;
				node.parentTId = targetNode.parentTId;
				node.isFirstNode = false;
				node.isLastNode = true;

			} else {
				if (moveType == consts.move.TYPE_PREV) {
					targetParentNode[childKey].splice(tmpTargetIndex, 0, node);
				} else {
					targetParentNode[childKey].splice(tmpTargetIndex + 1, 0, node);
				}
				node.parentTId = targetNode.parentTId;
				node.isFirstNode = false;
				node.isLastNode = false;
			}
			data.fixPIdKeyValue(setting, node);
			data.setSonNodeLevel(setting, node.getParentNode(), node);

			//repair node what been moved
			view.setNodeLineIcos(setting, node);
			view.repairNodeLevelClass(setting, node, oldLevel)

			//repair node's old parentNode dom
			if (!setting.data.keep.parent && oldParentNode[childKey].length < 1) {
				//old parentNode has no child nodes
				oldParentNode.isparent = false;
				oldParentNode.open = false;
				var tmp_ulObj = $$(oldParentNode, consts.id.UL, setting),
				tmp_switchObj = $$(oldParentNode, consts.id.SWITCH, setting),
				tmp_icoObj = $$(oldParentNode, consts.id.ICON, setting);
				view.replaceSwitchClass(oldParentNode, tmp_switchObj, consts.folder.DOCU);
				view.replaceIcoClass(oldParentNode, tmp_icoObj, consts.folder.DOCU);
				tmp_ulObj.css("display", "none");

			} else if (oldNeighbor) {
				//old neigbor node
				view.setNodeLineIcos(setting, oldNeighbor);
			}

			//new neigbor node
			if (newNeighbor) {
				view.setNodeLineIcos(setting, newNeighbor);
			}

			//repair checkbox / radio
			if (!!setting.check && setting.check.enable && view.repairChkClass) {
				view.repairChkClass(setting, oldParentNode);
				view.repairParentChkClassWithSelf(setting, oldParentNode);
				if (oldParentNode != node.parent)
					view.repairParentChkClassWithSelf(setting, node);
			}

			//expand parents after move
			if (!isSilent) {
				view.expandCollapseParentNode(setting, node.getParentNode(), true, animateFlag);
			}
		},
		removeEditBtn: function(setting, node) {
			$$(node, consts.id.EDIT, setting).unbind().remove();
		},
		removeRemoveBtn: function(setting, node) {
			$$(node, consts.id.REMOVE, setting).unbind().remove();
		},
		removeTreeDom: function(setting, node) {
			node.isHover = false;
			view.removeEditBtn(setting, node);
			view.removeRemoveBtn(setting, node);
			tools.apply(setting.view.removeHoverDom, [setting.treeId, node]);
		},
		repairNodeLevelClass: function(setting, node, oldLevel) {
			if (oldLevel === node.level) return;
			var liObj = $$(node, setting),
			aObj = $$(node, consts.id.A, setting),
			ulObj = $$(node, consts.id.UL, setting),
			oldClass = consts.className.LEVEL + oldLevel,
			newClass = consts.className.LEVEL + node.level;
			liObj.removeClass(oldClass);
			liObj.addClass(newClass);
			aObj.removeClass(oldClass);
			aObj.addClass(newClass);
			ulObj.removeClass(oldClass);
			ulObj.addClass(newClass);
		},
		selectNodes : function(setting, nodes) {
			for (var i=0, l=nodes.length; i<l; i++) {
				view.selectNode(setting, nodes[i], i>0);
			}
		}
	},

	_z = {
		tools: _tools,
		view: _view,
		event: _event,
		data: _data
	};
	$.extend(true, $.fn.zTree.consts, _consts);
	$.extend(true, $.fn.zTree._z, _z);

	var zt = $.fn.zTree,
	tools = zt._z.tools,
	consts = zt.consts,
	view = zt._z.view,
	data = zt._z.data,
	event = zt._z.event,
	$$ = tools.$;

	data.exSetting(_setting);
	data.addInitBind(_bindEvent);
	data.addInitUnBind(_unbindEvent);
	data.addInitCache(_initCache);
	data.addInitNode(_initNode);
	data.addInitProxy(_eventProxy);
	data.addInitRoot(_initRoot);
	data.addZTreeTools(_zTreeTools);

	var _cancelPreSelectedNode = view.cancelPreSelectedNode;
	view.cancelPreSelectedNode = function (setting, node) {
		var list = data.getRoot(setting).curSelectedList;
		for (var i=0, j=list.length; i<j; i++) {
			if (!node || node === list[i]) {
				view.removeTreeDom(setting, list[i]);
				if (node) break;
			}
		}
		if (_cancelPreSelectedNode) _cancelPreSelectedNode.apply(view, arguments);
	}

	var _createNodes = view.createNodes;
	view.createNodes = function(setting, level, nodes, parentNode) {
		if (_createNodes) {
			_createNodes.apply(view, arguments);
		}
		if (!nodes) return;
		if (view.repairParentChkClassWithSelf) {
			view.repairParentChkClassWithSelf(setting, parentNode);
		}
	}

	var _makeNodeUrl = view.makeNodeUrl;
	view.makeNodeUrl = function(setting, node) {
		return setting.edit.enable ? null : (_makeNodeUrl.apply(view, arguments));
	}

	var _removeNode = view.removeNode;
	view.removeNode = function(setting, node) {
		var root = data.getRoot(setting);
		if (root.curEditNode === node) root.curEditNode = null;
		if (_removeNode) {
			_removeNode.apply(view, arguments);
		}
	}

	var _selectNode = view.selectNode;
	view.selectNode = function(setting, node, addFlag) {
		var root = data.getRoot(setting);
		if (data.isSelectedNode(setting, node) && root.curEditNode == node && node.editNameFlag) {
			return false;
		}
		if (_selectNode) _selectNode.apply(view, arguments);
		view.addHoverDom(setting, node);
		return true;
	}

	var _uCanDo = tools.uCanDo;
	tools.uCanDo = function(setting, e) {
		var root = data.getRoot(setting);
		if (e && (tools.eqs(e.type, "mouseover") || tools.eqs(e.type, "mouseout") || tools.eqs(e.type, "mousedown") || tools.eqs(e.type, "mouseup"))) {
			return true;
		}
		if (root.curEditNode) {
			view.editNodeBlur = false;
			root.curEditInput.focus();
		}
		return (!root.curEditNode) && (_uCanDo ? _uCanDo.apply(view, arguments) : true);
	};

		
/**
 * @version 0.5
 * @name jazz.tree
 * @description 表单元素的选择填报类。
 */
   $.widget("jazz.tree", $.jazz.boxComponent, {
       
        options: /** @lends jazz.tree# */ {
			
            /**
			 *@type String
			 *@desc 链接
			 *@default null
			 */      
            url: null,
            
            /**
			 *@type Object
			 *@desc 参数
			 *@default null
			 */            
            params: null,

			/**
			 *@type JSON
			 *@desc 初始化数据
			 *@default null
			 */
            data: null,
            
			/**
			 *@type Object
			 *@desc zTree的setting对象
			 *@default null
			 */              
            setting: null,
            
			/**
			 *@type Number
			 *@desc 滚动条显示高度
			 *@default 300
			 */         
            height: "auto"           
        },


        /** @lends jazz.comboxtree */
	
		/**
         * @desc 创建组件
		 * @private
         */
        _create: function() {
            this._super();
        	
        	this.element.addClass('jazz-panel-content jazz-widget-content').attr('vtype', 'tree');
        	
            this.ulId = "tree_"+this.options.name;
            this.itemsContainer = $('<ul id="'+this.ulId+'" class="ztree" style="margin-top:0; width:auto; padding-top: 0px; padding-bottom: 0px; height:100%; overflow:auto;"></ul>').appendTo(this.element);
        	
            if(!!this.options.data) {
            	this._callback('1');
            }else if(!!this.options.url){
            	this._ajax();
            }else{
            	this._initTreeEvent();
            	$.fn.zTree.init(this.itemsContainer, this.options.setting);
            }
        },
        
        /**
         * @desc  绑定事件
         * @private
         */
        _init:function(){
        	this._super();
        	 //设置容器的大小
            this._compSize();
        },
        
        /**
         * @desc 初始化容器大小
         * @private
         */
        _compSize: function(){
        	this._width();
        	this._height();
        },
        
        _width: function(){
        	this._super();
        },
        
        _height: function(){
        	this._super();
        },
        
		/**
         * @desc ajax请求
         */
        _ajax: function(){
            var param = {
        		url: this.options.url,
        		params: this.options.params,
        		async: true,
	        	callback: this._callback  //回调函数
            };
        	$.DataAdapter.submit(param, this);        	
        },

        _callback: function (data, sourceThis){
        	var jsonData = null;
        	var $this = null;
            if(data == '1'){
	            jsonData = this.options.data;   
	            $this = this;
            }else{
				var newdata = data["data"];
            	jsonData = newdata;
            	$this = sourceThis;
            }
    		if(!!jsonData){
    			$.fn.zTree.init($this.itemsContainer, $this.options.setting, jsonData);
    		}
        },
        
        _initTreeEvent: function(){

        },
        
		/**
         * @desc 重新加载数据
         * 		 注： 在数据初始化时也调用了这个方法 jazz.SwordAdapter.js
         *       obj.find('select').tree('loadData', data, null, 'static');  目的是为了加载SwordPageData数据
		 * 
		 * @example $('div_id').tree('loadData', url, params);
         */
        loadData: function(url, params, flag){
        	//this.reset();
        	if(!url){
        		if(this.options.url != null){
        			if(!!params){
        				this.options.params = params;
        			}
        			this.itemsContainer.children().remove();
        			this._ajax();
        		}
        	}else {
        		this.itemsContainer.children().remove();
            	if(flag == 'static'){
            		this.options.data = url;
            		this._callback(1);            		
            	}else{
            		if(!!url){
            			this.options.url = url;
            		}
            		if(!!params){
            			this.options.params = params;
            		}
	        		this._ajax();            		
            	}
        		
        	}
        	
        }
        
    });

	
})(jQuery);

});
/**SWFUpload */
var SWFUpload;var swfobject;
if(SWFUpload==undefined){SWFUpload=function(settings){this.initSWFUpload(settings)}}SWFUpload.prototype.initSWFUpload=function(userSettings){try{this.customSettings={};this.settings={};this.eventQueue=[];this.movieName="SWFUpload_"+SWFUpload.movieCount++;this.movieElement=null;SWFUpload.instances[this.movieName]=this;this.initSettings(userSettings);this.loadSupport();if(this.swfuploadPreload()){this.loadFlash()}this.displayDebugInfo()}catch(ex){delete SWFUpload.instances[this.movieName];throw ex;}};SWFUpload.instances={};SWFUpload.movieCount=0;SWFUpload.version="2.5.0 2010-01-15 Beta 2";SWFUpload.QUEUE_ERROR={QUEUE_LIMIT_EXCEEDED:-100,FILE_EXCEEDS_SIZE_LIMIT:-110,ZERO_BYTE_FILE:-120,INVALID_FILETYPE:-130};SWFUpload.UPLOAD_ERROR={HTTP_ERROR:-200,MISSING_UPLOAD_URL:-210,IO_ERROR:-220,SECURITY_ERROR:-230,UPLOAD_LIMIT_EXCEEDED:-240,UPLOAD_FAILED:-250,SPECIFIED_FILE_ID_NOT_FOUND:-260,FILE_VALIDATION_FAILED:-270,FILE_CANCELLED:-280,UPLOAD_STOPPED:-290,RESIZE:-300,USER_DEFINED:-500};SWFUpload.FILE_STATUS={QUEUED:-1,IN_PROGRESS:-2,ERROR:-3,COMPLETE:-4,CANCELLED:-5};SWFUpload.UPLOAD_TYPE={NORMAL:-1,RESIZED:-2};SWFUpload.BUTTON_ACTION={SELECT_FILE:-100,SELECT_FILES:-110,START_UPLOAD:-120,JAVASCRIPT:-130,NONE:-130};SWFUpload.CURSOR={ARROW:-1,HAND:-2};SWFUpload.WINDOW_MODE={WINDOW:"window",TRANSPARENT:"transparent",OPAQUE:"opaque"};SWFUpload.RESIZE_ENCODING={JPEG:-1,PNG:-2};SWFUpload.completeURL=function(url){try{var path="",indexSlash=-1;if(typeof(url)!=="string"||url.match(/^https?:\/\//i)||url.match(/^\//)||url===""){return url}indexSlash=window.location.pathname.lastIndexOf("/");if(indexSlash<=0){path="/"}else{path=window.location.pathname.substr(0,indexSlash)+"/"}return path+url}catch(ex){return url}};SWFUpload.onload=function(){};SWFUpload.prototype.initSettings=function(userSettings){this.ensureDefault=function(settingName,defaultValue){var setting=userSettings[settingName];if(setting!=undefined){this.settings[settingName]=setting}else{this.settings[settingName]=defaultValue}};this.ensureDefault("upload_url","");this.ensureDefault("preserve_relative_urls",false);this.ensureDefault("file_post_name","Filedata");this.ensureDefault("post_params",{});this.ensureDefault("use_query_string",false);this.ensureDefault("requeue_on_error",false);this.ensureDefault("http_success",[]);this.ensureDefault("assume_success_timeout",0);this.ensureDefault("file_types","*.*");this.ensureDefault("file_types_description","All Files");this.ensureDefault("file_size_limit",0);this.ensureDefault("file_upload_limit",0);this.ensureDefault("file_queue_limit",0);this.ensureDefault("flash_url","swfupload.swf");this.ensureDefault("flash9_url","swfupload_fp9.swf");this.ensureDefault("prevent_swf_caching",true);this.ensureDefault("button_image_url","");this.ensureDefault("button_width",1);this.ensureDefault("button_height",1);this.ensureDefault("button_text","");this.ensureDefault("button_text_style","color: #000000;font-size: 16pt;");this.ensureDefault("button_text_top_padding",0);this.ensureDefault("button_text_left_padding",0);this.ensureDefault("button_action",SWFUpload.BUTTON_ACTION.SELECT_FILES);this.ensureDefault("button_disabled",false);this.ensureDefault("button_placeholder_id","");this.ensureDefault("button_placeholder",null);this.ensureDefault("button_cursor",SWFUpload.CURSOR.ARROW);this.ensureDefault("button_window_mode",SWFUpload.WINDOW_MODE.WINDOW);this.ensureDefault("debug",false);this.settings.debug_enabled=this.settings.debug;this.settings.return_upload_start_handler=this.returnUploadStart;this.ensureDefault("swfupload_preload_handler",null);this.ensureDefault("swfupload_load_failed_handler",null);this.ensureDefault("swfupload_loaded_handler",null);this.ensureDefault("file_dialog_start_handler",null);this.ensureDefault("file_queued_handler",null);this.ensureDefault("file_queue_error_handler",null);this.ensureDefault("file_dialog_complete_handler",null);this.ensureDefault("upload_resize_start_handler",null);this.ensureDefault("upload_start_handler",null);this.ensureDefault("upload_progress_handler",null);this.ensureDefault("upload_error_handler",null);this.ensureDefault("upload_success_handler",null);this.ensureDefault("upload_complete_handler",null);this.ensureDefault("mouse_click_handler",null);this.ensureDefault("mouse_out_handler",null);this.ensureDefault("mouse_over_handler",null);this.ensureDefault("debug_handler",this.debugMessage);this.ensureDefault("custom_settings",{});this.customSettings=this.settings.custom_settings;if(!!this.settings.prevent_swf_caching){this.settings.flash_url=this.settings.flash_url+(this.settings.flash_url.indexOf("?")<0?"?":"&")+"preventswfcaching="+new Date().getTime();this.settings.flash9_url=this.settings.flash9_url+(this.settings.flash9_url.indexOf("?")<0?"?":"&")+"preventswfcaching="+new Date().getTime()}if(!this.settings.preserve_relative_urls){this.settings.upload_url=SWFUpload.completeURL(this.settings.upload_url);this.settings.button_image_url=SWFUpload.completeURL(this.settings.button_image_url)}delete this.ensureDefault};SWFUpload.prototype.loadSupport=function(){this.support={loading:swfobject.hasFlashPlayerVersion("9.0.28"),imageResize:swfobject.hasFlashPlayerVersion("10.0.0")}};SWFUpload.prototype.loadFlash=function(){var targetElement,tempParent,wrapperType,flashHTML,els;if(!this.support.loading){this.queueEvent("swfupload_load_failed_handler",["Flash Player doesn't support SWFUpload"]);return}if(document.getElementById(this.movieName)!==null){this.support.loading=false;this.queueEvent("swfupload_load_failed_handler",["Element ID already in use"]);return}targetElement=document.getElementById(this.settings.button_placeholder_id)||this.settings.button_placeholder;if(targetElement==undefined){this.support.loading=false;this.queueEvent("swfupload_load_failed_handler",["button place holder not found"]);return}wrapperType=(targetElement.currentStyle&&targetElement.currentStyle["display"]||window.getComputedStyle)!=="block"?"span":"div";tempParent=document.createElement(wrapperType);flashHTML=this.getFlashHTML();try{tempParent.innerHTML=flashHTML}catch(ex){this.support.loading=false;this.queueEvent("swfupload_load_failed_handler",["Exception loading Flash HTML into placeholder"]);return}els=tempParent.getElementsByTagName("object");if(!els||els.length>1||els.length===0){this.support.loading=false;this.queueEvent("swfupload_load_failed_handler",["Unable to find movie after adding to DOM"]);return}else if(els.length===1){this.movieElement=els[0]}targetElement.parentNode.replaceChild(tempParent.firstChild,targetElement);if(window[this.movieName]==undefined){window[this.movieName]=this.getMovieElement()}};SWFUpload.prototype.getFlashHTML=function(flashVersion){return['<object id="',this.movieName,'" type="application/x-shockwave-flash" data="',(this.support.imageResize?this.settings.flash_url:this.settings.flash9_url),'" width="',this.settings.button_width,'" height="',this.settings.button_height,'" class="swfupload">','<param name="wmode" value="',this.settings.button_window_mode,'" />','<param name="movie" value="',(this.support.imageResize?this.settings.flash_url:this.settings.flash9_url),'" />','<param name="quality" value="high" />','<param name="allowScriptAccess" value="always" />','<param name="flashvars" value="'+this.getFlashVars()+'" />','</object>'].join("")};SWFUpload.prototype.getFlashVars=function(){var httpSuccessString,paramString;paramString=this.buildParamString();httpSuccessString=this.settings.http_success.join(",");return["movieName=",encodeURIComponent(this.movieName),"&amp;uploadURL=",encodeURIComponent(this.settings.upload_url),"&amp;useQueryString=",encodeURIComponent(this.settings.use_query_string),"&amp;requeueOnError=",encodeURIComponent(this.settings.requeue_on_error),"&amp;httpSuccess=",encodeURIComponent(httpSuccessString),"&amp;assumeSuccessTimeout=",encodeURIComponent(this.settings.assume_success_timeout),"&amp;params=",encodeURIComponent(paramString),"&amp;filePostName=",encodeURIComponent(this.settings.file_post_name),"&amp;fileTypes=",encodeURIComponent(this.settings.file_types),"&amp;fileTypesDescription=",encodeURIComponent(this.settings.file_types_description),"&amp;fileSizeLimit=",encodeURIComponent(this.settings.file_size_limit),"&amp;fileUploadLimit=",encodeURIComponent(this.settings.file_upload_limit),"&amp;fileQueueLimit=",encodeURIComponent(this.settings.file_queue_limit),"&amp;debugEnabled=",encodeURIComponent(this.settings.debug_enabled),"&amp;buttonImageURL=",encodeURIComponent(this.settings.button_image_url),"&amp;buttonWidth=",encodeURIComponent(this.settings.button_width),"&amp;buttonHeight=",encodeURIComponent(this.settings.button_height),"&amp;buttonText=",encodeURIComponent(this.settings.button_text),"&amp;buttonTextTopPadding=",encodeURIComponent(this.settings.button_text_top_padding),"&amp;buttonTextLeftPadding=",encodeURIComponent(this.settings.button_text_left_padding),"&amp;buttonTextStyle=",encodeURIComponent(this.settings.button_text_style),"&amp;buttonAction=",encodeURIComponent(this.settings.button_action),"&amp;buttonDisabled=",encodeURIComponent(this.settings.button_disabled),"&amp;buttonCursor=",encodeURIComponent(this.settings.button_cursor)].join("")};SWFUpload.prototype.getMovieElement=function(){if(this.movieElement==undefined){this.movieElement=document.getElementById(this.movieName)}if(this.movieElement===null){throw"Could not find Flash element";}return this.movieElement};SWFUpload.prototype.buildParamString=function(){var postParams,paramStringPairs=[];postParams=this.settings.post_params;if(typeof(postParams)==="object"){for(var name in postParams){if(postParams.hasOwnProperty(name)){paramStringPairs.push(encodeURIComponent(name.toString())+"="+encodeURIComponent(postParams[name].toString()))}}}return paramStringPairs.join("&amp;")};SWFUpload.prototype.destroy=function(){var movieElement;try{this.cancelUpload(null,false);movieElement=this.cleanUp();if(movieElement){try{movieElement.parentNode.removeChild(movieElement)}catch(ex){}}window[this.movieName]=null;SWFUpload.instances[this.movieName]=null;delete SWFUpload.instances[this.movieName];this.movieElement=null;this.settings=null;this.customSettings=null;this.eventQueue=null;this.movieName=null;return true}catch(ex2){return false}};SWFUpload.prototype.displayDebugInfo=function(){this.debug(["---SWFUpload Instance Info---\n","Version: ",SWFUpload.version,"\n","Movie Name: ",this.movieName,"\n","Settings:\n","\t","upload_url:               ",this.settings.upload_url,"\n","\t","flash_url:                ",this.settings.flash_url,"\n","\t","flash9_url:                ",this.settings.flash9_url,"\n","\t","use_query_string:         ",this.settings.use_query_string.toString(),"\n","\t","requeue_on_error:         ",this.settings.requeue_on_error.toString(),"\n","\t","http_success:             ",this.settings.http_success.join(", "),"\n","\t","assume_success_timeout:   ",this.settings.assume_success_timeout,"\n","\t","file_post_name:           ",this.settings.file_post_name,"\n","\t","post_params:              ",this.settings.post_params.toString(),"\n","\t","file_types:               ",this.settings.file_types,"\n","\t","file_types_description:   ",this.settings.file_types_description,"\n","\t","file_size_limit:          ",this.settings.file_size_limit,"\n","\t","file_upload_limit:        ",this.settings.file_upload_limit,"\n","\t","file_queue_limit:         ",this.settings.file_queue_limit,"\n","\t","debug:                    ",this.settings.debug.toString(),"\n","\t","prevent_swf_caching:      ",this.settings.prevent_swf_caching.toString(),"\n","\t","button_placeholder_id:    ",this.settings.button_placeholder_id.toString(),"\n","\t","button_placeholder:       ",(this.settings.button_placeholder?"Set":"Not Set"),"\n","\t","button_image_url:         ",this.settings.button_image_url.toString(),"\n","\t","button_width:             ",this.settings.button_width.toString(),"\n","\t","button_height:            ",this.settings.button_height.toString(),"\n","\t","button_text:              ",this.settings.button_text.toString(),"\n","\t","button_text_style:        ",this.settings.button_text_style.toString(),"\n","\t","button_text_top_padding:  ",this.settings.button_text_top_padding.toString(),"\n","\t","button_text_left_padding: ",this.settings.button_text_left_padding.toString(),"\n","\t","button_action:            ",this.settings.button_action.toString(),"\n","\t","button_cursor:            ",this.settings.button_cursor.toString(),"\n","\t","button_disabled:          ",this.settings.button_disabled.toString(),"\n","\t","custom_settings:          ",this.settings.custom_settings.toString(),"\n","Event Handlers:\n","\t","swfupload_preload_handler assigned:  ",(typeof this.settings.swfupload_preload_handler==="function").toString(),"\n","\t","swfupload_load_failed_handler assigned:  ",(typeof this.settings.swfupload_load_failed_handler==="function").toString(),"\n","\t","swfupload_loaded_handler assigned:  ",(typeof this.settings.swfupload_loaded_handler==="function").toString(),"\n","\t","mouse_click_handler assigned:       ",(typeof this.settings.mouse_click_handler==="function").toString(),"\n","\t","mouse_over_handler assigned:        ",(typeof this.settings.mouse_over_handler==="function").toString(),"\n","\t","mouse_out_handler assigned:         ",(typeof this.settings.mouse_out_handler==="function").toString(),"\n","\t","file_dialog_start_handler assigned: ",(typeof this.settings.file_dialog_start_handler==="function").toString(),"\n","\t","file_queued_handler assigned:       ",(typeof this.settings.file_queued_handler==="function").toString(),"\n","\t","file_queue_error_handler assigned:  ",(typeof this.settings.file_queue_error_handler==="function").toString(),"\n","\t","upload_resize_start_handler assigned:      ",(typeof this.settings.upload_resize_start_handler==="function").toString(),"\n","\t","upload_start_handler assigned:      ",(typeof this.settings.upload_start_handler==="function").toString(),"\n","\t","upload_progress_handler assigned:   ",(typeof this.settings.upload_progress_handler==="function").toString(),"\n","\t","upload_error_handler assigned:      ",(typeof this.settings.upload_error_handler==="function").toString(),"\n","\t","upload_success_handler assigned:    ",(typeof this.settings.upload_success_handler==="function").toString(),"\n","\t","upload_complete_handler assigned:   ",(typeof this.settings.upload_complete_handler==="function").toString(),"\n","\t","debug_handler assigned:             ",(typeof this.settings.debug_handler==="function").toString(),"\n","Support:\n","\t","Load:                     ",(this.support.loading?"Yes":"No"),"\n","\t","Image Resize:             ",(this.support.imageResize?"Yes":"No"),"\n"].join(""))};SWFUpload.prototype.addSetting=function(name,value,default_value){if(value==undefined){return(this.settings[name]=default_value)}else{return(this.settings[name]=value)}};SWFUpload.prototype.getSetting=function(name){if(this.settings[name]!=undefined){return this.settings[name]}return""};SWFUpload.prototype.callFlash=function(functionName,argumentArray){var movieElement,returnValue,returnString;argumentArray=argumentArray||[];movieElement=this.getMovieElement();try{if(movieElement!=undefined){returnString=movieElement.CallFunction('<invoke name="'+functionName+'" returntype="javascript">'+__flash__argumentsToXML(argumentArray,0)+'</invoke>');returnValue=eval(returnString)}else{this.debug("Can't call flash because the movie wasn't found.")}}catch(ex){this.debug("Exception calling flash function '"+functionName+"': "+ex.message)}if(returnValue!=undefined&&typeof returnValue.post==="object"){returnValue=this.unescapeFilePostParams(returnValue)}return returnValue};SWFUpload.prototype.selectFile=function(){this.callFlash("SelectFile")};SWFUpload.prototype.selectFiles=function(){this.callFlash("SelectFiles")};SWFUpload.prototype.startUpload=function(fileID){this.callFlash("StartUpload",[fileID])};SWFUpload.prototype.startResizedUpload=function(fileID,width,height,encoding,quality,allowEnlarging){this.callFlash("StartUpload",[fileID,{"width":width,"height":height,"encoding":encoding,"quality":quality,"allowEnlarging":allowEnlarging}])};SWFUpload.prototype.cancelUpload=function(fileID,triggerErrorEvent){if(triggerErrorEvent!==false){triggerErrorEvent=true}this.callFlash("CancelUpload",[fileID,triggerErrorEvent])};SWFUpload.prototype.stopUpload=function(){this.callFlash("StopUpload")};SWFUpload.prototype.requeueUpload=function(indexOrFileID){return this.callFlash("RequeueUpload",[indexOrFileID])};SWFUpload.prototype.getStats=function(){return this.callFlash("GetStats")};SWFUpload.prototype.setStats=function(statsObject){this.callFlash("SetStats",[statsObject])};SWFUpload.prototype.getFile=function(fileID){if(typeof(fileID)==="number"){return this.callFlash("GetFileByIndex",[fileID])}else{return this.callFlash("GetFile",[fileID])}};SWFUpload.prototype.getQueueFile=function(fileID){if(typeof(fileID)==="number"){return this.callFlash("GetFileByQueueIndex",[fileID])}else{return this.callFlash("GetFile",[fileID])}};SWFUpload.prototype.addFileParam=function(fileID,name,value){return this.callFlash("AddFileParam",[fileID,name,value])};SWFUpload.prototype.removeFileParam=function(fileID,name){this.callFlash("RemoveFileParam",[fileID,name])};SWFUpload.prototype.setUploadURL=function(url){this.settings.upload_url=url.toString();this.callFlash("SetUploadURL",[url])};SWFUpload.prototype.setPostParams=function(paramsObject){this.settings.post_params=paramsObject;this.callFlash("SetPostParams",[paramsObject])};SWFUpload.prototype.addPostParam=function(name,value){this.settings.post_params[name]=value;this.callFlash("SetPostParams",[this.settings.post_params])};SWFUpload.prototype.removePostParam=function(name){delete this.settings.post_params[name];this.callFlash("SetPostParams",[this.settings.post_params])};SWFUpload.prototype.setFileTypes=function(types,description){this.settings.file_types=types;this.settings.file_types_description=description;this.callFlash("SetFileTypes",[types,description])};SWFUpload.prototype.setFileSizeLimit=function(filesizelimit){this.settings.file_size_limit=filesizelimit;this.callFlash("SetFileSizeLimit",[filesizelimit])};SWFUpload.prototype.setFileUploadLimit=function(fileuploadlimit){this.settings.file_upload_limit=fileuploadlimit;this.callFlash("SetFileUploadLimit",[fileuploadlimit])};SWFUpload.prototype.setFileQueueLimit=function(fileQueueLimit){this.settings.file_queue_limit=fileQueueLimit;this.callFlash("SetFileQueueLimit",[fileQueueLimit])};SWFUpload.prototype.setFilePostName=function(filePostName){this.settings.file_post_name=filePostName;this.callFlash("SetFilePostName",[filePostName])};SWFUpload.prototype.setUseQueryString=function(useQueryString){this.settings.use_query_string=useQueryString;this.callFlash("SetUseQueryString",[useQueryString])};SWFUpload.prototype.setRequeueOnError=function(requeueOnError){this.settings.requeue_on_error=requeueOnError;this.callFlash("SetRequeueOnError",[requeueOnError])};SWFUpload.prototype.setHTTPSuccess=function(http_status_codes){if(typeof http_status_codes==="string"){http_status_codes=http_status_codes.replace(" ","").split(",")}this.settings.http_success=http_status_codes;this.callFlash("SetHTTPSuccess",[http_status_codes])};SWFUpload.prototype.setAssumeSuccessTimeout=function(timeout_seconds){this.settings.assume_success_timeout=timeout_seconds;this.callFlash("SetAssumeSuccessTimeout",[timeout_seconds])};SWFUpload.prototype.setDebugEnabled=function(debugEnabled){this.settings.debug_enabled=debugEnabled;this.callFlash("SetDebugEnabled",[debugEnabled])};SWFUpload.prototype.setButtonImageURL=function(buttonImageURL){if(buttonImageURL==undefined){buttonImageURL=""}this.settings.button_image_url=buttonImageURL;this.callFlash("SetButtonImageURL",[buttonImageURL])};SWFUpload.prototype.setButtonDimensions=function(width,height){this.settings.button_width=width;this.settings.button_height=height;var movie=this.getMovieElement();if(movie!=undefined){movie.style.width=width+"px";movie.style.height=height+"px"}this.callFlash("SetButtonDimensions",[width,height])};SWFUpload.prototype.setButtonText=function(html){this.settings.button_text=html;this.callFlash("SetButtonText",[html])};SWFUpload.prototype.setButtonTextPadding=function(left,top){this.settings.button_text_top_padding=top;this.settings.button_text_left_padding=left;this.callFlash("SetButtonTextPadding",[left,top])};SWFUpload.prototype.setButtonTextStyle=function(css){this.settings.button_text_style=css;this.callFlash("SetButtonTextStyle",[css])};SWFUpload.prototype.setButtonDisabled=function(isDisabled){this.settings.button_disabled=isDisabled;this.callFlash("SetButtonDisabled",[isDisabled])};SWFUpload.prototype.setButtonAction=function(buttonAction){this.settings.button_action=buttonAction;this.callFlash("SetButtonAction",[buttonAction])};SWFUpload.prototype.setButtonCursor=function(cursor){this.settings.button_cursor=cursor;this.callFlash("SetButtonCursor",[cursor])};SWFUpload.prototype.queueEvent=function(handlerName,argumentArray){var self=this;if(argumentArray==undefined){argumentArray=[]}else if(!(argumentArray instanceof Array)){argumentArray=[argumentArray]}if(typeof this.settings[handlerName]==="function"){this.eventQueue.push(function(){this.settings[handlerName].apply(this,argumentArray)});setTimeout(function(){self.executeNextEvent()},0)}else if(this.settings[handlerName]!==null){throw"Event handler "+handlerName+" is unknown or is not a function";}};SWFUpload.prototype.executeNextEvent=function(){var f=this.eventQueue?this.eventQueue.shift():null;if(typeof(f)==="function"){f.apply(this)}};SWFUpload.prototype.unescapeFilePostParams=function(file){var reg=/[$]([0-9a-f]{4})/i,unescapedPost={},uk,match;if(file!=undefined){for(var k in file.post){if(file.post.hasOwnProperty(k)){uk=k;while((match=reg.exec(uk))!==null){uk=uk.replace(match[0],String.fromCharCode(parseInt("0x"+match[1],16)))}unescapedPost[uk]=file.post[k]}}file.post=unescapedPost}return file};SWFUpload.prototype.swfuploadPreload=function(){var returnValue;if(typeof this.settings.swfupload_preload_handler==="function"){returnValue=this.settings.swfupload_preload_handler.call(this)}else if(this.settings.swfupload_preload_handler!=undefined){throw"upload_start_handler must be a function";}if(returnValue===undefined){returnValue=true}return!!returnValue};SWFUpload.prototype.flashReady=function(){var movieElement=this.cleanUp();if(!movieElement){this.debug("Flash called back ready but the flash movie can't be found.");return}this.queueEvent("swfupload_loaded_handler")};SWFUpload.prototype.cleanUp=function(){var movieElement=this.getMovieElement();try{if(movieElement&&typeof(movieElement.CallFunction)==="unknown"){this.debug("Removing Flash functions hooks (this should only run in IE and should prevent memory leaks)");for(var key in movieElement){try{if(typeof(movieElement[key])==="function"){movieElement[key]=null}}catch(ex){}}}}catch(ex1){}window["__flash__removeCallback"]=function(instance,name){try{if(instance){instance[name]=null}}catch(flashEx){}};return movieElement};SWFUpload.prototype.mouseClick=function(){this.queueEvent("mouse_click_handler")};SWFUpload.prototype.mouseOver=function(){this.queueEvent("mouse_over_handler")};SWFUpload.prototype.mouseOut=function(){this.queueEvent("mouse_out_handler")};SWFUpload.prototype.fileDialogStart=function(){this.queueEvent("file_dialog_start_handler")};SWFUpload.prototype.fileQueued=function(file){file=this.unescapeFilePostParams(file);this.queueEvent("file_queued_handler",file)};SWFUpload.prototype.fileQueueError=function(file,errorCode,message){file=this.unescapeFilePostParams(file);this.queueEvent("file_queue_error_handler",[file,errorCode,message])};SWFUpload.prototype.fileDialogComplete=function(numFilesSelected,numFilesQueued,numFilesInQueue){this.queueEvent("file_dialog_complete_handler",[numFilesSelected,numFilesQueued,numFilesInQueue])};SWFUpload.prototype.uploadResizeStart=function(file,resizeSettings){file=this.unescapeFilePostParams(file);this.queueEvent("upload_resize_start_handler",[file,resizeSettings.width,resizeSettings.height,resizeSettings.encoding,resizeSettings.quality])};SWFUpload.prototype.uploadStart=function(file){file=this.unescapeFilePostParams(file);this.queueEvent("return_upload_start_handler",file)};SWFUpload.prototype.returnUploadStart=function(file){var returnValue;if(typeof this.settings.upload_start_handler==="function"){file=this.unescapeFilePostParams(file);returnValue=this.settings.upload_start_handler.call(this,file)}else if(this.settings.upload_start_handler!=undefined){throw"upload_start_handler must be a function";}if(returnValue===undefined){returnValue=true}returnValue=!!returnValue;this.callFlash("ReturnUploadStart",[returnValue])};SWFUpload.prototype.uploadProgress=function(file,bytesComplete,bytesTotal){file=this.unescapeFilePostParams(file);this.queueEvent("upload_progress_handler",[file,bytesComplete,bytesTotal])};SWFUpload.prototype.uploadError=function(file,errorCode,message){file=this.unescapeFilePostParams(file);this.queueEvent("upload_error_handler",[file,errorCode,message])};SWFUpload.prototype.uploadSuccess=function(file,serverData,responseReceived){file=this.unescapeFilePostParams(file);this.queueEvent("upload_success_handler",[file,serverData,responseReceived])};SWFUpload.prototype.uploadComplete=function(file){file=this.unescapeFilePostParams(file);this.queueEvent("upload_complete_handler",file)};SWFUpload.prototype.debug=function(message){this.queueEvent("debug_handler",message)};SWFUpload.prototype.debugMessage=function(message){var exceptionMessage,exceptionValues;if(this.settings.debug){exceptionValues=[];if(typeof message==="object"&&typeof message.name==="string"&&typeof message.message==="string"){for(var key in message){if(message.hasOwnProperty(key)){exceptionValues.push(key+": "+message[key])}}exceptionMessage=exceptionValues.join("\n")||"";exceptionValues=exceptionMessage.split("\n");exceptionMessage="EXCEPTION: "+exceptionValues.join("\nEXCEPTION: ");SWFUpload.Console.writeLine(exceptionMessage)}else{SWFUpload.Console.writeLine(message)}}};SWFUpload.Console={};SWFUpload.Console.writeLine=function(message){var console,documentForm;try{console=document.getElementById("SWFUpload_Console");if(!console){documentForm=document.createElement("form");document.getElementsByTagName("body")[0].appendChild(documentForm);console=document.createElement("textarea");console.id="SWFUpload_Console";console.style.fontFamily="monospace";console.setAttribute("wrap","off");console.wrap="off";console.style.overflow="auto";console.style.width="700px";console.style.height="350px";console.style.margin="5px";documentForm.appendChild(console)}console.value+=message+"\n";console.scrollTop=console.scrollHeight-console.clientHeight}catch(ex){alert("Exception: "+ex.name+" Message: "+ex.message)}};swfobject=function(){var D="undefined",r="object",S="Shockwave Flash",W="ShockwaveFlash.ShockwaveFlash",q="application/x-shockwave-flash",R="SWFObjectExprInst",x="onreadystatechange",O=window,j=document,t=navigator,T=false,U=[h],o=[],N=[],I=[],l,Q,E,B,J=false,a=false,n,G,m=true,M=function(){var aa=typeof j.getElementById!=D&&typeof j.getElementsByTagName!=D&&typeof j.createElement!=D,ah=t.userAgent.toLowerCase(),Y=t.platform.toLowerCase(),ae=Y?/win/.test(Y):/win/.test(ah),ac=Y?/mac/.test(Y):/mac/.test(ah),af=/webkit/.test(ah)?parseFloat(ah.replace(/^.*webkit\/(\d+(\.\d+)?).*$/,"$1")):false,X=!+"\v1",ag=[0,0,0],ab=null;if(typeof t.plugins!=D&&typeof t.plugins[S]==r){ab=t.plugins[S].description;if(ab&&!(typeof t.mimeTypes!=D&&t.mimeTypes[q]&&!t.mimeTypes[q].enabledPlugin)){T=true;X=false;ab=ab.replace(/^.*\s+(\S+\s+\S+$)/,"$1");ag[0]=parseInt(ab.replace(/^(.*)\..*$/,"$1"),10);ag[1]=parseInt(ab.replace(/^.*\.(.*)\s.*$/,"$1"),10);ag[2]=/[a-zA-Z]/.test(ab)?parseInt(ab.replace(/^.*[a-zA-Z]+(.*)$/,"$1"),10):0}}else{if(typeof O.ActiveXObject!=D){try{var ad=new ActiveXObject(W);if(ad){ab=ad.GetVariable("$version");if(ab){X=true;ab=ab.split(" ")[1].split(",");ag=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)]}}}catch(Z){}}}return{w3:aa,pv:ag,wk:af,ie:X,win:ae,mac:ac}}(),k=function(){if(!M.w3){return}if((typeof j.readyState!=D&&j.readyState=="complete")||(typeof j.readyState==D&&(j.getElementsByTagName("body")[0]||j.body))){f()}if(!J){if(typeof j.addEventListener!=D){j.addEventListener("DOMContentLoaded",f,false)}if(M.ie&&M.win){j.attachEvent(x,function(){if(j.readyState=="complete"){j.detachEvent(x,arguments.callee);f()}});if(O==top){(function(){if(J){return}try{j.documentElement.doScroll("left")}catch(X){setTimeout(arguments.callee,0);return}f()})()}}if(M.wk){(function(){if(J){return}if(!/loaded|complete/.test(j.readyState)){setTimeout(arguments.callee,0);return}f()})()}s(f)}}();function f(){if(J){return}try{var Z=j.getElementsByTagName("body")[0].appendChild(C("span"));Z.parentNode.removeChild(Z)}catch(aa){return}J=true;var X=U.length;for(var Y=0;Y<X;Y++){U[Y]()}}function K(X){if(J){X()}else{U[U.length]=X}}function s(Y){if(typeof O.addEventListener!=D){O.addEventListener("load",Y,false)}else{if(typeof j.addEventListener!=D){j.addEventListener("load",Y,false)}else{if(typeof O.attachEvent!=D){i(O,"onload",Y)}else{if(typeof O.onload=="function"){var X=O.onload;O.onload=function(){X();Y()}}else{O.onload=Y}}}}}function h(){if(T){V()}else{H()}}function V(){var X=j.getElementsByTagName("body")[0];var aa=C(r);aa.setAttribute("type",q);var Z=X.appendChild(aa);if(Z){var Y=0;(function(){if(typeof Z.GetVariable!=D){var ab=Z.GetVariable("$version");if(ab){ab=ab.split(" ")[1].split(",");M.pv=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)]}}else{if(Y<10){Y++;setTimeout(arguments.callee,10);return}}X.removeChild(aa);Z=null;H()})()}else{H()}}function H(){var ag=o.length;if(ag>0){for(var af=0;af<ag;af++){var Y=o[af].id;var ab=o[af].callbackFn;var aa={success:false,id:Y};if(M.pv[0]>0){var ae=c(Y);if(ae){if(F(o[af].swfVersion)&&!(M.wk&&M.wk<312)){w(Y,true);if(ab){aa.success=true;aa.ref=z(Y);ab(aa)}}else{if(o[af].expressInstall&&A()){var ai={};ai.data=o[af].expressInstall;ai.width=ae.getAttribute("width")||"0";ai.height=ae.getAttribute("height")||"0";if(ae.getAttribute("class")){ai.styleclass=ae.getAttribute("class");}if(ae.getAttribute("align")){ai.align=ae.getAttribute("align")}var ah={};var X=ae.getElementsByTagName("param");var ac=X.length;for(var ad=0;ad<ac;ad++){if(X[ad].getAttribute("name").toLowerCase()!="movie"){ah[X[ad].getAttribute("name")]=X[ad].getAttribute("value")}}P(ai,ah,Y,ab)}else{p(ae);if(ab){ab(aa)}}}}}else{w(Y,true);if(ab){var Z=z(Y);if(Z&&typeof Z.SetVariable!=D){aa.success=true;aa.ref=Z}ab(aa)}}}}}function z(aa){var X=null;var Y=c(aa);if(Y&&Y.nodeName=="OBJECT"){if(typeof Y.SetVariable!=D){X=Y}else{var Z=Y.getElementsByTagName(r)[0];if(Z){X=Z}}}return X}function A(){return!a&&F("6.0.65")&&(M.win||M.mac)&&!(M.wk&&M.wk<312)}function P(aa,ab,X,Z){a=true;E=Z||null;B={success:false,id:X};var ae=c(X);if(ae){if(ae.nodeName=="OBJECT"){l=g(ae);Q=null}else{l=ae;Q=X}aa.id=R;if(typeof aa.width==D||(!/%$/.test(aa.width)&&parseInt(aa.width,10)<310)){aa.width="310"}if(typeof aa.height==D||(!/%$/.test(aa.height)&&parseInt(aa.height,10)<137)){aa.height="137"}j.title=j.title.slice(0,47)+" - Flash Player Installation";var ad=M.ie&&M.win?"ActiveX":"PlugIn",ac="MMredirectURL="+O.location.toString().replace(/&/g,"%26")+"&MMplayerType="+ad+"&MMdoctitle="+j.title;if(typeof ab.flashvars!=D){ab.flashvars+="&"+ac}else{ab.flashvars=ac}if(M.ie&&M.win&&ae.readyState!=4){var Y=C("div");X+="SWFObjectNew";Y.setAttribute("id",X);ae.parentNode.insertBefore(Y,ae);ae.style.display="none";(function(){if(ae.readyState==4){ae.parentNode.removeChild(ae)}else{setTimeout(arguments.callee,10)}})()}u(aa,ab,X)}}function p(Y){if(M.ie&&M.win&&Y.readyState!=4){var X=C("div");Y.parentNode.insertBefore(X,Y);X.parentNode.replaceChild(g(Y),X);Y.style.display="none";(function(){if(Y.readyState==4){Y.parentNode.removeChild(Y)}else{setTimeout(arguments.callee,10)}})()}else{Y.parentNode.replaceChild(g(Y),Y)}}function g(ab){var aa=C("div");if(M.win&&M.ie){aa.innerHTML=ab.innerHTML}else{var Y=ab.getElementsByTagName(r)[0];if(Y){var ad=Y.childNodes;if(ad){var X=ad.length;for(var Z=0;Z<X;Z++){if(!(ad[Z].nodeType==1&&ad[Z].nodeName=="PARAM")&&!(ad[Z].nodeType==8)){aa.appendChild(ad[Z].cloneNode(true))}}}}}return aa}function u(ai,ag,Y){var X,aa=c(Y);if(M.wk&&M.wk<312){return X}if(aa){if(typeof ai.id==D){ai.id=Y}if(M.ie&&M.win){var ah="";for(var ae in ai){if(ai[ae]!=Object.prototype[ae]){if(ae.toLowerCase()=="data"){ag.movie=ai[ae]}else{if(ae.toLowerCase()=="styleclass"){ah+=' class="'+ai[ae]+'"'}else{if(ae.toLowerCase()!="classid"){ah+=" "+ae+'="'+ai[ae]+'"'}}}}}var af="";for(var ad in ag){if(ag[ad]!=Object.prototype[ad]){af+='<param name="'+ad+'" value="'+ag[ad]+'" />'}}aa.outerHTML='<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"'+ah+">"+af+"</object>";N[N.length]=ai.id;X=c(ai.id)}else{var Z=C(r);Z.setAttribute("type",q);for(var ac in ai){if(ai[ac]!=Object.prototype[ac]){if(ac.toLowerCase()=="styleclass"){Z.setAttribute("class",ai[ac])}else{if(ac.toLowerCase()!="classid"){Z.setAttribute(ac,ai[ac])}}}}for(var ab in ag){if(ag[ab]!=Object.prototype[ab]&&ab.toLowerCase()!="movie"){e(Z,ab,ag[ab])}}aa.parentNode.replaceChild(Z,aa);X=Z}}return X}function e(Z,X,Y){var aa=C("param");aa.setAttribute("name",X);aa.setAttribute("value",Y);Z.appendChild(aa)}function y(Y){var X=c(Y);if(X&&X.nodeName=="OBJECT"){if(M.ie&&M.win){X.style.display="none";(function(){if(X.readyState==4){b(Y)}else{setTimeout(arguments.callee,10)}})()}else{X.parentNode.removeChild(X)}}}function b(Z){var Y=c(Z);if(Y){for(var X in Y){if(typeof Y[X]=="function"){Y[X]=null}}Y.parentNode.removeChild(Y)}}function c(Z){var X=null;try{X=j.getElementById(Z)}catch(Y){}return X;}function C(X){return j.createElement(X)}function i(Z,X,Y){Z.attachEvent(X,Y);I[I.length]=[Z,X,Y]}function F(Z){var Y=M.pv,X=Z.split(".");X[0]=parseInt(X[0],10);X[1]=parseInt(X[1],10)||0;X[2]=parseInt(X[2],10)||0;return(Y[0]>X[0]||(Y[0]==X[0]&&Y[1]>X[1])||(Y[0]==X[0]&&Y[1]==X[1]&&Y[2]>=X[2]))?true:false}function v(ac,Y,ad,ab){if(M.ie&&M.mac){return}var aa=j.getElementsByTagName("head")[0];if(!aa){return}var X=(ad&&typeof ad=="string")?ad:"screen";if(ab){n=null;G=null}if(!n||G!=X){var Z=C("style");Z.setAttribute("type","text/css");Z.setAttribute("media",X);n=aa.appendChild(Z);if(M.ie&&M.win&&typeof j.styleSheets!=D&&j.styleSheets.length>0){n=j.styleSheets[j.styleSheets.length-1]}G=X}if(M.ie&&M.win){if(n&&typeof n.addRule==r){n.addRule(ac,Y)}}else{if(n&&typeof j.createTextNode!=D){n.appendChild(j.createTextNode(ac+" {"+Y+"}"))}}}function w(Z,X){if(!m){return}var Y=X?"visible":"hidden";if(J&&c(Z)){c(Z).style.visibility=Y}else{v("#"+Z,"visibility:"+Y)}}function L(Y){var Z=/[\\\"<>\.;]/;var X=Z.exec(Y)!=null;return X&&typeof encodeURIComponent!=D?encodeURIComponent(Y):Y}var d=function(){if(M.ie&&M.win){window.attachEvent("onunload",function(){var ac=I.length;for(var ab=0;ab<ac;ab++){I[ab][0].detachEvent(I[ab][1],I[ab][2])}var Z=N.length;for(var aa=0;aa<Z;aa++){y(N[aa])}for(var Y in M){M[Y]=null}M=null;for(var X in swfobject){swfobject[X]=null}swfobject=null})}}();return{registerObject:function(ab,X,aa,Z){if(M.w3&&ab&&X){var Y={};Y.id=ab;Y.swfVersion=X;Y.expressInstall=aa;Y.callbackFn=Z;o[o.length]=Y;w(ab,false)}else{if(Z){Z({success:false,id:ab})}}},getObjectById:function(X){if(M.w3){return z(X)}},embedSWF:function(ab,ah,ae,ag,Y,aa,Z,ad,af,ac){var X={success:false,id:ah};if(M.w3&&!(M.wk&&M.wk<312)&&ab&&ah&&ae&&ag&&Y){w(ah,false);K(function(){ae+="";ag+="";var aj={};if(af&&typeof af===r){for(var al in af){aj[al]=af[al]}}aj.data=ab;aj.width=ae;aj.height=ag;var am={};if(ad&&typeof ad===r){for(var ak in ad){am[ak]=ad[ak]}}if(Z&&typeof Z===r){for(var ai in Z){if(typeof am.flashvars!=D){am.flashvars+="&"+ai+"="+Z[ai]}else{am.flashvars=ai+"="+Z[ai]}}}if(F(Y)){var an=u(aj,am,ah);if(aj.id==ah){w(ah,true)}X.success=true;X.ref=an}else{if(aa&&A()){aj.data=aa;P(aj,am,ah,ac);return}else{w(ah,true)}}if(ac){ac(X)}})}else{if(ac){ac(X)}}},switchOffAutoHideShow:function(){m=false},ua:M,getFlashPlayerVersion:function(){return{major:M.pv[0],minor:M.pv[1],release:M.pv[2]}},hasFlashPlayerVersion:F,createSWF:function(Z,Y,X){if(M.w3){return u(Z,Y,X)}else{return undefined}},showExpressInstall:function(Z,aa,X,Y){if(M.w3&&A()){P(Z,aa,X,Y)}},removeSWF:function(X){if(M.w3){y(X)}},createCSS:function(aa,Z,Y,X){if(M.w3){v(aa,Z,Y,X)}},addDomLoadEvent:K,addLoadEvent:s,getQueryParamValue:function(aa){var Z=j.location.search||j.location.hash;if(Z){if(/\?/.test(Z)){Z=Z.split("?")[1]}if(aa==null){return L(Z)}var Y=Z.split("&");for(var X=0;X<Y.length;X++){if(Y[X].substring(0,Y[X].indexOf("="))==aa){return L(Y[X].substring((Y[X].indexOf("=")+1)))}}}return""},expressInstallCallback:function(){if(a){var X=c(R);if(X&&l){X.parentNode.replaceChild(l,X);if(Q){w(Q,true);if(M.ie&&M.win){l.style.display="block"}}if(E){E(B)}}a=false}}}}();swfobject.addDomLoadEvent(function(){if(typeof(SWFUpload.onload)==="function"){SWFUpload.onload.call(window)}});var SWFUpload;if(typeof(SWFUpload)==="function"){SWFUpload.queue={};SWFUpload.prototype.initSettings=(function(oldInitSettings){return function(userSettings){if(typeof(oldInitSettings)==="function"){oldInitSettings.call(this,userSettings)}this.queueSettings={};this.queueSettings.queue_cancelled_flag=false;this.queueSettings.queue_upload_count=0;this.queueSettings.user_upload_complete_handler=this.settings.upload_complete_handler;this.queueSettings.user_upload_start_handler=this.settings.upload_start_handler;this.settings.upload_complete_handler=SWFUpload.queue.uploadCompleteHandler;this.settings.upload_start_handler=SWFUpload.queue.uploadStartHandler;this.settings.queue_complete_handler=userSettings.queue_complete_handler||null}})(SWFUpload.prototype.initSettings);SWFUpload.prototype.startUpload=function(fileID){this.queueSettings.queue_cancelled_flag=false;this.callFlash("StartUpload",[fileID])};SWFUpload.prototype.cancelQueue=function(){this.queueSettings.queue_cancelled_flag=true;this.stopUpload();var stats=this.getStats();while(stats.files_queued>0){this.cancelUpload();stats=this.getStats()}};SWFUpload.queue.uploadStartHandler=function(file){var returnValue;if(typeof(this.queueSettings.user_upload_start_handler)==="function"){returnValue=this.queueSettings.user_upload_start_handler.call(this,file)}returnValue=(returnValue===false)?false:true;this.queueSettings.queue_cancelled_flag=!returnValue;return returnValue};SWFUpload.queue.uploadCompleteHandler=function(file){var user_upload_complete_handler=this.queueSettings.user_upload_complete_handler;var continueUpload;if(file.filestatus===SWFUpload.FILE_STATUS.COMPLETE){this.queueSettings.queue_upload_count++}if(typeof(user_upload_complete_handler)==="function"){continueUpload=(user_upload_complete_handler.call(this,file)===false)?false:true}else if(file.filestatus===SWFUpload.FILE_STATUS.QUEUED){continueUpload=false}else{continueUpload=true}if(continueUpload){var stats=this.getStats();if(stats.files_queued>0&&this.queueSettings.queue_cancelled_flag===false){this.startUpload()}else if(this.queueSettings.queue_cancelled_flag===false){this.queueEvent("queue_complete_handler",[this.queueSettings.queue_upload_count]);this.queueSettings.queue_upload_count=0}else{this.queueSettings.queue_cancelled_flag=false;this.queueSettings.queue_upload_count=0}}}};	

(function( $, factory ){

	if ( jazz.config.isUseRequireJS === true ) {
		define( ['jquery', 'form/jazz.form.Field'], factory );
	} else {
		factory($);
	}	 
})(jQuery, function($){

/**
 * @version 0.5
 * @name jazz.Attachment
 * @description 附件上传。
 * @constructor
 * @extends jazz.boxComponent
 */
$.widget('jazz.attachment', $.jazz.field, {
	
    options: /** @lends jazz.Attachment# */ {
    	
    	vtype: "attachment", 

		/**
		 *@type String
		 *@desc 允许上传的文件类型 "*.*" 全部类型  "*.jpg;*.png" 只允许上传jpg和png的图片
		 *@default '全部'
		 */		    	
    	allowfiletypes: '*.*',
		
    	/**
		 *@type String
		 *@desc 允许上传的文件类型的描述
		 *@default '所有文件'
		 */
    	allowfiletypesdesc: '所有文件', 
    	
    	/**
    	 * @type String
    	 * @desc 附件的描述信息
    	 * @default ''
    	 */
    	description: '',
    	
    	/**
    	 * @type String
    	 * @desc 下载附件的url地址
    	 * @default ''
    	 */    	
    	downloadurl: '',
		
		/**
		 *@type String
		 *@desc 上传文件大小的最小值
		 *@default '50 MB'
		 */
		filesizelimit: '50 MB',
		
		/**
		 *@type Number
		 *@desc 上传文件最小数量
		 *@default 20
		 */	    	
		fileuploadlimit: 20,
		
		/**
		 *@type Number
		 *@desc 上传文件必须大于该值，才允许上传
		 *@default 0
		 */		
		filesizeminlimit: 0,
		
		/**
		 *@type Boolean
		 *@desc 是否允许上传相同的记录  true允许 false不允许
		 *@default false
		 */
		isrepeatupload: false,
    	
		/**
		 *@type String
		 *@desc 图片预览路径
		 *@default ''
		 */
		previewurl: '', 
		
		/**
		 *@type String
		 *@desc 点击上传附件时的标题名称
		 *@default '上传附件'
		 */  		
		title: '上传附件',
		
		/**
		 *@type Boolean
		 *@desc 是否只允许传单个文件, true 只允许传单个文件， false 同时可传多个文件
		 *@default true
		 */    	
    	single: false,
    	
		/**
		 *@type Number
		 *@desc 显示不同的样式主题
		 *@default 0
		 */    	
    	theme: 0,
    	
		/**
		 *@type String
		 *@desc 附件的上传路径
		 *@default ''
		 */    	
    	uploadurl: '',
    	
    	//event
		/**
		 *@desc 点击上传完附件的事件
		 *@param {event} 事件
		 *@param {data} 通过调用 jazz.jsonToString(data) 查看具体对象内的属性;
		 *@event
		 *@example
		 *<br/>$("XXX").attachment("option", "click", function(event, ui){  <br/>} <br/>});
		 *或:
		 *<br/>$("XXX").on("attachmentclick",function(event, ui){  <br/>} <br/>});
		 *或：
		 *function XXX(){……}
		 *<div…… click="XXX()"></div> 或 <div…… click="XXX"></div>
		 **/      	
    	click: null,    	
    	
		/**
		 *@desc 预览图片的关闭事件
		 *@param {event} 事件
		 *@param {data} 通过调用 jazz.jsonToString(data) 查看具体对象内的属性;
		 *@event
		 *@example
		 *<br/>$("XXX").attachment("option", "close", function(event, ui){  <br/>} <br/>});
		 *或:
		 *<br/>$("XXX").on("attachmentclose",function(event, ui){  <br/>} <br/>});
		 *或：
		 *function XXX(){……}
		 *<div…… close="XXX()"></div> 或 <div…… close="XXX"></div>
		 **/      	
    	close: null,
    	
		/**
		 *@desc 鼠标移入附件时的事件
		 *@param {event} 事件
		 *@param {data} 通过调用 jazz.jsonToString(data) 查看具体对象内的属性;
		 *@event
		 *@example
		 *<br/>$("XXX").attachment("option", "enter", function(event, ui){  <br/>} <br/>});
		 *或:
		 *<br/>$("XXX").on("attachmententer",function(event, ui){  <br/>} <br/>});
		 *或：
		 *function XXX(){……}
		 *<div…… enter="XXX()"></div> 或 <div…… enter="XXX"></div>
		 **/      	
    	enter: null,    	
    	
		/**
		 *@desc 鼠标移出附件时的事件
		 *@param {event} 事件
		 *@param {data} 通过调用 jazz.jsonToString(data) 查看具体对象内的属性;
		 *@event
		 *@example
		 *<br/>$("XXX").attachment("option", "leave", function(event, ui){  <br/>} <br/>});
		 *或:
		 *<br/>$("XXX").on("attachmentleave",function(event, ui){  <br/>} <br/>});
		 *或：
		 *function XXX(){……}
		 *<div…… leave="XXX()"></div> 或 <div…… leave="XXX"></div>
		 **/      	
    	leave: null,

		/**
		 *@desc 上传附件成功后的回调函数
		 *@param {event} 事件
		 *@param {data} 通过调用 jazz.jsonToString(data) 查看具体对象内的属性; 
		 *@event
		 *@example
		 *<br/>$("XXX").attachment("option", "uploadsuccess", function(event, ui){  <br/>} <br/>});
		 *或:
		 *<br/>$("XXX").on("attachmentuploadsuccess",function(event, ui){  <br/>} <br/>});
		 *或：
		 *function XXX(){……}
		 *<div…… uploadsuccess="XXX()"></div> 或 <div…… uploadsuccess="XXX"></div>
		 **/   	
    	uploadsuccess: null

	},
	
	_height: function(){},
	_disabled: function(){},
	_editable: function(){},
	
	/** @lends jazz.Attachment */
	_create: function(){
		
		this._super();
		
		this.id = this.options.name;
		if(!this.id){
			return false;
		}

		var str = '<div class="jazz-att-panel" id="'+this.id+'Panel">'
		  	    + '<div class="jazz-att-add">'
			    + '<span class="iconTrans14 jazz-att-icon"></span><a href="#" tabindex="-1">'+this.options.title+'</a>'
			    + '</div>';
		   
		    str += '<div class="jazz-att-theme" id="'+this.id+'ProgressContainer"></div>';
		   
			if(this.options.description){
			   str += '<div class="jazz-att-shuoming">'+this.options.description+'</div>';
			}
			
			str += '<div class="swfContainer" style="width:90px; height: 20px;left: 0; top: 0; position: absolute;">' 
			   		+'<input type="hidden" name="uploadSession" value="'+jazz.getRandom()+jazz.getRandom()+'" />'
			   		+'<input type="hidden" name="filesizelimit" value="'+this.options.filesizelimit+'" />'
			   		+'<input type="hidden" name="filesizeminlimit" value="'+this.options.filesizeminlimit+'" />'
			   		+'<input type="hidden" name="fileuploadlimit" value="'+this.options.fileuploadlimit+'" />'
			   		+'<input type="hidden" name="allowfiletypes" value="'+this.options.allowfiletypes+'" />'
			   		+'<input type="hidden" name="allowfiletypesdesc" value="'+this.options.allowfiletypesdesc+'" />'
			   		+'<input type="hidden" name="uploadedfilescount" value="0"/>'
			   		+'<input type="hidden" name="disableButtonId" value="btnSave" />'					   		
			   		+'<span id="'+this.id+'SwfHolder"></span>'
			   +'</div>'
  		       //+'<span class="tips">提示：您最多可以添加this.fileCount个附件。</span>'
	   +'</div>';

	   this.parent.addClass("jazz-att-no-border");
	   this.inputFrame.addClass('jazz-att-panel');
	   this.inputFrame.append(str);
	  
	   this._loadSwfupload();
	},
	
	/**
	 * @desc 初始化
	 * @private
	 */
	_init: function(){
		this._super();
		
		//用于数据回显
		this.datadisplay = [];
	},
	
	/**
	 * @desc 获取上传配置内容
	 * @private
	 */	
	_getConfig: function(){
		var id = this.id;
		if (null == id || "" == id){
			throw "加载文件上传控件错误！控件id参数不能为空！";
		}
		var config = {id: id};
		var elements = this.inputFrame.find('input[type=hidden]');
		$.each(elements, function(i, item){
			config[item.name] = item.value;  
		});
		//业务主键id
		config.masterId = config.masterId || '';
		//允许上传的文件大小，默认为50M
		config.filesizelimit = config.filesizelimit || '50 MB';
		//允许上传的文件不得小于
		config.filesizeminlimit = config.filesizeminlimit || 0;		
		//允许上传的文件个数
		config.fileuploadlimit = parseInt(config.fileuploadlimit || 20);
		//允许上传的文件类型
		config.allowfiletypes = config.allowfiletypes || '*.*;';
		//上传的文件类型描述
		config.allowfiletypesdesc = config.allowfiletypesdesc || '所有文件;';
		//初始已上传的文件数量
		config.uploadedfilescount = parseInt(config.uploadedfilescount || 0);
		return config;
	},
		
	/**
	 * @desc 加载swfupload组件
	 * @private
	 */
	_loadSwfupload: function(){
		SWFUpload.onload = this._swf_upload();
	},

	/**
	 * @desc 设置上传组件是否为可上传或者是文本
	 * @private
	 */
	_readonly: function(){
		if(this.options.readonly == true){
			this.inputFrame.find(".jazz-att-add").css({"display": "none"});
			this.inputFrame.find(".swfContainer").css({"display": "none"}); 
			if(this.options.theme == 1){
				this.inputFrame.find(".jazz-att-theme1-close").css({"display": "none"});				
			}
		}else{
			this.inputFrame.find(".jazz-att-add").css({"display": "block"});
			this.inputFrame.find(".swfContainer").css({"display": "block"});
			if(this.options.theme == 1){
				this.inputFrame.find(".jazz-att-theme1-close").css({"display": "block"});
			}
		}
	},
	
	_swf_upload: function(){
		var config = this._getConfig();
		this._swfInit(config);
	},

	/**
	 * @desc 初始化组件
	 * @param {config} 初始化配置项
	 * @private
	 */	
     _swfInit: function(config){
    	var $this = this;
  		var DEFAULT_UPLOAD_URL = jazz.config.contextpath + ($this.options.uploadurl || jazz.config.default_upload_url),
  			DEFAULT_FLASH_URL = jazz.config.contextpath + jazz.config.default_flash_url,
  			DEFAULT_FLASH9_URL = jazz.config.contextpath + jazz.config.default_flash9_url;

	  		var single = this.options.single, uploadSuccessHandler = uploadSuccess;
	  		
	  		var isrepeatupload = this.options.isrepeatupload;

			this.swfInstance = new SWFUpload({
					upload_url: $.trim(DEFAULT_UPLOAD_URL),
					post_params: {
						type: 'upload',
						uploadSession: config.uploadSession
					},
					file_size_limit: config.filesizelimit,
					file_types : config.allowfiletypes,
					file_types_description : config.allowfiletypesdesc,
					file_upload_limit : config.fileuploadlimit,
					
					button_action: single?SWFUpload.BUTTON_ACTION.SELECT_FILE:SWFUpload.BUTTON_ACTION.SELECT_FILES,
					
					//Event handlers
					swfupload_loaded_handler: loaded,
					swfupload_preload_handler: preLoad,
					swfupload_load_failed_handler: loadFailed,
					file_queued_handler: fileQueued,
					file_queue_error_handler : fileQueueError,
					file_dialog_complete_handler : fileDialogComplete,
					upload_start_handler : uploadStart,
					upload_progress_handler : uploadProgress,
					upload_error_handler : uploadError,
					upload_success_handler : uploadSuccessHandler,
					upload_complete_handler : uploadComplete,
					//设置flash控件
					button_placeholder_id : $this.id + "SwfHolder",
					button_width: 90,
					button_height: 20,
					button_text_top_padding: 0,
					button_text_left_padding: 0,
					button_window_mode: SWFUpload.WINDOW_MODE.TRANSPARENT,
					button_cursor: SWFUpload.CURSOR.HAND,
					flash_url :DEFAULT_FLASH_URL,
					flash9_url:DEFAULT_FLASH9_URL,
					custom_settings:{
						progressTarget: $this.id+"ProgressContainer",
						uploadedfilescount: config.uploadedfilescount,
						disableButtonId: config.disableButtonId,
						type: config.type,
						isrepeatupload: isrepeatupload,
						alreadyupload: [],
						customuploadstate: false  //上传状态
	  				},
					debug: false
			});
			this._onLoad(this.swfInstance);
			
			function preLoad() {
				if (!this.support.loading) {
					jazz.info("加载附件上传控件失败,请安装FLASH9 或以上系统环境！");
					return false;
				}
			}

			function loaded() {
				var fileUploadLimt = this.settings.file_upload_limit;
			    var uploadedfilescount = this.customSettings.uploadedfilescount;
				if (fileUploadLimt > 0) {   // && uploadedFilesCount > 0
					var stats = this.getStats();
						stats.successful_uploads = uploadedfilescount; 
						this.setStats(stats);
				}
			}

			function loadFailed() {
				jazz.info("加载附件上传控件失败,请安装FLASH9 或以上系统环境！");
			}

			function fileQueued(file) {  
				try {
					var f = true;
					var size = file["size"];
					var n = parseFloat(size/1024, 0.1);
					if(!isNaN(n)){
						n = Math.round(n*100)/100;	
					}
					
					var filesize = $this.options.filesizeminlimit;
					filesize = filesize + "";
					if(filesize !== 0 && filesize.length > 2){
						filesize = $this.countFileSize(filesize);
					}
					
					var filesize = $this.countFileDisplaySize(filesize || 0);
					if(filesize[1] !== 0){
						if(parseFloat(filesize[1]) >= n){
							f = false;
						}
					}
					
					if((this.customSettings["isrepeatupload"] || $.inArray(file["name"], this.customSettings["alreadyupload"]) < 0 ) && f){
						this.customuploadstate = true;
						this.customSettings.alreadyupload.push(file["name"]);
						var progress = new FileProgress(file, this.customSettings.progressTarget, this.customSettings, "fileQueued");
						//是否允许取消任务
						progress.toggleCancel(true, this);
					}else{
						this.customuploadstate = false;
						if(!f){
							jazz.info('您所选择的文件未超过'+filesize[0]+'，请重新选择上传的文件。');							
						}else{
							jazz.info("上传数据已经存在！");
						}
					}
				} catch (ex) {
					this.debug(ex);
				}
			}

			function fileQueueError(file, errorCode, message) {
				try {
					if (errorCode === SWFUpload.QUEUE_ERROR.QUEUE_LIMIT_EXCEEDED) {
						jazz.info('您最多可以添加'+this.settings.file_upload_limit+'个附件！');
						return;
					}
					switch (errorCode) {
					case SWFUpload.QUEUE_ERROR.FILE_EXCEEDS_SIZE_LIMIT:
						jazz.info('您所选择的文件超过了'+this.settings.file_size_limit+'，请重新选择上传的文件。');
						break;
					case SWFUpload.QUEUE_ERROR.ZERO_BYTE_FILE:
						//alert('系统不允许上传0字节的文件！'+file.name);
						break;
					case SWFUpload.QUEUE_ERROR.INVALID_FILETYPE:
						jazz.info('您所选择的文件类型非法，请重新选择上传的文件。');
						break;
					default:
						if (file !== null) {
							jazz.info('您所选择的文件有误，请尝试重新选择上传的文件。');
						}
						break;
					}
				} catch (ex) {
			        this.debug(ex);
			    }
			}

			function fileDialogComplete(numFilesSelected, numFilesQueued) {
				if(this.customuploadstate){
					try {
						if (numFilesSelected == 0) {
							return false;
						}
						this.startUpload();
						
						//this.startResizedUpload(this.getFile(0).id, 100, 100);
					} catch (ex)  {
				        this.debug(ex);
					} 
				}
			}

			function uploadStart(file) {
				if(this.customuploadstate){
					try {
						var progress = new FileProgress(file, this.customSettings.progressTarget, this.customSettings, "uploadStart");
						progress.toggleCancel(true, this);
					}
					catch (ex) {
						this.debug(ex);
					}
					return true;
				}
			}

			function uploadProgress(file, bytesLoaded, bytesTotal) {
				if(this.customuploadstate){
					try {
						//根据控件不同类型，设置不同进度显示
						var percent = Math.ceil((bytesLoaded / bytesTotal) * 100);
						var progress = new FileProgress(file, this.customSettings.progressTarget, this.customSettings, "uploadProgress");
						progress.setProgress(percent);
						
					} catch (ex) {
						this.debug(ex);
					}
				}
			}

			function uploadSuccess(file, serverData) {
				if(this.customuploadstate){
					try {
						var progress = new FileProgress(file, this.customSettings.progressTarget, this.customSettings, "uploadSuccess");

					    var jsonData = jazz.stringToJson(serverData);   
	
						if (jsonData.success===true){
							progress.setComplete(jsonData);
							progress.toggleCancel(false, this);
							$this._showListEvent(file, serverData, this.customSettings);
							
							$this._event("uploadsuccess", null, serverData);						
						}else{
							this.uploadError(file, SWFUpload.UPLOAD_ERROR.USER_DEFINED, jsonData.msg);
						}
					} catch (ex) {
						this.debug(ex);
					}
				}
			}

			function uploadError(file, errorCode, message) {
				if(this.customuploadstate){
					try {
						var progress = new FileProgress(file, this.customSettings.progressTarget, this.customSettings);
						progress.setError();
						progress.toggleCancel(false, this);
				    
						switch (errorCode) {
						case SWFUpload.UPLOAD_ERROR.HTTP_ERROR:
							progress.setStatus("上传失败: " + message);
							break;
						case SWFUpload.UPLOAD_ERROR.UPLOAD_FAILED:
							progress.setStatus("上传失败.");
							break;
						case SWFUpload.UPLOAD_ERROR.IO_ERROR:
							progress.setStatus("服务器发生错误，上传失败.");
							break;
						case SWFUpload.UPLOAD_ERROR.SECURITY_ERROR:
							progress.setStatus("上传失败.");
							break;
						case SWFUpload.UPLOAD_ERROR.UPLOAD_LIMIT_EXCEEDED:
							progress.setStatus("上传超过限制.");
							break;
						case SWFUpload.UPLOAD_ERROR.FILE_VALIDATION_FAILED:
							progress.setStatus("上传失败.");
							break;
						case SWFUpload.UPLOAD_ERROR.FILE_CANCELLED:
							progress.setStatus("被取消.");
							progress.setCancelled(this);
							break;
						case SWFUpload.UPLOAD_ERROR.UPLOAD_STOPPED:
							progress.setStatus("被停止.");
							break;
						case SWFUpload.UPLOAD_ERROR.USER_DEFINED:
							progress.setStatus(message);
							break;
						default:
							progress.setStatus("上传文件失败: " + errorCode);
							break;
						}
					} catch (ex) {
				        this.debug(ex);
				    }
				}
			}

			function uploadComplete(file) {
				if(this.customuploadstate){
					if (this.getStats().files_queued === 0) {
						var progress = new FileProgress(file, this.customSettings.progressTarget, this.customSettings, "uploadComplete");
						progress.toggleCancel(false, this);
					}
				}
			}

			function FileProgress(file, contentTargetId, customSettings, methodname) {
				var cache = FileProgress.instances[file.id];

				if (cache){
					return cache;
				}
				this.file = file;

				var contentTargetEl = $('#'+contentTargetId);

				if (contentTargetEl && methodname == "fileQueued"){
					$this._showList(contentTargetEl, file);
				}
				FileProgress.instances[file.id] = this;
			};

			FileProgress.instances = {};

			/**
			 *更新进度
			 */
			FileProgress.prototype.setProgress = function (percentage) {
					var fileEl = $('#'+this.file.id);
					if (fileEl){
						fileEl.find('#att_prog_'+this.file.id).width(percentage + "%");
					}
			};

			FileProgress.prototype.setComplete = function (result) {
					var el = $('#'+this.file.id);
					if (el){
						   setTimeout(function(){
							   el.find(".jazz-att-progress").hide();						   
						   }, 800);
						   //根据服务器返回的fileid, 更新当前progress状态
						   el.find("input[id=hiddenFileId]").val(result.id);
						   el.attr("fileid", result.id);
					}
			};
			FileProgress.prototype.setError = function () {
					var el = $('#'+this.file.id);
					if (el){
						el.find(".jazz-att-progress-i").css({background: "red", width: "100%"});
						
					}
			};
			FileProgress.prototype.setCancelled = function (swfuploadInstance) {
			};
			FileProgress.prototype.setStatus = function (status) {
					var el = $('#'+this.file.id);
					if (el){
						el.find(".status").get(0).innerHTML=status;
					}
			};

			FileProgress.prototype.toggleCancel = function (show, swfuploadInstance) {
					var buttonId = swfuploadInstance.customSettings.disableButtonId;
					var fileEl = $('#'+this.file.id);
					if (fileEl){
						if (! buttonId){
							var btnEl = $('#'+buttonId).get(0);
							if (!btnEl){
								btnEl.disabled = show;
							}
						}
					}else{
						if (!buttonId){
							var btnEl = $('#'+buttonId).get(0);
							if (btnEl){
								btnEl.disabled = false;
							}
						}
					}
			};			
			
	  },
	  
	/**
	 * @desc 加载
	 * @param {swfInstance} 加载控件
	 * @private
	 */
	  _onLoad: function(swfInstance){
		  	var $this = this;
		  	if (swfInstance){
		  		$this._swfEvent();
		  		return;
		  	}
		  	throw '加载flash控件出错！';
	  },
	  
	/**
	 * @desc 加载swf事件
	 * @private
	 */		  
	  _swfEvent: function() {
		  	var $this = this;
		  	//注册删除事件
			this.inputFrame.on('mousedown.attachment', function(event) {
				  var target = event.target, $target = $(target);
				  
				  if($target.is('a')){
					  var action = $target.attr("_act");
					  var fileObj = $target.parent().parent();
					  if ("att_remove_swf" === action){
						    var file = $this.getFile(fileObj);
							$this.deleteFile(file);
							return;
					  
					  }else if ("download_file" === action){
					  	    var file = $this.getFile(fileObj);
							if (!!file){
								var _url = jazz.config.contextpath + ($this.options.downloadurl || jazz.config.default_download_url) + '?name='+encodeURI(file.fileName)+'&fileId='+file.hiddenFileId; 
								
								//模拟form表单提交
								var form=$("<form>"); //定义一个form表单
								form.attr("style", "display:none");
								form.attr("target", "");
								form.attr("method", "post");
								form.attr("action", _url);

								$("body").append(form); //将表单放置在web中

								form.submit(); //表单提交						
							}
							return;
					  }
				  }
			});
	  },

	/**
	 * @desc 销毁附件上传控件
	 * @private
	 */		  
	  destroy: function(){
		  var swf = this.swfInstance;
		  swf.destroy();
	  },
	  
	/**
	 * @desc 删除文件
	 * @private
	 */		  
	  deleteFile: function(file){
		    var $this = this;
			setTimeout(function(){
				 var _id = file.deleteId || file.id;
				 $("#"+_id).remove();
           }, 200); 
	  		var swf = this.swfInstance,
	  			fileIndex = file.index, fileId = file.hiddenFileId || file.id;
	  		if (!swf){
	  			return;
			} 

	  		if (!!fileIndex){
				var cacheFile = swf.getFile(parseInt(fileIndex));
				if (cacheFile){//更新SWF组件状态
					if (SWFUpload.FILE_STATUS.QUEUED===cacheFile.filestatus || SWFUpload.FILE_STATUS.IN_PROGRESS===cacheFile.filestatus ){
						swf.cancelUpload(cacheFile.id,false);
						var progress = new FileProgress(cacheFile, swf.customSettings.progressTarget);
						progress.toggleCancel(false, swf);
						return ;
					}else if (SWFUpload.FILE_STATUS.ERROR===cacheFile.filestatus || SWFUpload.FILE_STATUS.CANCELLED===cacheFile.filestatus){
						//return ;
					}
				}
			}
	  	
	  		var up = swf.customSettings.alreadyupload;
			for(var i=0, len=up.length; i<len; i++){
				if(up[i] == file["fileName"]){
					swf.customSettings.alreadyupload[i] = "XXX_XXX"
				}
			}
			
	  		if(this.options.theme == 0){
	  			this._event('close', null, file);
	  		}
			
//			//从服务器端删除文件
//			if (!!fileId) {
//	            var params = {
//	        		url: jazz.config.contextpath + jazz.config.default_upload_url,
//	        		params: {
//						type: 'delete',
//						id: fileId
//						//callback: this._callback  //回调函数
//						//_callback: function (data, sourceThis){
//					},
//	        		async: true
//	            };
//	        	$.DataAdapter.submit(params, this);			
//			}
			
			//更新SWF状态
			var stats = swf.getStats();
			stats.successful_uploads--;
			swf.setStats(stats);
	  },
	  
	  /**
		*格式化文件字节数
		*@param value 字节数
		*@return 返回文件字节数 
		*/
	  countFileDisplaySize: function(size) {
			if (typeof size == "string"){
				return size;
			}
			var n = 0;
			var displaySize = [];
			var ONE_KB = 1024, ONE_MB = ONE_KB * ONE_KB, ONE_GB = ONE_KB * ONE_MB;
			if (Math.floor(size / ONE_GB) > 0) {
				n = this.format(Math.floor(size * 100.0 / ONE_GB) / 100,2);
				displaySize.push(n + "GB");
			} else if (Math.floor(size / ONE_MB) > 0) {
				n = this.format(Math.floor(size * 100.0 / ONE_MB) / 100,2);
				displaySize.push(n + "MB");
			} else if (Math.floor(size / ONE_KB) > 0) {
				n = this.format(Math.floor(size * 100.0 / ONE_KB) / 100,2);
				displaySize.push(n + "KB");
			} else {
				n = size;
				displaySize.push(n + "Bytes");
			}
			displaySize.push(n);
			return displaySize;
	  },
	  
	  countFileSize: function(size){
		  var n = 0;
		  if(typeof size != "string"){
			  return n;
		  }
		  var ONE_KB = 1024, ONE_MB = ONE_KB * ONE_KB, ONE_GB = ONE_KB * ONE_MB;
		  n = parseFloat(size.substring(0, size.length-2)); size = size.substring(size.length-2, size.length);
		  if(size == "KB"){
			  n = parseFloat(n) * ONE_KB;
		  }else if(size == "MB"){
			  n = parseFloat(n) * ONE_MB;
		  }else if(size == "GB"){
			  n = parseFloat(n) * ONE_GB;
		  }
		  return n;
	  },
		
	/**
	 *格式化文件字节数
	 *@param value 字节数
	 *@param decimalLength 小数位数
	 *@return 返回格式化后文本 
	 */
	 format: function(value,decimalLength) {
			value = Math.round(value * Math.pow(10, decimalLength));
			value = value / Math.pow(10, decimalLength);
			var v = value.toString().split(".");
			if (v[0]==""){
				v[0]="0";
			}
			if (v.length > 1) {
				var len = v[1].length;
				if (len > decimalLength) {
					v[1] = v[1].substring(0, decimalLength);
				}
				return v[0] + "." + v[1];
			}	
			return v[0];
	 },
	 
	/**
	 * @desc 获取上传控件对应的jquery对象
	 * @private
	 */		  
	  getControl:function(){
		  return $('div[name="'+this.id+'"]');
	  },

	/**
	 * @desc 获取文件
	 * @private
	 */
	  getFile: function(fileEl){
		  var hiddenFileId = fileEl.find('input[id="hiddenFileId"]').val();
		  var fileName = fileEl.find('a[_act="download_file"]').text();
		  return {
	 		  id: fileEl.attr('id'),
			  index: fileEl.attr("_fileIndex"),
			  hiddenFileId: hiddenFileId,
			  fileName: fileName
		  };
	  },
	  
	/**
	 * @desc 返回所有文件
	 * @private
	 */		  
	  getFiles: function(){
		  var $this = this;
	  	  var fileContainer = this.getControl(), files=[],
  		  fileEls = fileContainer.find('div.jazz-att-list-p');
	  	  $.each(fileEls, function(index, item){
	  		  var file = $this.getFile($(item)), fileId = file.hiddenFileId;
	  		  if (!!fileId){
	  			 files.push(file);
	  		  };
	  	  });
		  return files;
	  },
	  
	/**
	 * @desc 返回所有成功上传的文件id
	 * @private
	 */		  
	  getFileIds: function(){
		var $this = this;
	  	var fileContainer = this.getControl(), fileIds=[],
	  		fileEls = fileContainer.find('div.jazz-att-list-p');
		  	$.each(fileEls, function(index, item){
		  		var file = $this.getFile($(item)), fileId = file.hiddenFileId;
		  		if (!!fileId){
		  			fileIds.push(fileId);
		  		};
		  	});
	  	return fileIds.join("##");
	  },
	  
	  /**
	   * @desc 获取上传附件的结果集
	   * @return [{name: '', fieldId: ''},{}]
	   */
	  getValue: function(){
		  var files = this.getFiles();
		  var attach = [];
		  if(files){
			  for(var i=0, len=files.length; i<len; i++){
				  var obj = {}, f = files[i];
				  if($.inArray(f.hiddenFileId, this.datadisplay) == -1){
					  obj['name'] = f.fileName;
					  var _fileid = f.hiddenFileId;
					  if(_fileid=="undefined"){
						  _fileid = f["id"];
					  }
					  obj['fileId'] = _fileid;
					  attach.push(obj);
				  }
			  }
		  }
		  return jazz.jsonToString(attach);
	  },
	  
	  /**
	   * @desc 获取上传附件的结果集
	   * @return {}
	   */
	  getText: function(){
		  var files = this.getFiles();
		  var attach = [];
		  if(files){
			  for(var i=0, len=files.length; i<len; i++){
				  var obj = {}, f = files[i];
				  attach.push(f.fileName);
			  }
		  }
		  return attach.join(",");
	  },
	  
	  /**
	   * @desc 取消当前选中状态对象
	   * @example $('XXX').attachment('reset');
	  */
	  reset: function() {},	  
	  
	  /**
	   * @desc 设置附件的回显
	   * @param {data} 附件需要回显的数据集
	   */
	  setValue: function(data){
		    if(!data) return false; 
		    
	 		var $this = this, swf = this.swfInstance;
	 		if (!swf){
				return;
			}
			var contentTargetEl = $('#'+this.id + 'ProgressContainer');
			
			if(typeof(data) != 'object'){
				data = jazz.stringToJson(data);
			}
			
			for(var i=0, len=data.length; i<len; i++){
				swf.settings.custom_settings.alreadyupload.push(data[i]["name"]);
				this._showList(contentTargetEl, data[i], true, i, data);
			}
			
			//$this.masterId = masterId;
			swf.setPostParams({
				//masterId: $this.masterId,
				uploadSession: $this.uploadSession
	 		});
	  },

	  /**
	   * @desc 附件显示列表   flag=true 用于判断附件的回显  index 附件所引  dataDisplay 回显的数据
	   * @private  
	   */		  
	  _showList: function(contentTargetEl, file, flag, index, dataDisplay){
		  var _none = '', _theme = this.options.theme; 
		  if(_theme == 1){
			  _none = 'style="display: none;"';
		  }
	  
		  var fieldId = file.id || file.fileId;
		  var hiddenFileId = file.hiddenFileId;
		  var size = file.size;
		  var index = file.index || index;
		  
		  if(flag == true){ //附件回显
			  hiddenFileId = file.id;
			  this.datadisplay.push(hiddenFileId);
		  }

		  size = this.countFileDisplaySize(size);
		  var str = '<div class="jazz-att-list-p" id="'+fieldId+'" _fileindex="'+index+'">'
				+'<span class="jazz-att-normal" '+_none+'>'
				+'<cite><a tabindex="-1"  href="#" _act="download_file">'+file.name+'</a><em style="margin-left:5px;">('+size[0]+')</em></cite>'
				+'<input type="hidden" id="hiddenFileId" value="'+hiddenFileId+'"/>';
				if(_theme != 1){
					if(!flag){
						str += '<b class="jazz-att-progress"><i id="att_prog_'+fieldId+'"></i></b>';
					}
				}
				str += '<a tabindex="-1" href="#" _act="att_remove_swf">删除</a>'
				    +'<em class="status" style="color: red; margin-left: 6px;display: none;">上传失败.</em>'
			    +'</span>';
				if(_theme == 1){
					str+='<div id="'+fieldId+'_img" class="jazz-att-theme1-imgbg jazz-att-theme1-size">'
					if(!flag){
						str+='<b class="jazz-att-progress jazz-att-progress-t1"><i id="att_prog_'+fieldId+'" class="jazz-att-progress-i"></i></b>'
					}
					str+='</div>';
					}						    
				 str+='</div>';
	
			  contentTargetEl.append(str); 
			  
			  if(flag == true){
				  this._showListEvent(file, dataDisplay, this.swfInstance.settings.custom_settings);
			  }
	  },
	  
	  /**
	   * @private
	   * @param {file}
	   * @param {data}
	   * @param {custom_settings}
	   */
	  _showListEvent: function(file, data, custom_settings){
			//当options.theme==1时，调用朱杨的数据，回显图片
			if(this.options.theme == 1){
				data = jazz.stringToJson(data);
				var _fileId = file["id"] || file["fileId"];
				var _attachId = data["id"] || _fileId;
				if(_attachId){
					var _url = (this.options.previewurl || jazz.config.default_preview_url) + "?fileId="+_attachId;
					//回显图片
					var obj = $("#"+this.id+"ProgressContainer").find("#"+_fileId+"_img");
					obj.children().remove();
					var imgType = file["type"] || file["name"];
					if(imgType == ".doc" || imgType == ".docx" || /.*(\.doc|\.docx)$/i.test(imgType)){
						obj.addClass("jazz-att-theme1-size").addClass("jazz-att-word");
					}else if(imgType == ".pdf"  || /.*(\.pdf)$/i.test(imgType)){
						obj.addClass("jazz-att-theme1-size").addClass("jazz-att-pdf");
					}else{
						obj.append('<img src="'+_url+'" class="jazz-att-theme1-size" />');									
					}
					//添加关闭图片
					var $close = $('<div class="jazz-att-theme1-close"></div>').appendTo(obj);
					var data = $.extend(file, data, {previewurl: _url}, {deleteId: _fileId});
					var $this = this;
					$close.css("display", "block");
					obj.on("mouseenter", function(e){
						//$close.css("display", "block");
						$this._event("enter", e, data);
					}).on("mouseleave", function(e){
						//$close.css("display", "none");
						$this._event("leave", e, data);
					}).on("mousedown", function(e){
						  var target = e.target, $target = $(target);
						  if($target.is('.jazz-att-theme1-close')){
							  if(!$this.options.isrepeatupload){
								  var arr = [];
								  var alreadyupload = custom_settings.alreadyupload;
								  for(var i = 0, len = alreadyupload.length; i < len; i++){
									  if(alreadyupload[i] == file["name"]){
									  }else{
										  arr.push(alreadyupload[i]);
									  }
								  }
								  $this.swfInstance.settings.custom_settings.alreadyupload = arr;
							  }
							  $this._event("close", e, data);
						  }else{
							  $this._event("click", e, data);								  
						  }
					});
				}
			}else if(this.options.theme == "0"){
				data = jazz.stringToJson(data);
				var invalue = $("#"+file.id).find('input[type=hidden]');
				invalue.val(data.fileId);
			}		  
	  },
	  
	  /**
	   * @desc 取消当前选中状态对象
	   * @example $('XXX').attachment('toggleLabel');
	  */
	  toggleLabel: function() {}

});

});

/**
 * @version 1.0
 * @description 公共UI组件对象的函数接口
 */

jazz.namespace("widget");

jazz.widget = function(options, parent){
	if(typeof(options) == "object"){
		var vtype = options["vtype"] || "";
		if(!vtype){
			alert(" vtype 未定义！"); return false;
		}else{
			var obj = null;
		    if(!!parent){
		    	obj = $("<div>").appendTo(parent);
			}else{
				obj = $("<div>").appendTo("body");
			}
		    obj[vtype](options);
		    obj[vtype]("finish");
			return obj;
		}
	}
};(function($) {
	/**
	 * @version 0.5
	 * @name jazz.boxlist
	 * @description 表单元素的选择填报类。
	 * @constructor
	 * @extends jazz.field
	 * @requires
	 * @example $('input_id').boxlist();
	 */
    $.widget("jazz.boxlist", $.jazz.boxComponent, {
       
        options: /** @lends jazz.boxlist# */ { 
        	
        	/**
			 *@type String
			 *@desc 组件类型
			 *@default 'boxlist'
			 */	
        	vtype: 'boxlist',

        	/**
			 *@type Number
			 *@desc 组件的宽度
			 *@default 130
			 */        	
        	width:150,
        	
        	/**
			 *@type Number
			 *@desc 组件的高度
			 *@default 180
			 */        	
        	height:180,
       
            /**
			 *@type String或Json
			 *@desc 数据链接或者初始化数据 {"data":[{"text":"11","val":"22"},{"text":"11","val":"22"}]}
			 *@default null
			 */      
            dataurl: null,

            /**
			 *@type Object
			 *@desc 参数
			 *@default null
			 */            
            params: null,            
            
            
			/**
			 *@type Boolean
			 *@desc 选择多条记录  true多选  false单选
			 *@default true
			 */            
            multiple: false,
            
             
			/**
			 *@desc 用户自定义选项行结构
			 *@param {event}  事件
			 *@param {data}  选项数据	
			 *@return 用户自定义li内部div结构  如：'<img src="box1.png"/>'
			 *@event
			 *@example
			 *<br/>$("#input_id").boxlist({"option","datarender"，function( data ){  <br/>} <br/>});
			 */		
            datarender: null,
            
             
			/**
			 *@desc 点击事件
			 *@param {event} 事件
			 *@param {ui} 	选中项数据	 
			 *@event
			 *@example
			 *<br/>$("#input_id").boxlist({"option","click"，function( event, ui ){  <br/>} <br/>});
			 */		
            click: null,
            
             
			/**
			 *@desc 改变事件
			 *@param {event} 事件
			 *@param {ui.newObject} 	当前选中项数据
		     *@param {ui.oldObject}  之前选中项数据		 	
			 *@event
			 *@example
			 *<br/>$("#input_id").boxlist({"option","change"，function( event, ui ){  <br/>} <br/>});
			 */		
            change:null,
             
			/**
			 *@desc 取消事件
			 *@param {event} 事件
			 *@param {ui} 	取消项数据		 
			 *@event
			 *@example
			 *<br/>$("#input_id").boxlist({"option","unclick"，function( event, ui ){  <br/>} <br/>});
			 */		
            unclick: null,
              
			/**
			 *@desc 双击事件
			 *@param {event} 事件
			 *@param {ui} 	选中项数据	 
			 *@event
			 *@example
			 *<br/>$("#input_id").boxlist({"option", "dblclick", function( event, ui ){  <br/>} <br/>});
			**/
            dblclick: null
        },

        /** @lends jazz.comboxfield */
        /**
         * @desc 创建组件
         * @private
         */      
        _create: function() {
        	this._super();
        	
        	this.element.addClass("jazz-boxlist-ul jazz-boxlist-content");
			
        	this._width();
			
			this._height();
            
            this.listContainer = $('<ul class="jazz-listbox-list"></ul>').appendTo(this.element);
        },
        
         /**
         * @desc 初始化组件
         * @private
         */     
         _init: function(){
        	 //加载数据
        	 if(typeof(this.options.dataurl) == 'object'){
            	this._callback('1',this);
            }else if(!!this.options.dataurl){
            
            	this._ajax();
            }else{
            	this._callback({}, this);
            }
        },
        
        /**
         * @desc ajax请求函数
         * @return 返回请求响应的数据
         * @private
         */      
        _ajax: function(){
             param = {
        		url: this.options.dataurl,
        		params: this.options.params,
	        	callback: this._callback  //回调函数
            };
        	$.DataAdapter.submit(param, this);        	
        }, 
        
        /**
         * @desc ajax请求回调函数
         * @params {data} ajax请求返回的值
         * @params {sourceThis} 当前类对象
         * @private
         */
        _callback: function (data, sourceThis){
        	var jsonData = null;
        	var $this = null;
            if(data == '1'){
	            jsonData = this.options.dataurl;  
	            $this = sourceThis;
            }else{
            	jsonData =data ;
            	$this = sourceThis;
            }
            $this.arrayOption=[];	
			if(!!jsonData && !!jsonData.data){
				$this.arrayOption = jsonData.data;
			}
			
			var optHtml = '';
			var render = '';
            for(var i = 0; i < $this.arrayOption.length; i++) {
                var choice = $this.arrayOption[i];
                var _text = $.trim(choice.text);
                if(!choice.text) _text = ''; 
			
                if(!!$this.options.datarender){
	                render = eval($this.options.datarender).call(this,choice);
					optHtml += '<li class="jazz-boxlist-item jazz-boxlist-li">' + render + '</li>';
                }else{
					optHtml += '<li class="jazz-boxlist-item jazz-boxlist-li">' + _text + '</li>';
				}      
            }
			
            $this.listContainer.append(optHtml);
            $this.items = $this.listContainer.find('.jazz-boxlist-item');
            $this._bindEvents();
        },    
                
		/**
         * @desc 绑定事件
		 * @private
         */        
        _bindEvents: function() {
            var time = null;
            var $this=this;
            
            this.element.off()
            .on('dblclick.boxlist', function(event) {   
				var target = event.target;
				var $target=$(target);
	        	if($target.is("li")){  
					//清除延时触发的事件
					clearTimeout(time);
					
					var item=$target;
					if($this.options.multiple){
						item=$this._clickMultiple(event, item);
						$this._trigger('dblclick',null, item); 
					}else{         		
						item=$this._clickSingle(event, item);
						$this._trigger('dblclick',null, item); 
					}
				}
            })           
            .on('click.boxlist', function(event) {
	          	var target = event.target;
				var $target=$(target);
	        	if($target.is("li")){  
		            //清除延时触发的事件
		            clearTimeout(time);
					
					var item=$target;
					//单击事件延时300ms触发
					time = setTimeout(function(){
						if($this.options.multiple){
							item=$this._clickMultiple(event, item);
							$this._trigger('click',null, item);
						}else{         		
							item=$this._clickSingle(event, item);
							$this._trigger('click',null, item);
						}
					}, 200);
				}
            });
        },
           
		/**
         * @desc 点击选择一条记录
		 * @params {event} click事件对象
		 * @params {item} 触发click事件的元素
		 * @return 选中项数据
		 * @private	
         */        
        _clickSingle: function(event, item) {
            var selectedItem = this.items.filter('.jazz-boxlist-highlight');
			var itemIndex=item.index();
			var	selectedIndex=selectedItem.index();
            if(itemIndex !== selectedIndex) {
                if(selectedItem.length) {
                    this._unselectItem(selectedItem);
                }
                this._selectItem(item);

                //触发change事件

                if(selectedItem.length){
                	this._changeTrigger(selectedItem,item);
                }else{
                	this._changeTrigger(null,item);
                }
                
            }

            return this.arrayOption[itemIndex];
        },

		/**
         * @desc 点击选择多条记录
		 * @params {event} click事件对象
		 * @params {item} 触发click事件的元素
		 * @return 返回所有已选项数据
		 * @private
         */
        _clickMultiple: function(event, item) { 
        	var itemIndex=item.index();
        	if(this.items.eq(itemIndex).hasClass('jazz-boxlist-highlight')){
	       		this._unselectItem(item);
				//触发unclick事件 
				this._trigger('unclick',null, item);
				//触发change事件
	       		this._changeTrigger(item,null);
				    }else{
		        this._selectItem(item);
				//触发change事件
		        this._changeTrigger(null,item);
				}
        	
        	//返回所选项		
            return this.getSelected();
        },


		/**
         * @desc change事件触发
		 * @params {oldItem} 之前选项元素
		 * @params {newItem} 新选项元素
		 * @private
         */    
        _changeTrigger : function(oldItem,newItem){

			var changeItem = {};
			if(!oldItem){
				var newIndex=newItem.index();
				changeItem['newObject'] = this.arrayOption[newIndex];
				}
			else	
				if(!newItem){
				var oldIndex=oldItem.index();
					changeItem['oldObject']=this.arrayOption[oldIndex];
			}
			else{
					var newIndex=newItem.index();
					var oldIndex=oldItem.index();
					changeItem['newObject']=this.arrayOption[newIndex];
					changeItem['oldObject']=this.arrayOption[oldIndex];
				}
			this._trigger('change',null,changeItem);
           
	     },


    	/**
         * @desc 获得选中的项记录
		 * @params {value} 所选项元素或者索引
		 * @private
         */          
        _selectItem: function(value) {
            var item = null;
            if($.type(value) === 'number')
                item = this.items.eq(value);
            else
                item = value;
            item.addClass('jazz-boxlist-highlight').removeClass('jazz-boxlist-li');

        },

    	/**
         * @desc 取消获得选中的项记录
		 * @params {value} 取消项元素或者索引
		 * @private
         */        
        _unselectItem: function(value) {
            var item = null;
            if($.type(value) === 'number')
                item = this.items.eq(value);
            else
                item = value;
            
            item.addClass('jazz-boxlist-li').removeClass('jazz-boxlist-highlight');	           

        },
        
        /**
         * @desc 动态添加组件下拉框中的内容
         * @public
		 * @example $('div_id').boxlist('reload');
         */           
        reload: function() {
        	this._init();
        },
        
    	/**
         * @desc 取消选择的全部记录
         * @public
		 * @example $('#boxlist_id').boxlist('unselectAll');
         */           
        unselectAll: function() {
            this.items.removeClass('jazz-boxlist-highlight');
            //触发change事件
	    	this._trigger('change',null);    	 
        },

		/**
         * @desc 获取已选项数据
		 * @public
		 * @return 所选项的数据
		 * @example $('#boxlist_id').boxlist('getSelected');
         */       
        getSelected: function(){
        	var selected = this.items.filter('.jazz-boxlist-highlight');
        	var allSelected = [];
			var selectedIndex = null;
        	for(var i=0;i<selected.length;i++){
				selectedIndex = selected.index();
        		allSelected.push(this.arrayOption[selectedIndex]);
        	}
        	return allSelected;
        }
      
    });
        
})(jQuery);(function($, factory) {

    if (jazz.config.isUseRequireJS === true) {
        define(['jquery', 'jazz.BoxComponent'], factory);
    } else {
        factory($);
    }
})(jQuery, function($) {
    /**
     * @version 1.0
     * @name jazz.menu继承于BoxComponent
     * @description menu组件
     */
    $.widget("jazz.menu", $.jazz.boxComponent, {
        options: /** @lends jazz.menu# */  {
        	/**
             *@type String
             *@desc 组件类型
             *@default menu
        	 */        	
            vtype: "menu",

            /**
             *@type Array
             *@desc menu的数据结构
             *@default null
             */
            items: null
        },
        /** @lends jazz.menu */
        /**
         * @desc 创建组件
         * @private
         */
        _create: function() {
            this._super();
            this._createMenu();
        },
        /**
         * @desc 初始化组件
         * @private
         */
        _init: function() {
            this._super();
            this._bindDocument();
        },
        
        /**
         * @desc 绑定document点击事件
         * @private
         */        
        _bindDocument: function(){
        	var $this = this;
    		$(document).off('.menu').on('mousedown.menu', function(e){
    			var btn = $(e.target).closest('div.jazz-menu-btn'), list = $(e.target).closest('div.jazz-menu-list');
    			if(list.hasClass("jazz-menu-list") || btn.hasClass("jazz-menu-btn")){
    				return;
    			}else{
    				$this._hideAll();
    			}
    		});
        },
        
        /**
         * @desc 绑定菜单项目事件
         * @private
         */
        _bindMenuItemEvent: function(item, click){
        	var $this = this;
    		item.off('.menu');
    		item.on('click.menu', function(e){
    			if ($(this).hasClass('jazz-menu-item-disabled')){
    				return;
    			}
    			
    			$(this).trigger('mouseleave');
    			$this._customopration(click);   			
    			e.stopPropagation();
    		}).on('mouseenter.menu', function(e){
    			//隐藏其他菜单
    			item.siblings(".jazz-menu-item").each(function(){
    				var submenu = $(this).data("submenu");
    				if(submenu){
    					$this._hideMenu(submenu);
    				}
    				$(this).removeClass('jazz-menu-item-active');
    			});
    			//显示当前激活item
    			item.addClass('jazz-menu-item-active');
    			
    			if (item.hasClass('jazz-menu-item-disabled')){
    				item.addClass('jazz-menu-item-disabled');
    				return;
    			}
    			
    			var submenu = item.data("submenu");
    			if (submenu){
    				$this._showMenu(item, submenu);
    			}
    		}).on('mouseleave.menu', function(e){
    			var submenu = item.data("submenu");
    			if (submenu){
    				if (e.pageX >= parseInt(submenu.css('left'))){
    					item.addClass('jazz-menu-item-active');
    				} else {
    					$this._hideMenu(submenu);
    				}
    			} else {
    				item.removeClass('jazz-menu-item-active jazz-menu-item-disabled');
    			}
    		});        	 
        },
        
        /**
         * @desc 绑定菜单事件
         * @private
         */         
        _bindMenuEvent: function(menu){
        	var $this = this;
    		menu.off('.menu').on('mouseenter.menu', function(){
    			if ($this.timer){
    				clearTimeout($this.timer);
    				$this.timer = null;
    			}
    		}).on('mouseleave.menu', function(){
			    $this.timer = setTimeout(function(){
					$this._hideAll(menu);
				}, 100);
    		});        	
        },
        
        /**
         * @desc 绑定菜单事件
         * @private
         */        
        _bindMenubtnEvent: function(item, click){
        	var $this = this;
    		item.off('.menu').on('click.menu', function(e){
    			$(this).siblings().removeClass("jazz-menu-btn-selected");
    			$(this).addClass("jazz-menu-btn-selected");
    			$this._customopration(click);
                e.stopPropagation();
    		}).on('mouseenter.menu', function(e){
    			if ($this.timer){
    				clearTimeout($this.timer);
    				$this.timer = null;
    			}
			
    			//隐藏其他菜单
    			item.siblings(".jazz-menu-btn").each(function(){
    				var submenu = $(this).data("submenu");
    				if(submenu){
    					$this._hideMenu(submenu);
    				}
    				$(this).removeClass('jazz-menu-btn-active');
    			});
    			//显示当前激活
    			item.addClass('jazz-menu-btn-active');
    			
    			if (item.hasClass('jazz-menu-btn-disabled')){
    				item.addClass('jazz-menu-btn-disabled');
    				return;
    			}
    			
    			var submenu = item.data("submenu");
    			if (submenu){
    				$this._showMenu(item, submenu, true);
    			}
    			
    		}).on('mouseleave.menu', function(){
			    $this.timer = setTimeout(function(){
			    	var submenu = item.data("submenu");
	    			if (submenu){
	    				$this._hideMenu(submenu);
	    			}
	    			item.removeClass('jazz-menu-btn-active');
				}, 100);
    		});        	
        },
        
        /**
         * @desc 创建menu结构
         * @private
         */        
        _createMenu: function(){
        	var arr = this.options.items;
        	if(arr != null){
        		arr = eval(this.options.items);
        		this.element.addClass("jazz-menu");
        		this._createMenubtn(arr);
        	}
        },
        
        /**
         * @desc 创建menu工具栏结构
         * @private
         */         
        _createMenubtn: function(items){
        	if(jazz.isArray(items)){
        		var str = [];
        		for(var i=0, len=items.length; i<len; i++){
        			var item = items[i];
        			var btn = $('<div class="jazz-menu-btn jazz-inline"></div>').appendTo(this.element);
        			str.push('<div class="jazz-menu-in">');
        			str.push('<div class="jazz-memu-btn-icon ');
        			if(item["iconclass"]){
        				str.push(item["iconclass"]);
        			}
        			str.push('"');
        			if(item["iconurl"]){
        				str.push(' style="background:url(\'');
        				str.push(item["iconurl"]);
        				str.push('\') no-repeat center center;"');
        			}
        			str.push('></div>');
        			str.push('<div class="jazz-memu-btn-font">');
        			str.push(item["text"]);
        			str.push('</div>');
        			str.push('</div>');
        			btn.append(str.join(""));
        			str = [];
        			
        			var subitem = item["items"];
        			if(subitem){
        				this._createMenulist(subitem, btn);      				
        			}
        			this._bindMenubtnEvent(btn, item["click"]);
        		}
        	}
        },
        
        /**
         * @desc 创建menulist结构
         * @private
         */
        _createMenulist: function (items, parentitem){
    		if(jazz.isArray(items)){
    			var menu = null, menuin = null;
    			if(items.length == 0){
    				return; 
    			}else{
    				menu = $('<div class="jazz-menu-list jazz-inline" islayout="no" style="display:none;"></div>').appendTo("body");
    				menuin = $('<div class="jazz-menu-list-in"></div>').appendTo(menu);
    				if(parentitem){ parentitem.data("submenu", menu); }
    				//if(flag){ menu.data("paritem", parentitem); }
    			}
        		for(var i=0, len=items.length; i<len; i++){
        			var item = items[i];
        			if(item == "-"){
        				menuin.append('<div class="jazz-menu-split-level"></div>');
        			}else{
        				var str = [];
        				str.push('<div class="jazz-menu-item-text">');
        				str.push(item["text"]);
        				str.push('</div>');
        				str.push('<div class="jazz-menu-icon ');
            			if(item["iconclass"]){
            				str.push(item["iconclass"]);
            			}
            			str.push('"');        				
            			if(item["iconurl"]){
            				str.push(' style="background:url(\'');
            				str.push(item["iconurl"]);
            				str.push('\') no-repeat center center;"');
            			}
        				str.push('></div>');
        				
        				var subsilingitem = item["items"];
        				if(subsilingitem){
        					str.push('<div class="jazz-menu-arrow"></div>');
        				}
        				var itemobj = $('<div class="jazz-menu-item"></div>').appendTo(menuin);
        				itemobj.append(str.join(""));
        				str = [];
        				
        				if(subsilingitem){
        					this._createMenulist(subsilingitem, itemobj);
        				}
        				
        				this._bindMenuItemEvent(itemobj, item["click"]);
        			}
        		}
        		this._bindMenuEvent(menu);
    		}
    	},
        
        /**
         * @desc 隐藏menu
         * @private
         */
        _hideAll: function(){
        	$.each($("body").children('.jazz-menu-list:visible'), function(){
        		$(this).find(".jazz-menu-item").removeClass('jazz-menu-item-active');
        		$(this).hide();
        	});       	
        },
        
        /**
         * @desc 隐藏menu
         * @private
         */        
        _hideMenu: function(menu){
        	var $this = this;
        	menu.find("div.jazz-menu-item-active").each(function(){
        		var submenu = $(this).data("submenu");
        		if(submenu){
        			$this._hideMenu(submenu);
        		}
        		$(this).removeClass('jazz-menu-item-active');
        	});
        	menu.hide();
        },
        
        /**
         * @desc 显示menu
         * @param {item} 菜单的item对象
         * @param {submenu} 子菜单
         * @param {flag} 标记 true 当前submenu的父为工具栏或按钮，为工具栏或按钮时，submenu显示在工具栏或按钮下边， false当前submenu的父不是工具栏，需要左右显示菜单
         * @param {e} 右键事件
         * @private
         */
        _showMenu: function(item, submenu, flag, e){
        	var winheight = $(window).height() || document.body.clientHeight,
        		winwidth = $(window).width() || document.body.clientWidth,
        	    left = 0, top = 0, itemwidth = 0, itemheight = 0;
        	if(e){
        		//右键时执行
        		left = e.pageX, top = e.pageY;
        	}
        	if(item){
        		left = item.offset().left, top = item.offset().top;
        		itemwidth = item.outerWidth(), itemheight = item.outerHeight();
        	}
        	if(flag){
            	if(left + submenu.outerWidth() + 5 > winwidth + $(document).scrollLeft()){
            		left = left + itemwidth - submenu.outerWidth();
            	}
        		if(top + itemheight + submenu.outerHeight() > winheight + $(document).scrollTop()){
        			top = top - submenu.outerHeight();
        		}else{
        			top = top + itemheight;
        		}   		
        	}else{
            	if(left + itemwidth + submenu.outerWidth() + 5 > winwidth + $(document).scrollLeft()){
            		left = left - submenu.outerWidth();
            	}else{
            		left = left + itemwidth;
            	}        	    
        		if(top + submenu.outerHeight() > winheight + $(document).scrollTop()){
        			top = winheight + $(document).scrollTop() - submenu.outerHeight();
        		}
        	}
        	if(top < 0){top = 0;}       		
        	
        	submenu.css({top: top, left: left, position: "absolute", "z-index": ++jazz.config.zindex});
        	submenu.show();
        	
        }
        
    });
    
    /**
     * @version 1.0
     * @name jazz.contextmenu继承于jazz.menu
     * @description menu组件
     */
    $.widget("jazz.contextmenu", $.jazz.menu, {
        options: {
        	/**
             *@type String
             *@desc 组件类型
             *@default contextmenu
        	 */      	
            vtype: "contextmenu",
            
        	/**
             *@type String
             *@desc 默认的触发事件
             *@default contextmenu
        	 */            
            event: "contextmenu",
            
            /**
             *@type String or jQuery Object
             *@desc 右键contextmenu绑定对象(如果不设置则绑定body), 或者event属性设置非"contextmenu"右键事件时，触发该事件的对象
             *@default null
             */
            target: null,
            
            /**
             *@type String or jQuery Object
             *@desc 当触发事件event属性设置为非"contextmenu"右键属性时，container属性必须设置，他的作用就是将菜单显示在他的下方。
             *@default null
             */            
            container: null
        },
        
        /** @lends jazz.contextmenumenu */
        /**
         * @desc 创建组件
         * @private
         */
        _create: function() {
            this._super();
        },
        
        /**
         * @desc 初始化组件
         * @private
         */
        _init: function() {
            this._super();
        },
        
        /**
         * @desc 创建menu结构
         * @private
         */        
        _createMenu: function(){
        	var items = this.options.items;
        	if(items != null){
            	var target = this.options.target || "body";
        		var menu = $(target);
        		
        		items = eval(items);
        		
        		if(!jazz.isArray(items)){ return ; }
        		//创建菜单
        		this._createMenulist(items, menu);       		

        		var $this = this, _event = $this.options.event;
        		if(_event == "contextmenu"){
	    			menu.off('.contextmenu').on(_event+'.contextmenu', function(e) {
	    				$this._showMenu(null, menu.data("submenu"), true, e);       					
	    				e.preventDefault();
	    			}); 
        		}
        	}       	
        },

        /**
         * @desc 显示menu菜单
         * @private
         */
        showMenu: function(){
        	var target = this.options.target || "body";
    		var menu = $(target);
    		var s = this.options.container;
    		if(s){
    			this._showMenu($(s), menu.data("submenu"), true);
    		}        	
        },
        
        /**
         * @desc 显示menu菜单
         * @private
         */        
        hideMenu: function(){
        	this._hideAll();
        }
    });
    
});
(function( $, factory ){
	if ( jazz.config.isUseRequireJS === true ) {
		define( ['jquery'], factory );
	} else {
		factory($);
	}	 
})(jQuery, function($){    
		
	jazz.dataFormater = function(data, format) {
		if(typeof format !="string"){
			return data;
		}
        jazz.__DataFormater._value = data;
        jazz.__DataFormater._format = format;
        var output = "",
            reg_date = "/Y|M|D|H|m|s|S/g";

        if (format.match(reg_date)) {
            output = jazz.__DataFormater.formatDate();
        } else if (format.indexOf("$") != -1) {
            output = jazz.__DataFormater.formatCurrency("$", Math.round);
        } else if (format.indexOf("¥") != -1) {
            output = jazz.__DataFormater.formatCurrency("¥", Math.round);
        } else if (format.indexOf("%") != -1) {
            output = jazz.__DataFormater.formatPercentage("%", 100, Math.round);
        } else if (format.indexOf("‰") != -1) {
            output = jazz.__DataFormater.formatPercentage("‰", 1000, Math.round);
        } else {
            output = jazz.__DataFormater.formatNumber(Math.round);
        }

        return output;

    }

    jazz.__DataFormater = {
        _value : "",
        _values : [],
        _format : "",
        formatDate : function() {

            this.fixValues();
            return this.matchDataFormat();

        },
        fixValues : function() {
            var datas = this._value.toString().split("");
            var datas_len = datas.length;
            var output = "";
            //过滤掉_value中非数字部分并补全剩余的0
            while (datas_len--) {
                if ((datas[datas_len] == " ") ||isNaN(datas[datas_len])) {
                    //如果发现不是数字删除该位
                    datas.splice(datas_len, 1);
                }
            }
            //多了不管只拿前14位(YYYYMMDDHHmmss)
            while (datas.length < 14) {
                datas.push("0");
            }
            //把这个数给对象
            this._values = datas;
        },
        matchDataFormat : function() {
            var formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|x|X|zz?|ZZ?|.)/g;
            var formats = this._format.match(formattingTokens);
            var formats_len = formats.length;

            while (formats_len--) {
                formats[formats_len] = this.matchDataFactory(formats[formats_len]);
            }

            return formats.join("");

        },
        matchDataFactory : function(formatName) {
            if (formatName == "YY") {
                return (this._values.slice(2, 4).join(""));
            } else if (formatName == "YYYY") {
                return (this._values.slice(0, 4).join(""));
            } else if (formatName == "MM") {
                return (this._values.slice(4, 6).join(""));
            } else if (formatName == "M") {
                return (this._values.slice(4, 6).join("").replace("0", ""));
            } else if (formatName == "DD") {
                return (this._values.slice(6, 8).join(""));
            } else if (formatName == "D") {
                return (this._values.slice(6, 8).join("").replace("0", ""));
            } else if (formatName == "HH") {
                return (this._values.slice(8, 10).join(""));
            } else if (formatName == "mm") {
                return (this._values.slice(10, 12).join(""));
            } else if (formatName == "ss") {
                return (this._values.slice(12, 14).join(""));
            } else {
                return formatName;
            }
        },
        formatCurrency : function(symbol, roundingFunction) {
            var format = this._format;
            var symbolIndex = format.indexOf(symbol), //记录￥符号的位置，等着数字转化完成后再放到原来位置上
                openParenIndex = format.indexOf('('),
                minusSignIndex = format.indexOf('-'),
                space = '',
                spliceIndex,
                output;

            // check for space before or after currency
            // 先清空非数字部分
            if (format.indexOf(' '+symbol) > -1) {
                space = ' ';
                format = format.replace(' '+symbol, '');
            } else if (format.indexOf(symbol+' ') > -1) {
                space = ' ';
                format = format.replace(symbol+' ', '');
            } else {
                format = format.replace(symbol, '');
            }
            this._format = format;

            // format the number
            output = this.formatNumber(roundingFunction);

            if(format === "" || format === undefined) return n._value;

            // 还原括号的位置
            // position the symbol
            if (symbolIndex <= 1) {
                if (output.indexOf('(') > -1 || output.indexOf('-') > -1) {
                    output = output.split('');
                    spliceIndex = 1;
                    if (symbolIndex < openParenIndex || symbolIndex < minusSignIndex) {
                        // the symbol appears before the "(" or "-"
                        spliceIndex = 0;
                    }
                    output.splice(spliceIndex, 0, symbol + space);
                    output = output.join('');
                } else {
                    output = symbol + space + output;
                }
            } else {
                if (output.indexOf(')') > -1) {
                    output = output.split('');
                    output.splice(-1, 0, space + symbol);
                    output = output.join('');
                } else {
                    output = output + space + symbol;
                }
            }

            return output;
        },
        formatPercentage : function(symbol, _n, roundingFunction) {
            var space = '',
                output,
                format = this._format;

            // check for space before %
            if (format.indexOf(' '+symbol) > -1) {
                space = ' ';
                format = format.replace(' '+symbol, '');
            } else {
                format = format.replace(symbol, '');
            }
            this._format = format;

            this._value = this._value * _n;
            output = this.formatNumber(roundingFunction);

            if (output.indexOf(')') > -1) {
                output = output.split('');
                output.splice(-1, 0, space + symbol);
                output = output.join('');
            } else {
                output = output + space + symbol;
            }

            return output;
        },
        formatNumber : function(roundingFunction) {
            var negP = false,
                signed = false,
                optDec = false,
                abbr = '',
                abbrK = false, // force abbreviation to thousands
                abbrM = false, // force abbreviation to millions
                abbrB = false, // force abbreviation to billions
                abbrT = false, // force abbreviation to trillions
                abbrForce = false, // force abbreviation
                bytes = '',
                ord = '',
                abs = Math.abs(value),
                suffixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
                min,
                max,
                power,
                w,
                precision,
                thousands,
                d = '',
                neg = false,
                format = this._format,
                value = this._value;

            // check if number is zero and a custom zero format has been set
            if (value === 0 && zeroFormat !== null) {
                return zeroFormat;
            } else {
                // see if we should use parentheses for negative number or if we should prefix with a sign
                // if both are present we default to parentheses

                if (format.indexOf('[.]') > -1) {
                    optDec = true;
                    format = format.replace('[.]', '.');
                }

                w = value.toString().split('.')[0];
                precision = format.split('.')[1];
                thousands = format.indexOf(',');

                if (precision) {
                    if (precision.indexOf('[') > -1) {
                        precision = precision.replace(']', '');
                        precision = precision.split('[');
                        d = this.toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);
                    } else {
                        d = this.toFixed(value, precision.length, roundingFunction);
                    }

                    w = d.split('.')[0];

                    if (d.split('.')[1].length) {
                        d = "." + d.split('.')[1];
                    } else {
                        d = '';
                    }

                    if (optDec && Number(d.slice(1)) === 0) {
                        d = '';
                    }
                } else {
                    w = this.toFixed(value, null, roundingFunction);
                }

                // format number
                if (w.indexOf('-') > -1) {
                    w = w.slice(1);
                    neg = true;
                }

                if (thousands > -1) {
                    w = w.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1' + ",");
                }

                if (format.indexOf('.') === 0) {
                    w = '';
                }

                return ((negP && neg) ? '(' : '') + ((!negP && neg) ? '-' : '') + ((!neg && signed) ? '+' : '') + w + d + ((ord) ? ord : '') + ((abbr) ? abbr : '') + ((bytes) ? bytes : '') + ((negP && neg) ? ')' : '');
            }
        },
        toFixed : function(value, precision, roundingFunction, optionals) {
            var power = Math.pow(10, precision),
                optionalsRegExp,
                output;

            //roundingFunction = (roundingFunction !== undefined ? roundingFunction : Math.round);
            // Multiply up by precision, round accurately, then divide and use native toFixed():
            output = (roundingFunction(value * power) / power).toFixed(precision);

            if (optionals) {
                optionalsRegExp = new RegExp('0{1,' + optionals + '}$');
                output = output.replace(optionalsRegExp, '');
            }

            return output;
        }
    }

});

if (typeof JSON !== 'object') {
    JSON = {};
}

(function () {
    'use strict';

    function f(n) {
        
        return n < 10 ? '0' + n : n;
    }

    if (typeof Date.prototype.toJSON !== 'function') {

        Date.prototype.toJSON = function () {

            return isFinite(this.valueOf())
                ? this.getUTCFullYear()     + '-' +
                    f(this.getUTCMonth() + 1) + '-' +
                    f(this.getUTCDate())      + 'T' +
                    f(this.getUTCHours())     + ':' +
                    f(this.getUTCMinutes())   + ':' +
                    f(this.getUTCSeconds())   + 'Z'
                : null;
        };

        String.prototype.toJSON      =
            Number.prototype.toJSON  =
            Boolean.prototype.toJSON = function () {
                return this.valueOf();
            };
    }

    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        gap,
        indent,
        meta = {    // table of character substitutions
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '"' : '\\"',
            '\\': '\\\\'
        },
        rep;


    function quote(string) {

        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === 'string'
                ? c
                : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + string + '"';
    }


    function str(key, holder) {


        var i,      
            k,
            v,
            length,
            mind = gap,
            partial,
            value = holder[key];

        if (value && typeof value === 'object' &&
                typeof value.toJSON === 'function') {
            value = value.toJSON(key);
        }


        if (typeof rep === 'function') {
            value = rep.call(holder, key, value);
        }


        switch (typeof value) {
        case 'string':
            return quote(value);

        case 'number':


            return isFinite(value) ? String(value) : 'null';

        case 'boolean':
        case 'null':

            return String(value);


        case 'object':


            if (!value) {
                return 'null';
            }

            gap += indent;
            partial = [];


            if (Object.prototype.toString.apply(value) === '[object Array]') {

                length = value.length;
                for (i = 0; i < length; i += 1) {
                    partial[i] = str(i, value) || 'null';
                }

                v = partial.length === 0
                    ? '[]'
                    : gap
                    ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']'
                    : '[' + partial.join(',') + ']';
                gap = mind;
                return v;
            }

            if (rep && typeof rep === 'object') {
                length = rep.length;
                for (i = 0; i < length; i += 1) {
                    if (typeof rep[i] === 'string') {
                        k = rep[i];
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            } else {

                for (k in value) {
                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            }

            v = partial.length === 0
                ? '{}'
                : gap
                ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}'
                : '{' + partial.join(',') + '}';
            gap = mind;
            return v;
        }
    }

    if (typeof JSON.stringify !== 'function') {
        JSON.stringify = function (value, replacer, space) {

            var i;
            gap = '';
            indent = '';

            if (typeof space === 'number') {
                for (i = 0; i < space; i += 1) {
                    indent += ' ';
                }

            } else if (typeof space === 'string') {
                indent = space;
            }

            rep = replacer;
            if (replacer && typeof replacer !== 'function' &&
                    (typeof replacer !== 'object' ||
                    typeof replacer.length !== 'number')) {
                throw new Error('JSON.stringify');
            }

            return str('', {'': value});
        };
    }

    if (typeof JSON.parse !== 'function') {
        JSON.parse = function (text, reviver) {

            var j;

            function walk(holder, key) {

                var k, v, value = holder[key];
                if (value && typeof value === 'object') {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v;
                            } else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            }

            text = String(text);
            cx.lastIndex = 0;
            if (cx.test(text)) {
                text = text.replace(cx, function (a) {
                    return '\\u' +
                        ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
                });
            }


            if (/^[\],:{}\s]*$/
                    .test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')
                        .replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
                        .replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {


                j = eval('(' + text + ')');


                return typeof reviver === 'function'
                    ? walk({'': j}, '')
                    : j;
            }

            throw new SyntaxError('JSON.parse');
        };
    }
}());
(function($) {
	
	/**
	 * @version 1.0
	 * @name jazz.DataAdapter
	 * @description 
	 */
	$.DataAdapter = {
		submit: function(params, $this){
	 		var adapter = new $.dataAdapterObject();
	 		adapter.submit(params, $this);
		},
//		query: function(params){
//	 		var adapter = new $.dataAdapterObject();
//	 		adapter.query(params);
//		},	
		query: function(params){
	 		var adapter = new $.dataAdapterObject();
	 		adapter.createAdapter();
	 		adapter.options.components = params['components'];
	 		adapter.componentsData2();
	 		return adapter.dataArray;
		},
		vtypeset: ['gridpanel', 'formpanel', 'querypanel', 'comboxtreefield', 'comboxfield', 'icon' , 'attachment', 'boxlist', 'tree']
	};

	$.dataAdapterObject = function() {
		
		 this.options = {
			 sourceobject: null,   //组件对象   
		     contextpath: '',
			
			 name: null,   //组件对应的名称
			 vtype: null,  //vtype类型
			 
			 components: null, 
			
			 url: null,
			 type: 'post',
	    	 data: null,        //数据
			 //dataType: 'json',  //数据类型

			 success: null,    
		     error: null,
		     callback: null,    //回调函数
		     params: null,      //参数{}
		     pageparams: null,  //分页所需要的必要参数
		     queryparams: null, //查询条件必要参数
		     
		     showloading: null    //默认
	     };
	 };
	 
	 $.dataAdapterObject.prototype = {
	    
		//UI调用
	    createAdapter: function(){
			this.jazzData = new Object();
			this.dataArray = new Array();
			this.jazzData["data"] = this.dataArray;
	 	},
	 	
	 	/**
	 	 * @desc 添加参数
	 	 * @param {name}  key值 
	 	 * @param {value} value值
	 	 */
	 	addAttr: function(name, value) {
	 		if (!!name && !!vtype) {
	 			var temp = {};
	 			temp['name'] = name;
	 			temp['vtype'] = 'attr';
	 			temp['data'] = value;
	 			this.dataArray[name] = value;
	 		}
	 	},	 	
	 	
	 	/**
	 	 * 添加form格式数据
	 	 * @param name
	 	 * @param vtype
	 	 * @param treeData
	 	 */		 	
	 	addForm: function(name, vtype, formData) {
	 		this.dataArray.push(formData);
	 	},

	 	/**
	 	 * 添加grid格式数据
	 	 * @param name
	 	 * @param vtype
	 	 * @param treeData
	 	 * @returns {Object}
	 	 */	 	
	 	addGrid: function(name, vtype, gridData) {
	 		var obj = {};
	 		obj["name"] = name;
	 		obj["vtype"] = vtype;
	 		obj["data"] = {};
	 		obj["data"]["rows"] = gridData || [];
	 		this.dataArray.push(obj);
	 	},
	 	
	 	/**
	 	 * 添加select格式数据
	 	 * @param name
	 	 * @param vtype
	 	 * @param treeData
	 	 * @returns {Object}
	 	 */	 	
	 	addSelect: function(name, vtype, selectData){
	 		this.dataArray.push(selectData);
	 	},
	 	
	 	/**
	 	 * 添加tree格式数据
	 	 * @param name
	 	 * @param vtype
	 	 * @param treeData
	 	 * @returns {Object}
	 	 */
	 	addTree: function(name, vtype, treeData) {
	 		this.dataArray.push(treeData);
	 	},	 	
	 	
	 	/**
	 	 * 添加icon格式数据
	 	 * @param name
	 	 * @param vtype
	 	 * @param iconData
	 	 * @returns {Object}
	 	 */
	 	addIcon: function(name, vtype, iconData){
	 		var obj = new Object();
	 		this.dataArray.push(iconData);
	 		return obj;	 		
	 	},	 	

	 	/**
	 	 * @desc 获取提交数据的string格式
	 	 * @returns string
	 	 */
	 	getJazzDataString: function() {
	 		return jazz.jsonToString(this.jazzData);
	 	},
	 	
	 	/**
	 	 * @desc 获取提交的JSON数据
	 	 * @returns {}
	 	 */
	 	getSubmitJsonData: function() {
	 		return this.jazzData;
	 	},
	 	
	 	/**
	 	 * @desc ajax提交方法
	 	 */
	 	ajaxSubmit: function(){
	 		var $this = this;
	 		
	 		//返回参数attr
	 		var initRes = {
 				obj: {},
 				setAttr: function(key, value){
 					this.obj[key] = value;
 				},
 				getAttr: function(key){
 					return this.obj[key];
 				}
	 		};	 		

	 		var data = this.getJazzDataString(); //this.getSubmitJsonData();

	 		//jazz.log("====提交数据格式====="+data);
	 		
			$.ajax({
				url: $this.options.url,
				type: $this.options.type,
				dataType: 'json',
				data: {"postData": data},
				async: true,
				contentType: "application/x-www-form-urlencoded; charset=utf-8", 
				error: $this.options.error || function(responseObj) {
				    if(responseObj["responseText"]){
				    	try{
				    		var err = jazz.stringToJson(responseObj["responseText"]);
				    		jazz.error('<span title="' + err['exceptionStackTrace'] + '"><font color="blue">错误信息</font> : ' + err['exceptionMes'] + '</span>');	
				    	}catch(e){
				    		jazz.error('服务器返回数据格式错误!');
				    	}
//				    	if(err['exceptionMes']){
//				    		jazz.error('<font color="blue" >错误信息</font> : ' + err['exceptionMes'] + "<div>点击查看详细信息</div>");				    					    		
//				    	}else{
//				    		jazz.error('与服务器连接断开，请尝试重新登录或与管理员联系!');
//				    	}
				    }else{
				    	jazz.error('与服务器连接断开，请尝试重新登录或与管理员联系!');
				    }
				    return false;
				},
				complete: function(){
					if(((jazz.config.submitShowLoading == true && $this.options.showloading == null) || $this.options.showloading == true) && $this.modality){
						$this.modality.remove();
					}
					if($.isFunction($this.options.complete)){
						$this.options.complete.apply(this);
					}
				},
				success: function(responseObj){
					if(responseObj['message'] == "noSessionRight"){
						return false;
					}
					if(responseObj['exception']){
						jazz.error('<font color="blue" >错误名称</font> : ' + responseObj['exception']
		                        + '<br><font color="blue" >错误信息</font> : ' + responseObj['exceptionMes']);
						return false;
					}
					//返回给回调函数的数据
					var callbackdata = null;
					
					var jsonData = responseObj['data'];
				    if(typeof(jsonData) == "object"){
				    	if(jsonData != null && $.isArray(jsonData)){
				    		var newJsonData = [];
				    		$.each(jsonData, function(i, jsonObj){
				    			var vtype = jsonObj['vtype'];
								if(vtype=='attr'){
									initRes.setAttr(jsonObj['name'], jsonObj['data']);
								}
								//if($.inArray(vtype, $.DataAdapter.vtypeset) >= 0){
									newJsonData.push(jsonData[i]);
								//}
				    		});
				    		//数组中只有一个对象时，返回对象
				    		if(newJsonData.length == 1){
				    			callbackdata = newJsonData[0];
				    		}else{
				    			callbackdata = newJsonData;
				    		}
				    	}
				    }else{
				    	//与定义格式不符时，原样返回
				    	callbackdata = jsonData;
				    }
					//jazz.log("callbackdata===="+JSON.stringify(callbackdata));
					if($.isFunction($this.options.callback)){
						$this.options.callback.call(this, callbackdata, $this.options.sourceobject, initRes);
					}				
				}
			}); 		
	 	},
		
	 	/**
	 	 * @desc 创建UI组件的JSON数据
	 	 */
		componentsData: function () {
			var flag=true;
			//组件集合
			var components = this.options.components;
			if($.isArray(components)){			
				for(var i=0, len=components.length; i<len; i++){
					var compJson = $('div[name="'+components[i]+'"]');
					var vtype = compJson.attr('vtype');
					var name = compJson.attr('name');
					//验证
					if(vtype=='formpanel')
					{
						$('div[name="'+components[i]+'"]').find('div[vtype]').each(function(index,element){
							var el = $(element);
							var vtype=el.attr('vtype'), $field = el.data(vtype);
							var options = $field.options;
							var rule=options.rule;
							if(rule && vtype!="gridpanel" && vtype!="hiddenfield" && vtype!="checkboxfield" && vtype!="radiofield" && options.isrule){//过滤掉formpanel中嵌套的gridpanel
								var msg = options.msg;
								var f = jazz.doTooltip($field, $field.getText(), rule, msg);
							    if(f==false){
							    	flag=false;
							    	$field._validateStyle(f);
							    }
							}
						});
					}
					if(!flag)
					{return false;}

					//是否在vtype集合中定义，如果不存在则不解析
					if($.inArray(vtype, $.DataAdapter.vtypeset) >= 0){
						if(vtype=='formpanel' || vtype=='querypanel'){
							var data = compJson[vtype]('getValue');
							this.addForm(name, vtype, data);
						}else if(vtype=='gridpanel'){
							var data = compJson[vtype]('getSelection');
							this.addGrid(name, vtype, data);
						}
						
//						else if(vtype=='icon'){
//							this.addIcon(this.options.name, vtype, data);
//						}else if(vtype=='comboxtreefield'){
//							var data = compJson[vtype]('getValue');
//							this.addTree(this.options.name, vtype, data);
//						}					
						
					}else{
						alert('解析的vtype类型错误！！！ ');
						return false;
					}
			
				}
				
			}
			
			var qparams = this.options.queryparams; 
			if(qparams){
				var $this = this;
				$.each(qparams, function(){
					$this.dataArray.push(this);
				});
			};
			
			//分页提交的必要参数
			var params = this.options.pageparams;
			if(params && typeof(params)=='object'){
				for(var p in params){
					var param = {};
					param['vtype']='pagination';
					param['name']=p;
					param['data']=params[p];
					this.dataArray.push(param);
			    }
			}			
			
			//解析需要提交的参数
			var params = this.options.params;
			if(params && typeof(params)=='object'){
				for(var p in params){
					var param = {};
					param['vtype']='attr';
					param['name']=p;
					param['data']=params[p];
					this.dataArray.push(param);
			    }
			}
			return flag;
		},
		
	 	/**
	 	 * @desc 创建UI组件的JSON数据
	 	 */
		componentsData2: function () {
			
			var params = this.options.params;
			if(params && typeof(params)=='object'){
				for(var p in params){
					var param = {};
					param['vtype']='attr';
					param['name']=p;
					param['data']=params[p];
					this.dataArray.push(param);
			    }
			}			
			
			//组件集合
			var components = this.options.components;
			if($.isArray(components)){
				for(var i=0, len=components.length; i<len; i++){
					var name = components[i];
					var compJson = $('div[name="'+name+'"]');
					var vtype = compJson.attr('vtype');

					//是否在vtype集合中定义，如果不存在则不解析
					if(vtype=='formpanel' || vtype=='querypanel'){
						var data = compJson[vtype]('getValue');
						this.addForm(this.options.name, vtype, data);
					}else
					if(vtype=='textfield' || vtype=='comboxfield' || vtype=='datefield' || vtype=='comboxtreefield'
					|| vtype=='checkboxfield' || vtype=='radiofield' || vtype=='autofield' || vtype=='numberfield'
					|| vtype=='passwordfield'){
							var data = compJson[vtype]('getValue');
							var param = {};
							param['vtype']='attr';
							param['name']=name;
							param['data']=data;
							this.dataArray.push(param);
					}
			
				}
			}
		},		
		
//		/**
//		 * @desc 查询方法
//		 * @param {params} ajax提交的参数对象
//		 * @param {$sourcethis} 该参数会通过回调函数原样返回
//		 */		
//		query: function(params){
//			 this.createAdapter();
//			 $.extend(this.options, params);
//			 this.componentsData2();
//			 //this.ajaxSubmit();
//		},
		
		/**
		 * @desc 提交方法
		 * @param {params} ajax提交的参数对象
		 * @param {$sourcethis} 该参数会通过回调函数原样返回
		 */
		submit: function(params, $sourcethis){
			$.extend(this.options, params);
			if((jazz.config.submitShowLoading == true && this.options.showloading == null) || this.options.showloading == true){
				this.modality = $('<div id="submit_"'+jazz.getRandom()+'"></div>').css({
                     'position': 'fixed',
                     'top': '0px',
                     'left': '0px',
                     'width': jazz.windowWidth(),
                     'height': jazz.windowHeight(),
                     'z-index': ++jazz.config.zindex
				}).appendTo(document.body).loading({blank: true});			
			}
			//数据提交
			var flag=true;
            this.createAdapter();
            this.options.sourceobject = $sourcethis;
        	flag=this.componentsData();
        	if(String(flag)=='false'){
        		if(((jazz.config.submitShowLoading == true && this.options.showloading == null) || this.options.showloading == true) && this.modality){
        			this.modality.remove();
        		}
        		return false;
        	}
        	this.ajaxSubmit();
		}
	 
	 };
	 
     $(function(){
		  //返回参数attr
		  var initRes = {
			  obj: {},
			  setAttr: function(key, value){
				  this.obj[key] = value;
			  },
			  getAttr: function(key){
				  return this.obj[key];
			  }
		 };
		 var initPageData = $('#OptimusData').attr('data');
		 if(typeof(initPageData) != 'object'){
			 if(initPageData){
				 initPageData = jazz.stringToJson(initPageData);
			 }
		 }
		 if(initPageData){
			 var jsonData = initPageData['data'];
			 if($.isArray(jsonData)){
					$.each(jsonData, function(i, jsonObj){
						var vtype = jsonObj['vtype'], name = jsonObj['name'];
						if(vtype=='attr'){
							initRes.setAttr(name, jsonObj['data']);
						}
//						if($.inArray(vtype, $.DataAdapter.vtypeset) >= 0){
//							var componentObj = $('div[name="'+name+'"]').data(vtype);
//							if(componentObj){
//								if(vtype=="comboxfield"){
//									componentObj.setOptions(jsonObj);
//								}else{
//									componentObj.setValue(jsonObj);
//								}
//							}
//						}
					});			 
			 }
			 if($.isFunction(window.initData)){
			     //页面初始化数据
			     initData(initRes);
		     }
		 }
     });

})(jQuery);